{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-redefine/source/assets/hbe.style.css","path":"assets/hbe.style.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/assets/odometer-theme-minimal.css","path":"assets/odometer-theme-minimal.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/all.min.css","path":"fontawesome/all.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/brands.min.css","path":"fontawesome/brands.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/duotone.min.css","path":"fontawesome/duotone.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/fontawesome.min.css","path":"fontawesome/fontawesome.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/light.min.css","path":"fontawesome/light.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/regular.min.css","path":"fontawesome/regular.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/sharp-solid.min.css","path":"fontawesome/sharp-solid.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/solid.min.css","path":"fontawesome/solid.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/svg-with-js.min.css","path":"fontawesome/svg-with-js.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/thin.min.css","path":"fontawesome/thin.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/v4-font-face.min.css","path":"fontawesome/v4-font-face.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/v4-shims.min.css","path":"fontawesome/v4-shims.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/v5-font-face.min.css","path":"fontawesome/v5-font-face.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/images/loading.svg","path":"images/loading.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/images/bookmark-placeholder.svg","path":"images/bookmark-placeholder.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-avatar.svg","path":"images/redefine-avatar.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-favicon.svg","path":"images/redefine-favicon.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-logo.svg","path":"images/redefine-logo.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-logo.webp","path":"images/redefine-logo.webp","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-og.webp","path":"images/redefine-og.webp","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/images/wallhaven-wqery6-dark.webp","path":"images/wallhaven-wqery6-dark.webp","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/images/wallhaven-wqery6-light.webp","path":"images/wallhaven-wqery6-light.webp","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/tailwind.source.css","path":"css/tailwind.source.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-brands-400.ttf","path":"webfonts/fa-brands-400.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-brands-400.woff2","path":"webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-duotone-900.ttf","path":"webfonts/fa-duotone-900.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-duotone-900.woff2","path":"webfonts/fa-duotone-900.woff2","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-light-300.ttf","path":"webfonts/fa-light-300.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-light-300.woff2","path":"webfonts/fa-light-300.woff2","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-regular-400.ttf","path":"webfonts/fa-regular-400.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-regular-400.woff2","path":"webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-sharp-solid-900.ttf","path":"webfonts/fa-sharp-solid-900.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-sharp-solid-900.woff2","path":"webfonts/fa-sharp-solid-900.woff2","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-solid-900.ttf","path":"webfonts/fa-solid-900.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-solid-900.woff2","path":"webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-thin-100.ttf","path":"webfonts/fa-thin-100.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-thin-100.woff2","path":"webfonts/fa-thin-100.woff2","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-v4compatibility.ttf","path":"webfonts/fa-v4compatibility.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-v4compatibility.woff2","path":"webfonts/fa-v4compatibility.woff2","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build.js","path":"js/build.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Chillax/Chillax-Variable.eot","path":"fonts/Chillax/Chillax-Variable.eot","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Chillax/Chillax-Variable.ttf","path":"fonts/Chillax/Chillax-Variable.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Chillax/Chillax-Variable.woff","path":"fonts/Chillax/Chillax-Variable.woff","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Chillax/Chillax-Variable.woff2","path":"fonts/Chillax/Chillax-Variable.woff2","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Chillax/chillax.css","path":"fonts/Chillax/chillax.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Geist/GeistVF.ttf","path":"fonts/Geist/GeistVF.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Geist/GeistVF.woff","path":"fonts/Geist/GeistVF.woff","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Geist/GeistVF.woff2","path":"fonts/Geist/GeistVF.woff2","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Geist/geist.css","path":"fonts/Geist/geist.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/GeistMono/GeistMonoVF.ttf","path":"fonts/GeistMono/GeistMonoVF.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/GeistMono/GeistMonoVF.woff","path":"fonts/GeistMono/GeistMonoVF.woff","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/GeistMono/GeistMonoVF.woff2","path":"fonts/GeistMono/GeistMonoVF.woff2","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/animated.styl","path":"css/common/animated.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/basic.styl","path":"css/common/basic.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/colors.styl","path":"css/common/colors.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/GeistMono/geist-mono.css","path":"fonts/GeistMono/geist-mono.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/redefine-theme.styl","path":"css/common/redefine-theme.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/theme.styl","path":"css/common/theme.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/variables.styl","path":"css/common/variables.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/markdown.styl","path":"css/common/markdown.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/build/tailwind.css","path":"css/build/tailwind.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/animations.styl","path":"css/layout/animations.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/archive-content.styl","path":"css/layout/archive-content.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/article-content.styl","path":"css/layout/article-content.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/category-content.styl","path":"css/layout/category-content.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/bookmarks.styl","path":"css/layout/bookmarks.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/category-list.styl","path":"css/layout/category-list.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/home-content.styl","path":"css/layout/home-content.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/home-sidebar.styl","path":"css/layout/home-sidebar.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/page.styl","path":"css/layout/page.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/tag-content.styl","path":"css/layout/tag-content.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/aplayer.js","path":"js/plugins/aplayer.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/hbe.js","path":"js/plugins/hbe.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/masonry.js","path":"js/plugins/masonry.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/mermaid.js","path":"js/plugins/mermaid.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/pangu.js","path":"js/plugins/pangu.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/tabs.js","path":"js/plugins/tabs.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/typed.js","path":"js/plugins/typed.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/codeBlock.js","path":"js/tools/codeBlock.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/imageViewer.js","path":"js/tools/imageViewer.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/lightDarkSwitch.js","path":"js/tools/lightDarkSwitch.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/localSearch.js","path":"js/tools/localSearch.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/runtime.js","path":"js/tools/runtime.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/scrollTopBottom.js","path":"js/tools/scrollTopBottom.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/tocToggle.js","path":"js/tools/tocToggle.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/bookmarkNav.js","path":"js/layouts/bookmarkNav.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/categoryList.js","path":"js/layouts/categoryList.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/essays.js","path":"js/layouts/essays.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/lazyload.js","path":"js/layouts/lazyload.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/navbarShrink.js","path":"js/layouts/navbarShrink.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/toc.js","path":"js/layouts/toc.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/main.js","path":"js/build/main.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/main.js.map","path":"js/build/main.js.map","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/utils.js","path":"js/build/utils.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/utils.js.map","path":"js/build/utils.js.map","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/Swup.min.js","path":"js/libs/Swup.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/Swup.min.js.map","path":"js/libs/Swup.min.js.map","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupPreloadPlugin.min.js","path":"js/libs/SwupPreloadPlugin.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupPreloadPlugin.min.js.map","path":"js/libs/SwupPreloadPlugin.min.js.map","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupProgressPlugin.min.js","path":"js/libs/SwupProgressPlugin.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupScriptsPlugin.min.js","path":"js/libs/SwupScriptsPlugin.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/APlayer.min.js.map","path":"js/libs/APlayer.min.js.map","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/APlayer.min.js","path":"js/libs/APlayer.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupScrollPlugin.min.js","path":"js/libs/SwupScrollPlugin.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupScrollPlugin.min.js.map","path":"js/libs/SwupScrollPlugin.min.js.map","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/anime.min.js","path":"js/libs/anime.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/mermaid.min.js","path":"js/libs/mermaid.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/mermaid.min.js.map","path":"js/libs/mermaid.min.js.map","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/minimasonry.min.js","path":"js/libs/minimasonry.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/moment-with-locales.min.js","path":"js/libs/moment-with-locales.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/Typed.min.js","path":"js/libs/Typed.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/moment.min.js","path":"js/libs/moment.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/odometer.min.js","path":"js/libs/odometer.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/pjax.min.js","path":"js/libs/pjax.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/waline.mjs","path":"js/libs/waline.mjs","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupSlideTheme.min.js","path":"js/libs/SwupSlideTheme.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/waline.mjs.map","path":"js/libs/waline.mjs.map","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/pangu.min.js","path":"js/libs/pangu.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/code-block.styl","path":"css/common/codeblock/code-block.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/code-theme.styl","path":"css/common/codeblock/code-theme.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/highlight.styl","path":"css/common/codeblock/highlight.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/plugins/aplayer.js.map","path":"js/build/plugins/aplayer.js.map","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/plugins/hbe.js","path":"js/build/plugins/hbe.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/plugins/masonry.js","path":"js/build/plugins/masonry.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/plugins/masonry.js.map","path":"js/build/plugins/masonry.js.map","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/plugins/hbe.js.map","path":"js/build/plugins/hbe.js.map","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/plugins/aplayer.js","path":"js/build/plugins/aplayer.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/plugins/mermaid.js","path":"js/build/plugins/mermaid.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/plugins/mermaid.js.map","path":"js/build/plugins/mermaid.js.map","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/plugins/pangu.js","path":"js/build/plugins/pangu.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/plugins/pangu.js.map","path":"js/build/plugins/pangu.js.map","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/plugins/tabs.js","path":"js/build/plugins/tabs.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/plugins/tabs.js.map","path":"js/build/plugins/tabs.js.map","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/plugins/typed.js","path":"js/build/plugins/typed.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/plugins/typed.js.map","path":"js/build/plugins/typed.js.map","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/tools/codeBlock.js","path":"js/build/tools/codeBlock.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/tools/codeBlock.js.map","path":"js/build/tools/codeBlock.js.map","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/tools/imageViewer.js","path":"js/build/tools/imageViewer.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/tools/imageViewer.js.map","path":"js/build/tools/imageViewer.js.map","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/tools/lightDarkSwitch.js","path":"js/build/tools/lightDarkSwitch.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/tools/lightDarkSwitch.js.map","path":"js/build/tools/lightDarkSwitch.js.map","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/tools/localSearch.js","path":"js/build/tools/localSearch.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/tools/localSearch.js.map","path":"js/build/tools/localSearch.js.map","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/tools/runtime.js","path":"js/build/tools/runtime.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/tools/scrollTopBottom.js","path":"js/build/tools/scrollTopBottom.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/tools/runtime.js.map","path":"js/build/tools/runtime.js.map","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/tools/scrollTopBottom.js.map","path":"js/build/tools/scrollTopBottom.js.map","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/tools/tocToggle.js","path":"js/build/tools/tocToggle.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/tools/tocToggle.js.map","path":"js/build/tools/tocToggle.js.map","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/libs/APlayer.min.js","path":"js/build/libs/APlayer.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/libs/Swup.min.js","path":"js/build/libs/Swup.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/libs/SwupPreloadPlugin.min.js","path":"js/build/libs/SwupPreloadPlugin.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/libs/SwupScriptsPlugin.min.js","path":"js/build/libs/SwupScriptsPlugin.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/libs/SwupProgressPlugin.min.js","path":"js/build/libs/SwupProgressPlugin.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/libs/SwupScrollPlugin.min.js","path":"js/build/libs/SwupScrollPlugin.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/libs/SwupSlideTheme.min.js","path":"js/build/libs/SwupSlideTheme.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/libs/Typed.min.js","path":"js/build/libs/Typed.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/libs/mermaid.min.js","path":"js/build/libs/mermaid.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/libs/anime.min.js","path":"js/build/libs/anime.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/libs/minimasonry.min.js","path":"js/build/libs/minimasonry.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/libs/moment.min.js","path":"js/build/libs/moment.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/libs/moment-with-locales.min.js","path":"js/build/libs/moment-with-locales.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/libs/odometer.min.js","path":"js/build/libs/odometer.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/libs/pangu.min.js","path":"js/build/libs/pangu.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/libs/pjax.min.js","path":"js/build/libs/pjax.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/layouts/bookmarkNav.js.map","path":"js/build/layouts/bookmarkNav.js.map","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/layouts/bookmarkNav.js","path":"js/build/layouts/bookmarkNav.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/layouts/categoryList.js","path":"js/build/layouts/categoryList.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/layouts/essays.js","path":"js/build/layouts/essays.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/layouts/categoryList.js.map","path":"js/build/layouts/categoryList.js.map","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/layouts/essays.js.map","path":"js/build/layouts/essays.js.map","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/layouts/lazyload.js.map","path":"js/build/layouts/lazyload.js.map","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/layouts/lazyload.js","path":"js/build/layouts/lazyload.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/layouts/navbarShrink.js","path":"js/build/layouts/navbarShrink.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/layouts/toc.js","path":"js/build/layouts/toc.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/layouts/navbarShrink.js.map","path":"js/build/layouts/navbarShrink.js.map","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/build/layouts/toc.js.map","path":"js/build/layouts/toc.js.map","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/light/atom-one-light.styl","path":"css/common/codeblock/hljs-themes/light/atom-one-light.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/light/github.styl","path":"css/common/codeblock/hljs-themes/light/github.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/light/default.styl","path":"css/common/codeblock/hljs-themes/light/default.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/dark/a11y-dark.styl","path":"css/common/codeblock/hljs-themes/dark/a11y-dark.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/dark/atom-one-dark.styl","path":"css/common/codeblock/hljs-themes/dark/atom-one-dark.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/dark/github-dark.styl","path":"css/common/codeblock/hljs-themes/dark/github-dark.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/dark/agate.styl","path":"css/common/codeblock/hljs-themes/dark/agate.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/dark/monokai-sublime.styl","path":"css/common/codeblock/hljs-themes/dark/monokai-sublime.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/dark/nord.styl","path":"css/common/codeblock/hljs-themes/dark/nord.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/dark/night-owl.styl","path":"css/common/codeblock/hljs-themes/dark/night-owl.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/dark/vs2015.styl","path":"css/common/codeblock/hljs-themes/dark/vs2015.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/dark/tokyo-night-dark.styl","path":"css/common/codeblock/hljs-themes/dark/tokyo-night-dark.styl","modified":1,"renderable":1},{"_id":"source/fonts/LXGWWenKaiGBScreen.ttf","path":"fonts/LXGWWenKaiGBScreen.ttf","modified":1,"renderable":0},{"_id":"source/fonts/MapleMono-Bold.ttf","path":"fonts/MapleMono-Bold.ttf","modified":1,"renderable":0},{"_id":"source/fonts/MapleMono-Italic.ttf","path":"fonts/MapleMono-Italic.ttf","modified":1,"renderable":0},{"_id":"source/fonts/MapleMono-Regular.ttf","path":"fonts/MapleMono-Regular.ttf","modified":1,"renderable":0},{"_id":"source/img/2025-01-16-23-58-21.png","path":"img/2025-01-16-23-58-21.png","modified":1,"renderable":0},{"_id":"source/img/2025-01-17-14-00-36.png","path":"img/2025-01-17-14-00-36.png","modified":1,"renderable":0},{"_id":"source/img/2025-01-18-11-41-54.png","path":"img/2025-01-18-11-41-54.png","modified":1,"renderable":0},{"_id":"source/img/2025-01-18-11-45-41.png","path":"img/2025-01-18-11-45-41.png","modified":1,"renderable":0},{"_id":"source/img/2025-01-18-13-01-29.png","path":"img/2025-01-18-13-01-29.png","modified":1,"renderable":0},{"_id":"source/img/2025-01-18-13-03-21.png","path":"img/2025-01-18-13-03-21.png","modified":1,"renderable":0},{"_id":"source/img/2025-01-18-13-09-11.png","path":"img/2025-01-18-13-09-11.png","modified":1,"renderable":0},{"_id":"source/img/2025-01-18-13-15-38.png","path":"img/2025-01-18-13-15-38.png","modified":1,"renderable":0},{"_id":"source/img/2025-01-18-13-23-22.png","path":"img/2025-01-18-13-23-22.png","modified":1,"renderable":0},{"_id":"source/img/2025-01-18-17-06-50.png","path":"img/2025-01-18-17-06-50.png","modified":1,"renderable":0},{"_id":"source/img/2025-01-18-17-11-36.png","path":"img/2025-01-18-17-11-36.png","modified":1,"renderable":0},{"_id":"source/img/2025-01-18-17-13-45.png","path":"img/2025-01-18-17-13-45.png","modified":1,"renderable":0},{"_id":"source/img/2025-01-18-17-14-29.png","path":"img/2025-01-18-17-14-29.png","modified":1,"renderable":0},{"_id":"source/img/Aniya.png","path":"img/Aniya.png","modified":1,"renderable":0},{"_id":"source/img/2025-01-18-12-58-38.png","path":"img/2025-01-18-12-58-38.png","modified":1,"renderable":0},{"_id":"source/img/JS.png","path":"img/JS.png","modified":1,"renderable":0},{"_id":"source/img/Aniya_放大镜.jpg","path":"img/Aniya_放大镜.jpg","modified":1,"renderable":0},{"_id":"source/img/bgImg.png","path":"img/bgImg.png","modified":1,"renderable":0},{"_id":"source/img/crypt_index.png","path":"img/crypt_index.png","modified":1,"renderable":0},{"_id":"source/img/db_index.png","path":"img/db_index.png","modified":1,"renderable":0},{"_id":"source/img/edit.gif","path":"img/edit.gif","modified":1,"renderable":0},{"_id":"source/img/find-2025-01-22-11-58-20.png","path":"img/find-2025-01-22-11-58-20.png","modified":1,"renderable":0},{"_id":"source/img/great.jpg","path":"img/great.jpg","modified":1,"renderable":0},{"_id":"source/img/legend-2025-01-21-21-19-51.png","path":"img/legend-2025-01-21-21-19-51.png","modified":1,"renderable":0},{"_id":"source/img/me.jpg","path":"img/me.jpg","modified":1,"renderable":0},{"_id":"source/img/avatar.svg","path":"img/avatar.svg","modified":1,"renderable":0},{"_id":"source/img/re0-2025-01-18-17-40-27.png","path":"img/re0-2025-01-18-17-40-27.png","modified":1,"renderable":0},{"_id":"source/img/re0-2025-01-18-17-16-53.png","path":"img/re0-2025-01-18-17-16-53.png","modified":1,"renderable":0},{"_id":"source/img/sun.png","path":"img/sun.png","modified":1,"renderable":0},{"_id":"source/img/不死鸟.jpg","path":"img/不死鸟.jpg","modified":1,"renderable":0},{"_id":"source/img/哭哭帕克.jpg","path":"img/哭哭帕克.jpg","modified":1,"renderable":0},{"_id":"source/img/倦鸟.png","path":"img/倦鸟.png","modified":1,"renderable":0},{"_id":"source/img/料理的加护.jpg","path":"img/料理的加护.jpg","modified":1,"renderable":0},{"_id":"source/img/晚霞.jpg","path":"img/晚霞.jpg","modified":1,"renderable":0},{"_id":"source/img/校长帕克.jpg","path":"img/校长帕克.jpg","modified":1,"renderable":0},{"_id":"source/img/猫猫-2025-01-20-22-47-27.png","path":"img/猫猫-2025-01-20-22-47-27.png","modified":1,"renderable":0},{"_id":"source/img/照镜子.jpg","path":"img/照镜子.jpg","modified":1,"renderable":0},{"_id":"source/img/社会心理学.png","path":"img/社会心理学.png","modified":1,"renderable":0},{"_id":"source/img/跨域共享.jpg","path":"img/跨域共享.jpg","modified":1,"renderable":0},{"_id":"source/img/闪光拉姆.jpg","path":"img/闪光拉姆.jpg","modified":1,"renderable":0},{"_id":"source/img/闪耀pack.jpg","path":"img/闪耀pack.jpg","modified":1,"renderable":0},{"_id":"source/img/雪国.jpg","path":"img/雪国.jpg","modified":1,"renderable":0},{"_id":"source/img/雷姆拉姆.jpg","path":"img/雷姆拉姆.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"source/_data/masonry.yml","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1746704043936},{"_id":"source/_data/essays.yml","hash":"c2c6df4d722695c75adcd63e5652fbc7bef718dc","modified":1746704432834},{"_id":"source/_posts/MAIC.md","hash":"30dbb9cd6ff9d9a1912bec038f4450985d28ead4","modified":1750835259875},{"_id":"source/_data/links.yml","hash":"bf626f396a656962255887da9f9522c2a8a63834","modified":1746844089463},{"_id":"source/.DS_Store","hash":"4cecacb44b43548a044b732cabcfaa328be77f69","modified":1750747346670},{"_id":"source/essays/index.md","hash":"db23a67bfd3dfc5524230a22d0fa988f83514689","modified":1746704413542},{"_id":"source/_posts/Prisma.md","hash":"4af49f855ac7ca496ee6d8da4c8a8f8b44288359","modified":1746718312460},{"_id":"source/_posts/chatSQL.md","hash":"fb8be5df115d36684b3365483439d6be01eb7fb4","modified":1746933263447},{"_id":"source/categories/index.md","hash":"a998b1dba9d37accf8857d4d8a2a0f6c84ae7539","modified":1746703540266},{"_id":"source/_posts/.DS_Store","hash":"fbfa764873efec0d88a34bc319c29c385b2ef6e1","modified":1750747353121},{"_id":"source/fonts/custom-fonts.css","hash":"2e88c887c16da758b125b59b66bcc455224e3807","modified":1746706651872},{"_id":"source/img/2025-01-17-14-00-36.png","hash":"eacdd40a31bb3f4ccec48b38aa01d9e4f4a000d5","modified":1746705359374},{"_id":"source/img/legend-2025-01-21-21-19-51.png","hash":"c56fc82db2388050164829230deac64751c69ea6","modified":1746705359591},{"_id":"source/img/JS.png","hash":"a115cbbec848dea5824181ef22411d8efc6dbfa8","modified":1746705359588},{"_id":"source/img/find-2025-01-22-11-58-20.png","hash":"a889d1dd151686eb085de78836a2cc7e59a43606","modified":1746705359579},{"_id":"source/img/猫猫-2025-01-20-22-47-27.png","hash":"91d8cfe3cb9673a851c50fc6351c91b9cb54bb60","modified":1746705359520},{"_id":"source/tags/index.md","hash":"bb4b605d71337fd94494837d3307db70172dcdfd","modified":1746703334852},{"_id":"source/links/index.md","hash":"cf40c9f89fe868a54827ce7ad927cbeab85768c7","modified":1746788593060},{"_id":"source/masonry/index.md","hash":"3cdbc0f704cc49d6e670b9ee7f4db2d98b3be49e","modified":1746703607234},{"_id":"source/css/custom.css","hash":"6650c578fa1c422c2b59b5830ee15003393a7175","modified":1746783293133},{"_id":"source/_posts/其他/SSH隧道.md","hash":"3e2cca7af134b6fe8b664e6d607fce213cc3a331","modified":1746783407796},{"_id":"source/_posts/其他/Tmux.md","hash":"c1cef80753ec2ff52c27db020cca333a1d6710cc","modified":1746844255397},{"_id":"source/_posts/其他/makefile.md","hash":"698fa57402c8b31b7bf00d32f1eebe048882d1ed","modified":1746783068713},{"_id":"source/_posts/其他/媒体查询.md","hash":"b41da3d82f2bd6de044652f35fc36ca355d06163","modified":1746783081417},{"_id":"source/links/.DS_Store","hash":"34fe290bc8d934cf4c51deea76c7ec16f3cf4d2f","modified":1746795903235},{"_id":"source/_posts/其他/认证配置.md","hash":"92fcc04d3aaacec044cd11c49a97a726325b9f73","modified":1746783101069},{"_id":"source/_posts/编程语言/css笔记.md","hash":"a7f92a6fd6680a4bd6ba5259b6bffb5e0f785869","modified":1746705099655},{"_id":"source/_posts/其他/pip-tools.md","hash":"731a5ef173ba7a0030f5cc90d3b1e39e6cea85c3","modified":1746844451107},{"_id":"source/_posts/poets/晚霞.md","hash":"5f3b1e345616c7672be3c49f1cfbcce515fc7acc","modified":1746755073079},{"_id":"source/_posts/编程语言/swift.md","hash":"2aabece2a4528bb81dffa800342f4e06cfbf89fd","modified":1750835239667},{"_id":"source/_posts/poets/bird.md","hash":"55de172a13318197d41c8fd80915d6b0e62171a3","modified":1746783556930},{"_id":"source/_posts/前后端/响应式设计.md","hash":"4fbedebc6df907a8482eed1e6140edf24109a13b","modified":1746705742523},{"_id":"source/_posts/其他/themechange.md","hash":"dde29b1661f092763023d2f52b7e908d9f2c3c17","modified":1746783145862},{"_id":"source/_posts/编程语言/JavaScript.md","hash":"c49c5e026ca5ca87067329d8074f72830ffd7804","modified":1746705286819},{"_id":"source/_posts/前后端/跨组件渲染.md","hash":"5f6059f25e29b9d6c5400d9405c3feeed0197e87","modified":1746843815319},{"_id":"source/_posts/课程笔记/密码学复习.md","hash":"0c0fdb02275cbf5c8275951d49f0f54a6ebbb884","modified":1750834743506},{"_id":"source/_posts/前后端/CORS.md","hash":"3375497e0c8fb9bd4befa19267e37ed50201eac6","modified":1746844309659},{"_id":"source/_posts/课程笔记/数据库复习.md","hash":"79a5aba65179e95308fca7e5c3748ee5b659c031","modified":1750835214898},{"_id":"source/_posts/课程笔记/oop复习笔记.md","hash":"ba829e7d9aa9983a22f220dd98177d6ef2ceaff9","modified":1750835199433},{"_id":"source/_posts/课程笔记/arch复习.md","hash":"41a3c9f08f49a528db0caff55dfe742bd197c8f8","modified":1750834855635},{"_id":"source/img/2025-01-16-23-58-21.png","hash":"3707c7284cdeaada1b82a50889d6bc5b66cfab69","modified":1746705359361},{"_id":"source/img/2025-01-18-11-41-54.png","hash":"1d85d673eebe40136f7058b03e7d4aa3d2760b14","modified":1746705359378},{"_id":"source/img/2025-01-18-13-01-29.png","hash":"6dbe8216f8848a8f202de965f4313dbb2eecdd58","modified":1746705359411},{"_id":"source/img/2025-01-18-12-58-38.png","hash":"cf5073b3f0fcc5f8e8b013927dc633cdb0eb478b","modified":1746705359406},{"_id":"source/img/great.jpg","hash":"ad40b86f9b500d362074fe888853c2536ba6e834","modified":1746705359585},{"_id":"source/fonts/MapleMono-Bold.ttf","hash":"ec54b625650294240d3255287a5cd07afd5bde09","modified":1746706242732},{"_id":"source/fonts/MapleMono-Regular.ttf","hash":"8ef0566873ae81ef2dd9ed3fecf13240673fc414","modified":1746706242747},{"_id":"source/img/2025-01-18-13-03-21.png","hash":"25abaf57c0e17909b165180aaf9d390fe09d6c5a","modified":1746705359427},{"_id":"source/img/2025-01-18-13-09-11.png","hash":"47c213fc9292190467b8b6f0e19b9408dbe6824f","modified":1746705359433},{"_id":"source/img/Aniya_放大镜.jpg","hash":"538ff8e7ac38f341c0166820d43617d73675cc86","modified":1746705359546},{"_id":"source/img/不死鸟.jpg","hash":"0baad7c3a94594079f49165c91f061d0689c1035","modified":1746705359479},{"_id":"source/img/晚霞.jpg","hash":"c89abcb798ddb518b6e8ce08e8afd144b00e8a54","modified":1746705359530},{"_id":"source/fonts/MapleMono-Italic.ttf","hash":"e6c100ea19c7a8cb4b005a2c61d22e971943a014","modified":1746706242739},{"_id":"source/img/2025-01-18-11-45-41.png","hash":"f9cf4255cce7bad9cfbe29c5264b022933a64c30","modified":1746705359395},{"_id":"source/img/2025-01-18-17-13-45.png","hash":"b4d0e8077ffe69dfd61db955e869126b24c76ce0","modified":1746705359471},{"_id":"source/img/料理的加护.jpg","hash":"6364a3389f2ac52ad1ec33c254ebde8740b257cc","modified":1746705359514},{"_id":"source/img/闪光拉姆.jpg","hash":"8e818cc9cee33324fb15a8d52fc69b1262cf87e2","modified":1746705359522},{"_id":"source/img/me.jpg","hash":"bdfdab38c41980cff966c08ea26ca8699948cbd6","modified":1746705359594},{"_id":"source/img/avatar.svg","hash":"fca0089e299662e3ac16c9e1a594bcbff42db6d6","modified":1746711858937},{"_id":"source/img/哭哭帕克.jpg","hash":"e20aa94b2a43c0194fb3d3a5d0762b6404458003","modified":1746705359497},{"_id":"source/img/闪耀pack.jpg","hash":"470edf49958168295976933a0135d5517954cdba","modified":1746705359524},{"_id":"source/img/雪国.jpg","hash":"e1cc8027328cbc55de92496f1e7c90d3812923b7","modified":1746705359541},{"_id":"source/img/2025-01-18-17-14-29.png","hash":"871f5a88a9d126706973463911056770ae7090e8","modified":1746705359475},{"_id":"source/img/re0-2025-01-18-17-16-53.png","hash":"871f5a88a9d126706973463911056770ae7090e8","modified":1746705359597},{"_id":"source/img/re0-2025-01-18-17-40-27.png","hash":"0f759367f3fa09abcf03a7e92ec340f38e133142","modified":1746705359604},{"_id":"source/img/跨域共享.jpg","hash":"438d4dda0d2271203947bb461416275504601355","modified":1746705359508},{"_id":"source/img/雷姆拉姆.jpg","hash":"a3360d4afcc99266225d67003a06a133a2a8ecc7","modified":1746705359510},{"_id":"source/img/2025-01-18-13-15-38.png","hash":"a5774370c2e3ac61a14b5847c2c77ea69afecbfe","modified":1746705359441},{"_id":"source/img/2025-01-18-17-11-36.png","hash":"404b6f149798b76095753ac52d034516b37c1555","modified":1746705359462},{"_id":"source/img/2025-01-18-13-23-22.png","hash":"0c9345d1f0c9af7bc07f7bbf7a15153d4b16aea7","modified":1746705359452},{"_id":"source/img/照镜子.jpg","hash":"204a3b9a70ad3381fc5c2b78d3fc9afdecc2d995","modified":1746705359544},{"_id":"source/img/校长帕克.jpg","hash":"dbc8efb5b99bf953032dac803a4ea7ac1166974e","modified":1746705359536},{"_id":"node_modules/hexo-theme-redefine/.coderabbit.yaml","hash":"ba28a5250f22db9a8eb9cd1ee282285eddd848a8","modified":1746717051588},{"_id":"node_modules/hexo-theme-redefine/CODE_OF_CONDUCT.md","hash":"61a6276ef54989b7a1325f3ecb3183a4dfdf50cb","modified":1746717051482},{"_id":"node_modules/hexo-theme-redefine/CONTRIBUTING.md","hash":"c6ef834f602b7ae02e2863a2a857e0ce8d392f15","modified":1746717051482},{"_id":"node_modules/hexo-theme-redefine/DONATION.md","hash":"08e105bad07d733efb98543a034f930c569f5c2f","modified":1746717051482},{"_id":"node_modules/hexo-theme-redefine/README.md","hash":"44578ceb782516967dc0de15fbbc1a78c0986aed","modified":1746717051483},{"_id":"node_modules/hexo-theme-redefine/LICENSE","hash":"1de7bacb4fbbd7b6d391a69abfe174c2509ec303","modified":1746717049946},{"_id":"node_modules/hexo-theme-redefine/tailwind.config.js","hash":"63797b8595e3a59c1cdaad7c9268a292fc9c558c","modified":1746717051237},{"_id":"node_modules/hexo-theme-redefine/README_zh-TW.md","hash":"07acc04ccf38f40b5f6be18529c283ab11bec9c3","modified":1746717051483},{"_id":"node_modules/hexo-theme-redefine/_config.yml","hash":"c2721e3cd69d2308a5e46a84394ebbff6a21555e","modified":1746717051588},{"_id":"node_modules/hexo-theme-redefine/.husky/pre-commit","hash":"843996b47615c2f8c1037db9183de3006166ac1d","modified":1746717049993},{"_id":"node_modules/hexo-theme-redefine/vercel.json","hash":"357c1fd2678f8ae4a9a852a1a6888c8eca774551","modified":1746717051250},{"_id":"node_modules/hexo-theme-redefine/languages/en.yml","hash":"4cc09fff6895fd864044d7c11f8638ab92d98453","modified":1746717051590},{"_id":"node_modules/hexo-theme-redefine/README_zh-CN.md","hash":"7f7ced9ebf32ab9561ce5bd54445c9622dda6fb1","modified":1746717051482},{"_id":"node_modules/hexo-theme-redefine/languages/fr.yml","hash":"a249af0bd206f10ce78b186b8f0ef6c483ddfcad","modified":1746717051590},{"_id":"node_modules/hexo-theme-redefine/package.json","hash":"1b4d36f90309f4e28b4266ef76f76202d7f38b10","modified":1746717051249},{"_id":"node_modules/hexo-theme-redefine/languages/ja.yml","hash":"6da103d89685ddf6da4c367efd699c6fc1a15f84","modified":1746717051590},{"_id":"node_modules/hexo-theme-redefine/languages/zh-TW.yml","hash":"218fcc4db1d2211bd9839895d7ad6b70a5d50897","modified":1746717051591},{"_id":"node_modules/hexo-theme-redefine/languages/zh-CN.yml","hash":"67d93982759d79f38afadeef871c80b08c21c7ca","modified":1746717051591},{"_id":"node_modules/hexo-theme-redefine/layout/archive.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1746717050669},{"_id":"node_modules/hexo-theme-redefine/layout/category.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1746717050714},{"_id":"node_modules/hexo-theme-redefine/layout/index.ejs","hash":"f5fee4e079a9c2c23059ebde4cd89ec723e310c6","modified":1746717050754},{"_id":"node_modules/hexo-theme-redefine/layout/layout.ejs","hash":"ecf818cd11e363c1a33e7105ac415d8c192c1f73","modified":1746717050756},{"_id":"node_modules/hexo-theme-redefine/layout/404.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1746717050665},{"_id":"node_modules/hexo-theme-redefine/scripts/config-export.js","hash":"b10185069cd3f3fd7873982e259e402d5f146a58","modified":1746717050988},{"_id":"node_modules/hexo-theme-redefine/scripts/data-handle.js","hash":"c72188b7dd0596d618ecbd3deb1b49ef257014df","modified":1746717050989},{"_id":"node_modules/hexo-theme-redefine/.github/ISSUE_TEMPLATE/bug-chinese.yml","hash":"73df1f0aabb527a9e3c131d0f0eda0db8b7a1f3b","modified":1746717051589},{"_id":"node_modules/hexo-theme-redefine/.github/ISSUE_TEMPLATE/enhancement-chinese.yml","hash":"1ea9f2b52f53e5d1525bb22709bcf37da5a6da01","modified":1746717051590},{"_id":"node_modules/hexo-theme-redefine/.github/ISSUE_TEMPLATE/bug-english.yml","hash":"bf91936a78a2e444dbaf916755f502cc0abe7be3","modified":1746717051589},{"_id":"node_modules/hexo-theme-redefine/.github/workflows/aliyun-cdn-publish.yml","hash":"18975c5422509b0fb7c3b6ddd788eac65802781a","modified":1746717051588},{"_id":"node_modules/hexo-theme-redefine/.github/workflows/build-and-commit.yml","hash":"6cb6834cd753e38dadb25c6492347ddd247935ea","modified":1746717051589},{"_id":"node_modules/hexo-theme-redefine/.github/workflows/npm-publish.yml","hash":"3379098cb32de9ee4f6e69eb91505a4d3a2f37e6","modified":1746717051590},{"_id":"node_modules/hexo-theme-redefine/layout/tag.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1746717050798},{"_id":"node_modules/hexo-theme-redefine/.github/workflows/production-deployment.yml","hash":"d411d426c6df79ac7e487401f0f11206c245d1c1","modified":1746717051591},{"_id":"node_modules/hexo-theme-redefine/layout/utils/image-viewer.ejs","hash":"2f31d56e7ed88dadeacffa5af69931461f4fb4f9","modified":1746717050753},{"_id":"node_modules/hexo-theme-redefine/layout/tags.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1746717050799},{"_id":"node_modules/hexo-theme-redefine/.github/ISSUE_TEMPLATE/enhancement-english.yml","hash":"d072e75c10673fb70be74f89dff8b1bae6df0c8f","modified":1746717051590},{"_id":"node_modules/hexo-theme-redefine/.github/workflows/stale-issues.yml","hash":"4ae03f0bd4aaf5ccaa08205af07218d406e921da","modified":1746717051591},{"_id":"node_modules/hexo-theme-redefine/.github/workflows/preview-deployment.yml","hash":"7fa8860dd2ba4ffc11fbfa1a7d57140af2a0abf0","modified":1746717051591},{"_id":"node_modules/hexo-theme-redefine/layout/utils/local-search.ejs","hash":"06ad51a60648100fcf8a750c471a48bd1c9b31b8","modified":1746717050757},{"_id":"node_modules/hexo-theme-redefine/layout/post.ejs","hash":"f5fee4e079a9c2c23059ebde4cd89ec723e310c6","modified":1746717050781},{"_id":"node_modules/hexo-theme-redefine/layout/utils/paginator.ejs","hash":"cb0a8fca60575195f65510c1a52a7145c819de14","modified":1746717050777},{"_id":"node_modules/hexo-theme-redefine/scripts/filters/img-handle.js","hash":"b396fe7b6cbc331f2952aa7561f96c1f250d8c52","modified":1746717051002},{"_id":"node_modules/hexo-theme-redefine/scripts/filters/lazyload-handle.js","hash":"f8ae44311e6463e887c07a41910ebade8766bac2","modified":1746717051002},{"_id":"node_modules/hexo-theme-redefine/scripts/filters/encrypt.js","hash":"bf6b90842991a25af590af76f10d7164ea34abcb","modified":1746717050991},{"_id":"node_modules/hexo-theme-redefine/scripts/filters/link-handle.js","hash":"d168d78034c5fa5a75978f47185b50fd79ba54cf","modified":1746717051005},{"_id":"node_modules/hexo-theme-redefine/scripts/filters/table-handle.js","hash":"c500c45cd9221788df1f31939c5399eabb62ebb5","modified":1746717051235},{"_id":"node_modules/hexo-theme-redefine/scripts/filters/stylus-handle.js","hash":"8a8bf069ce096bd7b42952c8e50c3c89758cbc13","modified":1746717051219},{"_id":"node_modules/hexo-theme-redefine/scripts/events/404.js","hash":"169245d7b2af1ff401cf76e718c28b4e38f637c7","modified":1746717050939},{"_id":"node_modules/hexo-theme-redefine/layout/page.ejs","hash":"3dc83dae73b48b3e6ae65bdaf6106ec711c88ecd","modified":1746717050777},{"_id":"node_modules/hexo-theme-redefine/layout/utils/side-tools.ejs","hash":"c915643e05f1038549e353a371d72f5bb38c2040","modified":1746717050791},{"_id":"node_modules/hexo-theme-redefine/layout/components/swup.ejs","hash":"ac0263cdb945ad99876a246db43801213b45b309","modified":1746717050794},{"_id":"node_modules/hexo-theme-redefine/scripts/helpers/meta-helpers.js","hash":"5484677eb8064880019642f139e4a29f21cab495","modified":1746717051182},{"_id":"node_modules/hexo-theme-redefine/layout/components/scripts.ejs","hash":"373cbbf8fe0a39fc3de14579e0b3ae20cb429998","modified":1746717050789},{"_id":"node_modules/hexo-theme-redefine/scripts/helpers/page-helpers.js","hash":"beaeb760eaa92bb63272d21d0d99ab64b78980e8","modified":1746717051213},{"_id":"node_modules/hexo-theme-redefine/scripts/helpers/recommendation-helpers.js","hash":"b9ede93bfd16af13871625d2d127bf79d99724d1","modified":1746717051217},{"_id":"node_modules/hexo-theme-redefine/scripts/helpers/theme-helpers.js","hash":"0674a7bb30878f7eb6e5711e5ac05542d863082b","modified":1746717051240},{"_id":"node_modules/hexo-theme-redefine/scripts/helpers/waline-helpers.js","hash":"9f2c3d6c4c7cf6212d28be0729816cd66921bd67","modified":1746717051247},{"_id":"node_modules/hexo-theme-redefine/scripts/modules/btn.js","hash":"aa7a34ff5fb0a624163c38fffe0746cef44d2ea3","modified":1746717050979},{"_id":"node_modules/hexo-theme-redefine/scripts/filters/delete-mask-handle.js","hash":"088e205976a09c8ee7afec6445847ed4b3aef71f","modified":1746717050991},{"_id":"node_modules/hexo-theme-redefine/scripts/modules/btns.js","hash":"a91492e772287114527a3fbc85f0c7c1c1b15eb3","modified":1746717050979},{"_id":"node_modules/hexo-theme-redefine/scripts/modules/note-large.js","hash":"ed719ca36bcbfbfd86d4ade5825e8adbbecf29fe","modified":1746717051212},{"_id":"node_modules/hexo-theme-redefine/scripts/modules/note.js","hash":"d3a0c043246adc0082387c9e39908c18e953d858","modified":1746717051212},{"_id":"node_modules/hexo-theme-redefine/scripts/modules/tabs.js","hash":"74e3b0cdd009206f7b78b04dcb96eccd86e7a996","modified":1746717051235},{"_id":"node_modules/hexo-theme-redefine/layout/pages/page-template.ejs","hash":"75a41b963a4ed3fcae846163bc674d8d185a27a9","modified":1746717050775},{"_id":"node_modules/hexo-theme-redefine/layout/utils/posts-list.ejs","hash":"80dd9ff9b135b582c32c5506d237db71fa742be5","modified":1746717050782},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/brands.min.css","hash":"5119c35bbd273d2ea2501997827f6d644da93164","modified":1746717050383},{"_id":"node_modules/hexo-theme-redefine/scripts/modules/folding.js","hash":"cfa6646c1350c557430149bd52578c6cac59063b","modified":1746717050993},{"_id":"node_modules/hexo-theme-redefine/source/assets/hbe.style.css","hash":"29be8fc47be885e9954e310cbc68dfadd3b4cee6","modified":1746717050585},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/solid.min.css","hash":"e727feabedb171fb0b398151870d7739ef4e2432","modified":1746717050594},{"_id":"node_modules/hexo-theme-redefine/scripts/events/welcome.js","hash":"7b1e16ef62edfc63ab06b390867aad0ede9589fb","modified":1746717051247},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/light.min.css","hash":"18a176eb2486db4e938e568083fa578b641ccc83","modified":1746717050589},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/sharp-solid.min.css","hash":"7d1a13c6b8178b29f5bcb1a639a1998fc9de16c4","modified":1746717050593},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/svg-with-js.min.css","hash":"f4c08e37c4d44b3ed7a3f377d1cb5d7fca4d04bc","modified":1746717050600},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/v4-shims.min.css","hash":"96f037860b8e9b59af8e47571ea98791616dbfd8","modified":1746717050657},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/v4-font-face.min.css","hash":"0be987628c8b485b39f064da41c90f15c0596c1f","modified":1746717050651},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/thin.min.css","hash":"3d46be31379b07ffb24d69c6c915725eaa2e89e9","modified":1746717050636},{"_id":"node_modules/hexo-theme-redefine/source/images/loading.svg","hash":"938c2a41c8ba18e37ed659e481696e40a4c8f3a4","modified":1746717051504},{"_id":"node_modules/hexo-theme-redefine/source/images/bookmark-placeholder.svg","hash":"255a1236bab60d2871da31e4f0db947b44931df6","modified":1746717051504},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-avatar.svg","hash":"d0d20061bda08894a82d7691b660be7c6aaa0608","modified":1746717051504},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-favicon.svg","hash":"420f930a1df64a3c4391ff80326a8a2d7d5a6418","modified":1746717051504},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-logo.svg","hash":"472776b6f013aad44706fee6c94201c96ee83932","modified":1746717051504},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-logo.webp","hash":"0a07e3fb6d9125dee44798c8c110187b16fb42a9","modified":1746717051563},{"_id":"node_modules/hexo-theme-redefine/source/css/style.styl","hash":"0d78bda29a5b0446074ed724f4f9fe772d4b15cc","modified":1746717051501},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-og.webp","hash":"44fb793383da185808ed682d7dd916e10eb65b4d","modified":1746717051564},{"_id":"node_modules/hexo-theme-redefine/source/images/wallhaven-wqery6-light.webp","hash":"d25389973d0359b78f1e9c74a850ef425690ba40","modified":1746717051564},{"_id":"node_modules/hexo-theme-redefine/source/images/wallhaven-wqery6-dark.webp","hash":"d0066e0b025ae748448a3d6a96165d45a55d2f22","modified":1746717051564},{"_id":"node_modules/hexo-theme-redefine/source/css/tailwind.source.css","hash":"1dc3152fe841290f3bd56074f726df975ab91b6e","modified":1746717050636},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/regular.min.css","hash":"d27c4fed54dacff688010e51f611d950dd6e0aca","modified":1746717050591},{"_id":"node_modules/hexo-theme-redefine/source/assets/odometer-theme-minimal.css","hash":"793c31feb38e241a5ff6ecc5e65e61751507d728","modified":1746717050590},{"_id":"node_modules/hexo-theme-redefine/source/js/build.js","hash":"61eb4760cefeffa79550f3f7387e701d554a0709","modified":1746717050982},{"_id":"node_modules/hexo-theme-redefine/source/js/main.js","hash":"cee5f0dcb5b1f0f7f952e24d31cce2bd785b29cc","modified":1746717051009},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-v4compatibility.ttf","hash":"b54531dd09c5089eb93b12ce8f90ff521855ff8a","modified":1746717051561},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-v4compatibility.woff2","hash":"d02b1adc81fd5bec023e25a7770779b99d6dd742","modified":1746717051587},{"_id":"node_modules/hexo-theme-redefine/layout/components/comments/giscus.ejs","hash":"afa08ddc80ae3f1c57d9b85d2625f11751801540","modified":1746717050734},{"_id":"node_modules/hexo-theme-redefine/layout/components/comments/twikoo.ejs","hash":"49d230c1a732e0f3504a57dfd169738156ed22ba","modified":1746717050800},{"_id":"node_modules/hexo-theme-redefine/source/js/utils.js","hash":"5efa4c652a1e7f4852fb8df9bf60de170b4b41db","modified":1746717051246},{"_id":"node_modules/hexo-theme-redefine/layout/components/comments/gitalk.ejs","hash":"f94607c4bb12f5c2325e674e25a428dae742e99e","modified":1746717050735},{"_id":"node_modules/hexo-theme-redefine/layout/components/header/navbar.ejs","hash":"e520f72c4d5116bd0f4c65f3efe617e0a494e2fb","modified":1746717050766},{"_id":"node_modules/hexo-theme-redefine/layout/components/header/head.ejs","hash":"1287e5913f72f6624ff375dc51c939823c55d4da","modified":1746717050739},{"_id":"node_modules/hexo-theme-redefine/layout/components/header/preloader.ejs","hash":"a450ba1381dd43d348a3f538bb17ffbd1d332cad","modified":1746717050784},{"_id":"node_modules/hexo-theme-redefine/layout/components/footer/footer.ejs","hash":"acb56ecba5c231f5c8c6701de6d54e3d654948a2","modified":1746717050727},{"_id":"node_modules/hexo-theme-redefine/layout/components/header/progress-bar.ejs","hash":"e552f0f5e6ab6398ab42eef1788f7c0dcb8f4c18","modified":1746717050785},{"_id":"node_modules/hexo-theme-redefine/layout/components/plugins/aplayer.ejs","hash":"2d34a3583ac0b2b08b6ae035e8d3f97c51db070c","modified":1746717050668},{"_id":"node_modules/hexo-theme-redefine/scripts/filters/lib/hbe.default.js","hash":"fee2c92011ef007121b992193bbab0f3b196d873","modified":1746717050995},{"_id":"node_modules/hexo-theme-redefine/layout/components/sidebar/author.ejs","hash":"422aed0f3f67529c1ea87ee43f8f680ffc531b45","modified":1746717050699},{"_id":"node_modules/hexo-theme-redefine/layout/components/sidebar/avatar.ejs","hash":"47cd8318471493c82f5e5983550145d4fd0a2ddc","modified":1746717050700},{"_id":"node_modules/hexo-theme-redefine/layout/components/sidebar/statistics.ejs","hash":"4329363d232de541e1cb8f24eb59c1a8bacc9b9c","modified":1746717050793},{"_id":"node_modules/hexo-theme-redefine/layout/pages/archive/archive.ejs","hash":"11fb21fe971157a1a6053ecbd6de9ffbe8ba88a8","modified":1746717050674},{"_id":"node_modules/hexo-theme-redefine/layout/pages/bookmarks/bookmarks.ejs","hash":"38ab41cfe2d31ee145af229b3b65ac8743821e0d","modified":1746717050707},{"_id":"node_modules/hexo-theme-redefine/layout/pages/friends/friends-link.ejs","hash":"c4a8555880ab546a9bc829386c4fc2b43cdcece2","modified":1746717050733},{"_id":"node_modules/hexo-theme-redefine/layout/pages/category/category-detail.ejs","hash":"ee99263b6761e9865b06d427597435e69b40dda9","modified":1746717050713},{"_id":"node_modules/hexo-theme-redefine/layout/pages/category/categories.ejs","hash":"fe6e11590c28cc8462a04580868aa6b8b472a9d1","modified":1746717050712},{"_id":"node_modules/hexo-theme-redefine/layout/pages/home/home-article.ejs","hash":"b54a0df26341fa5f26a6e1eedb91cd11014d50c5","modified":1746717050746},{"_id":"node_modules/hexo-theme-redefine/layout/pages/home/home-background.ejs","hash":"dd120259ab091b8087d0194ea2291676556efad8","modified":1746717050746},{"_id":"node_modules/hexo-theme-redefine/layout/pages/masonry/masonry.ejs","hash":"c45f6faf5ccd4db3bd5533eacb6333744a480e27","modified":1746717050764},{"_id":"node_modules/hexo-theme-redefine/layout/pages/notfound/notfound.ejs","hash":"5e90d8519d19a31234de10a33983b8d70aed94a2","modified":1746717050771},{"_id":"node_modules/hexo-theme-redefine/layout/pages/home/home-content.ejs","hash":"6985ec3528866f90ce882564556c30c151050061","modified":1746717050751},{"_id":"node_modules/hexo-theme-redefine/layout/pages/home/home-banner.ejs","hash":"0e0a29a652e5063d89bee3037c3410865f6852a7","modified":1746717050748},{"_id":"node_modules/hexo-theme-redefine/layout/pages/post/article-content.ejs","hash":"8b0b987406057f2eb2ade99f6d68ef5577e14a79","modified":1746717050681},{"_id":"node_modules/hexo-theme-redefine/layout/pages/home/home-sidebar.ejs","hash":"8df645c6e1878187909d749639ecce6edc0ee72c","modified":1746717050751},{"_id":"node_modules/hexo-theme-redefine/layout/pages/post/article-info.ejs","hash":"f42db25cc0f4e3bbce5b8602365025dd37d643d0","modified":1746717050692},{"_id":"node_modules/hexo-theme-redefine/layout/pages/post/article-copyright.ejs","hash":"8e97d76ded33d1e334c376451e2f3d5fd177a958","modified":1746717050683},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/v5-font-face.min.css","hash":"260ea7a5e0b89963a5dcf2600a4decdf0f408f3f","modified":1746717050663},{"_id":"node_modules/hexo-theme-redefine/layout/pages/post/toc.ejs","hash":"c3bd7f4632ded1b59a2479028070fa2b292d8c5e","modified":1746717050800},{"_id":"node_modules/hexo-theme-redefine/layout/pages/shuoshuo/essays.ejs","hash":"7d9e7de29e1dab92c333affd5c592e2ee2e92293","modified":1746717050724},{"_id":"node_modules/hexo-theme-redefine/layout/pages/tag/tags.ejs","hash":"ff59878833eb2a72fda7c78690a36a9c0c522c76","modified":1746717050798},{"_id":"node_modules/hexo-theme-redefine/layout/pages/tag/tag-detail.ejs","hash":"8864356337a301a123e85fb3aec6f3d9b1f2197c","modified":1746717050796},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Chillax/chillax.css","hash":"210179f53c6bce91a12ca6db9129184cc1549c36","modified":1746717050409},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Chillax/Chillax-Variable.woff2","hash":"fc5d99b40db9deca7d151f9bd16b96ff160828b7","modified":1746717051567},{"_id":"node_modules/hexo-theme-redefine/layout/pages/post/post-tools.ejs","hash":"5336e36394250d2f25d26432262061c752b1868a","modified":1746717050779},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Chillax/Chillax-Variable.woff","hash":"fc0e791429c274c4c9312d810e7ae9503cab34ab","modified":1746717051565},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Geist/geist.css","hash":"17f37a09d6192f06b2190f8319114238b0a2ec8c","modified":1746717050576},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Geist/GeistVF.woff2","hash":"772998a8569a6caa04927d876fbe9e0fb859658b","modified":1746717051588},{"_id":"node_modules/hexo-theme-redefine/source/css/common/animated.styl","hash":"1d5a026f3a023031772fdca7d7359bbe7a28548a","modified":1746717051489},{"_id":"node_modules/hexo-theme-redefine/source/css/common/basic.styl","hash":"81bab41a756832a86a6c06df1ea298e4849435f9","modified":1746717051493},{"_id":"node_modules/hexo-theme-redefine/source/css/common/colors.styl","hash":"e4a5336757de7b04c01d8c2a2b4bb1de885c6ae0","modified":1746717051494},{"_id":"node_modules/hexo-theme-redefine/source/fonts/GeistMono/GeistMonoVF.woff2","hash":"11e9a061ce255fc4cc45ac3eeb8cab09a49f5ccc","modified":1746717051587},{"_id":"node_modules/hexo-theme-redefine/source/fonts/GeistMono/geist-mono.css","hash":"b89d5af7e04df579c8ad62c0ea445ff7d16eec11","modified":1746717050565},{"_id":"node_modules/hexo-theme-redefine/layout/components/comments/comment.ejs","hash":"98c2db06626a82f24886cd8b77118014ef8aa6e2","modified":1746717050718},{"_id":"node_modules/hexo-theme-redefine/source/css/common/redefine-theme.styl","hash":"068b95881387ee2b70ba94a6489ee21171f26bf3","modified":1746717051500},{"_id":"node_modules/hexo-theme-redefine/source/css/common/variables.styl","hash":"961f936e6d08372bdc1e9379e7d1288410e4a319","modified":1746717051502},{"_id":"node_modules/hexo-theme-redefine/source/css/common/theme.styl","hash":"0c5eedb57874c91babdb603b1daef35d70a7c150","modified":1746717051501},{"_id":"node_modules/hexo-theme-redefine/source/css/common/markdown.styl","hash":"b356d00c6c6557cf7708a02080b163dc0b667184","modified":1746717051498},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/article-content.styl","hash":"94771695782abe5e723918a1319a953fbd2031e0","modified":1746717051491},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/animations.styl","hash":"2c48fec80bd56164bff297727d06ab5c343b3b41","modified":1746717051490},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/archive-content.styl","hash":"4e329547447c716c986e0b4a4f54afc59fc6b486","modified":1746717051491},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/bookmarks.styl","hash":"a89f96f73d9f1d51e455b53bbcf13d003d672d33","modified":1746717051493},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/category-list.styl","hash":"aaccab4fb21e25086323e7e418e7fea945f551be","modified":1746717051493},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/home-sidebar.styl","hash":"daad28f2c004f7afe335080d67e977660829d63e","modified":1746717051497},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/home-content.styl","hash":"65a5184a667966f5c5387662de77da512faa4e0e","modified":1746717051497},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/page.styl","hash":"ffc2622357f1556a95fc8f138b7e8ac27b0bba2c","modified":1746717051500},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/hbe.js","hash":"f7bd9258359dc8f70c6faec3f4fe22a1852d9bf1","modified":1746717050998},{"_id":"node_modules/hexo-theme-redefine/source/css/build/tailwind.css","hash":"298ca1975af73e8101d77491566de03543a56a65","modified":1746717050621},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/aplayer.js","hash":"f2818445cfbdbf936f136c3d0f983583c581d77e","modified":1746717050965},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/masonry.js","hash":"92734a30a21f8b16f20aa75208f6c082890275fb","modified":1746717051010},{"_id":"node_modules/hexo-theme-redefine/layout/components/comments/waline.ejs","hash":"35239e49743c6b7f40014bd753bff9c415b5fcbb","modified":1746717050800},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/mermaid.js","hash":"303254d382869ed618025fcb328426bd10314583","modified":1746717051010},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/tabs.js","hash":"964ec5c25a8d78763ba2ba9bfbd5b1b49ed05381","modified":1746717051236},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/codeBlock.js","hash":"344e6c83e6ffda22f6e5bc724d603066b49a7d8b","modified":1746717050986},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/typed.js","hash":"f46f636a32e7569a9ff8b8b301bf860e598bd4fe","modified":1746717051243},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/imageViewer.js","hash":"33c4e4a28cf66be0cb3f181acae082a5a5404a89","modified":1746717051001},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/localSearch.js","hash":"f6e59f65c676457198c2cf5d78bd06052499ee38","modified":1746717051005},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/lightDarkSwitch.js","hash":"97b7e68f871dc218fceca77b85ac051c7c6306af","modified":1746717051004},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/pangu.js","hash":"25af6a33c9176a00f21f45cf5cfad0eb7d473841","modified":1746717051214},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/runtime.js","hash":"eb0374b6f033f7ac25f49b1b079aa163e14b0fcd","modified":1746717051218},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/scrollTopBottom.js","hash":"9e54fa4310bb98ea5ba61780a9ef56d05d475203","modified":1746717051218},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/categoryList.js","hash":"eb1af2cd0726f56ff7861222ea543315fe295a17","modified":1746717050982},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/lazyload.js","hash":"c06323d68bbdebbb685db5010e7655b8ed0caf42","modified":1746717051003},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/navbarShrink.js","hash":"3e80bf9ef719b2ddb2d1c4b67eb169d2ef52dbb8","modified":1746717051210},{"_id":"node_modules/hexo-theme-redefine/source/js/build/main.js","hash":"2fcd1ce192bb34997c2e962d9c98a389573969ac","modified":1746717051008},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/tocToggle.js","hash":"c2224ff0370fcf109e94194613b9480a3913c82d","modified":1746717051242},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/bookmarkNav.js","hash":"3155ed3e6e2aa2e32dbd9e4e06b863e63c2a9b9d","modified":1746717050977},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/toc.js","hash":"7a768982f6cb1f40552cce063d5743fe862db762","modified":1746717051241},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/essays.js","hash":"df82365c7287710dd876e452f8ef4e1d87b8c09e","modified":1746717050992},{"_id":"node_modules/hexo-theme-redefine/source/js/build/main.js.map","hash":"b089351e96e8f99395ac9b44aea257364a475dca","modified":1746717051262},{"_id":"node_modules/hexo-theme-redefine/source/js/build/utils.js.map","hash":"d9a1eed23a96de49c30ebccb52620e24204ea10e","modified":1746717051471},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupProgressPlugin.min.js","hash":"fd30fe1c43072017f67bbaac18b962a5ac218711","modified":1746717051229},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupPreloadPlugin.min.js","hash":"d911512891ecbe1935203bcd3d93427ad75e45c8","modified":1746717051226},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/category-content.styl","hash":"1221a4e0fa2ab5c49e886e0a5bb6dc1d23d969e8","modified":1746717051493},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/Swup.min.js","hash":"cc054d34e74a1feecfae75064f6a4d6107607396","modified":1746717051225},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1746717050969},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupScriptsPlugin.min.js","hash":"b17f3434035f1339d6f9cd5c8a055d2a1b6602e9","modified":1746717051231},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupPreloadPlugin.min.js.map","hash":"40513fec1323b601667876a97a9ef8a0c88bff63","modified":1746717051467},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/tag-content.styl","hash":"3d08edcfbd866627f5681c368d5c61270ba2f682","modified":1746717051501},{"_id":"node_modules/hexo-theme-redefine/source/js/build/utils.js","hash":"5a3707671ffb8544ef6e90c3713c4da785f06488","modified":1746717051246},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupScrollPlugin.min.js","hash":"6c3afca9bb98f79d14516c093f27e3e50a3fd82e","modified":1746717051234},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1746717050952},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/Typed.min.js","hash":"e8ce2b674a637b0c0396a3106c1aedf10186249c","modified":1746717051244},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/moment.min.js","hash":"20bd76acf8e950e5cf7243f60e1192705dacca7d","modified":1746717051209},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/minimasonry.min.js","hash":"9681cc509cb8aa733d36aad032e6e8acdb33c08c","modified":1746717051183},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/pjax.min.js","hash":"3d796e5be9cdd4067c94e190ea2482d7fdb4856c","modified":1746717051217},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/odometer.min.js","hash":"fe5beb60997c84ab2f91b54535c4221443cdd21f","modified":1746717051213},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupSlideTheme.min.js","hash":"e9d143780e879d958164b1356b7f918ec25e838a","modified":1746717051235},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/code-theme.styl","hash":"79d13151f771a7a967fbf18eab955354466335a8","modified":1746717051494},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/pangu.min.js","hash":"ebc25ecdbf464407c5886f024d13f1f6da51ec85","modified":1746717051215},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_modules/aplayer.styl","hash":"5d9b58f0d5226ef2a2a67502577539115ae29942","modified":1746717051490},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_modules/buttons.styl","hash":"32be9cf72f19b588b6e0db6b6e23146293b64268","modified":1746717051493},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_modules/notes.styl","hash":"37b2a4a0669414c74498ed0ecae873c90b15fe6e","modified":1746717051499},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_modules/folding.styl","hash":"b5e5c2407eb83ae4b3ee4ed73490dcd41edef705","modified":1746717051495},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/highlight.styl","hash":"35cfa277f1f2ea3c3876e50ac56c7401e1b8a4c7","modified":1746717051496},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_modules/tabs.styl","hash":"fb5f2f223f7d4ed86d3693fdc0977362f456212e","modified":1746717051501},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/archive-list.styl","hash":"d57516e1723b807d38cb7955a9a1422dd03ac820","modified":1746717051491},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/code-block.styl","hash":"e6a793c6b2c54549db8226fcb13ee3c4b3a1c45d","modified":1746717051494},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/article-copyright-info.styl","hash":"12fad2f674e8a7ad009cabecf4e98b65d5ed8b1e","modified":1746717051491},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/article-meta-info.styl","hash":"141ae2639ac760ced89887cce139adbc76c18cea","modified":1746717051491},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/home-banner.styl","hash":"9f0fb6bd26e73bf07c556a3c1f552997234cb81c","modified":1746717051496},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/footer.styl","hash":"0dc8796e312215e45e1daf566a495c00480b68e3","modified":1746717051495},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/image-viewer.styl","hash":"6c8eeb7a96cae110cd9a684a3a5076148b8154d8","modified":1746717051497},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/local-search.styl","hash":"45e7580258bc2d85cc12313abcc24cba9e531e00","modified":1746717051497},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/navbar.styl","hash":"b95efbade2b4cfd8000fd8238bdbd3de522b319e","modified":1746717051498},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/page-template.styl","hash":"e2e1826427e1fc5f88d4c31ddd508818a0b0d87d","modified":1746717051499},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/paginator.styl","hash":"53421b731f3d7ed34a3a4c87405e06ae3d6519e0","modified":1746717051500},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/progress-bar.styl","hash":"d3715280d9b62d89ccd1b79ab5e5f030669f4d88","modified":1746717051500},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/post-tools.styl","hash":"d602c2fe191d2c639f7cd8c4d0ee618f8c80f5c1","modified":1746717051500},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/404.styl","hash":"16215f6fe664d1ddc5744a626405bc774dc30f70","modified":1746717051487},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/side-tools.styl","hash":"995982b8c228f7386d352042f64587d06663716e","modified":1746717051500},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/tagcloud.styl","hash":"cb12c8ef44b5e597eb971d3341919fe9569da709","modified":1746717051501},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/toc.styl","hash":"13949981a5afa2b0483da1836af5999d992961f9","modified":1746717051502},{"_id":"node_modules/hexo-theme-redefine/source/js/build/plugins/aplayer.js.map","hash":"daefe65fb99e2f7699f3fd25ec90b7f38469da5d","modified":1746717051251},{"_id":"node_modules/hexo-theme-redefine/source/js/build/plugins/masonry.js","hash":"b5b44a6d4b74beea1938334b3558bd3d1caec07a","modified":1746717051009},{"_id":"node_modules/hexo-theme-redefine/source/js/build/plugins/hbe.js","hash":"383a946a2be735bc30c0bb331bbee335fe5b6942","modified":1746717050996},{"_id":"node_modules/hexo-theme-redefine/source/js/build/plugins/aplayer.js","hash":"bef8536cb25306f78f80c1744c07544a46dac970","modified":1746717050961},{"_id":"node_modules/hexo-theme-redefine/source/js/build/plugins/masonry.js.map","hash":"b2d93754a64f84ef67528d320de69561fc763525","modified":1746717051264},{"_id":"node_modules/hexo-theme-redefine/source/js/build/plugins/hbe.js.map","hash":"53deed7e9b802b964ff90d3303f957238f2b1421","modified":1746717051259},{"_id":"node_modules/hexo-theme-redefine/source/js/build/plugins/mermaid.js.map","hash":"5a8b4e15316517af607d3c12cf4a6e3447cfec22","modified":1746717051265},{"_id":"node_modules/hexo-theme-redefine/source/js/build/plugins/mermaid.js","hash":"2deee4201b637c54c1be0e1b686a97050fb37cce","modified":1746717051010},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupScrollPlugin.min.js.map","hash":"63cf04ba556b256379e103ef7d3ba12d629449a4","modified":1746717051468},{"_id":"node_modules/hexo-theme-redefine/source/js/build/plugins/tabs.js","hash":"b14b70e316e3151d591f03cbaf3c70c11ae5aad5","modified":1746717051235},{"_id":"node_modules/hexo-theme-redefine/source/js/build/plugins/typed.js","hash":"d8999de0b92fe1e1c9061040d6e95a9b607caa23","modified":1746717051243},{"_id":"node_modules/hexo-theme-redefine/source/js/build/plugins/typed.js.map","hash":"4840c94f7639cee4615916ce2cabd172a565a71c","modified":1746717051470},{"_id":"node_modules/hexo-theme-redefine/source/js/build/tools/codeBlock.js","hash":"8aa8e62cdc3891c9c608c1f52866aeab8cef0457","modified":1746717050984},{"_id":"node_modules/hexo-theme-redefine/source/js/build/plugins/tabs.js.map","hash":"218abee3893ecdee6f6c633b9fd13520a4eefabf","modified":1746717051469},{"_id":"node_modules/hexo-theme-redefine/source/js/build/tools/codeBlock.js.map","hash":"fe609e1f8c1d028eca5e131b6a98cd71547be39c","modified":1746717051257},{"_id":"node_modules/hexo-theme-redefine/source/js/build/tools/imageViewer.js","hash":"310f06d38245235e1a65a5a7f1a6f673647faa6f","modified":1746717050999},{"_id":"node_modules/hexo-theme-redefine/source/js/build/tools/imageViewer.js.map","hash":"6bf89edc74bc48b0e6f616d1ac0b0bb52df09353","modified":1746717051260},{"_id":"node_modules/hexo-theme-redefine/source/js/build/tools/lightDarkSwitch.js","hash":"dee772cad8a9ab42d54b6ea99599534524c47f18","modified":1746717051004},{"_id":"node_modules/hexo-theme-redefine/source/js/build/tools/localSearch.js","hash":"4ddb3808f9216b848a14e66c813ae883d0f883b1","modified":1746717051005},{"_id":"node_modules/hexo-theme-redefine/source/js/build/tools/runtime.js","hash":"99d9fbc2022a12dd7f9bab4f88384f563f3f51e8","modified":1746717051218},{"_id":"node_modules/hexo-theme-redefine/source/js/build/tools/lightDarkSwitch.js.map","hash":"0fd195af186727b3b6f8a7d29035f35f7375e5a1","modified":1746717051261},{"_id":"node_modules/hexo-theme-redefine/source/js/build/tools/scrollTopBottom.js","hash":"037720022f64622f244682c176c5f0ab8f1efb54","modified":1746717051218},{"_id":"node_modules/hexo-theme-redefine/source/js/build/tools/runtime.js.map","hash":"43ed778e985cbf71e7d62c5960da98a431ad43e3","modified":1746717051466},{"_id":"node_modules/hexo-theme-redefine/source/js/build/tools/scrollTopBottom.js.map","hash":"76a041bbbd0d49426322c4fc1ee05bf327ffb7bd","modified":1746717051466},{"_id":"node_modules/hexo-theme-redefine/source/js/build/tools/tocToggle.js.map","hash":"6fd262220a32c784f194d21c7e514f21122bde2f","modified":1746717051470},{"_id":"node_modules/hexo-theme-redefine/source/js/build/tools/tocToggle.js","hash":"978bc1a31f8026ac9522198bca3c892ebf3551bc","modified":1746717051242},{"_id":"node_modules/hexo-theme-redefine/source/js/build/libs/SwupScriptsPlugin.min.js","hash":"b17f3434035f1339d6f9cd5c8a055d2a1b6602e9","modified":1746717051231},{"_id":"node_modules/hexo-theme-redefine/source/js/build/libs/SwupPreloadPlugin.min.js","hash":"d911512891ecbe1935203bcd3d93427ad75e45c8","modified":1746717051226},{"_id":"node_modules/hexo-theme-redefine/source/js/build/libs/Swup.min.js","hash":"cc054d34e74a1feecfae75064f6a4d6107607396","modified":1746717051222},{"_id":"node_modules/hexo-theme-redefine/source/js/build/libs/SwupSlideTheme.min.js","hash":"e9d143780e879d958164b1356b7f918ec25e838a","modified":1746717051234},{"_id":"node_modules/hexo-theme-redefine/source/js/build/libs/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1746717050966},{"_id":"node_modules/hexo-theme-redefine/source/js/build/libs/SwupScrollPlugin.min.js","hash":"6c3afca9bb98f79d14516c093f27e3e50a3fd82e","modified":1746717051232},{"_id":"node_modules/hexo-theme-redefine/source/js/build/libs/Typed.min.js","hash":"e8ce2b674a637b0c0396a3106c1aedf10186249c","modified":1746717051243},{"_id":"node_modules/hexo-theme-redefine/source/js/build/libs/SwupProgressPlugin.min.js","hash":"fd30fe1c43072017f67bbaac18b962a5ac218711","modified":1746717051227},{"_id":"node_modules/hexo-theme-redefine/source/js/build/libs/minimasonry.min.js","hash":"9681cc509cb8aa733d36aad032e6e8acdb33c08c","modified":1746717051183},{"_id":"node_modules/hexo-theme-redefine/source/js/build/libs/odometer.min.js","hash":"fe5beb60997c84ab2f91b54535c4221443cdd21f","modified":1746717051212},{"_id":"node_modules/hexo-theme-redefine/source/js/build/libs/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1746717050945},{"_id":"node_modules/hexo-theme-redefine/source/js/build/libs/pjax.min.js","hash":"3d796e5be9cdd4067c94e190ea2482d7fdb4856c","modified":1746717051216},{"_id":"node_modules/hexo-theme-redefine/source/js/build/libs/moment.min.js","hash":"20bd76acf8e950e5cf7243f60e1192705dacca7d","modified":1746717051207},{"_id":"node_modules/hexo-theme-redefine/source/js/build/libs/pangu.min.js","hash":"ebc25ecdbf464407c5886f024d13f1f6da51ec85","modified":1746717051214},{"_id":"node_modules/hexo-theme-redefine/source/js/build/layouts/bookmarkNav.js","hash":"a92d80fb49180a2700e069451c3ee9fde3f7cde0","modified":1746717050974},{"_id":"node_modules/hexo-theme-redefine/source/js/build/layouts/categoryList.js","hash":"cd8e7825b6dce79cac97e6047f9a80f0fb893213","modified":1746717050982},{"_id":"node_modules/hexo-theme-redefine/source/js/build/layouts/bookmarkNav.js.map","hash":"ba215231cccf6495570205bf974a83142592a22b","modified":1746717051255},{"_id":"node_modules/hexo-theme-redefine/source/js/build/layouts/essays.js","hash":"fbd5599508c60dc20fa90a9f37db27770e3773d5","modified":1746717050991},{"_id":"node_modules/hexo-theme-redefine/source/js/build/layouts/categoryList.js.map","hash":"fb9f8f83a1d0510eaa510fe58891de555d4839a8","modified":1746717051256},{"_id":"node_modules/hexo-theme-redefine/source/js/build/layouts/essays.js.map","hash":"60c58a3fc229cd497ad782e6f2b642e6be600e4c","modified":1746717051259},{"_id":"node_modules/hexo-theme-redefine/source/js/build/plugins/pangu.js.map","hash":"27d5318b81541274c3026e4892ee43ba2c410951","modified":1746717051466},{"_id":"node_modules/hexo-theme-redefine/source/js/build/plugins/pangu.js","hash":"e96959eb39ca702242aca08c75f2230aa1bda7e4","modified":1746717051214},{"_id":"node_modules/hexo-theme-redefine/source/js/build/tools/localSearch.js.map","hash":"86630e1b406ad10fe0450ccc49fbf07154fab9e5","modified":1746717051261},{"_id":"node_modules/hexo-theme-redefine/source/js/build/layouts/lazyload.js.map","hash":"d365d984dfa37411397b36c69e24e4d5d0b32bee","modified":1746717051261},{"_id":"node_modules/hexo-theme-redefine/source/js/build/layouts/lazyload.js","hash":"eacb006bd852a3c9881438b75d45e72d87914ad7","modified":1746717051003},{"_id":"node_modules/hexo-theme-redefine/source/js/build/layouts/navbarShrink.js.map","hash":"275dbb4ded89c2d2d805edbbf678475139bcc442","modified":1746717051465},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/comments/gitalk.styl","hash":"85f26189ec6dee13a0a743687e7b5391f170c33f","modified":1746717051495},{"_id":"node_modules/hexo-theme-redefine/source/js/build/layouts/toc.js","hash":"892929c5bb2293804f4c5f911dd901969f08ef67","modified":1746717051241},{"_id":"node_modules/hexo-theme-redefine/source/js/build/layouts/toc.js.map","hash":"9a413e8dbc2ff2a6fc21eb2899e59d5af75942a3","modified":1746717051470},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/comments/twikoo.styl","hash":"448cbc045bcffa2d666094b81dd99eb980676fff","modified":1746717051502},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/comments/comment.styl","hash":"71529ec72f356c78f75a752e5400c1197aa5ea96","modified":1746717051495},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/light/atom-one-light.styl","hash":"99de67d507bd6ffed5993097a6ce2be6422480b1","modified":1746717051492},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/comments/waline.styl","hash":"0663e8e50eff65afb4dbcbc7c4758d8acdd1d368","modified":1746717051503},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/light/github.styl","hash":"a2a15ed938b319c369569845bf35d00c6624d136","modified":1746717051496},{"_id":"node_modules/hexo-theme-redefine/source/js/build/layouts/navbarShrink.js","hash":"181c0c7e45f0c3a099d272b7c531559cd0d4fdbf","modified":1746717051209},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/dark/a11y-dark.styl","hash":"457e0df301f4dc1cc96371e65173b94bec0161fe","modified":1746717051488},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/light/default.styl","hash":"c2b8d16ba4dffdd3bae4db4f817bc18cdd7c1d60","modified":1746717051495},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/dark/atom-one-dark.styl","hash":"8802725310cf86c4a179d874072188f31d10b224","modified":1746717051491},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/dark/night-owl.styl","hash":"07c331a0c45051e93d24e10688425f1e30f0e99f","modified":1746717051499},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/dark/nord.styl","hash":"9b88c9e8bca2b8995fdc71519c01a9c80121161c","modified":1746717051499},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/dark/agate.styl","hash":"a33ce49622c788e5d8bba32573e0b701e4cb7ead","modified":1746717051488},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/dark/monokai-sublime.styl","hash":"803773d8c6dd5ecf957596ca57584a6618f373ac","modified":1746717051498},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/dark/tokyo-night-dark.styl","hash":"2ae8e43a87b18bb899ac9c802d3774232160b8e7","modified":1746717051502},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/dark/vs2015.styl","hash":"c54d91bf767efe0671c4dfbe874fac678cfde117","modified":1746717051502},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/dark/github-dark.styl","hash":"fab5f7f62407b66f8b5f2837b178ef5b09a4badc","modified":1746717051496},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-brands-400.woff2","hash":"a358912d781e6249a8d291e4ce9ebd0a9ab9452e","modified":1746717051569},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Geist/GeistVF.woff","hash":"d06c767b3837999a8b98426e4eb16ca0a8080880","modified":1746717051566},{"_id":"node_modules/hexo-theme-redefine/source/fonts/GeistMono/GeistMonoVF.ttf","hash":"d72ec9d729305fc24f38e1ba69174e93b700cd69","modified":1746717051562},{"_id":"node_modules/hexo-theme-redefine/source/fonts/GeistMono/GeistMonoVF.woff","hash":"fd8c986a8767d59a36e2d194299466720c916ee2","modified":1746717051565},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Geist/GeistVF.ttf","hash":"9a531509e4e768e9102d11f5d7d293e3f04d9c64","modified":1746717051562},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/Swup.min.js.map","hash":"f74755d9318a86939791027767f631472b876207","modified":1746717051467},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/fontawesome.min.css","hash":"44e6d666b45a6875e4fce11159876129e7a1cceb","modified":1746717050551},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-brands-400.ttf","hash":"ba9322d66c19f635e15e458cc39fcb509818332f","modified":1746717051508},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Chillax/Chillax-Variable.eot","hash":"50a4e2ab17155fe7449e0ee488a6242180f3b256","modified":1746717050936},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Chillax/Chillax-Variable.ttf","hash":"01aafadc0ca4ace59127a5594a8f534e83b84879","modified":1746717051506},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/APlayer.min.js.map","hash":"31a19da0f0cb6b00ec212eafa847f31af86788df","modified":1746717051255},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/waline.mjs","hash":"d94e0f396776a003b603d6e90a732a548c2fda33","modified":1746717051486},{"_id":"source/img/社会心理学.png","hash":"c9c128c4eec5c43793b46f64bbe65c4c3e248913","modified":1746705359527},{"_id":"source/img/2025-01-18-17-06-50.png","hash":"876ab15e17ea9dcea496b762bca7caf19c89fdec","modified":1746705359458},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-sharp-solid-900.woff2","hash":"74d0af1108ab8157993ca03cef80e89e35e2408d","modified":1746717051582},{"_id":"source/img/倦鸟.png","hash":"3d1326ddaa360899150a6857a8c96b50ea6c5e80","modified":1746705359492},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/duotone.min.css","hash":"0becc4b085bd9d377a8ff4b5160f8e19c8ec27a0","modified":1746717050513},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-solid-900.woff2","hash":"e73d164db2aff2c91d18c07da03e8db9d0c5dfd4","modified":1746717051583},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/moment-with-locales.min.js","hash":"dd1c67b36c800c00b7901f17af6200b26f2bb42c","modified":1746717051206},{"_id":"node_modules/hexo-theme-redefine/source/js/build/libs/moment-with-locales.min.js","hash":"dd1c67b36c800c00b7901f17af6200b26f2bb42c","modified":1746717051194},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-duotone-900.woff2","hash":"2cc24434345b80a844a6bda1139539fe41e4df53","modified":1746717051573},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-light-300.woff2","hash":"def760895375328ccdcf62b2b9b9001a21947acd","modified":1746717051577},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-regular-400.woff2","hash":"486fed640153de1de84f460834c73daef060ed20","modified":1746717051580},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/all.min.css","hash":"630bf0e29410ec27622f65d1270c6bc435cdff21","modified":1746717050369},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-thin-100.woff2","hash":"e0a4482c20f6b67784df54965539a317a3bd681b","modified":1746717051586},{"_id":"source/img/Aniya.png","hash":"97b6ac6164cda9614d8a8abdcc1eb78c3bb38f41","modified":1746705359553},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-sharp-solid-900.ttf","hash":"0d710cd7bd1b7ff574e88bb812de82babe45e415","modified":1746717051541},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-solid-900.ttf","hash":"40b536c3667547db70ee9ca6f3c94fbc33e0cab7","modified":1746717051549},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-regular-400.ttf","hash":"cdec068700dc440530e5bbeff7e8bb33a01b4132","modified":1746717051535},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/waline.mjs.map","hash":"37c5b3e6aa5e1b70358426345a1a1329d6b896d3","modified":1746717051481},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-light-300.ttf","hash":"cc5d9f4f994c82e23f58cdde1eec8792d81633c7","modified":1746717051524},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-thin-100.ttf","hash":"c1fee6e6986b14533ce022afada5fbe10c0f6562","modified":1746717051560},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-duotone-900.ttf","hash":"e0313a772ea710cb5ea4bd08f5dedb0a0025f8ca","modified":1746717051515},{"_id":"source/img/crypt_index.png","hash":"cbdb5c4cf5938dfb15001186a76e20e25e498122","modified":1746705359570},{"_id":"source/img/sun.png","hash":"fea6d5ddff389d6bc7e3cfb0ef1f8d768fdaf202","modified":1746705359609},{"_id":"source/img/db_index.png","hash":"a93dad5a557fbb0869d1570638b4d2aa00474ec8","modified":1746705359576},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/mermaid.min.js","hash":"22eeb45e4dfff78a42bc8dad60d3a8ff64968a9d","modified":1746717051180},{"_id":"node_modules/hexo-theme-redefine/source/js/build/libs/mermaid.min.js","hash":"22eeb45e4dfff78a42bc8dad60d3a8ff64968a9d","modified":1746717051095},{"_id":"source/img/bgImg.png","hash":"8869c9029beef9c1240289e9fefc394972af5f64","modified":1746705359560},{"_id":"source/img/edit.gif","hash":"c546bb91850e8fb3161ac8ac31f5865ae68c40cf","modified":1746718565719},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/mermaid.min.js.map","hash":"2e1a632f0588c4370188887d79a10ff8b38a49b5","modified":1746717051465},{"_id":"source/fonts/LXGWWenKaiGBScreen.ttf","hash":"e2139681d643e07e2ffb498fa3d656f6cba75afa","modified":1746706150824},{"_id":"public/images/loading.svg","hash":"bf706065d7dde8aa0f1a0d6ae630721af9af89fe","modified":1750835436872},{"_id":"public/images/bookmark-placeholder.svg","hash":"8dbd8487373356e9cc5d09571b952cf8368d1317","modified":1750835436872},{"_id":"public/images/redefine-avatar.svg","hash":"b7372737ef385d1c4b682f0a16f5b936ecda73ce","modified":1750835436872},{"_id":"public/images/redefine-favicon.svg","hash":"ebf386ccd6c3f5258c376726b5eb1576e2eea094","modified":1750835436872},{"_id":"public/images/redefine-logo.svg","hash":"67bc859e9eb69d5d17bf9ab483e85bad33f788c6","modified":1750835436872},{"_id":"public/img/2025-01-16-23-58-21.png","hash":"a1484fcddfc4c973356c9b757c5a44cbb5d5f70a","modified":1750835436872},{"_id":"public/img/2025-01-17-14-00-36.png","hash":"fa1f15762243090fe59b8f9693fd295907f776c7","modified":1750835436872},{"_id":"public/img/2025-01-18-11-41-54.png","hash":"c20935f28e365fc19832989fcd4efee694ab9dce","modified":1750835436872},{"_id":"public/img/2025-01-18-11-45-41.png","hash":"76676d625e6aef57d1b96fb9b25739b08b5a5446","modified":1750835436872},{"_id":"public/img/2025-01-18-13-01-29.png","hash":"1d180ff12a2ea2fb2b39aa087c387257571bf4d0","modified":1750835436872},{"_id":"public/img/2025-01-18-13-03-21.png","hash":"02da0bae22d8a025f871d1f748f024db5d84887a","modified":1750835436872},{"_id":"public/img/2025-01-18-13-09-11.png","hash":"a3a8dfdc12520ec6a3fa7b0b63bff4c733ac3763","modified":1750835436872},{"_id":"public/img/2025-01-18-13-15-38.png","hash":"6d2e427db2a368fef6441afcf48a7cb5fcac7391","modified":1750835436872},{"_id":"public/img/2025-01-18-13-23-22.png","hash":"cd9e9ddffd0fdd178d53172ef7a4b7d6d08b35c6","modified":1750835436872},{"_id":"public/img/2025-01-18-17-06-50.png","hash":"9712e65ffdc1232838eecb4bd10b2c01a989237a","modified":1750835436872},{"_id":"public/img/2025-01-18-17-11-36.png","hash":"748f4b32324e7ec298016147e9d771f63001ad6e","modified":1750835436872},{"_id":"public/img/2025-01-18-17-13-45.png","hash":"bb71f21b60054377283411280d7ffee28b5eae83","modified":1750835436872},{"_id":"public/img/2025-01-18-17-14-29.png","hash":"3568ddd2ea02b93788c51a9e249fe692ec5a58f2","modified":1750835436872},{"_id":"public/img/Aniya.png","hash":"898c4452a910f527375c67a10d1a3f377ec8f7ac","modified":1750835436872},{"_id":"public/img/2025-01-18-12-58-38.png","hash":"1ac96b7a37a7c3034448480dd726823e13e549ae","modified":1750835436872},{"_id":"public/img/JS.png","hash":"1202fcc6f984ca3f31b0f027976b403e07a43c47","modified":1750835436872},{"_id":"public/img/Aniya_放大镜.jpg","hash":"bcb89db401c51d2aff057d4bbe55c1c36fd6e11e","modified":1750835436872},{"_id":"public/img/bgImg.png","hash":"853a1a17cc0e1ecb7ad7065204aa0d4efbf223bb","modified":1750835436872},{"_id":"public/img/crypt_index.png","hash":"3df118ed9f7da481072b79edd5315e1e858de76c","modified":1750835436872},{"_id":"public/img/db_index.png","hash":"2d7ed694038925f3059b6e4d7964e2f3814229f3","modified":1750835436872},{"_id":"public/img/edit.gif","hash":"c72b09f6427c5b6383fc9c03164ee2ac2192193a","modified":1750835436872},{"_id":"public/img/find-2025-01-22-11-58-20.png","hash":"2d66493ac85e8fa534fcb4d362d38145607aded8","modified":1750835436872},{"_id":"public/img/great.jpg","hash":"19fa8be5411441a05f29d6149bc694d7088ece20","modified":1750835436872},{"_id":"public/img/legend-2025-01-21-21-19-51.png","hash":"e8c2ebeefd88d33e6d7e6eb4edac6aa93fe84cbf","modified":1750835436872},{"_id":"public/img/me.jpg","hash":"49fdc734da7ec4e457b3b7925a2e84aded7e482c","modified":1750835436872},{"_id":"public/img/avatar.svg","hash":"3272fb280959030c74c773f79d709ec5595c1854","modified":1750835436872},{"_id":"public/img/re0-2025-01-18-17-40-27.png","hash":"61c8123dc01e5756ea654fd50aa68afb2ca2d863","modified":1750835436872},{"_id":"public/img/re0-2025-01-18-17-16-53.png","hash":"3568ddd2ea02b93788c51a9e249fe692ec5a58f2","modified":1750835436872},{"_id":"public/img/sun.png","hash":"28a3b67ac9be3c5606c7b0e93ebeb486264856f9","modified":1750835436872},{"_id":"public/img/不死鸟.jpg","hash":"e7ac92252cc8b13b50613f6a4bf040e3826a6cd5","modified":1750835436872},{"_id":"public/img/哭哭帕克.jpg","hash":"e0cd0cb3138ca8e9b5b50ec0b5d28cf68f96fb74","modified":1750835436872},{"_id":"public/img/倦鸟.png","hash":"97917f1010037f9b76d6458425d5842037834c58","modified":1750835436872},{"_id":"public/img/料理的加护.jpg","hash":"116cadb19d93c1177ef6fe38482701238d3165b3","modified":1750835436872},{"_id":"public/img/晚霞.jpg","hash":"1f8995ae183708e550a9463f2f3b7036e3af7bdb","modified":1750835436872},{"_id":"public/img/校长帕克.jpg","hash":"7a7c0b8d3ba7917b9618b8741d47999b7c662bcb","modified":1750835436872},{"_id":"public/img/猫猫-2025-01-20-22-47-27.png","hash":"9672eeb0bc86052b42d4496b2b95c7424af2a146","modified":1750835436872},{"_id":"public/img/照镜子.jpg","hash":"668e8aee979835b8c43f824bf846fc2722b71062","modified":1750835436872},{"_id":"public/img/社会心理学.png","hash":"ee0cd15dc6687bba693d84a685f07e5a453a24d6","modified":1750835436872},{"_id":"public/img/跨域共享.jpg","hash":"05abb82e8eacf485f8f020186350f8bff45764b6","modified":1750835436872},{"_id":"public/img/闪光拉姆.jpg","hash":"42a4fa0d298afe675c125b947e7145253d64d643","modified":1750835436872},{"_id":"public/img/闪耀pack.jpg","hash":"961fa103ea243a3853678bb61553f77281ffaf94","modified":1750835436872},{"_id":"public/img/雪国.jpg","hash":"01aecae91c130b6f669f22001bd428795342b4bb","modified":1750835436872},{"_id":"public/img/雷姆拉姆.jpg","hash":"2517a3a26e7f008d8ab3e03025c14d8edda9ba1f","modified":1750835436872},{"_id":"public/fonts/custom-fonts.css","hash":"bf61a6965982d5d40843d9346755b8fdbacab6ce","modified":1750835436872},{"_id":"public/css/custom.css","hash":"b99cb2c98196264da2b7c77ae7fc6b03da8a6a8e","modified":1750835436872},{"_id":"public/search.json","hash":"01d474e8b7803d6ce1ae1c444842dd716f01937a","modified":1750835436872},{"_id":"public/masonry/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1750835436872},{"_id":"public/404.html","hash":"819932c78e7d2defd453c0da9a61e8561374363a","modified":1750835436872},{"_id":"public/essays/index.html","hash":"6a6c15b5869fbdd9f4c8e25374c5fdc361d72e17","modified":1750835436872},{"_id":"public/categories/index.html","hash":"a04c05a0af695cd748986d426a1987612436373f","modified":1750835436872},{"_id":"public/links/index.html","hash":"39f92e3336a281345c698ea38e6c5b0556993c68","modified":1750835436872},{"_id":"public/tags/index.html","hash":"57e1418fa2fb9312cd2c637f279040f8f97c6a04","modified":1750835436872},{"_id":"public/2025/06/25/课程笔记/密码学复习/index.html","hash":"7843467040c2d5c6243aa3ff9e4a3872e8554f9f","modified":1750835436872},{"_id":"public/2025/06/21/课程笔记/arch复习/index.html","hash":"0265b703624b1bd693c13410cebc2e4415d0db78","modified":1750835436872},{"_id":"public/2025/06/21/课程笔记/数据库复习/index.html","hash":"481123ba550b248488156e7fc18d0e85ff26302b","modified":1750835436872},{"_id":"public/2025/06/21/课程笔记/oop复习笔记/index.html","hash":"450cf7c93bfd5f5860f34bacf4e76adcac472f2c","modified":1750835436872},{"_id":"public/2025/05/17/MAIC/index.html","hash":"54f44b9f5cb5f7cef81bd7e6a9c4bd3611a86158","modified":1750835436872},{"_id":"public/2025/05/08/chatSQL/index.html","hash":"34f24ac945e4cefbb3d9aa4295edf7a8528fb1f1","modified":1750835436872},{"_id":"public/2025/04/28/Prisma/index.html","hash":"9b137fb98b2567f5b32b583cfed8e27e4ea909b9","modified":1750835436872},{"_id":"public/2025/04/17/编程语言/swift/index.html","hash":"c7d71545524c42a573894a222f1a742d1f9f3611","modified":1750835436872},{"_id":"public/2025/02/16/前后端/跨组件渲染/index.html","hash":"68f6b8c6b0ea45aef3a077776963ac26d82b89b1","modified":1750835436872},{"_id":"public/2025/02/12/其他/makefile/index.html","hash":"27a5aca9f4d35727b3214b1fd3d3e3000ee7232d","modified":1750835436872},{"_id":"public/2025/01/23/其他/themechange/index.html","hash":"18dcb2a4af1b3d8e443273c70c4cc3f576e1e943","modified":1750835436872},{"_id":"public/2025/01/20/前后端/响应式设计/index.html","hash":"69a0e5f08a95820b79414203df9d2d57573fe7f8","modified":1750835436872},{"_id":"public/2025/01/18/其他/认证配置/index.html","hash":"9611c694e79941d91647ba2625bd994c5c276481","modified":1750835436872},{"_id":"public/2025/01/17/其他/Tmux/index.html","hash":"55f1c2916b940668500882f3e508dec5c4219445","modified":1750835436872},{"_id":"public/2025/01/17/其他/SSH隧道/index.html","hash":"1c4b9da7d929dc2f33acc5e69441c2077b8dbe79","modified":1750835436872},{"_id":"public/2025/01/16/前后端/CORS/index.html","hash":"5c746b108f6110cfeff71fb86626e2ad61537396","modified":1750835436872},{"_id":"public/2025/01/15/其他/pip-tools/index.html","hash":"7ce1a7041059ce399b58a7dfe174afe299eb0a8c","modified":1750835436872},{"_id":"public/2025/01/09/poets/晚霞/index.html","hash":"3704320f0fe2435f260677e4fb7b8330efab5ed7","modified":1750835436872},{"_id":"public/2025/01/09/编程语言/JavaScript/index.html","hash":"7148ed50a470ec0c43f802c59b0f4298826d8bba","modified":1750835436872},{"_id":"public/2025/01/08/其他/媒体查询/index.html","hash":"61fffd8dbeaf98556627fc59f81619ca7e0e6d37","modified":1750835436872},{"_id":"public/2025/01/08/编程语言/css笔记/index.html","hash":"29445785318f022e33d78eee3a00be2c56e38230","modified":1750835436872},{"_id":"public/2025/01/08/poets/bird/index.html","hash":"3c22197f51d035f1aa74844615c693a91f1fe5a6","modified":1750835436872},{"_id":"public/archives/index.html","hash":"f33044813888691b42444a5dcac355d9b27f00a0","modified":1750835436872},{"_id":"public/archives/page/2/index.html","hash":"125e7f1fa2bba74e4c6af18a750981578d6dd512","modified":1750835436872},{"_id":"public/archives/page/3/index.html","hash":"147f254b3ef7743a43f8211c79206be599ad0636","modified":1750835436872},{"_id":"public/archives/2025/index.html","hash":"42e4508f72a70fb0725af1c66bdfabf87ddf7676","modified":1750835436872},{"_id":"public/archives/2025/page/2/index.html","hash":"f4bba8e693b7227c66e63ce688270d133271351c","modified":1750835436872},{"_id":"public/archives/2025/page/3/index.html","hash":"f549ceccb34b2ed2865aa1284d7a6174bd76bef4","modified":1750835436872},{"_id":"public/archives/2025/01/index.html","hash":"174ee5183f710bfdccec6c643c534af1e7b34223","modified":1750835436872},{"_id":"public/archives/2025/01/page/2/index.html","hash":"20c366368677762bbe227cd41aabd35752c435b1","modified":1750835436872},{"_id":"public/archives/2025/02/index.html","hash":"47ea718dc31143f9140c51d74bd7ca6f7a22cc2f","modified":1750835436872},{"_id":"public/archives/2025/04/index.html","hash":"5b6e95b66f51295ec65c49cb34811e5cb83f1e73","modified":1750835436872},{"_id":"public/archives/2025/05/index.html","hash":"98360b0c660ba1abcad0b94e05a3fdf9d001792b","modified":1750835436872},{"_id":"public/archives/2025/06/index.html","hash":"4d16e983146f2c9f2fe12b295b94c39682b41c60","modified":1750835436872},{"_id":"public/categories/开发记录/index.html","hash":"9c576b3b3e3893ca0b460c763fa4c4aff6c69ddb","modified":1750835436872},{"_id":"public/categories/前后端开发/index.html","hash":"d166b8ad5e20898fdf203868ec762d6f230b6b96","modified":1750835436872},{"_id":"public/categories/通用技能/index.html","hash":"fbcc6557c3f4d85dc05dd199562497f25ddcf1e7","modified":1750835436872},{"_id":"public/categories/学习笔记/index.html","hash":"661f89cc8d083cd8c25b1e0e3653a05bc518e80e","modified":1750835436872},{"_id":"public/categories/随机掉落的文字碎片/index.html","hash":"67dfffd6817c72827b492ee2228ea3d79fca58bb","modified":1750835436872},{"_id":"public/categories/课程笔记/index.html","hash":"2f56bb3bfa10f0923689a8a860748ebd1e18b34b","modified":1750835436872},{"_id":"public/tags/swift/index.html","hash":"a4769e435059747920f3cdaaef26cf7159e682a8","modified":1750835436872},{"_id":"public/tags/数据库/index.html","hash":"91cc46b5d4490b75118754c7937068205994d565","modified":1750835436872},{"_id":"public/tags/奇思妙想/index.html","hash":"6cf36e85d1bd3caf18be4c637978c134905a57b6","modified":1750835436872},{"_id":"public/tags/ssh/index.html","hash":"7f982401332e7b0d88cc7a7436f5068659e9f84a","modified":1750835436872},{"_id":"public/tags/服务器/index.html","hash":"48334f65fea2993d532df83bc7523ffc7ff19cee","modified":1750835436872},{"_id":"public/tags/多会话管理/index.html","hash":"4504a94bea10ff18ef8e65a57925d9876e8980e7","modified":1750835436872},{"_id":"public/tags/python/index.html","hash":"6eb9597cc5c8b8d63616a5e9b22628c57bc50bdd","modified":1750835436872},{"_id":"public/tags/环境配置/index.html","hash":"1bc3296c09b5c762799433dbd37e7b45a556c734","modified":1750835436872},{"_id":"public/tags/前端/index.html","hash":"750a56f1cdfb6ba38bc4a72ec3013fdb2e5caf30","modified":1750835436872},{"_id":"public/tags/CSS/index.html","hash":"55d029dcdc6dc6f9b59fbda02cf5fde623a29a31","modified":1750835436872},{"_id":"public/tags/PAT/index.html","hash":"de81c3ca1093bef0f1c6d78bc4fc9d0384c431f9","modified":1750835436872},{"_id":"public/tags/JS/index.html","hash":"c797780dc706aca6e4a7f254591192273c2e0f48","modified":1750835436872},{"_id":"public/tags/短诗/index.html","hash":"d4265d827a4a4fcfeba4f5ab7487318789e71ab0","modified":1750835436872},{"_id":"public/tags/自然/index.html","hash":"8ddbdefb33e131374be62270d479fe5c28769479","modified":1750835436872},{"_id":"public/tags/编程语言/index.html","hash":"8e0fdf1f9bd0a48265b8792732517ee492ab46cf","modified":1750835436872},{"_id":"public/tags/杂记/index.html","hash":"88757aed96dbcc6f3d69a6d2764dd783841fbb9c","modified":1750835436872},{"_id":"public/tags/前后端交互/index.html","hash":"2c8fd44b0ad30b76b2889f8e35db1be005b31e82","modified":1750835436872},{"_id":"public/tags/网站开发/index.html","hash":"12c16ee37dc8b4baa7c41024521f1be50c8bc841","modified":1750835436872},{"_id":"public/tags/面向对象编程/index.html","hash":"9f0ef3643db04f60d6b0492203fa712f11222464","modified":1750835436872},{"_id":"public/tags/CS课程/index.html","hash":"2304dd8fde56996569e040ee025b8e11d1caf460","modified":1750835436872},{"_id":"public/tags/信息安全/index.html","hash":"e29ca7f6d3a0096da9705d329576a658bc7b4aca","modified":1750835436872},{"_id":"public/tags/sql/index.html","hash":"8ffbb8e3151012a879f08c6f44feddc13de00c09","modified":1750835436872},{"_id":"public/tags/计算机系统/index.html","hash":"35c634a9cbaac4abca10b21064ade6bfa7308764","modified":1750835436872},{"_id":"public/index.html","hash":"2f68d3d8e666ccd6d2d82aa555249f7ea78a14d9","modified":1750835436872},{"_id":"public/page/2/index.html","hash":"ae1d30134fa58e284a227ab58cf864565c3698c7","modified":1750835436872},{"_id":"public/page/3/index.html","hash":"7458164c875720e9f9f6638ec3f7f12b0e959c27","modified":1750835436872},{"_id":"public/images/redefine-logo.webp","hash":"0a07e3fb6d9125dee44798c8c110187b16fb42a9","modified":1750835436872},{"_id":"public/images/wallhaven-wqery6-dark.webp","hash":"d0066e0b025ae748448a3d6a96165d45a55d2f22","modified":1750835436872},{"_id":"public/images/redefine-og.webp","hash":"44fb793383da185808ed682d7dd916e10eb65b4d","modified":1750835436872},{"_id":"public/images/wallhaven-wqery6-light.webp","hash":"d25389973d0359b78f1e9c74a850ef425690ba40","modified":1750835436872},{"_id":"public/webfonts/fa-v4compatibility.woff2","hash":"d02b1adc81fd5bec023e25a7770779b99d6dd742","modified":1750835436872},{"_id":"public/webfonts/fa-v4compatibility.ttf","hash":"b54531dd09c5089eb93b12ce8f90ff521855ff8a","modified":1750835436872},{"_id":"public/fonts/Chillax/Chillax-Variable.woff2","hash":"fc5d99b40db9deca7d151f9bd16b96ff160828b7","modified":1750835436872},{"_id":"public/fonts/Chillax/Chillax-Variable.woff","hash":"fc0e791429c274c4c9312d810e7ae9503cab34ab","modified":1750835436872},{"_id":"public/fonts/GeistMono/GeistMonoVF.woff2","hash":"11e9a061ce255fc4cc45ac3eeb8cab09a49f5ccc","modified":1750835436872},{"_id":"public/fonts/Geist/GeistVF.woff2","hash":"772998a8569a6caa04927d876fbe9e0fb859658b","modified":1750835436872},{"_id":"public/js/build/main.js.map","hash":"b089351e96e8f99395ac9b44aea257364a475dca","modified":1750835436872},{"_id":"public/js/build/utils.js.map","hash":"d9a1eed23a96de49c30ebccb52620e24204ea10e","modified":1750835436872},{"_id":"public/js/libs/SwupPreloadPlugin.min.js.map","hash":"40513fec1323b601667876a97a9ef8a0c88bff63","modified":1750835436872},{"_id":"public/js/libs/SwupScrollPlugin.min.js.map","hash":"63cf04ba556b256379e103ef7d3ba12d629449a4","modified":1750835436872},{"_id":"public/js/build/plugins/aplayer.js.map","hash":"daefe65fb99e2f7699f3fd25ec90b7f38469da5d","modified":1750835436872},{"_id":"public/js/build/plugins/mermaid.js.map","hash":"5a8b4e15316517af607d3c12cf4a6e3447cfec22","modified":1750835436872},{"_id":"public/js/build/plugins/hbe.js.map","hash":"53deed7e9b802b964ff90d3303f957238f2b1421","modified":1750835436872},{"_id":"public/js/build/plugins/pangu.js.map","hash":"27d5318b81541274c3026e4892ee43ba2c410951","modified":1750835436872},{"_id":"public/js/build/plugins/typed.js.map","hash":"4840c94f7639cee4615916ce2cabd172a565a71c","modified":1750835436872},{"_id":"public/js/build/plugins/masonry.js.map","hash":"b2d93754a64f84ef67528d320de69561fc763525","modified":1750835436872},{"_id":"public/js/build/tools/imageViewer.js.map","hash":"6bf89edc74bc48b0e6f616d1ac0b0bb52df09353","modified":1750835436872},{"_id":"public/js/build/plugins/tabs.js.map","hash":"218abee3893ecdee6f6c633b9fd13520a4eefabf","modified":1750835436872},{"_id":"public/js/build/tools/runtime.js.map","hash":"43ed778e985cbf71e7d62c5960da98a431ad43e3","modified":1750835436872},{"_id":"public/js/build/tools/localSearch.js.map","hash":"86630e1b406ad10fe0450ccc49fbf07154fab9e5","modified":1750835436872},{"_id":"public/js/build/tools/scrollTopBottom.js.map","hash":"76a041bbbd0d49426322c4fc1ee05bf327ffb7bd","modified":1750835436872},{"_id":"public/js/build/tools/codeBlock.js.map","hash":"fe609e1f8c1d028eca5e131b6a98cd71547be39c","modified":1750835436872},{"_id":"public/js/build/tools/lightDarkSwitch.js.map","hash":"0fd195af186727b3b6f8a7d29035f35f7375e5a1","modified":1750835436872},{"_id":"public/js/build/layouts/bookmarkNav.js.map","hash":"ba215231cccf6495570205bf974a83142592a22b","modified":1750835436872},{"_id":"public/js/build/layouts/essays.js.map","hash":"60c58a3fc229cd497ad782e6f2b642e6be600e4c","modified":1750835436872},{"_id":"public/js/build/tools/tocToggle.js.map","hash":"6fd262220a32c784f194d21c7e514f21122bde2f","modified":1750835436872},{"_id":"public/js/build/layouts/categoryList.js.map","hash":"fb9f8f83a1d0510eaa510fe58891de555d4839a8","modified":1750835436872},{"_id":"public/js/build/layouts/navbarShrink.js.map","hash":"275dbb4ded89c2d2d805edbbf678475139bcc442","modified":1750835436872},{"_id":"public/js/build/layouts/lazyload.js.map","hash":"d365d984dfa37411397b36c69e24e4d5d0b32bee","modified":1750835436872},{"_id":"public/js/build/layouts/toc.js.map","hash":"9a413e8dbc2ff2a6fc21eb2899e59d5af75942a3","modified":1750835436872},{"_id":"public/css/hbe.style.css","hash":"29be8fc47be885e9954e310cbc68dfadd3b4cee6","modified":1750835436872},{"_id":"public/js/plugins/hbe.js","hash":"f7bd9258359dc8f70c6faec3f4fe22a1852d9bf1","modified":1750835436872},{"_id":"public/webfonts/fa-brands-400.woff2","hash":"a358912d781e6249a8d291e4ce9ebd0a9ab9452e","modified":1750835436872},{"_id":"public/fonts/Geist/GeistVF.ttf","hash":"9a531509e4e768e9102d11f5d7d293e3f04d9c64","modified":1750835436872},{"_id":"public/fonts/Geist/GeistVF.woff","hash":"d06c767b3837999a8b98426e4eb16ca0a8080880","modified":1750835436872},{"_id":"public/fonts/GeistMono/GeistMonoVF.woff","hash":"fd8c986a8767d59a36e2d194299466720c916ee2","modified":1750835436872},{"_id":"public/js/libs/Swup.min.js.map","hash":"f74755d9318a86939791027767f631472b876207","modified":1750835436872},{"_id":"public/fonts/GeistMono/GeistMonoVF.ttf","hash":"d72ec9d729305fc24f38e1ba69174e93b700cd69","modified":1750835436872},{"_id":"public/assets/hbe.style.css","hash":"28b943f1a7d6cd9fdeeff8a6f0a2560d1135c546","modified":1750835436872},{"_id":"public/assets/odometer-theme-minimal.css","hash":"c526d6574eeb0c56d560a2f44c806c0117de78fe","modified":1750835436872},{"_id":"public/fontawesome/brands.min.css","hash":"5119c35bbd273d2ea2501997827f6d644da93164","modified":1750835436872},{"_id":"public/fontawesome/duotone.min.css","hash":"0becc4b085bd9d377a8ff4b5160f8e19c8ec27a0","modified":1750835436872},{"_id":"public/fontawesome/all.min.css","hash":"630bf0e29410ec27622f65d1270c6bc435cdff21","modified":1750835436872},{"_id":"public/fontawesome/fontawesome.min.css","hash":"44e6d666b45a6875e4fce11159876129e7a1cceb","modified":1750835436872},{"_id":"public/fontawesome/sharp-solid.min.css","hash":"7d1a13c6b8178b29f5bcb1a639a1998fc9de16c4","modified":1750835436872},{"_id":"public/fontawesome/regular.min.css","hash":"d27c4fed54dacff688010e51f611d950dd6e0aca","modified":1750835436872},{"_id":"public/fontawesome/light.min.css","hash":"18a176eb2486db4e938e568083fa578b641ccc83","modified":1750835436872},{"_id":"public/fontawesome/solid.min.css","hash":"e727feabedb171fb0b398151870d7739ef4e2432","modified":1750835436872},{"_id":"public/fontawesome/svg-with-js.min.css","hash":"f4c08e37c4d44b3ed7a3f377d1cb5d7fca4d04bc","modified":1750835436872},{"_id":"public/fontawesome/thin.min.css","hash":"3d46be31379b07ffb24d69c6c915725eaa2e89e9","modified":1750835436872},{"_id":"public/fontawesome/v4-font-face.min.css","hash":"0be987628c8b485b39f064da41c90f15c0596c1f","modified":1750835436872},{"_id":"public/css/tailwind.source.css","hash":"9c91d96f19bde3601c56428663234243c08b4b1d","modified":1750835436872},{"_id":"public/css/style.css","hash":"6beedd9af23bfcec421e63c9a0e95f06938de1dd","modified":1750835436872},{"_id":"public/fontawesome/v5-font-face.min.css","hash":"260ea7a5e0b89963a5dcf2600a4decdf0f408f3f","modified":1750835436872},{"_id":"public/js/build.js","hash":"4da0fd42ebbbad3982b34bc92aba1e66494722c4","modified":1750835436872},{"_id":"public/js/main.js","hash":"5b60d27a70eb529f1253f9bac3eceab1e1e816fe","modified":1750835436872},{"_id":"public/fonts/Chillax/chillax.css","hash":"982f441fac58a402ed68727fee7b39974d1a806f","modified":1750835436872},{"_id":"public/fontawesome/v4-shims.min.css","hash":"96f037860b8e9b59af8e47571ea98791616dbfd8","modified":1750835436872},{"_id":"public/fonts/Geist/geist.css","hash":"c2130f828bff832e4dce0343d595b228c8893587","modified":1750835436872},{"_id":"public/css/common/basic.css","hash":"e5ffe531bffa10efd965ca9226517b5e89680be8","modified":1750835436872},{"_id":"public/css/common/colors.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1750835436872},{"_id":"public/js/utils.js","hash":"e1d9af60f15fb760b81ec148a30d479a27d20caa","modified":1750835436872},{"_id":"public/css/common/animated.css","hash":"4e2396fc57829f7a0fcbd02147a0d756a2f2c3d0","modified":1750835436872},{"_id":"public/css/common/theme.css","hash":"3e3d3c932d812f34b6110d5f6a6583b0d462a0ca","modified":1750835436872},{"_id":"public/css/common/markdown.css","hash":"458d407e898c46c595835448632c0f096995e9d3","modified":1750835436872},{"_id":"public/css/common/redefine-theme.css","hash":"b9211ac9cbb0eeb20fdf671487e418c85cf69180","modified":1750835436872},{"_id":"public/css/build/tailwind.css","hash":"29228d972363fdf1a629efbe8f893c9aa736adad","modified":1750835436872},{"_id":"public/css/layout/archive-content.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1750835436872},{"_id":"public/css/common/variables.css","hash":"3e3d3c932d812f34b6110d5f6a6583b0d462a0ca","modified":1750835436872},{"_id":"public/css/layout/article-content.css","hash":"930eceebb14de2222f174ef8c34f97d62b24c4d7","modified":1750835436872},{"_id":"public/fonts/GeistMono/geist-mono.css","hash":"18652fa4994d216f90b603b0f9b2619311fad9c3","modified":1750835436872},{"_id":"public/css/layout/animations.css","hash":"490558eeb4a7ad72d59e5be64289a9d6fbe9cd9d","modified":1750835436872},{"_id":"public/css/layout/bookmarks.css","hash":"e8366a67b3301fb83d075f8d5385c2c1e0827d08","modified":1750835436872},{"_id":"public/css/layout/category-content.css","hash":"b80266ec3171f3fd5bda9c4a73962f3a52c1c693","modified":1750835436872},{"_id":"public/css/layout/category-list.css","hash":"aef3de3a8e780634170ac329c1c6a46a75e9267d","modified":1750835436872},{"_id":"public/css/layout/home-content.css","hash":"8f0a70d03c60d72ba458f34ca229ebf331dab9db","modified":1750835436872},{"_id":"public/css/layout/home-sidebar.css","hash":"8632812934e6bb43f5c74289344c115a033e8007","modified":1750835436872},{"_id":"public/css/layout/tag-content.css","hash":"20c74f7cf15fd0ed01d547a97da6d9ecc7397766","modified":1750835436872},{"_id":"public/js/plugins/aplayer.js","hash":"f38a09ff34503680e61507bb41c9459618f637c8","modified":1750835436872},{"_id":"public/js/plugins/masonry.js","hash":"9eee0628bb3a059c05ae6a4c77be49f9225cc787","modified":1750835436872},{"_id":"public/js/plugins/mermaid.js","hash":"8a83ea6c83ec2990e65983326efa163cae3cd050","modified":1750835436872},{"_id":"public/js/plugins/typed.js","hash":"95bf14c33f999a52c9be0827fe3bbbd0d624574b","modified":1750835436872},{"_id":"public/css/layout/page.css","hash":"d607bf8608cb670da2a0960c43949baf5a69a870","modified":1750835436872},{"_id":"public/js/plugins/tabs.js","hash":"9c70405ef2b7d518692f95f16ce81e41513d39dc","modified":1750835436872},{"_id":"public/js/plugins/pangu.js","hash":"e4a9e57c9035f3a3cb2904f64839fda208bc2ed2","modified":1750835436872},{"_id":"public/js/tools/codeBlock.js","hash":"5581dc3d30fc5099717895a2ad3e7c19095476a5","modified":1750835436872},{"_id":"public/js/tools/imageViewer.js","hash":"f85a8cdcaf2130cf13eb06ce608c0ef8efc1aad2","modified":1750835436872},{"_id":"public/js/tools/lightDarkSwitch.js","hash":"97b7e68f871dc218fceca77b85ac051c7c6306af","modified":1750835436872},{"_id":"public/js/tools/localSearch.js","hash":"f6e59f65c676457198c2cf5d78bd06052499ee38","modified":1750835436872},{"_id":"public/js/tools/scrollTopBottom.js","hash":"947bbcc6cd0e77e3cf5b0b53e3aab333e5683b46","modified":1750835436872},{"_id":"public/js/tools/runtime.js","hash":"97462575894736739d80bce756328b1e0848d517","modified":1750835436872},{"_id":"public/js/layouts/categoryList.js","hash":"1b99e6ec6f56adc39fc2b2d6bc194c8c7d2a9a6f","modified":1750835436872},{"_id":"public/js/layouts/bookmarkNav.js","hash":"953aadeffbdf123dacf758bf1a8ae60f6aae77b9","modified":1750835436872},{"_id":"public/js/layouts/navbarShrink.js","hash":"f573f702fca55c280294ca0d27efa01d90e20210","modified":1750835436872},{"_id":"public/js/tools/tocToggle.js","hash":"0f45ecc604ff899df057c8024d804a06c1e6577f","modified":1750835436872},{"_id":"public/js/layouts/essays.js","hash":"d3369c83678f827f647d3feb31c480f5001318e0","modified":1750835436872},{"_id":"public/js/layouts/toc.js","hash":"3b1943e6d188f5e6078672d78176460f96a82560","modified":1750835436872},{"_id":"public/js/layouts/lazyload.js","hash":"90039ce58fb26d8d7f25d8e22b35f3ed1cdee5f4","modified":1750835436872},{"_id":"public/js/build/utils.js","hash":"3e689b95931ebcb5422f23b504e44fe5959385ce","modified":1750835436872},{"_id":"public/js/build/main.js","hash":"59c52a48c7d383b7009363770a549f47cac9f0e2","modified":1750835436872},{"_id":"public/js/libs/SwupProgressPlugin.min.js","hash":"fd30fe1c43072017f67bbaac18b962a5ac218711","modified":1750835436872},{"_id":"public/js/libs/SwupScriptsPlugin.min.js","hash":"b17f3434035f1339d6f9cd5c8a055d2a1b6602e9","modified":1750835436872},{"_id":"public/js/libs/Swup.min.js","hash":"cc054d34e74a1feecfae75064f6a4d6107607396","modified":1750835436872},{"_id":"public/js/libs/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1750835436872},{"_id":"public/js/libs/SwupScrollPlugin.min.js","hash":"6c3afca9bb98f79d14516c093f27e3e50a3fd82e","modified":1750835436872},{"_id":"public/js/libs/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1750835436872},{"_id":"public/js/libs/SwupPreloadPlugin.min.js","hash":"d911512891ecbe1935203bcd3d93427ad75e45c8","modified":1750835436872},{"_id":"public/js/libs/Typed.min.js","hash":"e8ce2b674a637b0c0396a3106c1aedf10186249c","modified":1750835436872},{"_id":"public/js/libs/minimasonry.min.js","hash":"9681cc509cb8aa733d36aad032e6e8acdb33c08c","modified":1750835436872},{"_id":"public/js/libs/moment.min.js","hash":"20bd76acf8e950e5cf7243f60e1192705dacca7d","modified":1750835436872},{"_id":"public/js/libs/moment-with-locales.min.js","hash":"dd1c67b36c800c00b7901f17af6200b26f2bb42c","modified":1750835436872},{"_id":"public/js/libs/SwupSlideTheme.min.js","hash":"e9d143780e879d958164b1356b7f918ec25e838a","modified":1750835436872},{"_id":"public/js/libs/odometer.min.js","hash":"fe5beb60997c84ab2f91b54535c4221443cdd21f","modified":1750835436872},{"_id":"public/css/common/codeblock/highlight.css","hash":"de88de270ec80a36920a126505af53c5581ef841","modified":1750835436872},{"_id":"public/js/libs/pjax.min.js","hash":"3d796e5be9cdd4067c94e190ea2482d7fdb4856c","modified":1750835436872},{"_id":"public/css/common/codeblock/code-block.css","hash":"a93a5c5909de75e95207669091b20e5a092ea8c2","modified":1750835436872},{"_id":"public/js/libs/pangu.min.js","hash":"ebc25ecdbf464407c5886f024d13f1f6da51ec85","modified":1750835436872},{"_id":"public/css/common/codeblock/code-theme.css","hash":"cbce091d19cd0d5715d2803b5f7a4bc083d06b3c","modified":1750835436872},{"_id":"public/js/build/plugins/hbe.js","hash":"72eff19261aad391bb0a434c6cbf6b2618f264a9","modified":1750835436872},{"_id":"public/js/build/plugins/aplayer.js","hash":"1b4bb394daeab9450dc3151f24bcc49a3a2a3e41","modified":1750835436872},{"_id":"public/js/build/plugins/mermaid.js","hash":"8a83ea6c83ec2990e65983326efa163cae3cd050","modified":1750835436872},{"_id":"public/js/build/plugins/pangu.js","hash":"e4a9e57c9035f3a3cb2904f64839fda208bc2ed2","modified":1750835436872},{"_id":"public/js/build/plugins/masonry.js","hash":"9eee0628bb3a059c05ae6a4c77be49f9225cc787","modified":1750835436872},{"_id":"public/js/build/plugins/typed.js","hash":"bad753358127fb4eee5e610181471331184e5aac","modified":1750835436872},{"_id":"public/js/build/tools/imageViewer.js","hash":"f85a8cdcaf2130cf13eb06ce608c0ef8efc1aad2","modified":1750835436872},{"_id":"public/js/build/plugins/tabs.js","hash":"9c70405ef2b7d518692f95f16ce81e41513d39dc","modified":1750835436872},{"_id":"public/js/build/tools/codeBlock.js","hash":"86861c1dbb76c5d139294a1f69fe438ba0233ff3","modified":1750835436872},{"_id":"public/js/build/tools/runtime.js","hash":"97462575894736739d80bce756328b1e0848d517","modified":1750835436872},{"_id":"public/js/build/tools/localSearch.js","hash":"4ddb3808f9216b848a14e66c813ae883d0f883b1","modified":1750835436872},{"_id":"public/js/build/tools/scrollTopBottom.js","hash":"ca00f2bf7f7aed097197b53db064ff72e7eeeb43","modified":1750835436872},{"_id":"public/js/build/tools/tocToggle.js","hash":"4cff9fabe1f39ec47ea3edf8f2c91aac504ae418","modified":1750835436872},{"_id":"public/js/build/libs/SwupScriptsPlugin.min.js","hash":"b17f3434035f1339d6f9cd5c8a055d2a1b6602e9","modified":1750835436872},{"_id":"public/js/build/libs/SwupPreloadPlugin.min.js","hash":"d911512891ecbe1935203bcd3d93427ad75e45c8","modified":1750835436872},{"_id":"public/js/build/libs/Swup.min.js","hash":"cc054d34e74a1feecfae75064f6a4d6107607396","modified":1750835436872},{"_id":"public/js/build/tools/lightDarkSwitch.js","hash":"dee772cad8a9ab42d54b6ea99599534524c47f18","modified":1750835436872},{"_id":"public/js/build/libs/SwupSlideTheme.min.js","hash":"e9d143780e879d958164b1356b7f918ec25e838a","modified":1750835436872},{"_id":"public/js/build/libs/SwupProgressPlugin.min.js","hash":"fd30fe1c43072017f67bbaac18b962a5ac218711","modified":1750835436872},{"_id":"public/js/build/libs/SwupScrollPlugin.min.js","hash":"6c3afca9bb98f79d14516c093f27e3e50a3fd82e","modified":1750835436872},{"_id":"public/js/build/libs/minimasonry.min.js","hash":"9681cc509cb8aa733d36aad032e6e8acdb33c08c","modified":1750835436872},{"_id":"public/js/build/libs/Typed.min.js","hash":"e8ce2b674a637b0c0396a3106c1aedf10186249c","modified":1750835436872},{"_id":"public/js/build/libs/odometer.min.js","hash":"fe5beb60997c84ab2f91b54535c4221443cdd21f","modified":1750835436872},{"_id":"public/js/build/libs/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1750835436872},{"_id":"public/js/build/libs/moment.min.js","hash":"20bd76acf8e950e5cf7243f60e1192705dacca7d","modified":1750835436872},{"_id":"public/js/build/libs/pjax.min.js","hash":"3d796e5be9cdd4067c94e190ea2482d7fdb4856c","modified":1750835436872},{"_id":"public/js/build/libs/moment-with-locales.min.js","hash":"dd1c67b36c800c00b7901f17af6200b26f2bb42c","modified":1750835436872},{"_id":"public/js/build/layouts/bookmarkNav.js","hash":"32e259874d1a744d75a1c3f55d1a47ff9c7c57f4","modified":1750835436872},{"_id":"public/js/build/layouts/categoryList.js","hash":"95758f774f36395a8436e5fcb164fe52be828521","modified":1750835436872},{"_id":"public/js/build/libs/pangu.min.js","hash":"ebc25ecdbf464407c5886f024d13f1f6da51ec85","modified":1750835436872},{"_id":"public/js/build/layouts/essays.js","hash":"d3369c83678f827f647d3feb31c480f5001318e0","modified":1750835436872},{"_id":"public/js/build/layouts/navbarShrink.js","hash":"d96032b25a0065573d53be7bf404be90ac9edd91","modified":1750835436872},{"_id":"public/js/build/layouts/toc.js","hash":"f099d64dcc297148429d9592818d450309898189","modified":1750835436872},{"_id":"public/js/build/layouts/lazyload.js","hash":"90039ce58fb26d8d7f25d8e22b35f3ed1cdee5f4","modified":1750835436872},{"_id":"public/css/common/codeblock/hljs-themes/light/github.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1750835436872},{"_id":"public/css/common/codeblock/hljs-themes/light/default.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1750835436872},{"_id":"public/css/common/codeblock/hljs-themes/light/atom-one-light.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1750835436872},{"_id":"public/js/build/libs/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1750835436872},{"_id":"public/css/common/codeblock/hljs-themes/dark/a11y-dark.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1750835436872},{"_id":"public/css/common/codeblock/hljs-themes/dark/nord.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1750835436872},{"_id":"public/css/common/codeblock/hljs-themes/dark/atom-one-dark.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1750835436872},{"_id":"public/css/common/codeblock/hljs-themes/dark/monokai-sublime.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1750835436872},{"_id":"public/css/common/codeblock/hljs-themes/dark/agate.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1750835436872},{"_id":"public/css/common/codeblock/hljs-themes/dark/night-owl.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1750835436872},{"_id":"public/css/common/codeblock/hljs-themes/dark/vs2015.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1750835436872},{"_id":"public/css/common/codeblock/hljs-themes/dark/github-dark.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1750835436872},{"_id":"public/css/common/codeblock/hljs-themes/dark/tokyo-night-dark.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1750835436872},{"_id":"public/webfonts/fa-brands-400.ttf","hash":"ba9322d66c19f635e15e458cc39fcb509818332f","modified":1750835436872},{"_id":"public/fonts/Chillax/Chillax-Variable.eot","hash":"50a4e2ab17155fe7449e0ee488a6242180f3b256","modified":1750835436872},{"_id":"public/fonts/Chillax/Chillax-Variable.ttf","hash":"01aafadc0ca4ace59127a5594a8f534e83b84879","modified":1750835436872},{"_id":"public/js/libs/APlayer.min.js.map","hash":"31a19da0f0cb6b00ec212eafa847f31af86788df","modified":1750835436872},{"_id":"public/js/libs/waline.mjs","hash":"d94e0f396776a003b603d6e90a732a548c2fda33","modified":1750835436872},{"_id":"public/fonts/MapleMono-Bold.ttf","hash":"ec54b625650294240d3255287a5cd07afd5bde09","modified":1750835436872},{"_id":"public/fonts/MapleMono-Regular.ttf","hash":"8ef0566873ae81ef2dd9ed3fecf13240673fc414","modified":1750835436872},{"_id":"public/webfonts/fa-sharp-solid-900.woff2","hash":"74d0af1108ab8157993ca03cef80e89e35e2408d","modified":1750835436872},{"_id":"public/fonts/MapleMono-Italic.ttf","hash":"e6c100ea19c7a8cb4b005a2c61d22e971943a014","modified":1750835436872},{"_id":"public/webfonts/fa-solid-900.woff2","hash":"e73d164db2aff2c91d18c07da03e8db9d0c5dfd4","modified":1750835436872},{"_id":"public/js/libs/mermaid.min.js","hash":"22eeb45e4dfff78a42bc8dad60d3a8ff64968a9d","modified":1750835436872},{"_id":"public/js/build/libs/mermaid.min.js","hash":"22eeb45e4dfff78a42bc8dad60d3a8ff64968a9d","modified":1750835436872},{"_id":"public/webfonts/fa-duotone-900.woff2","hash":"2cc24434345b80a844a6bda1139539fe41e4df53","modified":1750835436872},{"_id":"public/webfonts/fa-light-300.woff2","hash":"def760895375328ccdcf62b2b9b9001a21947acd","modified":1750835436872},{"_id":"public/webfonts/fa-regular-400.woff2","hash":"486fed640153de1de84f460834c73daef060ed20","modified":1750835436872},{"_id":"public/webfonts/fa-thin-100.woff2","hash":"e0a4482c20f6b67784df54965539a317a3bd681b","modified":1750835436872},{"_id":"public/webfonts/fa-sharp-solid-900.ttf","hash":"0d710cd7bd1b7ff574e88bb812de82babe45e415","modified":1750835436872},{"_id":"public/webfonts/fa-solid-900.ttf","hash":"40b536c3667547db70ee9ca6f3c94fbc33e0cab7","modified":1750835436872},{"_id":"public/webfonts/fa-regular-400.ttf","hash":"cdec068700dc440530e5bbeff7e8bb33a01b4132","modified":1750835436872},{"_id":"public/js/libs/waline.mjs.map","hash":"37c5b3e6aa5e1b70358426345a1a1329d6b896d3","modified":1750835436872},{"_id":"public/webfonts/fa-light-300.ttf","hash":"cc5d9f4f994c82e23f58cdde1eec8792d81633c7","modified":1750835436872},{"_id":"public/webfonts/fa-thin-100.ttf","hash":"c1fee6e6986b14533ce022afada5fbe10c0f6562","modified":1750835436872},{"_id":"public/webfonts/fa-duotone-900.ttf","hash":"e0313a772ea710cb5ea4bd08f5dedb0a0025f8ca","modified":1750835436872},{"_id":"public/js/libs/mermaid.min.js.map","hash":"2e1a632f0588c4370188887d79a10ff8b38a49b5","modified":1750835436872},{"_id":"public/fonts/LXGWWenKaiGBScreen.ttf","hash":"e2139681d643e07e2ffb498fa3d656f6cba75afa","modified":1750835436872}],"Category":[{"name":"开发记录","_id":"cmcbm7pq90004e2qga62e0ad7"},{"name":"前后端开发","_id":"cmcbm7pqb000ce2qgesx01zqu"},{"name":"通用技能","_id":"cmcbm7pqc000pe2qgh52feb74"},{"name":"学习笔记","_id":"cmcbm7pqe0015e2qgfw8xafbx"},{"name":"随机掉落的文字碎片","_id":"cmcbm7pqe001he2qg3zhx3c85"},{"name":"课程笔记","_id":"cmcbm7pqj002le2qg92qdbomx"}],"Data":[{"_id":"essays","data":[{"content":"第一条说说内容","date":"2019-01-01T10:00:00.000Z"},{"content":"第二条说说内容","date":"2019-01-02T10:00:00.000Z"}]},{"_id":"links","data":[{"links_category":null,"has_thumbnail":false,"list":[{"name":"Seele","link":"https://elysiafollower.github.io/","description":"在体力和智力上都是超人般的存在","avatar":"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250508221526599.png?imageSlim"},{"name":"cyrus28214","link":"https://blog.codecyrus.com","avatar":"https://blog.codecyrus.com/images/avatar.png","description":"Think twice, code once."},{"name":"NoughtQ","link":"https://blog.noughtq.top/","avatar":"https://blog.noughtq.top/img/avatar.png","description":"N老师的blog具有cs相关知识的丰富笔记"},{"name":"mem的小站","link":"https://mem.ac/","avatar":"https://mem.ac/static/69a9db2193e1767c51109c4875d3c0bd/c65bc/avatar.webp","description":"是强大的mem佬"}]}]}],"Page":[{"title":"essays","type":"shuoshuo","date":"2025-05-08T11:39:59.000Z","_content":"","source":"essays/index.md","raw":"---\ntitle: essays\ntype: shuoshuo\ndate: 2025-05-08 19:39:59\n---\n","updated":"2025-05-08T11:40:13.542Z","path":"essays/index.html","comments":1,"layout":"page","_id":"cmcbm7pq60000e2qgge884c6r","content":"","excerpt":"","more":"","_processedHighlight":true},{"title":"categories","date":"2025-05-08T11:25:32.000Z","template":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2025-05-08 19:25:32\ntemplate: categories\n---\n","updated":"2025-05-08T11:25:40.266Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cmcbm7pq80002e2qg4fdtalsk","content":"","excerpt":"","more":"","_processedHighlight":true},{"_content":"/* 霞鹜文楷屏幕版 - 中文字体 */\n@font-face {\n  font-family: 'WenKai';\n  font-style: normal;\n  font-weight: normal;\n  src: url('/fonts/LXGWWenKaiGBScreen.ttf') format('truetype');\n  font-display: swap;\n}\n\n@font-face {\n  font-family: 'mono';\n  font-style: normal;\n  font-weight: normal;\n  src: url('/fonts/MapleMono-Regular.ttf') format('truetype');\n  font-display: swap;\n}\n\n@font-face {\n  font-family: 'mono';\n  font-style: italic;\n  font-weight: normal;\n  src: url('/fonts/MapleMono-Italic.ttf') format('truetype');\n  font-display: swap;\n}\n\n@font-face {\n  font-family: 'mono';\n  font-style: normal;\n  font-weight: bold;\n  src: url('/fonts/MapleMono-Bold.ttf') format('truetype');\n  font-display: swap;\n}\n","source":"fonts/custom-fonts.css","raw":"/* 霞鹜文楷屏幕版 - 中文字体 */\n@font-face {\n  font-family: 'WenKai';\n  font-style: normal;\n  font-weight: normal;\n  src: url('/fonts/LXGWWenKaiGBScreen.ttf') format('truetype');\n  font-display: swap;\n}\n\n@font-face {\n  font-family: 'mono';\n  font-style: normal;\n  font-weight: normal;\n  src: url('/fonts/MapleMono-Regular.ttf') format('truetype');\n  font-display: swap;\n}\n\n@font-face {\n  font-family: 'mono';\n  font-style: italic;\n  font-weight: normal;\n  src: url('/fonts/MapleMono-Italic.ttf') format('truetype');\n  font-display: swap;\n}\n\n@font-face {\n  font-family: 'mono';\n  font-style: normal;\n  font-weight: bold;\n  src: url('/fonts/MapleMono-Bold.ttf') format('truetype');\n  font-display: swap;\n}\n","date":"2025-05-22T04:02:41.916Z","updated":"2025-05-08T12:17:31.872Z","path":"fonts/custom-fonts.css","layout":"false","title":"","comments":1,"_id":"cmcbm7pqa0006e2qg0q4jfly9","content":"@font-face{font-family:WenKai;font-style:normal;font-weight:400;src:url(/fonts/LXGWWenKaiGBScreen.ttf) format('truetype');font-display:swap}@font-face{font-family:mono;font-style:normal;font-weight:400;src:url(/fonts/MapleMono-Regular.ttf) format('truetype');font-display:swap}@font-face{font-family:mono;font-style:italic;font-weight:400;src:url(/fonts/MapleMono-Italic.ttf) format('truetype');font-display:swap}@font-face{font-family:mono;font-style:normal;font-weight:700;src:url(/fonts/MapleMono-Bold.ttf) format('truetype');font-display:swap}"},{"_content":"/* 强制应用中文字体 */\nbody, p, div, span, h1, h2, h3, h4, h5, h6 {\n  font-family: 'WenKai', sans-serif !important;\n}\n\n/* 针对代码块使用等宽字体 */\npre, code {\n  font-family: 'mono', monospace, sans-serif !important;\n}","source":"css/custom.css","raw":"/* 强制应用中文字体 */\nbody, p, div, span, h1, h2, h3, h4, h5, h6 {\n  font-family: 'WenKai', sans-serif !important;\n}\n\n/* 针对代码块使用等宽字体 */\npre, code {\n  font-family: 'mono', monospace, sans-serif !important;\n}","date":"2025-05-09T09:34:53.133Z","updated":"2025-05-09T09:34:53.133Z","path":"css/custom.css","layout":"false","title":"","comments":1,"_id":"cmcbm7pqa0008e2qg4k98er3z","content":"body,div,h1,h2,h3,h4,h5,h6,p,span{font-family:WenKai,sans-serif!important}code,pre{font-family:mono,monospace,sans-serif!important}"},{"title":"Friends🫶🏻","date":"2025-05-08T11:15:51.000Z","template":"links","_content":"**友链信息**:\n```json\n- name: ffy\n  link: https://ffy6511.github.io/\n  description: ffyの四次元口袋\n  avatar: https://ffy6511.github.io/img/avatar.svg\n```\n> 欢迎互换友链~😉 \n> 可直接在下方的评论区留下您的友链信息.\n\n\n\n<script src=\"https://giscus.app/client.js\"\n        data-repo=\"ffy6511/ffy6511.github.io\"\n        data-repo-id=\"R_kgDOOmnQ1A\"\n        data-category=\"Announcements\"\n        data-category-id=\"DIC_kwDOOmnQ1M4Cp8zM\"\n        data-mapping=\"pathname\"\n        data-strict=\"0\"\n        data-reactions-enabled=\"1\"\n        data-emit-metadata=\"0\"\n        data-input-position=\"top\"\n        data-theme=\"preferred_color_scheme\"\n        data-lang=\"zh-CN\"\n        data-loading=\"lazy\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","source":"links/index.md","raw":"---\ntitle: Friends🫶🏻\ndate: 2025-05-08 19:15:51\ntemplate: links\n---\n**友链信息**:\n```json\n- name: ffy\n  link: https://ffy6511.github.io/\n  description: ffyの四次元口袋\n  avatar: https://ffy6511.github.io/img/avatar.svg\n```\n> 欢迎互换友链~😉 \n> 可直接在下方的评论区留下您的友链信息.\n\n\n\n<script src=\"https://giscus.app/client.js\"\n        data-repo=\"ffy6511/ffy6511.github.io\"\n        data-repo-id=\"R_kgDOOmnQ1A\"\n        data-category=\"Announcements\"\n        data-category-id=\"DIC_kwDOOmnQ1M4Cp8zM\"\n        data-mapping=\"pathname\"\n        data-strict=\"0\"\n        data-reactions-enabled=\"1\"\n        data-emit-metadata=\"0\"\n        data-input-position=\"top\"\n        data-theme=\"preferred_color_scheme\"\n        data-lang=\"zh-CN\"\n        data-loading=\"lazy\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","updated":"2025-05-09T11:03:13.060Z","path":"links/index.html","comments":1,"layout":"page","_id":"cmcbm7pqb000ae2qg9jbmfs2o","content":"<p><strong>友链信息</strong>:</p>\n<div class=\"code-container\" data-rel=\"Json\"><figure class=\"iseeu highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- name<span class=\"punctuation\">:</span> ffy</span><br><span class=\"line\">  link<span class=\"punctuation\">:</span> https<span class=\"punctuation\">:</span><span class=\"comment\">//ffy6511.github.io/</span></span><br><span class=\"line\">  description<span class=\"punctuation\">:</span> ffyの四次元口袋</span><br><span class=\"line\">  avatar<span class=\"punctuation\">:</span> https<span class=\"punctuation\">:</span><span class=\"comment\">//ffy6511.github.io/img/avatar.svg</span></span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p>欢迎互换友链~😉<br>可直接在下方的评论区留下您的友链信息.</p>\n</blockquote>\n<script src=\"https://giscus.app/client.js\"\n        data-repo=\"ffy6511/ffy6511.github.io\"\n        data-repo-id=\"R_kgDOOmnQ1A\"\n        data-category=\"Announcements\"\n        data-category-id=\"DIC_kwDOOmnQ1M4Cp8zM\"\n        data-mapping=\"pathname\"\n        data-strict=\"0\"\n        data-reactions-enabled=\"1\"\n        data-emit-metadata=\"0\"\n        data-input-position=\"top\"\n        data-theme=\"preferred_color_scheme\"\n        data-lang=\"zh-CN\"\n        data-loading=\"lazy\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","excerpt":"","more":"<p><strong>友链信息</strong>:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- name<span class=\"punctuation\">:</span> ffy</span><br><span class=\"line\">  link<span class=\"punctuation\">:</span> https<span class=\"punctuation\">:</span><span class=\"comment\">//ffy6511.github.io/</span></span><br><span class=\"line\">  description<span class=\"punctuation\">:</span> ffyの四次元口袋</span><br><span class=\"line\">  avatar<span class=\"punctuation\">:</span> https<span class=\"punctuation\">:</span><span class=\"comment\">//ffy6511.github.io/img/avatar.svg</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>欢迎互换友链~😉<br>可直接在下方的评论区留下您的友链信息.</p>\n</blockquote>\n<script src=\"https://giscus.app/client.js\"\n        data-repo=\"ffy6511/ffy6511.github.io\"\n        data-repo-id=\"R_kgDOOmnQ1A\"\n        data-category=\"Announcements\"\n        data-category-id=\"DIC_kwDOOmnQ1M4Cp8zM\"\n        data-mapping=\"pathname\"\n        data-strict=\"0\"\n        data-reactions-enabled=\"1\"\n        data-emit-metadata=\"0\"\n        data-input-position=\"top\"\n        data-theme=\"preferred_color_scheme\"\n        data-lang=\"zh-CN\"\n        data-loading=\"lazy\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","_processedHighlight":true},{"title":"tags","date":"2025-05-08T11:22:04.000Z","template":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2025-05-08 19:22:04\ntemplate: tags\n---\n","updated":"2025-05-08T11:22:14.852Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cmcbm7pqb000fe2qg9diggfhi","content":"","excerpt":"","more":"","_processedHighlight":true},{"title":"masonry","date":"2025-05-08T11:26:38.000Z","template":"masonry","_content":"","source":"masonry/index.md","raw":"---\ntitle: masonry\ndate: 2025-05-08 19:26:38\ntemplate: masonry\n---\n","updated":"2025-05-08T11:26:47.234Z","path":"masonry/index.html","comments":1,"layout":"page","_id":"cmcbm7pqc000he2qg98stasdb","content":"","excerpt":"","more":"","_processedHighlight":true}],"Post":[{"title":"MAIC","date":"2025-05-17T11:35:35.000Z","excerpt":"记录swift学习和开发的过程","thumbnail":"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250625150337542.png?imageSlim","_content":"\n### 主题'CSS'的设计\n\n#### AppTheme\n\n为了方便统一管理颜色，我们可以创建一个主题相关的结构体，并设置主题相关的环境变量：\n\n```swift\nimport SwiftUI\n\nstruct AppTheme {\n    // 通过 Assets.xcassets 定义的颜色\n    let primaryColor = Color(\"PrimaryColor\")\n    let secondaryColor = Color(\"SecondaryColor\")\n\n    // 直接在代码中定义颜色\n    let backgroundColor = Color(UIColor.systemGray6)\n\n    // 字体\n    let largeTitleFont = Font.system(size: 34, weight: .bold)\n    let bodyFont = Font.system(size: 17, weight: .regular)\n\n    // 间距\n    let paddingSmall: CGFloat = 8\n    let paddingMedium: CGFloat = 16\n    let paddingLarge: CGFloat = 24\n\n    // 圆角\n    let cornerRadius: CGFloat = 12\n}\n```\n\n> 注意不能设置此处的变量为 `static`， 否则无法在其他文件中使用.\n\n- 在Assets中定义颜色：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250517193908985.png?imageSlim\"/>\n\n#### 导入主文件\n\n在主文件中导入主题相关的结构体，并设置环境变量：\n\n```swift\nimport SwiftUI\n\n@main\nstruct MAICApp: App {\n    var body: some Scene {\n        WindowGroup {\n            ContentView()\n                .environment(\\.appTheme, AppTheme()) // 将 AppTheme 注入到环境中\n        }\n    }\n}\n```\n\n#### 使用主题\n\n在其他文件中，可以通过环境变量来访问主题相关的变量：\n\n```swift\nimport SwiftUI\nstruct ContentView: View {\n    @Environment(\\.appTheme) var appTheme: AppTheme // 从环境中获取 AppTheme\n\n    }\n```\n\n### 设置底部导航栏\n\n#### 基础的Tab视图\n\n```swift\nstruct MainView: View {\n    var body: some View {\n        TabView{\n            HomeView()\n                .tabItem {\n                    Label(\"花园\",systemImage: \"house.circle\")\n                }\n          \n            HealthView()\n                .tabItem {\n                    Label(\"健康\",systemImage: \"heart.circle\")\n                }\n          \n            MeditationView()\n                .tabItem{Label(\"冥想\",systemImage: \"figure.mind.and.body.circle\")\n                }\n          \n            SettingsView()\n                .tabItem{\n                    Label(\"设置\",systemImage: \"gear.circle\")\n                }\n          \n        }\n    }\n}\n```\n\n- 导入各个定义好的视图；\n- `Label`设置导航栏的文字；\n- `systemImage`设置导航栏的图标\n\n然后在项目入口中指定这个视图：\n\n```swift\n@main\nstruct MAICApp: App {\n    var body: some Scene {\n        WindowGroup {\n            MainView()\n                .environment(\\.appTheme, AppTheme()) // 将 AppTheme 注入到环境中\n        }\n    }\n}\n```\n\n#### 设置触感反馈\n\n为了在切换底部导航栏时，提供触感反馈，我们可以设置一个状态变量，记录当前的Tab：\n\n```swift\n@State private var selectedTab = 0\n\nvar body: some View {\n    TabView(selection: $selectedTab){\n        HomeView()\n                    .tabItem {\n                        Label(\"花园\",systemImage: \"house.circle\")\n                    }\n                    .tag(0)\n    ...\n    }\n    .sensoryFeedback(.selection, trigger: selectedTab)\n```\n\n- `selection` 是一种标准的系统触觉反馈，通常用于表示用户在选择器、列表或其他 UI 元素中进行了选择或状态改变\n","source":"_posts/MAIC.md","raw":"---\ntitle: MAIC\ndate: 2025-05-17 19:35:35\ntags:\n- swift\nexcerpt: 记录swift学习和开发的过程\ncategories: \n- 开发记录\nthumbnail: https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250625150337542.png?imageSlim\n---\n\n### 主题'CSS'的设计\n\n#### AppTheme\n\n为了方便统一管理颜色，我们可以创建一个主题相关的结构体，并设置主题相关的环境变量：\n\n```swift\nimport SwiftUI\n\nstruct AppTheme {\n    // 通过 Assets.xcassets 定义的颜色\n    let primaryColor = Color(\"PrimaryColor\")\n    let secondaryColor = Color(\"SecondaryColor\")\n\n    // 直接在代码中定义颜色\n    let backgroundColor = Color(UIColor.systemGray6)\n\n    // 字体\n    let largeTitleFont = Font.system(size: 34, weight: .bold)\n    let bodyFont = Font.system(size: 17, weight: .regular)\n\n    // 间距\n    let paddingSmall: CGFloat = 8\n    let paddingMedium: CGFloat = 16\n    let paddingLarge: CGFloat = 24\n\n    // 圆角\n    let cornerRadius: CGFloat = 12\n}\n```\n\n> 注意不能设置此处的变量为 `static`， 否则无法在其他文件中使用.\n\n- 在Assets中定义颜色：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250517193908985.png?imageSlim\"/>\n\n#### 导入主文件\n\n在主文件中导入主题相关的结构体，并设置环境变量：\n\n```swift\nimport SwiftUI\n\n@main\nstruct MAICApp: App {\n    var body: some Scene {\n        WindowGroup {\n            ContentView()\n                .environment(\\.appTheme, AppTheme()) // 将 AppTheme 注入到环境中\n        }\n    }\n}\n```\n\n#### 使用主题\n\n在其他文件中，可以通过环境变量来访问主题相关的变量：\n\n```swift\nimport SwiftUI\nstruct ContentView: View {\n    @Environment(\\.appTheme) var appTheme: AppTheme // 从环境中获取 AppTheme\n\n    }\n```\n\n### 设置底部导航栏\n\n#### 基础的Tab视图\n\n```swift\nstruct MainView: View {\n    var body: some View {\n        TabView{\n            HomeView()\n                .tabItem {\n                    Label(\"花园\",systemImage: \"house.circle\")\n                }\n          \n            HealthView()\n                .tabItem {\n                    Label(\"健康\",systemImage: \"heart.circle\")\n                }\n          \n            MeditationView()\n                .tabItem{Label(\"冥想\",systemImage: \"figure.mind.and.body.circle\")\n                }\n          \n            SettingsView()\n                .tabItem{\n                    Label(\"设置\",systemImage: \"gear.circle\")\n                }\n          \n        }\n    }\n}\n```\n\n- 导入各个定义好的视图；\n- `Label`设置导航栏的文字；\n- `systemImage`设置导航栏的图标\n\n然后在项目入口中指定这个视图：\n\n```swift\n@main\nstruct MAICApp: App {\n    var body: some Scene {\n        WindowGroup {\n            MainView()\n                .environment(\\.appTheme, AppTheme()) // 将 AppTheme 注入到环境中\n        }\n    }\n}\n```\n\n#### 设置触感反馈\n\n为了在切换底部导航栏时，提供触感反馈，我们可以设置一个状态变量，记录当前的Tab：\n\n```swift\n@State private var selectedTab = 0\n\nvar body: some View {\n    TabView(selection: $selectedTab){\n        HomeView()\n                    .tabItem {\n                        Label(\"花园\",systemImage: \"house.circle\")\n                    }\n                    .tag(0)\n    ...\n    }\n    .sensoryFeedback(.selection, trigger: selectedTab)\n```\n\n- `selection` 是一种标准的系统触觉反馈，通常用于表示用户在选择器、列表或其他 UI 元素中进行了选择或状态改变\n","slug":"MAIC","published":1,"updated":"2025-06-25T07:07:39.875Z","comments":1,"layout":"post","photos":[],"_id":"cmcbm7pq70001e2qgexkk6kl3","content":"<h3 id=\"主题’CSS’的设计\"><a href=\"#主题’CSS’的设计\" class=\"headerlink\" title=\"主题’CSS’的设计\"></a>主题’CSS’的设计</h3><h4 id=\"AppTheme\"><a href=\"#AppTheme\" class=\"headerlink\" title=\"AppTheme\"></a>AppTheme</h4><p>为了方便统一管理颜色，我们可以创建一个主题相关的结构体，并设置主题相关的环境变量：</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SwiftUI</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">AppTheme</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过 Assets.xcassets 定义的颜色</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> primaryColor <span class=\"operator\">=</span> <span class=\"type\">Color</span>(<span class=\"string\">&quot;PrimaryColor&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> secondaryColor <span class=\"operator\">=</span> <span class=\"type\">Color</span>(<span class=\"string\">&quot;SecondaryColor&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 直接在代码中定义颜色</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> backgroundColor <span class=\"operator\">=</span> <span class=\"type\">Color</span>(<span class=\"type\">UIColor</span>.systemGray6)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 字体</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> largeTitleFont <span class=\"operator\">=</span> <span class=\"type\">Font</span>.system(size: <span class=\"number\">34</span>, weight: .bold)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> bodyFont <span class=\"operator\">=</span> <span class=\"type\">Font</span>.system(size: <span class=\"number\">17</span>, weight: .regular)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 间距</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> paddingSmall: <span class=\"type\">CGFloat</span> <span class=\"operator\">=</span> <span class=\"number\">8</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> paddingMedium: <span class=\"type\">CGFloat</span> <span class=\"operator\">=</span> <span class=\"number\">16</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> paddingLarge: <span class=\"type\">CGFloat</span> <span class=\"operator\">=</span> <span class=\"number\">24</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 圆角</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cornerRadius: <span class=\"type\">CGFloat</span> <span class=\"operator\">=</span> <span class=\"number\">12</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>注意不能设置此处的变量为 <code>static</code>， 否则无法在其他文件中使用.</p>\n</blockquote>\n<ul>\n<li>在Assets中定义颜色：</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250517193908985.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"导入主文件\"><a href=\"#导入主文件\" class=\"headerlink\" title=\"导入主文件\"></a>导入主文件</h4><p>在主文件中导入主题相关的结构体，并设置环境变量：</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SwiftUI</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@main</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">MAICApp</span>: <span class=\"title class_ inherited__\">App</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">Scene</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">WindowGroup</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">ContentView</span>()</span><br><span class=\"line\">                .environment(\\.appTheme, <span class=\"type\">AppTheme</span>()) <span class=\"comment\">// 将 AppTheme 注入到环境中</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"使用主题\"><a href=\"#使用主题\" class=\"headerlink\" title=\"使用主题\"></a>使用主题</h4><p>在其他文件中，可以通过环境变量来访问主题相关的变量：</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SwiftUI</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_ inherited__\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Environment</span>(\\.appTheme) <span class=\"keyword\">var</span> appTheme: <span class=\"type\">AppTheme</span> <span class=\"comment\">// 从环境中获取 AppTheme</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"设置底部导航栏\"><a href=\"#设置底部导航栏\" class=\"headerlink\" title=\"设置底部导航栏\"></a>设置底部导航栏</h3><h4 id=\"基础的Tab视图\"><a href=\"#基础的Tab视图\" class=\"headerlink\" title=\"基础的Tab视图\"></a>基础的Tab视图</h4><div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">MainView</span>: <span class=\"title class_ inherited__\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">TabView</span>&#123;</span><br><span class=\"line\">            <span class=\"type\">HomeView</span>()</span><br><span class=\"line\">                .tabItem &#123;</span><br><span class=\"line\">                    <span class=\"type\">Label</span>(<span class=\"string\">&quot;花园&quot;</span>,systemImage: <span class=\"string\">&quot;house.circle&quot;</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">          </span><br><span class=\"line\">            <span class=\"type\">HealthView</span>()</span><br><span class=\"line\">                .tabItem &#123;</span><br><span class=\"line\">                    <span class=\"type\">Label</span>(<span class=\"string\">&quot;健康&quot;</span>,systemImage: <span class=\"string\">&quot;heart.circle&quot;</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">          </span><br><span class=\"line\">            <span class=\"type\">MeditationView</span>()</span><br><span class=\"line\">                .tabItem&#123;<span class=\"type\">Label</span>(<span class=\"string\">&quot;冥想&quot;</span>,systemImage: <span class=\"string\">&quot;figure.mind.and.body.circle&quot;</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">          </span><br><span class=\"line\">            <span class=\"type\">SettingsView</span>()</span><br><span class=\"line\">                .tabItem&#123;</span><br><span class=\"line\">                    <span class=\"type\">Label</span>(<span class=\"string\">&quot;设置&quot;</span>,systemImage: <span class=\"string\">&quot;gear.circle&quot;</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">          </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li>导入各个定义好的视图；</li>\n<li><code>Label</code>设置导航栏的文字；</li>\n<li><code>systemImage</code>设置导航栏的图标</li>\n</ul>\n<p>然后在项目入口中指定这个视图：</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@main</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">MAICApp</span>: <span class=\"title class_ inherited__\">App</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">Scene</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">WindowGroup</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">MainView</span>()</span><br><span class=\"line\">                .environment(\\.appTheme, <span class=\"type\">AppTheme</span>()) <span class=\"comment\">// 将 AppTheme 注入到环境中</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"设置触感反馈\"><a href=\"#设置触感反馈\" class=\"headerlink\" title=\"设置触感反馈\"></a>设置触感反馈</h4><p>为了在切换底部导航栏时，提供触感反馈，我们可以设置一个状态变量，记录当前的Tab：</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@State</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> selectedTab <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">TabView</span>(selection: <span class=\"variable\">$selectedTab</span>)&#123;</span><br><span class=\"line\">        <span class=\"type\">HomeView</span>()</span><br><span class=\"line\">                    .tabItem &#123;</span><br><span class=\"line\">                        <span class=\"type\">Label</span>(<span class=\"string\">&quot;花园&quot;</span>,systemImage: <span class=\"string\">&quot;house.circle&quot;</span>)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    .tag(<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"operator\">...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .sensoryFeedback(.selection, trigger: selectedTab)</span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li><code>selection</code> 是一种标准的系统触觉反馈，通常用于表示用户在选择器、列表或其他 UI 元素中进行了选择或状态改变</li>\n</ul>\n","more":"<h3 id=\"主题’CSS’的设计\"><a href=\"#主题’CSS’的设计\" class=\"headerlink\" title=\"主题’CSS’的设计\"></a>主题’CSS’的设计</h3><h4 id=\"AppTheme\"><a href=\"#AppTheme\" class=\"headerlink\" title=\"AppTheme\"></a>AppTheme</h4><p>为了方便统一管理颜色，我们可以创建一个主题相关的结构体，并设置主题相关的环境变量：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SwiftUI</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">AppTheme</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过 Assets.xcassets 定义的颜色</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> primaryColor <span class=\"operator\">=</span> <span class=\"type\">Color</span>(<span class=\"string\">&quot;PrimaryColor&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> secondaryColor <span class=\"operator\">=</span> <span class=\"type\">Color</span>(<span class=\"string\">&quot;SecondaryColor&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 直接在代码中定义颜色</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> backgroundColor <span class=\"operator\">=</span> <span class=\"type\">Color</span>(<span class=\"type\">UIColor</span>.systemGray6)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 字体</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> largeTitleFont <span class=\"operator\">=</span> <span class=\"type\">Font</span>.system(size: <span class=\"number\">34</span>, weight: .bold)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> bodyFont <span class=\"operator\">=</span> <span class=\"type\">Font</span>.system(size: <span class=\"number\">17</span>, weight: .regular)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 间距</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> paddingSmall: <span class=\"type\">CGFloat</span> <span class=\"operator\">=</span> <span class=\"number\">8</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> paddingMedium: <span class=\"type\">CGFloat</span> <span class=\"operator\">=</span> <span class=\"number\">16</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> paddingLarge: <span class=\"type\">CGFloat</span> <span class=\"operator\">=</span> <span class=\"number\">24</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 圆角</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cornerRadius: <span class=\"type\">CGFloat</span> <span class=\"operator\">=</span> <span class=\"number\">12</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意不能设置此处的变量为 <code>static</code>， 否则无法在其他文件中使用.</p>\n</blockquote>\n<ul>\n<li>在Assets中定义颜色：</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250517193908985.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"导入主文件\"><a href=\"#导入主文件\" class=\"headerlink\" title=\"导入主文件\"></a>导入主文件</h4><p>在主文件中导入主题相关的结构体，并设置环境变量：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SwiftUI</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@main</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">MAICApp</span>: <span class=\"title class_ inherited__\">App</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">Scene</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">WindowGroup</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">ContentView</span>()</span><br><span class=\"line\">                .environment(\\.appTheme, <span class=\"type\">AppTheme</span>()) <span class=\"comment\">// 将 AppTheme 注入到环境中</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用主题\"><a href=\"#使用主题\" class=\"headerlink\" title=\"使用主题\"></a>使用主题</h4><p>在其他文件中，可以通过环境变量来访问主题相关的变量：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SwiftUI</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_ inherited__\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Environment</span>(\\.appTheme) <span class=\"keyword\">var</span> appTheme: <span class=\"type\">AppTheme</span> <span class=\"comment\">// 从环境中获取 AppTheme</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"设置底部导航栏\"><a href=\"#设置底部导航栏\" class=\"headerlink\" title=\"设置底部导航栏\"></a>设置底部导航栏</h3><h4 id=\"基础的Tab视图\"><a href=\"#基础的Tab视图\" class=\"headerlink\" title=\"基础的Tab视图\"></a>基础的Tab视图</h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">MainView</span>: <span class=\"title class_ inherited__\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">TabView</span>&#123;</span><br><span class=\"line\">            <span class=\"type\">HomeView</span>()</span><br><span class=\"line\">                .tabItem &#123;</span><br><span class=\"line\">                    <span class=\"type\">Label</span>(<span class=\"string\">&quot;花园&quot;</span>,systemImage: <span class=\"string\">&quot;house.circle&quot;</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">          </span><br><span class=\"line\">            <span class=\"type\">HealthView</span>()</span><br><span class=\"line\">                .tabItem &#123;</span><br><span class=\"line\">                    <span class=\"type\">Label</span>(<span class=\"string\">&quot;健康&quot;</span>,systemImage: <span class=\"string\">&quot;heart.circle&quot;</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">          </span><br><span class=\"line\">            <span class=\"type\">MeditationView</span>()</span><br><span class=\"line\">                .tabItem&#123;<span class=\"type\">Label</span>(<span class=\"string\">&quot;冥想&quot;</span>,systemImage: <span class=\"string\">&quot;figure.mind.and.body.circle&quot;</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">          </span><br><span class=\"line\">            <span class=\"type\">SettingsView</span>()</span><br><span class=\"line\">                .tabItem&#123;</span><br><span class=\"line\">                    <span class=\"type\">Label</span>(<span class=\"string\">&quot;设置&quot;</span>,systemImage: <span class=\"string\">&quot;gear.circle&quot;</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">          </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>导入各个定义好的视图；</li>\n<li><code>Label</code>设置导航栏的文字；</li>\n<li><code>systemImage</code>设置导航栏的图标</li>\n</ul>\n<p>然后在项目入口中指定这个视图：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@main</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">MAICApp</span>: <span class=\"title class_ inherited__\">App</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">Scene</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">WindowGroup</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">MainView</span>()</span><br><span class=\"line\">                .environment(\\.appTheme, <span class=\"type\">AppTheme</span>()) <span class=\"comment\">// 将 AppTheme 注入到环境中</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"设置触感反馈\"><a href=\"#设置触感反馈\" class=\"headerlink\" title=\"设置触感反馈\"></a>设置触感反馈</h4><p>为了在切换底部导航栏时，提供触感反馈，我们可以设置一个状态变量，记录当前的Tab：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@State</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> selectedTab <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">TabView</span>(selection: <span class=\"variable\">$selectedTab</span>)&#123;</span><br><span class=\"line\">        <span class=\"type\">HomeView</span>()</span><br><span class=\"line\">                    .tabItem &#123;</span><br><span class=\"line\">                        <span class=\"type\">Label</span>(<span class=\"string\">&quot;花园&quot;</span>,systemImage: <span class=\"string\">&quot;house.circle&quot;</span>)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    .tag(<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"operator\">...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .sensoryFeedback(.selection, trigger: selectedTab)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>selection</code> 是一种标准的系统触觉反馈，通常用于表示用户在选择器、列表或其他 UI 元素中进行了选择或状态改变</li>\n</ul>\n","_processedHighlight":true},{"title":"Prisma","date":"2025-04-28T06:00:00.000Z","excerpt":"在图书管理系统的后端中, 使用Prisma连接本地的sql数据库.","_content":"\n### Prisma 命令行相关\n\n#### 数据库迁移\n\n1. **创建并应用新的迁移**：\n   \n   ```bash\n   npx prisma migrate dev --name add_timestamps\n   ```\n   - 根据 `schema.prisma` 的更改生成迁移文件，并应用到数据库。\n   - `--name` 指定迁移的名称。\n   \n2. **重置并重新应用所有迁移**：\n   \n   ```bash\n   npx prisma migrate reset\n   ```\n   - 重置数据库并重新应用所有迁移，适用于开发环境。\n   \n3. **生成迁移文件但不应用**：\n   ```bash\n   npx prisma migrate dev --create-only\n   ```\n   - 生成迁移文件但不应用到数据库，可以手动修改迁移文件后再应用。\n\n4. **应用未应用的迁移**：\n   ```bash\n   npx prisma migrate deploy\n   ```\n   - 将未应用的迁移应用到生产环境。\n\n5. **查看迁移状态**：\n   ```bash\n   npx prisma migrate status\n   ```\n   - 查看当前数据库的迁移状态。\n   \n6. **回滚迁移状体**;\n\n   ```bash\n   npx prisma migrate resolve --rolled-back <migration_name>\n   ```\n\n   \n\n---\n\n#### 数据库操作\n\n1. **生成 Prisma 客户端**：\n   ```bash\n   npx prisma generate\n   ```\n   - 根据 `schema.prisma` 生成 Prisma 客户端代码。\n\n2. **推送 schema 到数据库（不生成迁移）**：\n   ```bash\n   npx prisma db push\n   ```\n   - 将 `schema.prisma` 的更改直接应用到数据库，不生成迁移文件。\n\n3. **查看数据库数据**：\n   ```bash\n   npx prisma studio\n   ```\n   - 启动 Prisma Studio，一个可视化工具，用于查看和操作数据库数据。\n\n---\n\n#### 数据操作\n\n1. **执行种子脚本**：\n   ```bash\n   npx prisma db seed\n   ```\n   - 运行 `prisma/seed.ts` 或 `prisma/seed.js` 脚本，用于填充数据库初始数据。\n\n2. **运行自定义脚本**：\n   ```bash\n   npx prisma execute --file ./scripts/my-script.ts\n   ```\n   - 执行自定义的 TypeScript 或 JavaScript 脚本。\n\n---\n\n#### 其他常用命令\n\n1. **初始化 Prisma**：\n   ```bash\n   npx prisma init\n   ```\n   - 初始化 Prisma，生成 `prisma/schema.prisma` 和 `.env` 文件。\n\n2. **格式化 `schema.prisma`**：\n   ```bash\n   npx prisma format\n   ```\n   - 格式化 `schema.prisma` 文件，使其更易读。\n\n3. **检查 Prisma 版本**：\n   ```bash\n   npx prisma --version\n   ```\n   - 查看当前安装的 Prisma 版本。\n\n4. **清理未使用的迁移文件**：\n   ```bash\n   npx prisma migrate resolve --applied \"20231010123456_add_timestamps\"\n   ```\n   - 标记迁移文件为已应用，用于修复迁移状态不一致的问题。\n\n---\n\n\n\n### 语言特性\n\nPrisma 中的关系定义需要双向声明\n\n- 在引用表中进行外键的声明\n\n  ```sql\n  model BorrowRecord {\n  \tbookId string \n  \tbook       Book       @relation(fields: [bookId], references: [id])\n  }\n  ```\n\n  > 表示当前表中的 `bookId`字段是被应用表 `Book` 的属性 `id`的外键.\n\n- 同时在被引用表中定义:\n\n  ```sql\n  model Book{\n    id             String         @id\n    borrowRecords  BorrowRecord[] // 添加反向关系\n  }\n  ```\n\n\n\n\n\n---\n\n### 使用TS交互客户端\n\nPrisma Client 是一个类型安全的数据库查询工具，它根据 `schema.prisma` 文件生成 TypeScript 类型定义和数据库操作 API。\n\n以下是其主要功能及代码示例。\n\n---\n\n#### 1. **初始化 Prisma Client**\n\n在使用 Prisma Client 之前，需要初始化一个 `PrismaClient` 实例。\n\n```typescript\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n```\n\n---\n\n#### 2. **查询数据**\n\n- **查询所有记录**\n\n使用 `findMany` 方法查询表中的所有记录。\n\n```typescript\nasync function getAllUsers() {\n  const users = await prisma.user.findMany();\n  console.log('All users:', users);\n}\n\ngetAllUsers();\n```\n\n- **查询单条记录**\n\n使用 `findUnique` 方法根据唯一条件查询单条记录。\n\n```typescript\nasync function getUserById(id: number) {\n  const user = await prisma.user.findUnique({\n    where: { id },\n  });\n  console.log('User:', user);\n}\n\ngetUserById(1);\n```\n\n- **条件查询**\n\n使用 `where` 条件过滤查询结果。\n\n```typescript\nasync function getUsersByName(name: string) {\n  const users = await prisma.user.findMany({\n    where: { name },\n  });\n  console.log('Users with name:', name, users);\n}\n\ngetUsersByName('Alice');\n```\n\n---\n\n#### 3. **创建数据**\n\n使用 `create` 方法插入新数据:\n\n```typescript\nasync function createUser(name: string, email: string) {\n  const newUser = await prisma.user.create({\n    data: {\n      name,\n      email,\n    },\n  });\n  console.log('Created new user:', newUser);\n}\n\ncreateUser('Bob', 'bob@example.com');\n```\n\n---\n\n#### 4. **更新数据**\n\n使用 `update` 方法修改现有数据。\n\n```typescript\nasync function updateUserEmail(id: number, newEmail: string) {\n  const updatedUser = await prisma.user.update({\n    where: { id },\n    data: { email: newEmail },\n  });\n  console.log('Updated user:', updatedUser);\n}\n\nupdateUserEmail(1, 'alice_new@example.com');\n```\n\n---\n\n#### 5. **删除数据**\n\n使用 `delete` 方法删除数据。\n\n```typescript\nasync function deleteUser(id: number) {\n  const deletedUser = await prisma.user.delete({\n    where: { id },\n  });\n  console.log('Deleted user:', deletedUser);\n}\n\ndeleteUser(1);\n```\n\n---\n\n#### 6. **关系查询**\n\n- **查询关联数据**\n\n使用 `include` 查询关联的模型数据。\n\n```typescript\nasync function getUserWithPosts(userId: number) {\n  const userWithPosts = await prisma.user.findUnique({\n    where: { id: userId },\n    include: { posts: true }, // 假设 User 模型与 Post 模型有关联\n  });\n  console.log('User with posts:', userWithPosts);\n}\n\ngetUserWithPosts(1);\n```\n\n- **嵌套查询**\n\n支持嵌套查询关联数据。\n\n```typescript\nasync function getPostWithAuthor(postId: number) {\n  const postWithAuthor = await prisma.post.findUnique({\n    where: { id: postId },\n    include: { author: true }, // 假设 Post 模型与 User 模型有关联\n  });\n  console.log('Post with author:', postWithAuthor);\n}\n\ngetPostWithAuthor(1);\n```\n\n---\n\n#### 7. **分页查询**\n\n使用 `skip` 和 `take` 实现分页查询。\n\n```typescript\nasync function getUsersPaginated(page: number, pageSize: number) {\n  const users = await prisma.user.findMany({\n    skip: (page - 1) * pageSize,\n    take: pageSize,\n  });\n  console.log('Paginated users:', users);\n}\n\ngetUsersPaginated(1, 10); // 查询第 1 页，每页 10 条记录\n```\n\n---\n\n#### 8. **排序查询**\n\n使用 `orderBy` 对查询结果排序。\n\n```typescript\nasync function getUsersSortedByName() {\n  const users = await prisma.user.findMany({\n    orderBy: { name: 'asc' }, // 按 name 字段升序排序\n  });\n  console.log('Sorted users:', users);\n}\n\ngetUsersSortedByName();\n```\n\n---\n\n#### 9. **聚合查询**\n\n使用 `count`、`sum`、`avg` 等聚合函数。\n\n- **统计记录数**\n\n```typescript\nasync function countUsers() {\n  const userCount = await prisma.user.count();\n  console.log('Total users:', userCount);\n}\n\ncountUsers();\n```\n\n- **计算字段平均值**\n\n```typescript\nasync function averageUserAge() {\n  const avgAge = await prisma.user.aggregate({\n    _avg: { age: true }, // 假设 User 模型有 age 字段\n  });\n  console.log('Average user age:', avgAge._avg.age);\n}\n\naverageUserAge();\n```\n\n---\n\n#### 10. **事务操作**\n\n使用 `$transaction` 执行事务操作。\n\n```typescript\nasync function transferBalance(fromId: number, toId: number, amount: number) {\n  await prisma.$transaction([\n    prisma.user.update({\n      where: { id: fromId },\n      data: { balance: { decrement: amount } }, // 假设 User 模型有 balance 字段\n    }),\n    prisma.user.update({\n      where: { id: toId },\n      data: { balance: { increment: amount } },\n    }),\n  ]);\n  console.log('Balance transfer completed');\n}\n\ntransferBalance(1, 2, 100);\n```\n\n---\n\n#### 11. **关闭 Prisma Client**\n\n在程序结束时，关闭 Prisma Client 以释放数据库连接。\n\n```typescript\nasync function main() {\n  // 数据库操作代码\n}\n\nmain()\n  .catch(e => {\n    console.error(e);\n  })\n  .finally(async () => {\n    await prisma.$disconnect();\n  });\n```\n\n---\n\n","source":"_posts/Prisma.md","raw":"---\ntitle: Prisma\ndate: 2025-04-28 14:00\ntags: 数据库\ncategories: 前后端开发\nexcerpt: 在图书管理系统的后端中, 使用Prisma连接本地的sql数据库.\n---\n\n### Prisma 命令行相关\n\n#### 数据库迁移\n\n1. **创建并应用新的迁移**：\n   \n   ```bash\n   npx prisma migrate dev --name add_timestamps\n   ```\n   - 根据 `schema.prisma` 的更改生成迁移文件，并应用到数据库。\n   - `--name` 指定迁移的名称。\n   \n2. **重置并重新应用所有迁移**：\n   \n   ```bash\n   npx prisma migrate reset\n   ```\n   - 重置数据库并重新应用所有迁移，适用于开发环境。\n   \n3. **生成迁移文件但不应用**：\n   ```bash\n   npx prisma migrate dev --create-only\n   ```\n   - 生成迁移文件但不应用到数据库，可以手动修改迁移文件后再应用。\n\n4. **应用未应用的迁移**：\n   ```bash\n   npx prisma migrate deploy\n   ```\n   - 将未应用的迁移应用到生产环境。\n\n5. **查看迁移状态**：\n   ```bash\n   npx prisma migrate status\n   ```\n   - 查看当前数据库的迁移状态。\n   \n6. **回滚迁移状体**;\n\n   ```bash\n   npx prisma migrate resolve --rolled-back <migration_name>\n   ```\n\n   \n\n---\n\n#### 数据库操作\n\n1. **生成 Prisma 客户端**：\n   ```bash\n   npx prisma generate\n   ```\n   - 根据 `schema.prisma` 生成 Prisma 客户端代码。\n\n2. **推送 schema 到数据库（不生成迁移）**：\n   ```bash\n   npx prisma db push\n   ```\n   - 将 `schema.prisma` 的更改直接应用到数据库，不生成迁移文件。\n\n3. **查看数据库数据**：\n   ```bash\n   npx prisma studio\n   ```\n   - 启动 Prisma Studio，一个可视化工具，用于查看和操作数据库数据。\n\n---\n\n#### 数据操作\n\n1. **执行种子脚本**：\n   ```bash\n   npx prisma db seed\n   ```\n   - 运行 `prisma/seed.ts` 或 `prisma/seed.js` 脚本，用于填充数据库初始数据。\n\n2. **运行自定义脚本**：\n   ```bash\n   npx prisma execute --file ./scripts/my-script.ts\n   ```\n   - 执行自定义的 TypeScript 或 JavaScript 脚本。\n\n---\n\n#### 其他常用命令\n\n1. **初始化 Prisma**：\n   ```bash\n   npx prisma init\n   ```\n   - 初始化 Prisma，生成 `prisma/schema.prisma` 和 `.env` 文件。\n\n2. **格式化 `schema.prisma`**：\n   ```bash\n   npx prisma format\n   ```\n   - 格式化 `schema.prisma` 文件，使其更易读。\n\n3. **检查 Prisma 版本**：\n   ```bash\n   npx prisma --version\n   ```\n   - 查看当前安装的 Prisma 版本。\n\n4. **清理未使用的迁移文件**：\n   ```bash\n   npx prisma migrate resolve --applied \"20231010123456_add_timestamps\"\n   ```\n   - 标记迁移文件为已应用，用于修复迁移状态不一致的问题。\n\n---\n\n\n\n### 语言特性\n\nPrisma 中的关系定义需要双向声明\n\n- 在引用表中进行外键的声明\n\n  ```sql\n  model BorrowRecord {\n  \tbookId string \n  \tbook       Book       @relation(fields: [bookId], references: [id])\n  }\n  ```\n\n  > 表示当前表中的 `bookId`字段是被应用表 `Book` 的属性 `id`的外键.\n\n- 同时在被引用表中定义:\n\n  ```sql\n  model Book{\n    id             String         @id\n    borrowRecords  BorrowRecord[] // 添加反向关系\n  }\n  ```\n\n\n\n\n\n---\n\n### 使用TS交互客户端\n\nPrisma Client 是一个类型安全的数据库查询工具，它根据 `schema.prisma` 文件生成 TypeScript 类型定义和数据库操作 API。\n\n以下是其主要功能及代码示例。\n\n---\n\n#### 1. **初始化 Prisma Client**\n\n在使用 Prisma Client 之前，需要初始化一个 `PrismaClient` 实例。\n\n```typescript\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n```\n\n---\n\n#### 2. **查询数据**\n\n- **查询所有记录**\n\n使用 `findMany` 方法查询表中的所有记录。\n\n```typescript\nasync function getAllUsers() {\n  const users = await prisma.user.findMany();\n  console.log('All users:', users);\n}\n\ngetAllUsers();\n```\n\n- **查询单条记录**\n\n使用 `findUnique` 方法根据唯一条件查询单条记录。\n\n```typescript\nasync function getUserById(id: number) {\n  const user = await prisma.user.findUnique({\n    where: { id },\n  });\n  console.log('User:', user);\n}\n\ngetUserById(1);\n```\n\n- **条件查询**\n\n使用 `where` 条件过滤查询结果。\n\n```typescript\nasync function getUsersByName(name: string) {\n  const users = await prisma.user.findMany({\n    where: { name },\n  });\n  console.log('Users with name:', name, users);\n}\n\ngetUsersByName('Alice');\n```\n\n---\n\n#### 3. **创建数据**\n\n使用 `create` 方法插入新数据:\n\n```typescript\nasync function createUser(name: string, email: string) {\n  const newUser = await prisma.user.create({\n    data: {\n      name,\n      email,\n    },\n  });\n  console.log('Created new user:', newUser);\n}\n\ncreateUser('Bob', 'bob@example.com');\n```\n\n---\n\n#### 4. **更新数据**\n\n使用 `update` 方法修改现有数据。\n\n```typescript\nasync function updateUserEmail(id: number, newEmail: string) {\n  const updatedUser = await prisma.user.update({\n    where: { id },\n    data: { email: newEmail },\n  });\n  console.log('Updated user:', updatedUser);\n}\n\nupdateUserEmail(1, 'alice_new@example.com');\n```\n\n---\n\n#### 5. **删除数据**\n\n使用 `delete` 方法删除数据。\n\n```typescript\nasync function deleteUser(id: number) {\n  const deletedUser = await prisma.user.delete({\n    where: { id },\n  });\n  console.log('Deleted user:', deletedUser);\n}\n\ndeleteUser(1);\n```\n\n---\n\n#### 6. **关系查询**\n\n- **查询关联数据**\n\n使用 `include` 查询关联的模型数据。\n\n```typescript\nasync function getUserWithPosts(userId: number) {\n  const userWithPosts = await prisma.user.findUnique({\n    where: { id: userId },\n    include: { posts: true }, // 假设 User 模型与 Post 模型有关联\n  });\n  console.log('User with posts:', userWithPosts);\n}\n\ngetUserWithPosts(1);\n```\n\n- **嵌套查询**\n\n支持嵌套查询关联数据。\n\n```typescript\nasync function getPostWithAuthor(postId: number) {\n  const postWithAuthor = await prisma.post.findUnique({\n    where: { id: postId },\n    include: { author: true }, // 假设 Post 模型与 User 模型有关联\n  });\n  console.log('Post with author:', postWithAuthor);\n}\n\ngetPostWithAuthor(1);\n```\n\n---\n\n#### 7. **分页查询**\n\n使用 `skip` 和 `take` 实现分页查询。\n\n```typescript\nasync function getUsersPaginated(page: number, pageSize: number) {\n  const users = await prisma.user.findMany({\n    skip: (page - 1) * pageSize,\n    take: pageSize,\n  });\n  console.log('Paginated users:', users);\n}\n\ngetUsersPaginated(1, 10); // 查询第 1 页，每页 10 条记录\n```\n\n---\n\n#### 8. **排序查询**\n\n使用 `orderBy` 对查询结果排序。\n\n```typescript\nasync function getUsersSortedByName() {\n  const users = await prisma.user.findMany({\n    orderBy: { name: 'asc' }, // 按 name 字段升序排序\n  });\n  console.log('Sorted users:', users);\n}\n\ngetUsersSortedByName();\n```\n\n---\n\n#### 9. **聚合查询**\n\n使用 `count`、`sum`、`avg` 等聚合函数。\n\n- **统计记录数**\n\n```typescript\nasync function countUsers() {\n  const userCount = await prisma.user.count();\n  console.log('Total users:', userCount);\n}\n\ncountUsers();\n```\n\n- **计算字段平均值**\n\n```typescript\nasync function averageUserAge() {\n  const avgAge = await prisma.user.aggregate({\n    _avg: { age: true }, // 假设 User 模型有 age 字段\n  });\n  console.log('Average user age:', avgAge._avg.age);\n}\n\naverageUserAge();\n```\n\n---\n\n#### 10. **事务操作**\n\n使用 `$transaction` 执行事务操作。\n\n```typescript\nasync function transferBalance(fromId: number, toId: number, amount: number) {\n  await prisma.$transaction([\n    prisma.user.update({\n      where: { id: fromId },\n      data: { balance: { decrement: amount } }, // 假设 User 模型有 balance 字段\n    }),\n    prisma.user.update({\n      where: { id: toId },\n      data: { balance: { increment: amount } },\n    }),\n  ]);\n  console.log('Balance transfer completed');\n}\n\ntransferBalance(1, 2, 100);\n```\n\n---\n\n#### 11. **关闭 Prisma Client**\n\n在程序结束时，关闭 Prisma Client 以释放数据库连接。\n\n```typescript\nasync function main() {\n  // 数据库操作代码\n}\n\nmain()\n  .catch(e => {\n    console.error(e);\n  })\n  .finally(async () => {\n    await prisma.$disconnect();\n  });\n```\n\n---\n\n","slug":"Prisma","published":1,"updated":"2025-05-08T15:31:52.460Z","comments":1,"layout":"post","photos":[],"_id":"cmcbm7pq80003e2qgeooa8v4h","content":"<h3 id=\"Prisma-命令行相关\"><a href=\"#Prisma-命令行相关\" class=\"headerlink\" title=\"Prisma 命令行相关\"></a>Prisma 命令行相关</h3><h4 id=\"数据库迁移\"><a href=\"#数据库迁移\" class=\"headerlink\" title=\"数据库迁移\"></a>数据库迁移</h4><ol>\n<li><p><strong>创建并应用新的迁移</strong>：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx prisma migrate dev --name add_timestamps</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>根据 <code>schema.prisma</code> 的更改生成迁移文件，并应用到数据库。</li>\n<li><code>--name</code> 指定迁移的名称。</li>\n</ul>\n</li>\n<li><p><strong>重置并重新应用所有迁移</strong>：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx prisma migrate reset</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>重置数据库并重新应用所有迁移，适用于开发环境。</li>\n</ul>\n</li>\n<li><p><strong>生成迁移文件但不应用</strong>：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx prisma migrate dev --create-only</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>生成迁移文件但不应用到数据库，可以手动修改迁移文件后再应用。</li>\n</ul>\n</li>\n<li><p><strong>应用未应用的迁移</strong>：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx prisma migrate deploy</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>将未应用的迁移应用到生产环境。</li>\n</ul>\n</li>\n<li><p><strong>查看迁移状态</strong>：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx prisma migrate status</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>查看当前数据库的迁移状态。</li>\n</ul>\n</li>\n<li><p><strong>回滚迁移状体</strong>;</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx prisma migrate resolve --rolled-back &lt;migration_name&gt;</span><br></pre></td></tr></table></figure></div></li>\n</ol>\n<hr>\n<h4 id=\"数据库操作\"><a href=\"#数据库操作\" class=\"headerlink\" title=\"数据库操作\"></a>数据库操作</h4><ol>\n<li><p><strong>生成 Prisma 客户端</strong>：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx prisma generate</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>根据 <code>schema.prisma</code> 生成 Prisma 客户端代码。</li>\n</ul>\n</li>\n<li><p><strong>推送 schema 到数据库（不生成迁移）</strong>：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx prisma db push</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>将 <code>schema.prisma</code> 的更改直接应用到数据库，不生成迁移文件。</li>\n</ul>\n</li>\n<li><p><strong>查看数据库数据</strong>：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx prisma studio</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>启动 Prisma Studio，一个可视化工具，用于查看和操作数据库数据。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h4 id=\"数据操作\"><a href=\"#数据操作\" class=\"headerlink\" title=\"数据操作\"></a>数据操作</h4><ol>\n<li><p><strong>执行种子脚本</strong>：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx prisma db seed</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>运行 <code>prisma/seed.ts</code> 或 <code>prisma/seed.js</code> 脚本，用于填充数据库初始数据。</li>\n</ul>\n</li>\n<li><p><strong>运行自定义脚本</strong>：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx prisma execute --file ./scripts/my-script.ts</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>执行自定义的 TypeScript 或 JavaScript 脚本。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h4 id=\"其他常用命令\"><a href=\"#其他常用命令\" class=\"headerlink\" title=\"其他常用命令\"></a>其他常用命令</h4><ol>\n<li><p><strong>初始化 Prisma</strong>：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx prisma init</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>初始化 Prisma，生成 <code>prisma/schema.prisma</code> 和 <code>.env</code> 文件。</li>\n</ul>\n</li>\n<li><p><strong>格式化 <code>schema.prisma</code></strong>：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx prisma format</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>格式化 <code>schema.prisma</code> 文件，使其更易读。</li>\n</ul>\n</li>\n<li><p><strong>检查 Prisma 版本</strong>：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx prisma --version</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>查看当前安装的 Prisma 版本。</li>\n</ul>\n</li>\n<li><p><strong>清理未使用的迁移文件</strong>：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx prisma migrate resolve --applied <span class=\"string\">&quot;20231010123456_add_timestamps&quot;</span></span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>标记迁移文件为已应用，用于修复迁移状态不一致的问题。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"语言特性\"><a href=\"#语言特性\" class=\"headerlink\" title=\"语言特性\"></a>语言特性</h3><p>Prisma 中的关系定义需要双向声明</p>\n<ul>\n<li><p>在引用表中进行外键的声明</p>\n<div class=\"code-container\" data-rel=\"Sql\"><figure class=\"iseeu highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">model BorrowRecord &#123;</span><br><span class=\"line\">\tbookId string </span><br><span class=\"line\">\tbook       Book       <span class=\"variable\">@relation</span>(fields: [bookId], <span class=\"keyword\">references</span>: [id])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>表示当前表中的 <code>bookId</code>字段是被应用表 <code>Book</code> 的属性 <code>id</code>的外键.</p>\n</blockquote>\n</li>\n<li><p>同时在被引用表中定义:</p>\n<div class=\"code-container\" data-rel=\"Sql\"><figure class=\"iseeu highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">model Book&#123;</span><br><span class=\"line\">  id             String         <span class=\"variable\">@id</span></span><br><span class=\"line\">  borrowRecords  BorrowRecord[] <span class=\"operator\">/</span><span class=\"operator\">/</span> 添加反向关系</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<hr>\n<h3 id=\"使用TS交互客户端\"><a href=\"#使用TS交互客户端\" class=\"headerlink\" title=\"使用TS交互客户端\"></a>使用TS交互客户端</h3><p>Prisma Client 是一个类型安全的数据库查询工具，它根据 <code>schema.prisma</code> 文件生成 TypeScript 类型定义和数据库操作 API。</p>\n<p>以下是其主要功能及代码示例。</p>\n<hr>\n<h4 id=\"1-初始化-Prisma-Client\"><a href=\"#1-初始化-Prisma-Client\" class=\"headerlink\" title=\"1. 初始化 Prisma Client\"></a>1. <strong>初始化 Prisma Client</strong></h4><p>在使用 Prisma Client 之前，需要初始化一个 <code>PrismaClient</code> 实例。</p>\n<div class=\"code-container\" data-rel=\"Typescript\"><figure class=\"iseeu highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">PrismaClient</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@prisma/client&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> prisma = <span class=\"keyword\">new</span> <span class=\"title class_\">PrismaClient</span>();</span><br></pre></td></tr></table></figure></div>\n\n<hr>\n<h4 id=\"2-查询数据\"><a href=\"#2-查询数据\" class=\"headerlink\" title=\"2. 查询数据\"></a>2. <strong>查询数据</strong></h4><ul>\n<li><strong>查询所有记录</strong></li>\n</ul>\n<p>使用 <code>findMany</code> 方法查询表中的所有记录。</p>\n<div class=\"code-container\" data-rel=\"Typescript\"><figure class=\"iseeu highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getAllUsers</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> users = <span class=\"keyword\">await</span> prisma.<span class=\"property\">user</span>.<span class=\"title function_\">findMany</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;All users:&#x27;</span>, users);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">getAllUsers</span>();</span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li><strong>查询单条记录</strong></li>\n</ul>\n<p>使用 <code>findUnique</code> 方法根据唯一条件查询单条记录。</p>\n<div class=\"code-container\" data-rel=\"Typescript\"><figure class=\"iseeu highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getUserById</span>(<span class=\"params\"><span class=\"attr\">id</span>: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> user = <span class=\"keyword\">await</span> prisma.<span class=\"property\">user</span>.<span class=\"title function_\">findUnique</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">where</span>: &#123; id &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;User:&#x27;</span>, user);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">getUserById</span>(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li><strong>条件查询</strong></li>\n</ul>\n<p>使用 <code>where</code> 条件过滤查询结果。</p>\n<div class=\"code-container\" data-rel=\"Typescript\"><figure class=\"iseeu highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getUsersByName</span>(<span class=\"params\"><span class=\"attr\">name</span>: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> users = <span class=\"keyword\">await</span> prisma.<span class=\"property\">user</span>.<span class=\"title function_\">findMany</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">where</span>: &#123; name &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Users with name:&#x27;</span>, name, users);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">getUsersByName</span>(<span class=\"string\">&#x27;Alice&#x27;</span>);</span><br></pre></td></tr></table></figure></div>\n\n<hr>\n<h4 id=\"3-创建数据\"><a href=\"#3-创建数据\" class=\"headerlink\" title=\"3. 创建数据\"></a>3. <strong>创建数据</strong></h4><p>使用 <code>create</code> 方法插入新数据:</p>\n<div class=\"code-container\" data-rel=\"Typescript\"><figure class=\"iseeu highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createUser</span>(<span class=\"params\"><span class=\"attr\">name</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">email</span>: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newUser = <span class=\"keyword\">await</span> prisma.<span class=\"property\">user</span>.<span class=\"title function_\">create</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">      name,</span><br><span class=\"line\">      email,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Created new user:&#x27;</span>, newUser);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">createUser</span>(<span class=\"string\">&#x27;Bob&#x27;</span>, <span class=\"string\">&#x27;bob@example.com&#x27;</span>);</span><br></pre></td></tr></table></figure></div>\n\n<hr>\n<h4 id=\"4-更新数据\"><a href=\"#4-更新数据\" class=\"headerlink\" title=\"4. 更新数据\"></a>4. <strong>更新数据</strong></h4><p>使用 <code>update</code> 方法修改现有数据。</p>\n<div class=\"code-container\" data-rel=\"Typescript\"><figure class=\"iseeu highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">updateUserEmail</span>(<span class=\"params\"><span class=\"attr\">id</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">newEmail</span>: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> updatedUser = <span class=\"keyword\">await</span> prisma.<span class=\"property\">user</span>.<span class=\"title function_\">update</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">where</span>: &#123; id &#125;,</span><br><span class=\"line\">    <span class=\"attr\">data</span>: &#123; <span class=\"attr\">email</span>: newEmail &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Updated user:&#x27;</span>, updatedUser);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">updateUserEmail</span>(<span class=\"number\">1</span>, <span class=\"string\">&#x27;alice_new@example.com&#x27;</span>);</span><br></pre></td></tr></table></figure></div>\n\n<hr>\n<h4 id=\"5-删除数据\"><a href=\"#5-删除数据\" class=\"headerlink\" title=\"5. 删除数据\"></a>5. <strong>删除数据</strong></h4><p>使用 <code>delete</code> 方法删除数据。</p>\n<div class=\"code-container\" data-rel=\"Typescript\"><figure class=\"iseeu highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">deleteUser</span>(<span class=\"params\"><span class=\"attr\">id</span>: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> deletedUser = <span class=\"keyword\">await</span> prisma.<span class=\"property\">user</span>.<span class=\"title function_\">delete</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">where</span>: &#123; id &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Deleted user:&#x27;</span>, deletedUser);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">deleteUser</span>(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure></div>\n\n<hr>\n<h4 id=\"6-关系查询\"><a href=\"#6-关系查询\" class=\"headerlink\" title=\"6. 关系查询\"></a>6. <strong>关系查询</strong></h4><ul>\n<li><strong>查询关联数据</strong></li>\n</ul>\n<p>使用 <code>include</code> 查询关联的模型数据。</p>\n<div class=\"code-container\" data-rel=\"Typescript\"><figure class=\"iseeu highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getUserWithPosts</span>(<span class=\"params\"><span class=\"attr\">userId</span>: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> userWithPosts = <span class=\"keyword\">await</span> prisma.<span class=\"property\">user</span>.<span class=\"title function_\">findUnique</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">where</span>: &#123; <span class=\"attr\">id</span>: userId &#125;,</span><br><span class=\"line\">    <span class=\"attr\">include</span>: &#123; <span class=\"attr\">posts</span>: <span class=\"literal\">true</span> &#125;, <span class=\"comment\">// 假设 User 模型与 Post 模型有关联</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;User with posts:&#x27;</span>, userWithPosts);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">getUserWithPosts</span>(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li><strong>嵌套查询</strong></li>\n</ul>\n<p>支持嵌套查询关联数据。</p>\n<div class=\"code-container\" data-rel=\"Typescript\"><figure class=\"iseeu highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getPostWithAuthor</span>(<span class=\"params\"><span class=\"attr\">postId</span>: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> postWithAuthor = <span class=\"keyword\">await</span> prisma.<span class=\"property\">post</span>.<span class=\"title function_\">findUnique</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">where</span>: &#123; <span class=\"attr\">id</span>: postId &#125;,</span><br><span class=\"line\">    <span class=\"attr\">include</span>: &#123; <span class=\"attr\">author</span>: <span class=\"literal\">true</span> &#125;, <span class=\"comment\">// 假设 Post 模型与 User 模型有关联</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Post with author:&#x27;</span>, postWithAuthor);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">getPostWithAuthor</span>(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure></div>\n\n<hr>\n<h4 id=\"7-分页查询\"><a href=\"#7-分页查询\" class=\"headerlink\" title=\"7. 分页查询\"></a>7. <strong>分页查询</strong></h4><p>使用 <code>skip</code> 和 <code>take</code> 实现分页查询。</p>\n<div class=\"code-container\" data-rel=\"Typescript\"><figure class=\"iseeu highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getUsersPaginated</span>(<span class=\"params\"><span class=\"attr\">page</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">pageSize</span>: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> users = <span class=\"keyword\">await</span> prisma.<span class=\"property\">user</span>.<span class=\"title function_\">findMany</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">skip</span>: (page - <span class=\"number\">1</span>) * pageSize,</span><br><span class=\"line\">    <span class=\"attr\">take</span>: pageSize,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Paginated users:&#x27;</span>, users);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">getUsersPaginated</span>(<span class=\"number\">1</span>, <span class=\"number\">10</span>); <span class=\"comment\">// 查询第 1 页，每页 10 条记录</span></span><br></pre></td></tr></table></figure></div>\n\n<hr>\n<h4 id=\"8-排序查询\"><a href=\"#8-排序查询\" class=\"headerlink\" title=\"8. 排序查询\"></a>8. <strong>排序查询</strong></h4><p>使用 <code>orderBy</code> 对查询结果排序。</p>\n<div class=\"code-container\" data-rel=\"Typescript\"><figure class=\"iseeu highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getUsersSortedByName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> users = <span class=\"keyword\">await</span> prisma.<span class=\"property\">user</span>.<span class=\"title function_\">findMany</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">orderBy</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;asc&#x27;</span> &#125;, <span class=\"comment\">// 按 name 字段升序排序</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Sorted users:&#x27;</span>, users);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">getUsersSortedByName</span>();</span><br></pre></td></tr></table></figure></div>\n\n<hr>\n<h4 id=\"9-聚合查询\"><a href=\"#9-聚合查询\" class=\"headerlink\" title=\"9. 聚合查询\"></a>9. <strong>聚合查询</strong></h4><p>使用 <code>count</code>、<code>sum</code>、<code>avg</code> 等聚合函数。</p>\n<ul>\n<li><strong>统计记录数</strong></li>\n</ul>\n<div class=\"code-container\" data-rel=\"Typescript\"><figure class=\"iseeu highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">countUsers</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> userCount = <span class=\"keyword\">await</span> prisma.<span class=\"property\">user</span>.<span class=\"title function_\">count</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Total users:&#x27;</span>, userCount);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">countUsers</span>();</span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li><strong>计算字段平均值</strong></li>\n</ul>\n<div class=\"code-container\" data-rel=\"Typescript\"><figure class=\"iseeu highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">averageUserAge</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> avgAge = <span class=\"keyword\">await</span> prisma.<span class=\"property\">user</span>.<span class=\"title function_\">aggregate</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">_avg</span>: &#123; <span class=\"attr\">age</span>: <span class=\"literal\">true</span> &#125;, <span class=\"comment\">// 假设 User 模型有 age 字段</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Average user age:&#x27;</span>, avgAge.<span class=\"property\">_avg</span>.<span class=\"property\">age</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">averageUserAge</span>();</span><br></pre></td></tr></table></figure></div>\n\n<hr>\n<h4 id=\"10-事务操作\"><a href=\"#10-事务操作\" class=\"headerlink\" title=\"10. 事务操作\"></a>10. <strong>事务操作</strong></h4><p>使用 <code>$transaction</code> 执行事务操作。</p>\n<div class=\"code-container\" data-rel=\"Typescript\"><figure class=\"iseeu highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">transferBalance</span>(<span class=\"params\"><span class=\"attr\">fromId</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">toId</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">amount</span>: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> prisma.$transaction([</span><br><span class=\"line\">    prisma.<span class=\"property\">user</span>.<span class=\"title function_\">update</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">where</span>: &#123; <span class=\"attr\">id</span>: fromId &#125;,</span><br><span class=\"line\">      <span class=\"attr\">data</span>: &#123; <span class=\"attr\">balance</span>: &#123; <span class=\"attr\">decrement</span>: amount &#125; &#125;, <span class=\"comment\">// 假设 User 模型有 balance 字段</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    prisma.<span class=\"property\">user</span>.<span class=\"title function_\">update</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">where</span>: &#123; <span class=\"attr\">id</span>: toId &#125;,</span><br><span class=\"line\">      <span class=\"attr\">data</span>: &#123; <span class=\"attr\">balance</span>: &#123; <span class=\"attr\">increment</span>: amount &#125; &#125;,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ]);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Balance transfer completed&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">transferBalance</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">100</span>);</span><br></pre></td></tr></table></figure></div>\n\n<hr>\n<h4 id=\"11-关闭-Prisma-Client\"><a href=\"#11-关闭-Prisma-Client\" class=\"headerlink\" title=\"11. 关闭 Prisma Client\"></a>11. <strong>关闭 Prisma Client</strong></h4><p>在程序结束时，关闭 Prisma Client 以释放数据库连接。</p>\n<div class=\"code-container\" data-rel=\"Typescript\"><figure class=\"iseeu highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">main</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 数据库操作代码</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">main</span>()</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(e);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">finally</span>(<span class=\"title function_\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> prisma.$disconnect();</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure></div>\n\n<hr>\n","more":"<h3 id=\"Prisma-命令行相关\"><a href=\"#Prisma-命令行相关\" class=\"headerlink\" title=\"Prisma 命令行相关\"></a>Prisma 命令行相关</h3><h4 id=\"数据库迁移\"><a href=\"#数据库迁移\" class=\"headerlink\" title=\"数据库迁移\"></a>数据库迁移</h4><ol>\n<li><p><strong>创建并应用新的迁移</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx prisma migrate dev --name add_timestamps</span><br></pre></td></tr></table></figure>\n<ul>\n<li>根据 <code>schema.prisma</code> 的更改生成迁移文件，并应用到数据库。</li>\n<li><code>--name</code> 指定迁移的名称。</li>\n</ul>\n</li>\n<li><p><strong>重置并重新应用所有迁移</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx prisma migrate reset</span><br></pre></td></tr></table></figure>\n<ul>\n<li>重置数据库并重新应用所有迁移，适用于开发环境。</li>\n</ul>\n</li>\n<li><p><strong>生成迁移文件但不应用</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx prisma migrate dev --create-only</span><br></pre></td></tr></table></figure>\n<ul>\n<li>生成迁移文件但不应用到数据库，可以手动修改迁移文件后再应用。</li>\n</ul>\n</li>\n<li><p><strong>应用未应用的迁移</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx prisma migrate deploy</span><br></pre></td></tr></table></figure>\n<ul>\n<li>将未应用的迁移应用到生产环境。</li>\n</ul>\n</li>\n<li><p><strong>查看迁移状态</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx prisma migrate status</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看当前数据库的迁移状态。</li>\n</ul>\n</li>\n<li><p><strong>回滚迁移状体</strong>;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx prisma migrate resolve --rolled-back &lt;migration_name&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<h4 id=\"数据库操作\"><a href=\"#数据库操作\" class=\"headerlink\" title=\"数据库操作\"></a>数据库操作</h4><ol>\n<li><p><strong>生成 Prisma 客户端</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx prisma generate</span><br></pre></td></tr></table></figure>\n<ul>\n<li>根据 <code>schema.prisma</code> 生成 Prisma 客户端代码。</li>\n</ul>\n</li>\n<li><p><strong>推送 schema 到数据库（不生成迁移）</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx prisma db push</span><br></pre></td></tr></table></figure>\n<ul>\n<li>将 <code>schema.prisma</code> 的更改直接应用到数据库，不生成迁移文件。</li>\n</ul>\n</li>\n<li><p><strong>查看数据库数据</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx prisma studio</span><br></pre></td></tr></table></figure>\n<ul>\n<li>启动 Prisma Studio，一个可视化工具，用于查看和操作数据库数据。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h4 id=\"数据操作\"><a href=\"#数据操作\" class=\"headerlink\" title=\"数据操作\"></a>数据操作</h4><ol>\n<li><p><strong>执行种子脚本</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx prisma db seed</span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行 <code>prisma/seed.ts</code> 或 <code>prisma/seed.js</code> 脚本，用于填充数据库初始数据。</li>\n</ul>\n</li>\n<li><p><strong>运行自定义脚本</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx prisma execute --file ./scripts/my-script.ts</span><br></pre></td></tr></table></figure>\n<ul>\n<li>执行自定义的 TypeScript 或 JavaScript 脚本。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h4 id=\"其他常用命令\"><a href=\"#其他常用命令\" class=\"headerlink\" title=\"其他常用命令\"></a>其他常用命令</h4><ol>\n<li><p><strong>初始化 Prisma</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx prisma init</span><br></pre></td></tr></table></figure>\n<ul>\n<li>初始化 Prisma，生成 <code>prisma/schema.prisma</code> 和 <code>.env</code> 文件。</li>\n</ul>\n</li>\n<li><p><strong>格式化 <code>schema.prisma</code></strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx prisma format</span><br></pre></td></tr></table></figure>\n<ul>\n<li>格式化 <code>schema.prisma</code> 文件，使其更易读。</li>\n</ul>\n</li>\n<li><p><strong>检查 Prisma 版本</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx prisma --version</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看当前安装的 Prisma 版本。</li>\n</ul>\n</li>\n<li><p><strong>清理未使用的迁移文件</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx prisma migrate resolve --applied <span class=\"string\">&quot;20231010123456_add_timestamps&quot;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>标记迁移文件为已应用，用于修复迁移状态不一致的问题。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"语言特性\"><a href=\"#语言特性\" class=\"headerlink\" title=\"语言特性\"></a>语言特性</h3><p>Prisma 中的关系定义需要双向声明</p>\n<ul>\n<li><p>在引用表中进行外键的声明</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">model BorrowRecord &#123;</span><br><span class=\"line\">\tbookId string </span><br><span class=\"line\">\tbook       Book       <span class=\"variable\">@relation</span>(fields: [bookId], <span class=\"keyword\">references</span>: [id])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>表示当前表中的 <code>bookId</code>字段是被应用表 <code>Book</code> 的属性 <code>id</code>的外键.</p>\n</blockquote>\n</li>\n<li><p>同时在被引用表中定义:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">model Book&#123;</span><br><span class=\"line\">  id             String         <span class=\"variable\">@id</span></span><br><span class=\"line\">  borrowRecords  BorrowRecord[] <span class=\"operator\">/</span><span class=\"operator\">/</span> 添加反向关系</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h3 id=\"使用TS交互客户端\"><a href=\"#使用TS交互客户端\" class=\"headerlink\" title=\"使用TS交互客户端\"></a>使用TS交互客户端</h3><p>Prisma Client 是一个类型安全的数据库查询工具，它根据 <code>schema.prisma</code> 文件生成 TypeScript 类型定义和数据库操作 API。</p>\n<p>以下是其主要功能及代码示例。</p>\n<hr>\n<h4 id=\"1-初始化-Prisma-Client\"><a href=\"#1-初始化-Prisma-Client\" class=\"headerlink\" title=\"1. 初始化 Prisma Client\"></a>1. <strong>初始化 Prisma Client</strong></h4><p>在使用 Prisma Client 之前，需要初始化一个 <code>PrismaClient</code> 实例。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">PrismaClient</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@prisma/client&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> prisma = <span class=\"keyword\">new</span> <span class=\"title class_\">PrismaClient</span>();</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"2-查询数据\"><a href=\"#2-查询数据\" class=\"headerlink\" title=\"2. 查询数据\"></a>2. <strong>查询数据</strong></h4><ul>\n<li><strong>查询所有记录</strong></li>\n</ul>\n<p>使用 <code>findMany</code> 方法查询表中的所有记录。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getAllUsers</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> users = <span class=\"keyword\">await</span> prisma.<span class=\"property\">user</span>.<span class=\"title function_\">findMany</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;All users:&#x27;</span>, users);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">getAllUsers</span>();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>查询单条记录</strong></li>\n</ul>\n<p>使用 <code>findUnique</code> 方法根据唯一条件查询单条记录。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getUserById</span>(<span class=\"params\"><span class=\"attr\">id</span>: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> user = <span class=\"keyword\">await</span> prisma.<span class=\"property\">user</span>.<span class=\"title function_\">findUnique</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">where</span>: &#123; id &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;User:&#x27;</span>, user);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">getUserById</span>(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>条件查询</strong></li>\n</ul>\n<p>使用 <code>where</code> 条件过滤查询结果。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getUsersByName</span>(<span class=\"params\"><span class=\"attr\">name</span>: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> users = <span class=\"keyword\">await</span> prisma.<span class=\"property\">user</span>.<span class=\"title function_\">findMany</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">where</span>: &#123; name &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Users with name:&#x27;</span>, name, users);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">getUsersByName</span>(<span class=\"string\">&#x27;Alice&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"3-创建数据\"><a href=\"#3-创建数据\" class=\"headerlink\" title=\"3. 创建数据\"></a>3. <strong>创建数据</strong></h4><p>使用 <code>create</code> 方法插入新数据:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createUser</span>(<span class=\"params\"><span class=\"attr\">name</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">email</span>: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newUser = <span class=\"keyword\">await</span> prisma.<span class=\"property\">user</span>.<span class=\"title function_\">create</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">      name,</span><br><span class=\"line\">      email,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Created new user:&#x27;</span>, newUser);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">createUser</span>(<span class=\"string\">&#x27;Bob&#x27;</span>, <span class=\"string\">&#x27;bob@example.com&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"4-更新数据\"><a href=\"#4-更新数据\" class=\"headerlink\" title=\"4. 更新数据\"></a>4. <strong>更新数据</strong></h4><p>使用 <code>update</code> 方法修改现有数据。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">updateUserEmail</span>(<span class=\"params\"><span class=\"attr\">id</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">newEmail</span>: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> updatedUser = <span class=\"keyword\">await</span> prisma.<span class=\"property\">user</span>.<span class=\"title function_\">update</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">where</span>: &#123; id &#125;,</span><br><span class=\"line\">    <span class=\"attr\">data</span>: &#123; <span class=\"attr\">email</span>: newEmail &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Updated user:&#x27;</span>, updatedUser);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">updateUserEmail</span>(<span class=\"number\">1</span>, <span class=\"string\">&#x27;alice_new@example.com&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"5-删除数据\"><a href=\"#5-删除数据\" class=\"headerlink\" title=\"5. 删除数据\"></a>5. <strong>删除数据</strong></h4><p>使用 <code>delete</code> 方法删除数据。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">deleteUser</span>(<span class=\"params\"><span class=\"attr\">id</span>: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> deletedUser = <span class=\"keyword\">await</span> prisma.<span class=\"property\">user</span>.<span class=\"title function_\">delete</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">where</span>: &#123; id &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Deleted user:&#x27;</span>, deletedUser);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">deleteUser</span>(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"6-关系查询\"><a href=\"#6-关系查询\" class=\"headerlink\" title=\"6. 关系查询\"></a>6. <strong>关系查询</strong></h4><ul>\n<li><strong>查询关联数据</strong></li>\n</ul>\n<p>使用 <code>include</code> 查询关联的模型数据。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getUserWithPosts</span>(<span class=\"params\"><span class=\"attr\">userId</span>: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> userWithPosts = <span class=\"keyword\">await</span> prisma.<span class=\"property\">user</span>.<span class=\"title function_\">findUnique</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">where</span>: &#123; <span class=\"attr\">id</span>: userId &#125;,</span><br><span class=\"line\">    <span class=\"attr\">include</span>: &#123; <span class=\"attr\">posts</span>: <span class=\"literal\">true</span> &#125;, <span class=\"comment\">// 假设 User 模型与 Post 模型有关联</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;User with posts:&#x27;</span>, userWithPosts);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">getUserWithPosts</span>(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>嵌套查询</strong></li>\n</ul>\n<p>支持嵌套查询关联数据。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getPostWithAuthor</span>(<span class=\"params\"><span class=\"attr\">postId</span>: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> postWithAuthor = <span class=\"keyword\">await</span> prisma.<span class=\"property\">post</span>.<span class=\"title function_\">findUnique</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">where</span>: &#123; <span class=\"attr\">id</span>: postId &#125;,</span><br><span class=\"line\">    <span class=\"attr\">include</span>: &#123; <span class=\"attr\">author</span>: <span class=\"literal\">true</span> &#125;, <span class=\"comment\">// 假设 Post 模型与 User 模型有关联</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Post with author:&#x27;</span>, postWithAuthor);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">getPostWithAuthor</span>(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"7-分页查询\"><a href=\"#7-分页查询\" class=\"headerlink\" title=\"7. 分页查询\"></a>7. <strong>分页查询</strong></h4><p>使用 <code>skip</code> 和 <code>take</code> 实现分页查询。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getUsersPaginated</span>(<span class=\"params\"><span class=\"attr\">page</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">pageSize</span>: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> users = <span class=\"keyword\">await</span> prisma.<span class=\"property\">user</span>.<span class=\"title function_\">findMany</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">skip</span>: (page - <span class=\"number\">1</span>) * pageSize,</span><br><span class=\"line\">    <span class=\"attr\">take</span>: pageSize,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Paginated users:&#x27;</span>, users);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">getUsersPaginated</span>(<span class=\"number\">1</span>, <span class=\"number\">10</span>); <span class=\"comment\">// 查询第 1 页，每页 10 条记录</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"8-排序查询\"><a href=\"#8-排序查询\" class=\"headerlink\" title=\"8. 排序查询\"></a>8. <strong>排序查询</strong></h4><p>使用 <code>orderBy</code> 对查询结果排序。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getUsersSortedByName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> users = <span class=\"keyword\">await</span> prisma.<span class=\"property\">user</span>.<span class=\"title function_\">findMany</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">orderBy</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;asc&#x27;</span> &#125;, <span class=\"comment\">// 按 name 字段升序排序</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Sorted users:&#x27;</span>, users);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">getUsersSortedByName</span>();</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"9-聚合查询\"><a href=\"#9-聚合查询\" class=\"headerlink\" title=\"9. 聚合查询\"></a>9. <strong>聚合查询</strong></h4><p>使用 <code>count</code>、<code>sum</code>、<code>avg</code> 等聚合函数。</p>\n<ul>\n<li><strong>统计记录数</strong></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">countUsers</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> userCount = <span class=\"keyword\">await</span> prisma.<span class=\"property\">user</span>.<span class=\"title function_\">count</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Total users:&#x27;</span>, userCount);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">countUsers</span>();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>计算字段平均值</strong></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">averageUserAge</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> avgAge = <span class=\"keyword\">await</span> prisma.<span class=\"property\">user</span>.<span class=\"title function_\">aggregate</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">_avg</span>: &#123; <span class=\"attr\">age</span>: <span class=\"literal\">true</span> &#125;, <span class=\"comment\">// 假设 User 模型有 age 字段</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Average user age:&#x27;</span>, avgAge.<span class=\"property\">_avg</span>.<span class=\"property\">age</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">averageUserAge</span>();</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"10-事务操作\"><a href=\"#10-事务操作\" class=\"headerlink\" title=\"10. 事务操作\"></a>10. <strong>事务操作</strong></h4><p>使用 <code>$transaction</code> 执行事务操作。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">transferBalance</span>(<span class=\"params\"><span class=\"attr\">fromId</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">toId</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">amount</span>: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> prisma.$transaction([</span><br><span class=\"line\">    prisma.<span class=\"property\">user</span>.<span class=\"title function_\">update</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">where</span>: &#123; <span class=\"attr\">id</span>: fromId &#125;,</span><br><span class=\"line\">      <span class=\"attr\">data</span>: &#123; <span class=\"attr\">balance</span>: &#123; <span class=\"attr\">decrement</span>: amount &#125; &#125;, <span class=\"comment\">// 假设 User 模型有 balance 字段</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    prisma.<span class=\"property\">user</span>.<span class=\"title function_\">update</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">where</span>: &#123; <span class=\"attr\">id</span>: toId &#125;,</span><br><span class=\"line\">      <span class=\"attr\">data</span>: &#123; <span class=\"attr\">balance</span>: &#123; <span class=\"attr\">increment</span>: amount &#125; &#125;,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ]);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Balance transfer completed&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">transferBalance</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">100</span>);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"11-关闭-Prisma-Client\"><a href=\"#11-关闭-Prisma-Client\" class=\"headerlink\" title=\"11. 关闭 Prisma Client\"></a>11. <strong>关闭 Prisma Client</strong></h4><p>在程序结束时，关闭 Prisma Client 以释放数据库连接。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">main</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 数据库操作代码</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">main</span>()</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(e);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">finally</span>(<span class=\"title function_\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> prisma.$disconnect();</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n","_processedHighlight":true},{"title":"𝐜𝐡𝐚𝐭𝐒𝐐𝐋","date":"2025-05-08T15:30:56.000Z","thumbnail":"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250508164908220.png?imageSlim","excerpt":"~~你的下一款minisql, 何必是minisql.~~ chatSQL 是一个交互式 SQL 学习平台，通过人工智能技术生成个性化的 SQL 练习题，帮助用户从入门到精通 SQL 查询语言。平台结合了直观的数据库可视化工具、智能代码编辑器和即时反馈系统，为用户提供沉浸式学习体验。","_content":"<p align=\"center\" style=\"font-size: 1.2em; margin: 20px 0;\">\n  <a href=\"https://chat-sql-hazel.vercel.app/\" target=\"_blank\" style=\"font-size: 1.2em; font-weight: bold;\">Website</a>\n  <a href=\"https://github.com/ffy6511/chatSQL\" target=\"_blank\" style=\"font-size: 1.2em; font-weight: bold;\">Github Repo</a>\n</p>\n<p align=\"center\">\n  <a href=\"https://deepwiki.com/ffy6511/chatSQL\"><img src=\"https://deepwiki.com/badge.svg\" alt=\"Ask DeepWiki\" /></a>\n</p>\n\n**什么是chatSQL**:\n\nchatSQL 是一个交互式 SQL 学习平台，通过人工智能技术生成个性化的 SQL 练习题，帮助用户从入门到精通 SQL 查询语言。平台结合了直观的数据库可视化工具、智能代码编辑器和即时反馈系统，为用户提供沉浸式学习体验。无论您是 SQL 初学者还是希望提升查询技能的开发者，chatSQL 都能根据您的水平定制适合的学习内容，让 SQL 学习变得更加高效和有趣。\n\n## 产生背景\n在初学sql的时候, 总觉得在纸上谈兵的感觉不太切实, ~~总是不知道自己胡乱写的sql语句是否正确~~. 偶然的机会看到了一个在线的[自学sql网站](http://xuesql.cn/lesson/select_queries_with_constraints), 提供了数据库结构,元组信息以及sql编辑平台, 供用户实时查询:\n\n![](https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250508234644726.png?imageSlim)\n\n然而该网站的习题内容对免费用户十分有限, 不足以sql学习者反复的练习. 于是我想到, 为什么不自己做一个呢? \n\n### sql题目的生成\ngemini免费的api + dify上免费的工作流 = 无穷无尽的sql题目~\n\n由于有过dify平台上搭建工作流的经验, 我还是选择用dify来针对用户的需求生成不同难度和类型的sql题目. \n\n### schema的可视化\n在写数据库作业的时候, 意外发现了[chartDB](https://chartdb.io/)这个网站, 其中的数据库结构的可视化十分优雅.经过对其源码的\"探测\", 我挖掘到了xyflow这个组件库.\n![](https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250509000938549.png?imageSlim)\n\n同时, 我决定直接用MUI组件库中的表格作为数据库元组的展示, 让元组的信息更加直观.\n\n### sql语句的执行\n这部分可谓是项目中最难实现的任务了.\n\n其实一开始并没有立刻开始做chatSQL, 就是因为我没有现成的在虚拟/实际数据库中执行sql语句的方法. \n\n然而, 某天浏览数据库教材的时候, 意外发现了官网上存在一个前端执行sql语句查询的demo! 发现叫做[sql.js](https://sql.js.org/#/)的库似乎就可扮演在前端的sql引擎角色. 因此, 我觉得万事俱备了! 开始设计前后端的字段, 布局排版, 然后实现基础的UI...\n\n然而然而, 当我准备开始做sql引擎的时候, 发现sql.js竟然与react高版本框架和一些依赖不兼容! 然而我只剩下sql引擎的执行部分了... 也不好就此放弃. 那么就~~借助augment的力量~~自己写一个吧~\n\n1. 首先, 从monaco editor入手, 建立一个类似于vscode风格的代码编辑区;\n2. 然后, 利用[node-sql-parser](https://www.npmjs.com/package/node-sql-parser)库, 我们将标准的sql语句传入给解析组件, 获得ast语法树;\n3. 最后, 我们编写自己的sql执行引擎, 利用ast语法树执行sql语句.\n\n> 下面基本是项目仓库中README的部分.\n\n\n\n## ✨ 特性\n\n- 🤖 AI 生成练习：提供两种方式的习题来源\n  - 通过预设的教程, 循序渐进地练习`select`, `join`, 聚合操作与嵌套子查询等知识点.\n  - 与dify工作流交互, 输入难度,标签与描述自动生成 SQL 练习题.\n\n- 📊 数据库结构可视化：直观展示表关系和字段信息, 外检约束等信息一目了然;\n- ⌨️ Monaco编辑器与schema的补全整合：\n  - 支持sql语法高亮和悬浮的语法提示\n  - 针对当前schema信息提供`tab`的自动补全\n\n- 📝 即时结果验证：实时验证查询结果\n  - 由构建于前端的sql引擎0延迟地处理sql查询结果.\n  - 支持将查询结果与期望结果进行比较, 评价查询结果是否正确.\n\n\n\n\n## 🖥 界面预览\n\n### 初始化界面\n\n![](https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250508164908220.png?imageSlim)\n\n- 点击侧边栏中的“初始化教程”, 可以同预设的数据库表结构进行交互;\n- 点击侧边栏中的“帮助”, 可以查看基本的操作演示.\n\n### 数据库结构可视化\n\n![](https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250508165221364.png?imageSlim)\n\n- 默认显示数据库结构的可视化视图;\n- 可在左下角切换元组视图.\n\n### SQL 编辑器演示\n\n<img src=\"/img/edit.gif\" alt=\"编辑器演示\" width=\"80%\" />\n\n对应快捷键:\n\n- `command+enter` : 执行查询\n- `command+j`: 检测查询结果是否匹配;\n- `command+k`: 搜索历史记录.\n\n## 🛠 技术栈\n\n<p align=\"left\">\n  <img src=\"https://img.shields.io/badge/Next.js-black?style=for-the-badge&logo=next.js\" alt=\"Next.js\" />\n  <img src=\"https://img.shields.io/badge/React-61DAFB?style=for-the-badge&logo=react&logoColor=black\" alt=\"React\" />\n  <img src=\"https://img.shields.io/badge/TypeScript-3178C6?style=for-the-badge&logo=typescript&logoColor=white\" alt=\"TypeScript\" />\n  <img src=\"https://img.shields.io/badge/Ant%20Design-0170FE?style=for-the-badge&logo=antdesign&logoColor=white\" alt=\"Ant Design\" />\n  <img src=\"https://img.shields.io/badge/Material--UI-007FFF?style=for-the-badge&logo=mui&logoColor=white\" alt=\"Material-UI\" />\n  <img src=\"https://img.shields.io/badge/Monaco%20Editor-DD1100?style=for-the-badge&logo=visualstudiocode&logoColor=white\" alt=\"Monaco Editor\" />\n  <img src=\"https://img.shields.io/badge/XY%20Flow-22C55E?style=for-the-badge&logo=diagram&logoColor=white\" alt=\"XY Flow\" />\n</p>\n\n- **框架**: [Next.js](https://nextjs.org/) 15.3.0\n- **UI 组件**:\n  - [Ant Design](https://ant.design/) 5.24.6\n  - [Material-UI](https://mui.com/) 7.0.2\n- **编辑器**: [Monaco Editor](https://microsoft.github.io/monaco-editor/)\n- **流程图**:\n  - [XY Flow](https://reactflow.dev/) (@xyflow/react)\n  - 用于数据库表关系可视化\n  - 支持自定义节点和边的样式\n  - 提供图表交互操作\n  - 基于 D3.js 的缩放和拖拽功能\n- **AI 集成**: [Dify.ai](https://dify.ai/)\n- **类型检查**: [TypeScript](https://www.typescriptlang.org/)\n\n## 🚀 快速开始\n> 得益于~~预制课~~教程系列的完善, 您可以直接clone仓库后, 通过`npm install`安装依赖, `npm run dev`启动前端即可进行基本教程的学习, 而无需配置dify工作流. 😌\n\n### 前置要求\n\n- Node.js 18.0 或更高版本\n- npm 包管理器\n- Dify.ai 账号和 API 密钥\n\n### 安装步骤\n\n1. 克隆仓库\n\n```bash\ngit clone https://github.com/ffy6511/chatSQL.git\ncd chatSQL/chat-sql\n```\n\n2. 安装依赖\n\n```bash\nnpm install\n```\n\n3. 配置环境变量\n\n```bash\ntouch .env\n```\n\n编辑 `.env` 文件并添加你的 Dify API 密钥：\n\n```\nNEXT_PUBLIC_DIFY_API_KEY=your_api_key_here\n```\n\n4. 启动开发服务器\n\n```bash\nnpm run dev\n```\n\n5. 更新git日志: 如果您希望更新自己的\"更新日志\"界面, 请执行\n\n```bash\nnpm run generate-git\n```\n### Dify 工作流配置\n\n1. 在 [Dify 平台](https://dify.ai) 创建新应用（选择工作流）\n2. 导入工作流配置：\n   - 从项目中下载 `public/chatSQL.yml` 文件\n   - 在 Dify 平台中导入该配置文件\n   - ![](https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefineddify.png?imageSlim)\n3. 获取 API 密钥并在个人设置中配置（工作流默认使用 Gemini，可根据需要修改）\n\n## 🤝 贡献\n\n欢迎提交 Pull Request 和 Issue！\n\n\n\n---\n\n## 重要更新\n\n### 25-04-30\n\n- feat: 在主页的侧边栏增加了\"初始化教程\"功能, 提供不同难度的教程系列;\n\n- feat: 增加分享链接, 可以导出当前的历史记录, 通过粘贴地址在不同设备之间共享(_notice_: 可能覆盖当前已有的记录)\n\n### 25-05-11\n\n- **feat**: 在\"初始化教程\"中增加了教材Database System Concepts中schema, 根据25春夏DB的PPT的字段要求在官网基础上调整得到.\n\n- feat: 优化了代码编辑的体验(根据上下文修改补足的建议)\n\n- style: 增加了loading的动画, 优化更新日志的页面\n","source":"_posts/chatSQL.md","raw":"---\ntitle: 𝐜𝐡𝐚𝐭𝐒𝐐𝐋\ndate: 2025-05-08 23:30:56\ntags: 奇思妙想\ncategories: 前后端开发\nthumbnail: https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250508164908220.png?imageSlim\nexcerpt: ~~你的下一款minisql, 何必是minisql.~~ chatSQL 是一个交互式 SQL 学习平台，通过人工智能技术生成个性化的 SQL 练习题，帮助用户从入门到精通 SQL 查询语言。平台结合了直观的数据库可视化工具、智能代码编辑器和即时反馈系统，为用户提供沉浸式学习体验。\n---\n<p align=\"center\" style=\"font-size: 1.2em; margin: 20px 0;\">\n  <a href=\"https://chat-sql-hazel.vercel.app/\" target=\"_blank\" style=\"font-size: 1.2em; font-weight: bold;\">Website</a>\n  <a href=\"https://github.com/ffy6511/chatSQL\" target=\"_blank\" style=\"font-size: 1.2em; font-weight: bold;\">Github Repo</a>\n</p>\n<p align=\"center\">\n  <a href=\"https://deepwiki.com/ffy6511/chatSQL\"><img src=\"https://deepwiki.com/badge.svg\" alt=\"Ask DeepWiki\" /></a>\n</p>\n\n**什么是chatSQL**:\n\nchatSQL 是一个交互式 SQL 学习平台，通过人工智能技术生成个性化的 SQL 练习题，帮助用户从入门到精通 SQL 查询语言。平台结合了直观的数据库可视化工具、智能代码编辑器和即时反馈系统，为用户提供沉浸式学习体验。无论您是 SQL 初学者还是希望提升查询技能的开发者，chatSQL 都能根据您的水平定制适合的学习内容，让 SQL 学习变得更加高效和有趣。\n\n## 产生背景\n在初学sql的时候, 总觉得在纸上谈兵的感觉不太切实, ~~总是不知道自己胡乱写的sql语句是否正确~~. 偶然的机会看到了一个在线的[自学sql网站](http://xuesql.cn/lesson/select_queries_with_constraints), 提供了数据库结构,元组信息以及sql编辑平台, 供用户实时查询:\n\n![](https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250508234644726.png?imageSlim)\n\n然而该网站的习题内容对免费用户十分有限, 不足以sql学习者反复的练习. 于是我想到, 为什么不自己做一个呢? \n\n### sql题目的生成\ngemini免费的api + dify上免费的工作流 = 无穷无尽的sql题目~\n\n由于有过dify平台上搭建工作流的经验, 我还是选择用dify来针对用户的需求生成不同难度和类型的sql题目. \n\n### schema的可视化\n在写数据库作业的时候, 意外发现了[chartDB](https://chartdb.io/)这个网站, 其中的数据库结构的可视化十分优雅.经过对其源码的\"探测\", 我挖掘到了xyflow这个组件库.\n![](https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250509000938549.png?imageSlim)\n\n同时, 我决定直接用MUI组件库中的表格作为数据库元组的展示, 让元组的信息更加直观.\n\n### sql语句的执行\n这部分可谓是项目中最难实现的任务了.\n\n其实一开始并没有立刻开始做chatSQL, 就是因为我没有现成的在虚拟/实际数据库中执行sql语句的方法. \n\n然而, 某天浏览数据库教材的时候, 意外发现了官网上存在一个前端执行sql语句查询的demo! 发现叫做[sql.js](https://sql.js.org/#/)的库似乎就可扮演在前端的sql引擎角色. 因此, 我觉得万事俱备了! 开始设计前后端的字段, 布局排版, 然后实现基础的UI...\n\n然而然而, 当我准备开始做sql引擎的时候, 发现sql.js竟然与react高版本框架和一些依赖不兼容! 然而我只剩下sql引擎的执行部分了... 也不好就此放弃. 那么就~~借助augment的力量~~自己写一个吧~\n\n1. 首先, 从monaco editor入手, 建立一个类似于vscode风格的代码编辑区;\n2. 然后, 利用[node-sql-parser](https://www.npmjs.com/package/node-sql-parser)库, 我们将标准的sql语句传入给解析组件, 获得ast语法树;\n3. 最后, 我们编写自己的sql执行引擎, 利用ast语法树执行sql语句.\n\n> 下面基本是项目仓库中README的部分.\n\n\n\n## ✨ 特性\n\n- 🤖 AI 生成练习：提供两种方式的习题来源\n  - 通过预设的教程, 循序渐进地练习`select`, `join`, 聚合操作与嵌套子查询等知识点.\n  - 与dify工作流交互, 输入难度,标签与描述自动生成 SQL 练习题.\n\n- 📊 数据库结构可视化：直观展示表关系和字段信息, 外检约束等信息一目了然;\n- ⌨️ Monaco编辑器与schema的补全整合：\n  - 支持sql语法高亮和悬浮的语法提示\n  - 针对当前schema信息提供`tab`的自动补全\n\n- 📝 即时结果验证：实时验证查询结果\n  - 由构建于前端的sql引擎0延迟地处理sql查询结果.\n  - 支持将查询结果与期望结果进行比较, 评价查询结果是否正确.\n\n\n\n\n## 🖥 界面预览\n\n### 初始化界面\n\n![](https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250508164908220.png?imageSlim)\n\n- 点击侧边栏中的“初始化教程”, 可以同预设的数据库表结构进行交互;\n- 点击侧边栏中的“帮助”, 可以查看基本的操作演示.\n\n### 数据库结构可视化\n\n![](https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250508165221364.png?imageSlim)\n\n- 默认显示数据库结构的可视化视图;\n- 可在左下角切换元组视图.\n\n### SQL 编辑器演示\n\n<img src=\"/img/edit.gif\" alt=\"编辑器演示\" width=\"80%\" />\n\n对应快捷键:\n\n- `command+enter` : 执行查询\n- `command+j`: 检测查询结果是否匹配;\n- `command+k`: 搜索历史记录.\n\n## 🛠 技术栈\n\n<p align=\"left\">\n  <img src=\"https://img.shields.io/badge/Next.js-black?style=for-the-badge&logo=next.js\" alt=\"Next.js\" />\n  <img src=\"https://img.shields.io/badge/React-61DAFB?style=for-the-badge&logo=react&logoColor=black\" alt=\"React\" />\n  <img src=\"https://img.shields.io/badge/TypeScript-3178C6?style=for-the-badge&logo=typescript&logoColor=white\" alt=\"TypeScript\" />\n  <img src=\"https://img.shields.io/badge/Ant%20Design-0170FE?style=for-the-badge&logo=antdesign&logoColor=white\" alt=\"Ant Design\" />\n  <img src=\"https://img.shields.io/badge/Material--UI-007FFF?style=for-the-badge&logo=mui&logoColor=white\" alt=\"Material-UI\" />\n  <img src=\"https://img.shields.io/badge/Monaco%20Editor-DD1100?style=for-the-badge&logo=visualstudiocode&logoColor=white\" alt=\"Monaco Editor\" />\n  <img src=\"https://img.shields.io/badge/XY%20Flow-22C55E?style=for-the-badge&logo=diagram&logoColor=white\" alt=\"XY Flow\" />\n</p>\n\n- **框架**: [Next.js](https://nextjs.org/) 15.3.0\n- **UI 组件**:\n  - [Ant Design](https://ant.design/) 5.24.6\n  - [Material-UI](https://mui.com/) 7.0.2\n- **编辑器**: [Monaco Editor](https://microsoft.github.io/monaco-editor/)\n- **流程图**:\n  - [XY Flow](https://reactflow.dev/) (@xyflow/react)\n  - 用于数据库表关系可视化\n  - 支持自定义节点和边的样式\n  - 提供图表交互操作\n  - 基于 D3.js 的缩放和拖拽功能\n- **AI 集成**: [Dify.ai](https://dify.ai/)\n- **类型检查**: [TypeScript](https://www.typescriptlang.org/)\n\n## 🚀 快速开始\n> 得益于~~预制课~~教程系列的完善, 您可以直接clone仓库后, 通过`npm install`安装依赖, `npm run dev`启动前端即可进行基本教程的学习, 而无需配置dify工作流. 😌\n\n### 前置要求\n\n- Node.js 18.0 或更高版本\n- npm 包管理器\n- Dify.ai 账号和 API 密钥\n\n### 安装步骤\n\n1. 克隆仓库\n\n```bash\ngit clone https://github.com/ffy6511/chatSQL.git\ncd chatSQL/chat-sql\n```\n\n2. 安装依赖\n\n```bash\nnpm install\n```\n\n3. 配置环境变量\n\n```bash\ntouch .env\n```\n\n编辑 `.env` 文件并添加你的 Dify API 密钥：\n\n```\nNEXT_PUBLIC_DIFY_API_KEY=your_api_key_here\n```\n\n4. 启动开发服务器\n\n```bash\nnpm run dev\n```\n\n5. 更新git日志: 如果您希望更新自己的\"更新日志\"界面, 请执行\n\n```bash\nnpm run generate-git\n```\n### Dify 工作流配置\n\n1. 在 [Dify 平台](https://dify.ai) 创建新应用（选择工作流）\n2. 导入工作流配置：\n   - 从项目中下载 `public/chatSQL.yml` 文件\n   - 在 Dify 平台中导入该配置文件\n   - ![](https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefineddify.png?imageSlim)\n3. 获取 API 密钥并在个人设置中配置（工作流默认使用 Gemini，可根据需要修改）\n\n## 🤝 贡献\n\n欢迎提交 Pull Request 和 Issue！\n\n\n\n---\n\n## 重要更新\n\n### 25-04-30\n\n- feat: 在主页的侧边栏增加了\"初始化教程\"功能, 提供不同难度的教程系列;\n\n- feat: 增加分享链接, 可以导出当前的历史记录, 通过粘贴地址在不同设备之间共享(_notice_: 可能覆盖当前已有的记录)\n\n### 25-05-11\n\n- **feat**: 在\"初始化教程\"中增加了教材Database System Concepts中schema, 根据25春夏DB的PPT的字段要求在官网基础上调整得到.\n\n- feat: 优化了代码编辑的体验(根据上下文修改补足的建议)\n\n- style: 增加了loading的动画, 优化更新日志的页面\n","slug":"chatSQL","published":1,"updated":"2025-05-11T03:14:23.447Z","comments":1,"layout":"post","photos":[],"_id":"cmcbm7pqa0007e2qg6xi88soc","content":"<p align=\"center\" style=\"font-size: 1.2em; margin: 20px 0;\">\n  <a class=\"link\"   href=\"https://chat-sql-hazel.vercel.app/\"  target=\"_blank\" style=\"font-size: 1.2em; font-weight: bold;\">Website<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a>\n  <a class=\"link\"   href=\"https://github.com/ffy6511/chatSQL\"  target=\"_blank\" style=\"font-size: 1.2em; font-weight: bold;\">Github Repo<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a>\n</p>\n<p align=\"center\">\n  <a href=\"https://deepwiki.com/ffy6511/chatSQL\"><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://deepwiki.com/badge.svg\"\n                      alt=\"Ask DeepWiki\" \n                ></a>\n</p>\n\n<p><strong>什么是chatSQL</strong>:</p>\n<p>chatSQL 是一个交互式 SQL 学习平台，通过人工智能技术生成个性化的 SQL 练习题，帮助用户从入门到精通 SQL 查询语言。平台结合了直观的数据库可视化工具、智能代码编辑器和即时反馈系统，为用户提供沉浸式学习体验。无论您是 SQL 初学者还是希望提升查询技能的开发者，chatSQL 都能根据您的水平定制适合的学习内容，让 SQL 学习变得更加高效和有趣。</p>\n<h2 id=\"产生背景\"><a href=\"#产生背景\" class=\"headerlink\" title=\"产生背景\"></a>产生背景</h2><p>在初学sql的时候, 总觉得在纸上谈兵的感觉不太切实, <del>总是不知道自己胡乱写的sql语句是否正确</del>. 偶然的机会看到了一个在线的<a class=\"link\"   href=\"http://xuesql.cn/lesson/select_queries_with_constraints\" >自学sql网站<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a>, 提供了数据库结构,元组信息以及sql编辑平台, 供用户实时查询:</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250508234644726.png?imageSlim\"\n                     \n                ></p>\n<p>然而该网站的习题内容对免费用户十分有限, 不足以sql学习者反复的练习. 于是我想到, 为什么不自己做一个呢? </p>\n<h3 id=\"sql题目的生成\"><a href=\"#sql题目的生成\" class=\"headerlink\" title=\"sql题目的生成\"></a>sql题目的生成</h3><p>gemini免费的api + dify上免费的工作流 &#x3D; 无穷无尽的sql题目~</p>\n<p>由于有过dify平台上搭建工作流的经验, 我还是选择用dify来针对用户的需求生成不同难度和类型的sql题目. </p>\n<h3 id=\"schema的可视化\"><a href=\"#schema的可视化\" class=\"headerlink\" title=\"schema的可视化\"></a>schema的可视化</h3><p>在写数据库作业的时候, 意外发现了<a class=\"link\"   href=\"https://chartdb.io/\" >chartDB<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a>这个网站, 其中的数据库结构的可视化十分优雅.经过对其源码的”探测”, 我挖掘到了xyflow这个组件库.<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250509000938549.png?imageSlim\"\n                     \n                ></p>\n<p>同时, 我决定直接用MUI组件库中的表格作为数据库元组的展示, 让元组的信息更加直观.</p>\n<h3 id=\"sql语句的执行\"><a href=\"#sql语句的执行\" class=\"headerlink\" title=\"sql语句的执行\"></a>sql语句的执行</h3><p>这部分可谓是项目中最难实现的任务了.</p>\n<p>其实一开始并没有立刻开始做chatSQL, 就是因为我没有现成的在虚拟&#x2F;实际数据库中执行sql语句的方法. </p>\n<p>然而, 某天浏览数据库教材的时候, 意外发现了官网上存在一个前端执行sql语句查询的demo! 发现叫做<a class=\"link\"   href=\"https://sql.js.org/#/\" >sql.js<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a>的库似乎就可扮演在前端的sql引擎角色. 因此, 我觉得万事俱备了! 开始设计前后端的字段, 布局排版, 然后实现基础的UI…</p>\n<p>然而然而, 当我准备开始做sql引擎的时候, 发现sql.js竟然与react高版本框架和一些依赖不兼容! 然而我只剩下sql引擎的执行部分了… 也不好就此放弃. 那么就<del>借助augment的力量</del>自己写一个吧~</p>\n<ol>\n<li>首先, 从monaco editor入手, 建立一个类似于vscode风格的代码编辑区;</li>\n<li>然后, 利用<a class=\"link\"   href=\"https://www.npmjs.com/package/node-sql-parser\" >node-sql-parser<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a>库, 我们将标准的sql语句传入给解析组件, 获得ast语法树;</li>\n<li>最后, 我们编写自己的sql执行引擎, 利用ast语法树执行sql语句.</li>\n</ol>\n<blockquote>\n<p>下面基本是项目仓库中README的部分.</p>\n</blockquote>\n<h2 id=\"✨-特性\"><a href=\"#✨-特性\" class=\"headerlink\" title=\"✨ 特性\"></a>✨ 特性</h2><ul>\n<li><p>🤖 AI 生成练习：提供两种方式的习题来源</p>\n<ul>\n<li>通过预设的教程, 循序渐进地练习<code>select</code>, <code>join</code>, 聚合操作与嵌套子查询等知识点.</li>\n<li>与dify工作流交互, 输入难度,标签与描述自动生成 SQL 练习题.</li>\n</ul>\n</li>\n<li><p>📊 数据库结构可视化：直观展示表关系和字段信息, 外检约束等信息一目了然;</p>\n</li>\n<li><p>⌨️ Monaco编辑器与schema的补全整合：</p>\n<ul>\n<li>支持sql语法高亮和悬浮的语法提示</li>\n<li>针对当前schema信息提供<code>tab</code>的自动补全</li>\n</ul>\n</li>\n<li><p>📝 即时结果验证：实时验证查询结果</p>\n<ul>\n<li>由构建于前端的sql引擎0延迟地处理sql查询结果.</li>\n<li>支持将查询结果与期望结果进行比较, 评价查询结果是否正确.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"🖥-界面预览\"><a href=\"#🖥-界面预览\" class=\"headerlink\" title=\"🖥 界面预览\"></a>🖥 界面预览</h2><h3 id=\"初始化界面\"><a href=\"#初始化界面\" class=\"headerlink\" title=\"初始化界面\"></a>初始化界面</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250508164908220.png?imageSlim\"\n                     \n                ></p>\n<ul>\n<li>点击侧边栏中的“初始化教程”, 可以同预设的数据库表结构进行交互;</li>\n<li>点击侧边栏中的“帮助”, 可以查看基本的操作演示.</li>\n</ul>\n<h3 id=\"数据库结构可视化\"><a href=\"#数据库结构可视化\" class=\"headerlink\" title=\"数据库结构可视化\"></a>数据库结构可视化</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250508165221364.png?imageSlim\"\n                     \n                ></p>\n<ul>\n<li>默认显示数据库结构的可视化视图;</li>\n<li>可在左下角切换元组视图.</li>\n</ul>\n<h3 id=\"SQL-编辑器演示\"><a href=\"#SQL-编辑器演示\" class=\"headerlink\" title=\"SQL 编辑器演示\"></a>SQL 编辑器演示</h3><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/img/edit.gif\"\n                      alt=\"编辑器演示\" width=\"80%\" \n                >\n\n<p>对应快捷键:</p>\n<ul>\n<li><code>command+enter</code> : 执行查询</li>\n<li><code>command+j</code>: 检测查询结果是否匹配;</li>\n<li><code>command+k</code>: 搜索历史记录.</li>\n</ul>\n<h2 id=\"🛠-技术栈\"><a href=\"#🛠-技术栈\" class=\"headerlink\" title=\"🛠 技术栈\"></a>🛠 技术栈</h2><p align=\"left\">\n  <img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://img.shields.io/badge/Next.js-black?style=for-the-badge&logo=next.js\"\n                      alt=\"Next.js\" \n                >\n  <img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://img.shields.io/badge/React-61DAFB?style=for-the-badge&logo=react&logoColor=black\"\n                      alt=\"React\" \n                >\n  <img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://img.shields.io/badge/TypeScript-3178C6?style=for-the-badge&logo=typescript&logoColor=white\"\n                      alt=\"TypeScript\" \n                >\n  <img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://img.shields.io/badge/Ant%20Design-0170FE?style=for-the-badge&logo=antdesign&logoColor=white\"\n                      alt=\"Ant Design\" \n                >\n  <img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://img.shields.io/badge/Material--UI-007FFF?style=for-the-badge&logo=mui&logoColor=white\"\n                      alt=\"Material-UI\" \n                >\n  <img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://img.shields.io/badge/Monaco%20Editor-DD1100?style=for-the-badge&logo=visualstudiocode&logoColor=white\"\n                      alt=\"Monaco Editor\" \n                >\n  <img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://img.shields.io/badge/XY%20Flow-22C55E?style=for-the-badge&logo=diagram&logoColor=white\"\n                      alt=\"XY Flow\" \n                >\n</p>\n\n<ul>\n<li><strong>框架</strong>: <a class=\"link\"   href=\"https://nextjs.org/\" >Next.js<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a> 15.3.0</li>\n<li><strong>UI 组件</strong>:<ul>\n<li><a class=\"link\"   href=\"https://ant.design/\" >Ant Design<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a> 5.24.6</li>\n<li><a class=\"link\"   href=\"https://mui.com/\" >Material-UI<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a> 7.0.2</li>\n</ul>\n</li>\n<li><strong>编辑器</strong>: <a class=\"link\"   href=\"https://microsoft.github.io/monaco-editor/\" >Monaco Editor<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n<li><strong>流程图</strong>:<ul>\n<li><a class=\"link\"   href=\"https://reactflow.dev/\" >XY Flow<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a> (@xyflow&#x2F;react)</li>\n<li>用于数据库表关系可视化</li>\n<li>支持自定义节点和边的样式</li>\n<li>提供图表交互操作</li>\n<li>基于 D3.js 的缩放和拖拽功能</li>\n</ul>\n</li>\n<li><strong>AI 集成</strong>: <a class=\"link\"   href=\"https://dify.ai/\" >Dify.ai<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n<li><strong>类型检查</strong>: <a class=\"link\"   href=\"https://www.typescriptlang.org/\" >TypeScript<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n</ul>\n<h2 id=\"🚀-快速开始\"><a href=\"#🚀-快速开始\" class=\"headerlink\" title=\"🚀 快速开始\"></a>🚀 快速开始</h2><blockquote>\n<p>得益于<del>预制课</del>教程系列的完善, 您可以直接clone仓库后, 通过<code>npm install</code>安装依赖, <code>npm run dev</code>启动前端即可进行基本教程的学习, 而无需配置dify工作流. 😌</p>\n</blockquote>\n<h3 id=\"前置要求\"><a href=\"#前置要求\" class=\"headerlink\" title=\"前置要求\"></a>前置要求</h3><ul>\n<li>Node.js 18.0 或更高版本</li>\n<li>npm 包管理器</li>\n<li>Dify.ai 账号和 API 密钥</li>\n</ul>\n<h3 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h3><ol>\n<li>克隆仓库</li>\n</ol>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/ffy6511/chatSQL.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> chatSQL/chat-sql</span><br></pre></td></tr></table></figure></div>\n\n<ol start=\"2\">\n<li>安装依赖</li>\n</ol>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure></div>\n\n<ol start=\"3\">\n<li>配置环境变量</li>\n</ol>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">touch</span> .<span class=\"built_in\">env</span></span><br></pre></td></tr></table></figure></div>\n\n<p>编辑 <code>.env</code> 文件并添加你的 Dify API 密钥：</p>\n<div class=\"code-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NEXT_PUBLIC_DIFY_API_KEY=your_api_key_here</span><br></pre></td></tr></table></figure></div>\n\n<ol start=\"4\">\n<li>启动开发服务器</li>\n</ol>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure></div>\n\n<ol start=\"5\">\n<li>更新git日志: 如果您希望更新自己的”更新日志”界面, 请执行</li>\n</ol>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run generate-git</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"Dify-工作流配置\"><a href=\"#Dify-工作流配置\" class=\"headerlink\" title=\"Dify 工作流配置\"></a>Dify 工作流配置</h3><ol>\n<li>在 <a class=\"link\"   href=\"https://dify.ai/\" >Dify 平台<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a> 创建新应用（选择工作流）</li>\n<li>导入工作流配置：<ul>\n<li>从项目中下载 <code>public/chatSQL.yml</code> 文件</li>\n<li>在 Dify 平台中导入该配置文件</li>\n<li><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefineddify.png?imageSlim\"\n                     \n                ></li>\n</ul>\n</li>\n<li>获取 API 密钥并在个人设置中配置（工作流默认使用 Gemini，可根据需要修改）</li>\n</ol>\n<h2 id=\"🤝-贡献\"><a href=\"#🤝-贡献\" class=\"headerlink\" title=\"🤝 贡献\"></a>🤝 贡献</h2><p>欢迎提交 Pull Request 和 Issue！</p>\n<hr>\n<h2 id=\"重要更新\"><a href=\"#重要更新\" class=\"headerlink\" title=\"重要更新\"></a>重要更新</h2><h3 id=\"25-04-30\"><a href=\"#25-04-30\" class=\"headerlink\" title=\"25-04-30\"></a>25-04-30</h3><ul>\n<li><p>feat: 在主页的侧边栏增加了”初始化教程”功能, 提供不同难度的教程系列;</p>\n</li>\n<li><p>feat: 增加分享链接, 可以导出当前的历史记录, 通过粘贴地址在不同设备之间共享(<em>notice</em>: 可能覆盖当前已有的记录)</p>\n</li>\n</ul>\n<h3 id=\"25-05-11\"><a href=\"#25-05-11\" class=\"headerlink\" title=\"25-05-11\"></a>25-05-11</h3><ul>\n<li><p><strong>feat</strong>: 在”初始化教程”中增加了教材Database System Concepts中schema, 根据25春夏DB的PPT的字段要求在官网基础上调整得到.</p>\n</li>\n<li><p>feat: 优化了代码编辑的体验(根据上下文修改补足的建议)</p>\n</li>\n<li><p>style: 增加了loading的动画, 优化更新日志的页面</p>\n</li>\n</ul>\n","more":"<p align=\"center\" style=\"font-size: 1.2em; margin: 20px 0;\">\n  <a class=\"link\"   href=\"https://chat-sql-hazel.vercel.app/\"  target=\"_blank\" style=\"font-size: 1.2em; font-weight: bold;\">Website<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a>\n  <a class=\"link\"   href=\"https://github.com/ffy6511/chatSQL\"  target=\"_blank\" style=\"font-size: 1.2em; font-weight: bold;\">Github Repo<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a>\n</p>\n<p align=\"center\">\n  <a href=\"https://deepwiki.com/ffy6511/chatSQL\"><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://deepwiki.com/badge.svg\"\n                      alt=\"Ask DeepWiki\" \n                ></a>\n</p>\n\n<p><strong>什么是chatSQL</strong>:</p>\n<p>chatSQL 是一个交互式 SQL 学习平台，通过人工智能技术生成个性化的 SQL 练习题，帮助用户从入门到精通 SQL 查询语言。平台结合了直观的数据库可视化工具、智能代码编辑器和即时反馈系统，为用户提供沉浸式学习体验。无论您是 SQL 初学者还是希望提升查询技能的开发者，chatSQL 都能根据您的水平定制适合的学习内容，让 SQL 学习变得更加高效和有趣。</p>\n<h2 id=\"产生背景\"><a href=\"#产生背景\" class=\"headerlink\" title=\"产生背景\"></a>产生背景</h2><p>在初学sql的时候, 总觉得在纸上谈兵的感觉不太切实, <del>总是不知道自己胡乱写的sql语句是否正确</del>. 偶然的机会看到了一个在线的<a class=\"link\"   href=\"http://xuesql.cn/lesson/select_queries_with_constraints\" >自学sql网站<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a>, 提供了数据库结构,元组信息以及sql编辑平台, 供用户实时查询:</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250508234644726.png?imageSlim\"\n                     \n                ></p>\n<p>然而该网站的习题内容对免费用户十分有限, 不足以sql学习者反复的练习. 于是我想到, 为什么不自己做一个呢? </p>\n<h3 id=\"sql题目的生成\"><a href=\"#sql题目的生成\" class=\"headerlink\" title=\"sql题目的生成\"></a>sql题目的生成</h3><p>gemini免费的api + dify上免费的工作流 &#x3D; 无穷无尽的sql题目~</p>\n<p>由于有过dify平台上搭建工作流的经验, 我还是选择用dify来针对用户的需求生成不同难度和类型的sql题目. </p>\n<h3 id=\"schema的可视化\"><a href=\"#schema的可视化\" class=\"headerlink\" title=\"schema的可视化\"></a>schema的可视化</h3><p>在写数据库作业的时候, 意外发现了<a class=\"link\"   href=\"https://chartdb.io/\" >chartDB<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a>这个网站, 其中的数据库结构的可视化十分优雅.经过对其源码的”探测”, 我挖掘到了xyflow这个组件库.<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250509000938549.png?imageSlim\"\n                     \n                ></p>\n<p>同时, 我决定直接用MUI组件库中的表格作为数据库元组的展示, 让元组的信息更加直观.</p>\n<h3 id=\"sql语句的执行\"><a href=\"#sql语句的执行\" class=\"headerlink\" title=\"sql语句的执行\"></a>sql语句的执行</h3><p>这部分可谓是项目中最难实现的任务了.</p>\n<p>其实一开始并没有立刻开始做chatSQL, 就是因为我没有现成的在虚拟&#x2F;实际数据库中执行sql语句的方法. </p>\n<p>然而, 某天浏览数据库教材的时候, 意外发现了官网上存在一个前端执行sql语句查询的demo! 发现叫做<a class=\"link\"   href=\"https://sql.js.org/#/\" >sql.js<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a>的库似乎就可扮演在前端的sql引擎角色. 因此, 我觉得万事俱备了! 开始设计前后端的字段, 布局排版, 然后实现基础的UI…</p>\n<p>然而然而, 当我准备开始做sql引擎的时候, 发现sql.js竟然与react高版本框架和一些依赖不兼容! 然而我只剩下sql引擎的执行部分了… 也不好就此放弃. 那么就<del>借助augment的力量</del>自己写一个吧~</p>\n<ol>\n<li>首先, 从monaco editor入手, 建立一个类似于vscode风格的代码编辑区;</li>\n<li>然后, 利用<a class=\"link\"   href=\"https://www.npmjs.com/package/node-sql-parser\" >node-sql-parser<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a>库, 我们将标准的sql语句传入给解析组件, 获得ast语法树;</li>\n<li>最后, 我们编写自己的sql执行引擎, 利用ast语法树执行sql语句.</li>\n</ol>\n<blockquote>\n<p>下面基本是项目仓库中README的部分.</p>\n</blockquote>\n<h2 id=\"✨-特性\"><a href=\"#✨-特性\" class=\"headerlink\" title=\"✨ 特性\"></a>✨ 特性</h2><ul>\n<li><p>🤖 AI 生成练习：提供两种方式的习题来源</p>\n<ul>\n<li>通过预设的教程, 循序渐进地练习<code>select</code>, <code>join</code>, 聚合操作与嵌套子查询等知识点.</li>\n<li>与dify工作流交互, 输入难度,标签与描述自动生成 SQL 练习题.</li>\n</ul>\n</li>\n<li><p>📊 数据库结构可视化：直观展示表关系和字段信息, 外检约束等信息一目了然;</p>\n</li>\n<li><p>⌨️ Monaco编辑器与schema的补全整合：</p>\n<ul>\n<li>支持sql语法高亮和悬浮的语法提示</li>\n<li>针对当前schema信息提供<code>tab</code>的自动补全</li>\n</ul>\n</li>\n<li><p>📝 即时结果验证：实时验证查询结果</p>\n<ul>\n<li>由构建于前端的sql引擎0延迟地处理sql查询结果.</li>\n<li>支持将查询结果与期望结果进行比较, 评价查询结果是否正确.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"🖥-界面预览\"><a href=\"#🖥-界面预览\" class=\"headerlink\" title=\"🖥 界面预览\"></a>🖥 界面预览</h2><h3 id=\"初始化界面\"><a href=\"#初始化界面\" class=\"headerlink\" title=\"初始化界面\"></a>初始化界面</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250508164908220.png?imageSlim\"\n                     \n                ></p>\n<ul>\n<li>点击侧边栏中的“初始化教程”, 可以同预设的数据库表结构进行交互;</li>\n<li>点击侧边栏中的“帮助”, 可以查看基本的操作演示.</li>\n</ul>\n<h3 id=\"数据库结构可视化\"><a href=\"#数据库结构可视化\" class=\"headerlink\" title=\"数据库结构可视化\"></a>数据库结构可视化</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250508165221364.png?imageSlim\"\n                     \n                ></p>\n<ul>\n<li>默认显示数据库结构的可视化视图;</li>\n<li>可在左下角切换元组视图.</li>\n</ul>\n<h3 id=\"SQL-编辑器演示\"><a href=\"#SQL-编辑器演示\" class=\"headerlink\" title=\"SQL 编辑器演示\"></a>SQL 编辑器演示</h3><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/img/edit.gif\"\n                      alt=\"编辑器演示\" width=\"80%\" \n                >\n\n<p>对应快捷键:</p>\n<ul>\n<li><code>command+enter</code> : 执行查询</li>\n<li><code>command+j</code>: 检测查询结果是否匹配;</li>\n<li><code>command+k</code>: 搜索历史记录.</li>\n</ul>\n<h2 id=\"🛠-技术栈\"><a href=\"#🛠-技术栈\" class=\"headerlink\" title=\"🛠 技术栈\"></a>🛠 技术栈</h2><p align=\"left\">\n  <img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://img.shields.io/badge/Next.js-black?style=for-the-badge&logo=next.js\"\n                      alt=\"Next.js\" \n                >\n  <img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://img.shields.io/badge/React-61DAFB?style=for-the-badge&logo=react&logoColor=black\"\n                      alt=\"React\" \n                >\n  <img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://img.shields.io/badge/TypeScript-3178C6?style=for-the-badge&logo=typescript&logoColor=white\"\n                      alt=\"TypeScript\" \n                >\n  <img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://img.shields.io/badge/Ant%20Design-0170FE?style=for-the-badge&logo=antdesign&logoColor=white\"\n                      alt=\"Ant Design\" \n                >\n  <img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://img.shields.io/badge/Material--UI-007FFF?style=for-the-badge&logo=mui&logoColor=white\"\n                      alt=\"Material-UI\" \n                >\n  <img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://img.shields.io/badge/Monaco%20Editor-DD1100?style=for-the-badge&logo=visualstudiocode&logoColor=white\"\n                      alt=\"Monaco Editor\" \n                >\n  <img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://img.shields.io/badge/XY%20Flow-22C55E?style=for-the-badge&logo=diagram&logoColor=white\"\n                      alt=\"XY Flow\" \n                >\n</p>\n\n<ul>\n<li><strong>框架</strong>: <a class=\"link\"   href=\"https://nextjs.org/\" >Next.js<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a> 15.3.0</li>\n<li><strong>UI 组件</strong>:<ul>\n<li><a class=\"link\"   href=\"https://ant.design/\" >Ant Design<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a> 5.24.6</li>\n<li><a class=\"link\"   href=\"https://mui.com/\" >Material-UI<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a> 7.0.2</li>\n</ul>\n</li>\n<li><strong>编辑器</strong>: <a class=\"link\"   href=\"https://microsoft.github.io/monaco-editor/\" >Monaco Editor<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n<li><strong>流程图</strong>:<ul>\n<li><a class=\"link\"   href=\"https://reactflow.dev/\" >XY Flow<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a> (@xyflow&#x2F;react)</li>\n<li>用于数据库表关系可视化</li>\n<li>支持自定义节点和边的样式</li>\n<li>提供图表交互操作</li>\n<li>基于 D3.js 的缩放和拖拽功能</li>\n</ul>\n</li>\n<li><strong>AI 集成</strong>: <a class=\"link\"   href=\"https://dify.ai/\" >Dify.ai<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n<li><strong>类型检查</strong>: <a class=\"link\"   href=\"https://www.typescriptlang.org/\" >TypeScript<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n</ul>\n<h2 id=\"🚀-快速开始\"><a href=\"#🚀-快速开始\" class=\"headerlink\" title=\"🚀 快速开始\"></a>🚀 快速开始</h2><blockquote>\n<p>得益于<del>预制课</del>教程系列的完善, 您可以直接clone仓库后, 通过<code>npm install</code>安装依赖, <code>npm run dev</code>启动前端即可进行基本教程的学习, 而无需配置dify工作流. 😌</p>\n</blockquote>\n<h3 id=\"前置要求\"><a href=\"#前置要求\" class=\"headerlink\" title=\"前置要求\"></a>前置要求</h3><ul>\n<li>Node.js 18.0 或更高版本</li>\n<li>npm 包管理器</li>\n<li>Dify.ai 账号和 API 密钥</li>\n</ul>\n<h3 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h3><ol>\n<li>克隆仓库</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/ffy6511/chatSQL.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> chatSQL/chat-sql</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>安装依赖</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>配置环境变量</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">touch</span> .<span class=\"built_in\">env</span></span><br></pre></td></tr></table></figure>\n\n<p>编辑 <code>.env</code> 文件并添加你的 Dify API 密钥：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NEXT_PUBLIC_DIFY_API_KEY=your_api_key_here</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>启动开发服务器</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>更新git日志: 如果您希望更新自己的”更新日志”界面, 请执行</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run generate-git</span><br></pre></td></tr></table></figure>\n<h3 id=\"Dify-工作流配置\"><a href=\"#Dify-工作流配置\" class=\"headerlink\" title=\"Dify 工作流配置\"></a>Dify 工作流配置</h3><ol>\n<li>在 <a class=\"link\"   href=\"https://dify.ai/\" >Dify 平台<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a> 创建新应用（选择工作流）</li>\n<li>导入工作流配置：<ul>\n<li>从项目中下载 <code>public/chatSQL.yml</code> 文件</li>\n<li>在 Dify 平台中导入该配置文件</li>\n<li><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefineddify.png?imageSlim\"\n                     \n                ></li>\n</ul>\n</li>\n<li>获取 API 密钥并在个人设置中配置（工作流默认使用 Gemini，可根据需要修改）</li>\n</ol>\n<h2 id=\"🤝-贡献\"><a href=\"#🤝-贡献\" class=\"headerlink\" title=\"🤝 贡献\"></a>🤝 贡献</h2><p>欢迎提交 Pull Request 和 Issue！</p>\n<hr>\n<h2 id=\"重要更新\"><a href=\"#重要更新\" class=\"headerlink\" title=\"重要更新\"></a>重要更新</h2><h3 id=\"25-04-30\"><a href=\"#25-04-30\" class=\"headerlink\" title=\"25-04-30\"></a>25-04-30</h3><ul>\n<li><p>feat: 在主页的侧边栏增加了”初始化教程”功能, 提供不同难度的教程系列;</p>\n</li>\n<li><p>feat: 增加分享链接, 可以导出当前的历史记录, 通过粘贴地址在不同设备之间共享(<em>notice</em>: 可能覆盖当前已有的记录)</p>\n</li>\n</ul>\n<h3 id=\"25-05-11\"><a href=\"#25-05-11\" class=\"headerlink\" title=\"25-05-11\"></a>25-05-11</h3><ul>\n<li><p><strong>feat</strong>: 在”初始化教程”中增加了教材Database System Concepts中schema, 根据25春夏DB的PPT的字段要求在官网基础上调整得到.</p>\n</li>\n<li><p>feat: 优化了代码编辑的体验(根据上下文修改补足的建议)</p>\n</li>\n<li><p>style: 增加了loading的动画, 优化更新日志的页面</p>\n</li>\n</ul>\n","_processedHighlight":true},{"title":"SSH隧道","date":"2025-01-17T05:53:33.000Z","excerpt":"让服务器能够共享本地代理, 在服务器自身没有设置代理的情况下是一个简便可行的好方法~","_content":" \n\n在进行服务器运维时，经常会遇到需要代理来访问某些资源的情况。本文将介绍如何通过 SSH 隧道，让远程服务器共享使用本地电脑的代理，实现优雅的科学上网解决方案。\n\n## 背景\n\n通常我们在本地电脑上都配置了代理软件（如 Clash），但远程服务器往往没有代理。如何让远程服务器也能使用上我们本地的代理呢？这就需要用到 SSH 的端口转发功能。\n\n## 原理解释\n\nSSH 隧道技术允许我们将本地端口转发到远程服务器。通过建立一个加密的通道，远程服务器可以通过这个通道访问本地电脑的代理服务。\n\n```\n[远程服务器] <--- SSH隧道 ---> [本地电脑] <--- 代理 ---> [互联网]\n```\n\n## 具体步骤\n\n### 1. 前提条件\n- 本地电脑已安装并运行代理软件（如 Clash，默认端口 7890）\n- 能够通过 SSH 连接到远程服务器\n- 确保本地代理软件正常工作\n\n### 2. 建立 SSH 隧道\n在本地电脑的终端中执行：\n\n```bash\nssh -R 7890:127.0.0.1:7890 -o ServerAliveInterval=60 -o ServerAliveCountMax=3 用户名@服务器IP\n```\n\n参数说明：\n- `-R 7890:127.0.0.1:7890`：将远程服务器的 7890 端口转发到本地的 7890 端口\n- `-o ServerAliveInterval=60`：每 60 秒发送一次心跳包\n- `-o ServerAliveCountMax=3`：最多允许丢失 3 次心跳包\n\n<br>\n\n然后根据提示输入服务器用户的密码:\n![](/img/2025-01-18-11-45-41.png)\n### 3. 配置服务器代理\n在服务器终端中执行：\n\n```bash\nexport https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890\n```\n\n### 4. 验证代理是否生效\n在服务器上执行：\n\n```bash\ncurl -v https://github.com\n```\n\n如果能够正常访问，说明代理配置成功。\n\n## 持久化配置\n\n如果想让代理设置持久生效，可以将代理配置命令添加到 Shell 的配置文件中：\n\n```bash\n# 编辑 ~/.bashrc 或 ~/.zshrc\necho 'export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890' >> ~/.bashrc\n\n# 重新加载配置\nsource ~/.bashrc\n```\n\n## 注意事项\n\n1. **安全性考虑**：SSH 隧道是加密的，相对安全\n2. **连接维护**：保持 SSH 连接不断开，否则代理会失效\n3. **带宽限制**：代理流量会经过你的本地电脑，注意带宽占用\n4. **临时使用**：这种方法适合临时使用，长期使用建议直接在服务器上配置代理\n\n## 常见问题排查\n\n1. **隧道无法建立**\n   - 检查本地代理是否正常运行\n   - 确认端口号是否正确\n   - 检查服务器防火墙设置\n\n2. **代理失效**\n   - SSH 连接是否断开\n   - 本地代理软件是否正常运行\n   - 环境变量是否正确设置\n\n### Clash设置\n在默认的代理设置基础上进行了如下修改, 但是不确保这是正常访问的必须操作:\n以mac的ClashX Pro为例, 在`更多设置`中\n![](/img/2025-01-17-14-00-36.png)\n\n## 结论\n\n通过 SSH 隧道共享本地代理是一个简单而优雅的解决方案，特别适合临时需要代理访问的场景。它不需要在服务器上安装额外的软件，配置简单，安全可靠。\n","source":"_posts/其他/SSH隧道.md","raw":"---\ntitle: SSH隧道\ndate: 2025-01-17 13:53:33\ntags:\n- ssh\n- 服务器\ncategories: 通用技能\nexcerpt: 让服务器能够共享本地代理, 在服务器自身没有设置代理的情况下是一个简便可行的好方法~\n--- \n\n在进行服务器运维时，经常会遇到需要代理来访问某些资源的情况。本文将介绍如何通过 SSH 隧道，让远程服务器共享使用本地电脑的代理，实现优雅的科学上网解决方案。\n\n## 背景\n\n通常我们在本地电脑上都配置了代理软件（如 Clash），但远程服务器往往没有代理。如何让远程服务器也能使用上我们本地的代理呢？这就需要用到 SSH 的端口转发功能。\n\n## 原理解释\n\nSSH 隧道技术允许我们将本地端口转发到远程服务器。通过建立一个加密的通道，远程服务器可以通过这个通道访问本地电脑的代理服务。\n\n```\n[远程服务器] <--- SSH隧道 ---> [本地电脑] <--- 代理 ---> [互联网]\n```\n\n## 具体步骤\n\n### 1. 前提条件\n- 本地电脑已安装并运行代理软件（如 Clash，默认端口 7890）\n- 能够通过 SSH 连接到远程服务器\n- 确保本地代理软件正常工作\n\n### 2. 建立 SSH 隧道\n在本地电脑的终端中执行：\n\n```bash\nssh -R 7890:127.0.0.1:7890 -o ServerAliveInterval=60 -o ServerAliveCountMax=3 用户名@服务器IP\n```\n\n参数说明：\n- `-R 7890:127.0.0.1:7890`：将远程服务器的 7890 端口转发到本地的 7890 端口\n- `-o ServerAliveInterval=60`：每 60 秒发送一次心跳包\n- `-o ServerAliveCountMax=3`：最多允许丢失 3 次心跳包\n\n<br>\n\n然后根据提示输入服务器用户的密码:\n![](/img/2025-01-18-11-45-41.png)\n### 3. 配置服务器代理\n在服务器终端中执行：\n\n```bash\nexport https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890\n```\n\n### 4. 验证代理是否生效\n在服务器上执行：\n\n```bash\ncurl -v https://github.com\n```\n\n如果能够正常访问，说明代理配置成功。\n\n## 持久化配置\n\n如果想让代理设置持久生效，可以将代理配置命令添加到 Shell 的配置文件中：\n\n```bash\n# 编辑 ~/.bashrc 或 ~/.zshrc\necho 'export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890' >> ~/.bashrc\n\n# 重新加载配置\nsource ~/.bashrc\n```\n\n## 注意事项\n\n1. **安全性考虑**：SSH 隧道是加密的，相对安全\n2. **连接维护**：保持 SSH 连接不断开，否则代理会失效\n3. **带宽限制**：代理流量会经过你的本地电脑，注意带宽占用\n4. **临时使用**：这种方法适合临时使用，长期使用建议直接在服务器上配置代理\n\n## 常见问题排查\n\n1. **隧道无法建立**\n   - 检查本地代理是否正常运行\n   - 确认端口号是否正确\n   - 检查服务器防火墙设置\n\n2. **代理失效**\n   - SSH 连接是否断开\n   - 本地代理软件是否正常运行\n   - 环境变量是否正确设置\n\n### Clash设置\n在默认的代理设置基础上进行了如下修改, 但是不确保这是正常访问的必须操作:\n以mac的ClashX Pro为例, 在`更多设置`中\n![](/img/2025-01-17-14-00-36.png)\n\n## 结论\n\n通过 SSH 隧道共享本地代理是一个简单而优雅的解决方案，特别适合临时需要代理访问的场景。它不需要在服务器上安装额外的软件，配置简单，安全可靠。\n","slug":"其他/SSH隧道","published":1,"updated":"2025-05-09T09:36:47.796Z","comments":1,"layout":"post","photos":[],"_id":"cmcbm7pqb0009e2qgc8py02tj","content":"<p>在进行服务器运维时，经常会遇到需要代理来访问某些资源的情况。本文将介绍如何通过 SSH 隧道，让远程服务器共享使用本地电脑的代理，实现优雅的科学上网解决方案。</p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>通常我们在本地电脑上都配置了代理软件（如 Clash），但远程服务器往往没有代理。如何让远程服务器也能使用上我们本地的代理呢？这就需要用到 SSH 的端口转发功能。</p>\n<h2 id=\"原理解释\"><a href=\"#原理解释\" class=\"headerlink\" title=\"原理解释\"></a>原理解释</h2><p>SSH 隧道技术允许我们将本地端口转发到远程服务器。通过建立一个加密的通道，远程服务器可以通过这个通道访问本地电脑的代理服务。</p>\n<div class=\"code-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[远程服务器] &lt;--- SSH隧道 ---&gt; [本地电脑] &lt;--- 代理 ---&gt; [互联网]</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h2><h3 id=\"1-前提条件\"><a href=\"#1-前提条件\" class=\"headerlink\" title=\"1. 前提条件\"></a>1. 前提条件</h3><ul>\n<li>本地电脑已安装并运行代理软件（如 Clash，默认端口 7890）</li>\n<li>能够通过 SSH 连接到远程服务器</li>\n<li>确保本地代理软件正常工作</li>\n</ul>\n<h3 id=\"2-建立-SSH-隧道\"><a href=\"#2-建立-SSH-隧道\" class=\"headerlink\" title=\"2. 建立 SSH 隧道\"></a>2. 建立 SSH 隧道</h3><p>在本地电脑的终端中执行：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -R 7890:127.0.0.1:7890 -o ServerAliveInterval=60 -o ServerAliveCountMax=3 用户名@服务器IP</span><br></pre></td></tr></table></figure></div>\n\n<p>参数说明：</p>\n<ul>\n<li><code>-R 7890:127.0.0.1:7890</code>：将远程服务器的 7890 端口转发到本地的 7890 端口</li>\n<li><code>-o ServerAliveInterval=60</code>：每 60 秒发送一次心跳包</li>\n<li><code>-o ServerAliveCountMax=3</code>：最多允许丢失 3 次心跳包</li>\n</ul>\n<br>\n\n<p>然后根据提示输入服务器用户的密码:<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/img/2025-01-18-11-45-41.png\"\n                     \n                ></p>\n<h3 id=\"3-配置服务器代理\"><a href=\"#3-配置服务器代理\" class=\"headerlink\" title=\"3. 配置服务器代理\"></a>3. 配置服务器代理</h3><p>在服务器终端中执行：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"4-验证代理是否生效\"><a href=\"#4-验证代理是否生效\" class=\"headerlink\" title=\"4. 验证代理是否生效\"></a>4. 验证代理是否生效</h3><p>在服务器上执行：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -v https://github.com</span><br></pre></td></tr></table></figure></div>\n\n<p>如果能够正常访问，说明代理配置成功。</p>\n<h2 id=\"持久化配置\"><a href=\"#持久化配置\" class=\"headerlink\" title=\"持久化配置\"></a>持久化配置</h2><p>如果想让代理设置持久生效，可以将代理配置命令添加到 Shell 的配置文件中：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编辑 ~/.bashrc 或 ~/.zshrc</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重新加载配置</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ol>\n<li><strong>安全性考虑</strong>：SSH 隧道是加密的，相对安全</li>\n<li><strong>连接维护</strong>：保持 SSH 连接不断开，否则代理会失效</li>\n<li><strong>带宽限制</strong>：代理流量会经过你的本地电脑，注意带宽占用</li>\n<li><strong>临时使用</strong>：这种方法适合临时使用，长期使用建议直接在服务器上配置代理</li>\n</ol>\n<h2 id=\"常见问题排查\"><a href=\"#常见问题排查\" class=\"headerlink\" title=\"常见问题排查\"></a>常见问题排查</h2><ol>\n<li><p><strong>隧道无法建立</strong></p>\n<ul>\n<li>检查本地代理是否正常运行</li>\n<li>确认端口号是否正确</li>\n<li>检查服务器防火墙设置</li>\n</ul>\n</li>\n<li><p><strong>代理失效</strong></p>\n<ul>\n<li>SSH 连接是否断开</li>\n<li>本地代理软件是否正常运行</li>\n<li>环境变量是否正确设置</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"Clash设置\"><a href=\"#Clash设置\" class=\"headerlink\" title=\"Clash设置\"></a>Clash设置</h3><p>在默认的代理设置基础上进行了如下修改, 但是不确保这是正常访问的必须操作:<br>以mac的ClashX Pro为例, 在<code>更多设置</code>中<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/img/2025-01-17-14-00-36.png\"\n                     \n                ></p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>通过 SSH 隧道共享本地代理是一个简单而优雅的解决方案，特别适合临时需要代理访问的场景。它不需要在服务器上安装额外的软件，配置简单，安全可靠。</p>\n","more":"<p>在进行服务器运维时，经常会遇到需要代理来访问某些资源的情况。本文将介绍如何通过 SSH 隧道，让远程服务器共享使用本地电脑的代理，实现优雅的科学上网解决方案。</p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>通常我们在本地电脑上都配置了代理软件（如 Clash），但远程服务器往往没有代理。如何让远程服务器也能使用上我们本地的代理呢？这就需要用到 SSH 的端口转发功能。</p>\n<h2 id=\"原理解释\"><a href=\"#原理解释\" class=\"headerlink\" title=\"原理解释\"></a>原理解释</h2><p>SSH 隧道技术允许我们将本地端口转发到远程服务器。通过建立一个加密的通道，远程服务器可以通过这个通道访问本地电脑的代理服务。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[远程服务器] &lt;--- SSH隧道 ---&gt; [本地电脑] &lt;--- 代理 ---&gt; [互联网]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h2><h3 id=\"1-前提条件\"><a href=\"#1-前提条件\" class=\"headerlink\" title=\"1. 前提条件\"></a>1. 前提条件</h3><ul>\n<li>本地电脑已安装并运行代理软件（如 Clash，默认端口 7890）</li>\n<li>能够通过 SSH 连接到远程服务器</li>\n<li>确保本地代理软件正常工作</li>\n</ul>\n<h3 id=\"2-建立-SSH-隧道\"><a href=\"#2-建立-SSH-隧道\" class=\"headerlink\" title=\"2. 建立 SSH 隧道\"></a>2. 建立 SSH 隧道</h3><p>在本地电脑的终端中执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -R 7890:127.0.0.1:7890 -o ServerAliveInterval=60 -o ServerAliveCountMax=3 用户名@服务器IP</span><br></pre></td></tr></table></figure>\n\n<p>参数说明：</p>\n<ul>\n<li><code>-R 7890:127.0.0.1:7890</code>：将远程服务器的 7890 端口转发到本地的 7890 端口</li>\n<li><code>-o ServerAliveInterval=60</code>：每 60 秒发送一次心跳包</li>\n<li><code>-o ServerAliveCountMax=3</code>：最多允许丢失 3 次心跳包</li>\n</ul>\n<br>\n\n<p>然后根据提示输入服务器用户的密码:<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/img/2025-01-18-11-45-41.png\"\n                     \n                ></p>\n<h3 id=\"3-配置服务器代理\"><a href=\"#3-配置服务器代理\" class=\"headerlink\" title=\"3. 配置服务器代理\"></a>3. 配置服务器代理</h3><p>在服务器终端中执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-验证代理是否生效\"><a href=\"#4-验证代理是否生效\" class=\"headerlink\" title=\"4. 验证代理是否生效\"></a>4. 验证代理是否生效</h3><p>在服务器上执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -v https://github.com</span><br></pre></td></tr></table></figure>\n\n<p>如果能够正常访问，说明代理配置成功。</p>\n<h2 id=\"持久化配置\"><a href=\"#持久化配置\" class=\"headerlink\" title=\"持久化配置\"></a>持久化配置</h2><p>如果想让代理设置持久生效，可以将代理配置命令添加到 Shell 的配置文件中：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编辑 ~/.bashrc 或 ~/.zshrc</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重新加载配置</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ol>\n<li><strong>安全性考虑</strong>：SSH 隧道是加密的，相对安全</li>\n<li><strong>连接维护</strong>：保持 SSH 连接不断开，否则代理会失效</li>\n<li><strong>带宽限制</strong>：代理流量会经过你的本地电脑，注意带宽占用</li>\n<li><strong>临时使用</strong>：这种方法适合临时使用，长期使用建议直接在服务器上配置代理</li>\n</ol>\n<h2 id=\"常见问题排查\"><a href=\"#常见问题排查\" class=\"headerlink\" title=\"常见问题排查\"></a>常见问题排查</h2><ol>\n<li><p><strong>隧道无法建立</strong></p>\n<ul>\n<li>检查本地代理是否正常运行</li>\n<li>确认端口号是否正确</li>\n<li>检查服务器防火墙设置</li>\n</ul>\n</li>\n<li><p><strong>代理失效</strong></p>\n<ul>\n<li>SSH 连接是否断开</li>\n<li>本地代理软件是否正常运行</li>\n<li>环境变量是否正确设置</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"Clash设置\"><a href=\"#Clash设置\" class=\"headerlink\" title=\"Clash设置\"></a>Clash设置</h3><p>在默认的代理设置基础上进行了如下修改, 但是不确保这是正常访问的必须操作:<br>以mac的ClashX Pro为例, 在<code>更多设置</code>中<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/img/2025-01-17-14-00-36.png\"\n                     \n                ></p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>通过 SSH 隧道共享本地代理是一个简单而优雅的解决方案，特别适合临时需要代理访问的场景。它不需要在服务器上安装额外的软件，配置简单，安全可靠。</p>\n","_processedHighlight":true},{"title":"Tmux","date":"2025-01-17T07:56:29.000Z","excerpt":"在利用SSH连接远端服务器并需要长期运行程序?  使用Tmux赋予进程以「不死鸟的加护」—— 退出终端窗口后依旧在后台运行~","_content":">在利用SSH连接远端服务器并需要长期运行程序?  使用Tmux赋予进程以「不死鸟的加护」—— 退出终端窗口后依旧在后台运行~\n<img src = \"/img/不死鸟.jpg\" width = \"70%\">\n\n## 什么是 Tmux？\n\nTmux（Terminal Multiplexer）是一个终端复用器，它允许用户在单个终端窗口中运行和管理多个终端会话。作为一个强大的命令行工具，tmux 特别适合需要长时间运行程序或需要同时管理多个终端窗口的场景。\n## 为什么需要 Tmux？\n\n在以下场景中，tmux 特别有用：\n\n1. **远程服务器管理**\n   - SSH 连接意外断开时，tmux 会话仍然保持运行\n   - 可以随时重新连接到之前的工作环境\n\n2. **多任务管理**\n   - 在同一个终端窗口中同时运行多个程序\n   - 方便地在不同任务之间切换\n\n3. **结对编程**\n   - 多人可以同时连接到同一个 tmux 会话\n   - 实时查看和协作编辑\n\n## 基本概念\n\ntmux 采用三层架构：\n\n- **会话（Session）**：最顶层的概念，包含多个窗口\n- **窗口（Window）**：类似于浏览器的标签页\n- **窗格（Pane）**：窗口内的分割区域\n\n## 常用操作指南\n\n### 1. 安装\n\n不同系统的安装命令：\n\n```bash\n# MacOS\nbrew install tmux\n\n# Ubuntu/Debian\nsudo apt install tmux\n\n# CentOS/RHEL\nsudo yum install tmux\n```\n\n### 2. 会话管理\n\n#### 启动新会话\n```bash\n# 创建默认会话\ntmux\n\n# 创建命名会话\ntmux new -s session_name\n```\n\n#### 会话操作\n```bash\n# 断开当前会话\nCtrl+b d\n\n# 列出所有会话\ntmux ls\n\n# 连接到指定会话\ntmux attach -t session_name\n\n# 关闭指定会话\ntmux kill-session -t session_name\n```\n\n### 3. 窗口管理\n\n所有命令都需要先按前缀键 `Ctrl+b`：\n\n- `c`: 创建新窗口\n- `&`: 关闭当前窗口\n- `p`: 切换到上一个窗口\n- `n`: 切换到下一个窗口\n- `数字键`: 切换到指定编号的窗口\n\n### 4. 窗格操作\n\n同样需要先按前缀键 `Ctrl+b`：\n\n- `%`: 垂直分割窗格\n- `\"`: 水平分割窗格\n- `方向键`: 在窗格之间移动\n- `x`: 关闭当前窗格\n- `z`: 最大化/还原当前窗格\n\n## 进阶技巧\n\n### 1. 自定义配置\n\n创建 `~/.tmux.conf` 文件来自定义 tmux 配置：\n\n```bash\n# 修改前缀键为 Ctrl+a\nset -g prefix C-a\nunbind C-b\nbind C-a send-prefix\n\n# 开启鼠标支持\nset -g mouse on\n\n# 设置窗口编号从 1 开始\nset -g base-index 1\n```\n\n### 2. 复制模式\n\n1. 按 `Ctrl+b [` 进入复制模式\n2. 使用方向键移动光标\n3. 按 `Space` 开始选择\n4. 按 `Enter` 复制选中内容\n5. 按 `Ctrl+b ]` 粘贴\n\n\n---\n\ntmux 是一个强大的终端管理工具，掌握它可以显著提高命令行工作效率。从基本的会话管理到高级的自定义配置，tmux 都提供了灵活而强大的功能。随着使用经验的积累，你会发现它是开发工作中不可或缺的工具之一。\n\n## 参考资源\n\n- [Tmux 官方文档](https://github.com/tmux/tmux/wiki)\n- [Tmux 速查表](https://tmuxcheatsheet.com/)\n- [Awesome Tmux](https://github.com/rothgar/awesome-tmux)","source":"_posts/其他/Tmux.md","raw":"---\ntitle: Tmux\ndate: 2025-01-17 15:56:29\ntags:\n- 服务器\n- 多会话管理\ncategories: 通用技能\nexcerpt: 在利用SSH连接远端服务器并需要长期运行程序?  使用Tmux赋予进程以「不死鸟的加护」—— 退出终端窗口后依旧在后台运行~\n---\n>在利用SSH连接远端服务器并需要长期运行程序?  使用Tmux赋予进程以「不死鸟的加护」—— 退出终端窗口后依旧在后台运行~\n<img src = \"/img/不死鸟.jpg\" width = \"70%\">\n\n## 什么是 Tmux？\n\nTmux（Terminal Multiplexer）是一个终端复用器，它允许用户在单个终端窗口中运行和管理多个终端会话。作为一个强大的命令行工具，tmux 特别适合需要长时间运行程序或需要同时管理多个终端窗口的场景。\n## 为什么需要 Tmux？\n\n在以下场景中，tmux 特别有用：\n\n1. **远程服务器管理**\n   - SSH 连接意外断开时，tmux 会话仍然保持运行\n   - 可以随时重新连接到之前的工作环境\n\n2. **多任务管理**\n   - 在同一个终端窗口中同时运行多个程序\n   - 方便地在不同任务之间切换\n\n3. **结对编程**\n   - 多人可以同时连接到同一个 tmux 会话\n   - 实时查看和协作编辑\n\n## 基本概念\n\ntmux 采用三层架构：\n\n- **会话（Session）**：最顶层的概念，包含多个窗口\n- **窗口（Window）**：类似于浏览器的标签页\n- **窗格（Pane）**：窗口内的分割区域\n\n## 常用操作指南\n\n### 1. 安装\n\n不同系统的安装命令：\n\n```bash\n# MacOS\nbrew install tmux\n\n# Ubuntu/Debian\nsudo apt install tmux\n\n# CentOS/RHEL\nsudo yum install tmux\n```\n\n### 2. 会话管理\n\n#### 启动新会话\n```bash\n# 创建默认会话\ntmux\n\n# 创建命名会话\ntmux new -s session_name\n```\n\n#### 会话操作\n```bash\n# 断开当前会话\nCtrl+b d\n\n# 列出所有会话\ntmux ls\n\n# 连接到指定会话\ntmux attach -t session_name\n\n# 关闭指定会话\ntmux kill-session -t session_name\n```\n\n### 3. 窗口管理\n\n所有命令都需要先按前缀键 `Ctrl+b`：\n\n- `c`: 创建新窗口\n- `&`: 关闭当前窗口\n- `p`: 切换到上一个窗口\n- `n`: 切换到下一个窗口\n- `数字键`: 切换到指定编号的窗口\n\n### 4. 窗格操作\n\n同样需要先按前缀键 `Ctrl+b`：\n\n- `%`: 垂直分割窗格\n- `\"`: 水平分割窗格\n- `方向键`: 在窗格之间移动\n- `x`: 关闭当前窗格\n- `z`: 最大化/还原当前窗格\n\n## 进阶技巧\n\n### 1. 自定义配置\n\n创建 `~/.tmux.conf` 文件来自定义 tmux 配置：\n\n```bash\n# 修改前缀键为 Ctrl+a\nset -g prefix C-a\nunbind C-b\nbind C-a send-prefix\n\n# 开启鼠标支持\nset -g mouse on\n\n# 设置窗口编号从 1 开始\nset -g base-index 1\n```\n\n### 2. 复制模式\n\n1. 按 `Ctrl+b [` 进入复制模式\n2. 使用方向键移动光标\n3. 按 `Space` 开始选择\n4. 按 `Enter` 复制选中内容\n5. 按 `Ctrl+b ]` 粘贴\n\n\n---\n\ntmux 是一个强大的终端管理工具，掌握它可以显著提高命令行工作效率。从基本的会话管理到高级的自定义配置，tmux 都提供了灵活而强大的功能。随着使用经验的积累，你会发现它是开发工作中不可或缺的工具之一。\n\n## 参考资源\n\n- [Tmux 官方文档](https://github.com/tmux/tmux/wiki)\n- [Tmux 速查表](https://tmuxcheatsheet.com/)\n- [Awesome Tmux](https://github.com/rothgar/awesome-tmux)","slug":"其他/Tmux","published":1,"updated":"2025-05-10T02:30:55.397Z","comments":1,"layout":"post","photos":[],"_id":"cmcbm7pqb000be2qg0up9ba4z","content":"<blockquote>\n<p>在利用SSH连接远端服务器并需要长期运行程序?  使用Tmux赋予进程以「不死鸟的加护」—— 退出终端窗口后依旧在后台运行~</p>\n<img src = \"/img/不死鸟.jpg\" width = \"70%\"></blockquote>\n<h2 id=\"什么是-Tmux？\"><a href=\"#什么是-Tmux？\" class=\"headerlink\" title=\"什么是 Tmux？\"></a>什么是 Tmux？</h2><p>Tmux（Terminal Multiplexer）是一个终端复用器，它允许用户在单个终端窗口中运行和管理多个终端会话。作为一个强大的命令行工具，tmux 特别适合需要长时间运行程序或需要同时管理多个终端窗口的场景。</p>\n<h2 id=\"为什么需要-Tmux？\"><a href=\"#为什么需要-Tmux？\" class=\"headerlink\" title=\"为什么需要 Tmux？\"></a>为什么需要 Tmux？</h2><p>在以下场景中，tmux 特别有用：</p>\n<ol>\n<li><p><strong>远程服务器管理</strong></p>\n<ul>\n<li>SSH 连接意外断开时，tmux 会话仍然保持运行</li>\n<li>可以随时重新连接到之前的工作环境</li>\n</ul>\n</li>\n<li><p><strong>多任务管理</strong></p>\n<ul>\n<li>在同一个终端窗口中同时运行多个程序</li>\n<li>方便地在不同任务之间切换</li>\n</ul>\n</li>\n<li><p><strong>结对编程</strong></p>\n<ul>\n<li>多人可以同时连接到同一个 tmux 会话</li>\n<li>实时查看和协作编辑</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p>tmux 采用三层架构：</p>\n<ul>\n<li><strong>会话（Session）</strong>：最顶层的概念，包含多个窗口</li>\n<li><strong>窗口（Window）</strong>：类似于浏览器的标签页</li>\n<li><strong>窗格（Pane）</strong>：窗口内的分割区域</li>\n</ul>\n<h2 id=\"常用操作指南\"><a href=\"#常用操作指南\" class=\"headerlink\" title=\"常用操作指南\"></a>常用操作指南</h2><h3 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a>1. 安装</h3><p>不同系统的安装命令：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># MacOS</span></span><br><span class=\"line\">brew install tmux</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Ubuntu/Debian</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt install tmux</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># CentOS/RHEL</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> yum install tmux</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"2-会话管理\"><a href=\"#2-会话管理\" class=\"headerlink\" title=\"2. 会话管理\"></a>2. 会话管理</h3><h4 id=\"启动新会话\"><a href=\"#启动新会话\" class=\"headerlink\" title=\"启动新会话\"></a>启动新会话</h4><div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建默认会话</span></span><br><span class=\"line\">tmux</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建命名会话</span></span><br><span class=\"line\">tmux new -s session_name</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"会话操作\"><a href=\"#会话操作\" class=\"headerlink\" title=\"会话操作\"></a>会话操作</h4><div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 断开当前会话</span></span><br><span class=\"line\">Ctrl+b d</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出所有会话</span></span><br><span class=\"line\">tmux <span class=\"built_in\">ls</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连接到指定会话</span></span><br><span class=\"line\">tmux attach -t session_name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭指定会话</span></span><br><span class=\"line\">tmux kill-session -t session_name</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"3-窗口管理\"><a href=\"#3-窗口管理\" class=\"headerlink\" title=\"3. 窗口管理\"></a>3. 窗口管理</h3><p>所有命令都需要先按前缀键 <code>Ctrl+b</code>：</p>\n<ul>\n<li><code>c</code>: 创建新窗口</li>\n<li><code>&amp;</code>: 关闭当前窗口</li>\n<li><code>p</code>: 切换到上一个窗口</li>\n<li><code>n</code>: 切换到下一个窗口</li>\n<li><code>数字键</code>: 切换到指定编号的窗口</li>\n</ul>\n<h3 id=\"4-窗格操作\"><a href=\"#4-窗格操作\" class=\"headerlink\" title=\"4. 窗格操作\"></a>4. 窗格操作</h3><p>同样需要先按前缀键 <code>Ctrl+b</code>：</p>\n<ul>\n<li><code>%</code>: 垂直分割窗格</li>\n<li><code>&quot;</code>: 水平分割窗格</li>\n<li><code>方向键</code>: 在窗格之间移动</li>\n<li><code>x</code>: 关闭当前窗格</li>\n<li><code>z</code>: 最大化&#x2F;还原当前窗格</li>\n</ul>\n<h2 id=\"进阶技巧\"><a href=\"#进阶技巧\" class=\"headerlink\" title=\"进阶技巧\"></a>进阶技巧</h2><h3 id=\"1-自定义配置\"><a href=\"#1-自定义配置\" class=\"headerlink\" title=\"1. 自定义配置\"></a>1. 自定义配置</h3><p>创建 <code>~/.tmux.conf</code> 文件来自定义 tmux 配置：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改前缀键为 Ctrl+a</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> -g prefix C-a</span><br><span class=\"line\">unbind C-b</span><br><span class=\"line\"><span class=\"built_in\">bind</span> C-a send-prefix</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开启鼠标支持</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> -g mouse on</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置窗口编号从 1 开始</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> -g base-index 1</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"2-复制模式\"><a href=\"#2-复制模式\" class=\"headerlink\" title=\"2. 复制模式\"></a>2. 复制模式</h3><ol>\n<li>按 <code>Ctrl+b [</code> 进入复制模式</li>\n<li>使用方向键移动光标</li>\n<li>按 <code>Space</code> 开始选择</li>\n<li>按 <code>Enter</code> 复制选中内容</li>\n<li>按 <code>Ctrl+b ]</code> 粘贴</li>\n</ol>\n<hr>\n<p>tmux 是一个强大的终端管理工具，掌握它可以显著提高命令行工作效率。从基本的会话管理到高级的自定义配置，tmux 都提供了灵活而强大的功能。随着使用经验的积累，你会发现它是开发工作中不可或缺的工具之一。</p>\n<h2 id=\"参考资源\"><a href=\"#参考资源\" class=\"headerlink\" title=\"参考资源\"></a>参考资源</h2><ul>\n<li><a class=\"link\"   href=\"https://github.com/tmux/tmux/wiki\" >Tmux 官方文档<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n<li><a class=\"link\"   href=\"https://tmuxcheatsheet.com/\" >Tmux 速查表<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n<li><a class=\"link\"   href=\"https://github.com/rothgar/awesome-tmux\" >Awesome Tmux<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n</ul>\n","more":"<blockquote>\n<p>在利用SSH连接远端服务器并需要长期运行程序?  使用Tmux赋予进程以「不死鸟的加护」—— 退出终端窗口后依旧在后台运行~</p>\n<img src = \"/img/不死鸟.jpg\" width = \"70%\"></blockquote>\n<h2 id=\"什么是-Tmux？\"><a href=\"#什么是-Tmux？\" class=\"headerlink\" title=\"什么是 Tmux？\"></a>什么是 Tmux？</h2><p>Tmux（Terminal Multiplexer）是一个终端复用器，它允许用户在单个终端窗口中运行和管理多个终端会话。作为一个强大的命令行工具，tmux 特别适合需要长时间运行程序或需要同时管理多个终端窗口的场景。</p>\n<h2 id=\"为什么需要-Tmux？\"><a href=\"#为什么需要-Tmux？\" class=\"headerlink\" title=\"为什么需要 Tmux？\"></a>为什么需要 Tmux？</h2><p>在以下场景中，tmux 特别有用：</p>\n<ol>\n<li><p><strong>远程服务器管理</strong></p>\n<ul>\n<li>SSH 连接意外断开时，tmux 会话仍然保持运行</li>\n<li>可以随时重新连接到之前的工作环境</li>\n</ul>\n</li>\n<li><p><strong>多任务管理</strong></p>\n<ul>\n<li>在同一个终端窗口中同时运行多个程序</li>\n<li>方便地在不同任务之间切换</li>\n</ul>\n</li>\n<li><p><strong>结对编程</strong></p>\n<ul>\n<li>多人可以同时连接到同一个 tmux 会话</li>\n<li>实时查看和协作编辑</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p>tmux 采用三层架构：</p>\n<ul>\n<li><strong>会话（Session）</strong>：最顶层的概念，包含多个窗口</li>\n<li><strong>窗口（Window）</strong>：类似于浏览器的标签页</li>\n<li><strong>窗格（Pane）</strong>：窗口内的分割区域</li>\n</ul>\n<h2 id=\"常用操作指南\"><a href=\"#常用操作指南\" class=\"headerlink\" title=\"常用操作指南\"></a>常用操作指南</h2><h3 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a>1. 安装</h3><p>不同系统的安装命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># MacOS</span></span><br><span class=\"line\">brew install tmux</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Ubuntu/Debian</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt install tmux</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># CentOS/RHEL</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> yum install tmux</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-会话管理\"><a href=\"#2-会话管理\" class=\"headerlink\" title=\"2. 会话管理\"></a>2. 会话管理</h3><h4 id=\"启动新会话\"><a href=\"#启动新会话\" class=\"headerlink\" title=\"启动新会话\"></a>启动新会话</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建默认会话</span></span><br><span class=\"line\">tmux</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建命名会话</span></span><br><span class=\"line\">tmux new -s session_name</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"会话操作\"><a href=\"#会话操作\" class=\"headerlink\" title=\"会话操作\"></a>会话操作</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 断开当前会话</span></span><br><span class=\"line\">Ctrl+b d</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出所有会话</span></span><br><span class=\"line\">tmux <span class=\"built_in\">ls</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连接到指定会话</span></span><br><span class=\"line\">tmux attach -t session_name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭指定会话</span></span><br><span class=\"line\">tmux kill-session -t session_name</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-窗口管理\"><a href=\"#3-窗口管理\" class=\"headerlink\" title=\"3. 窗口管理\"></a>3. 窗口管理</h3><p>所有命令都需要先按前缀键 <code>Ctrl+b</code>：</p>\n<ul>\n<li><code>c</code>: 创建新窗口</li>\n<li><code>&amp;</code>: 关闭当前窗口</li>\n<li><code>p</code>: 切换到上一个窗口</li>\n<li><code>n</code>: 切换到下一个窗口</li>\n<li><code>数字键</code>: 切换到指定编号的窗口</li>\n</ul>\n<h3 id=\"4-窗格操作\"><a href=\"#4-窗格操作\" class=\"headerlink\" title=\"4. 窗格操作\"></a>4. 窗格操作</h3><p>同样需要先按前缀键 <code>Ctrl+b</code>：</p>\n<ul>\n<li><code>%</code>: 垂直分割窗格</li>\n<li><code>&quot;</code>: 水平分割窗格</li>\n<li><code>方向键</code>: 在窗格之间移动</li>\n<li><code>x</code>: 关闭当前窗格</li>\n<li><code>z</code>: 最大化&#x2F;还原当前窗格</li>\n</ul>\n<h2 id=\"进阶技巧\"><a href=\"#进阶技巧\" class=\"headerlink\" title=\"进阶技巧\"></a>进阶技巧</h2><h3 id=\"1-自定义配置\"><a href=\"#1-自定义配置\" class=\"headerlink\" title=\"1. 自定义配置\"></a>1. 自定义配置</h3><p>创建 <code>~/.tmux.conf</code> 文件来自定义 tmux 配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改前缀键为 Ctrl+a</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> -g prefix C-a</span><br><span class=\"line\">unbind C-b</span><br><span class=\"line\"><span class=\"built_in\">bind</span> C-a send-prefix</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开启鼠标支持</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> -g mouse on</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置窗口编号从 1 开始</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> -g base-index 1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-复制模式\"><a href=\"#2-复制模式\" class=\"headerlink\" title=\"2. 复制模式\"></a>2. 复制模式</h3><ol>\n<li>按 <code>Ctrl+b [</code> 进入复制模式</li>\n<li>使用方向键移动光标</li>\n<li>按 <code>Space</code> 开始选择</li>\n<li>按 <code>Enter</code> 复制选中内容</li>\n<li>按 <code>Ctrl+b ]</code> 粘贴</li>\n</ol>\n<hr>\n<p>tmux 是一个强大的终端管理工具，掌握它可以显著提高命令行工作效率。从基本的会话管理到高级的自定义配置，tmux 都提供了灵活而强大的功能。随着使用经验的积累，你会发现它是开发工作中不可或缺的工具之一。</p>\n<h2 id=\"参考资源\"><a href=\"#参考资源\" class=\"headerlink\" title=\"参考资源\"></a>参考资源</h2><ul>\n<li><a class=\"link\"   href=\"https://github.com/tmux/tmux/wiki\" >Tmux 官方文档<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n<li><a class=\"link\"   href=\"https://tmuxcheatsheet.com/\" >Tmux 速查表<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n<li><a class=\"link\"   href=\"https://github.com/rothgar/awesome-tmux\" >Awesome Tmux<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n</ul>\n","_processedHighlight":true},{"title":"makefile","date":"2025-02-12T10:15:25.000Z","excerpt":"一起来学习makefile吧！","_content":"# 编译\n# 基本概念\n## 默认目标\n- `Makefile`当中的第一个目标会成为**默认目标**;\n- 不指定参数的`make`命令会执行默认目标;\n- 通常使用`all`的伪目标作为默认目标.\n\n## 伪目标\n当我们需要执行清理工作、运行测试等操作时, 我们不希望与实际文件名发生冲突, 此时就需要用到 **伪目标**.\n\n**语法**\n```makefile\n.PHONY: 目标名\n目标名:\n    命令\n```\n\n**使用示例**\n```makefile\n# 情景：需要清理编译产生的 .o 文件和可执行文件\n.PHONY: clean\nclean:\n    rm -f *.o program\n\n# 情景：需要运行测试\n.PHONY: test\ntest:\n    ./run_tests.sh\n\n# 使用方法：\n# make clean  # 清理文件\n# make test   # 运行测试\n```\n> 其中`-f`表示强制删除, 其他的参数如`-r`表示递归删除目录, `-rf`表示强制递归删除目录.\n\n### 多重构建\n我们还可以利用伪目标使得默认目标具有多个对象:\n```makefile \n.PHONY: all debug release clean\n\n# 默认目标包含常用的构建类型\nall: debug release\n\n# 调试版本\ndebug: main.c\n    @echo \"构建调试版本...\"\n    gcc -g main.c -o debug-program\n\n# 发布版本\nrelease: main.c\n    @echo \"构建发布版本...\"\n    gcc -O2 main.c -o release-program\n\nclean:\n    rm -f debug-program release-program\n\n# 使用：\n# make          # 构建调试版和发布版\n# make debug    # 只构建调试版\n# make release  # 只构建发布版\n# make clean    # 清理\n```\n\n## 多目标\ne.g: \n```makefile\nbigoutput littleoutput : text.g\n    generate text.g -$(subst output,,$@) > $@\n```\n\n### 解析\n\n```makefile\nbigoutput littleoutput : text.g\n    generate text.g -$(subst output,,$@) > $@\n```\n\n1. `bigoutput littleoutput` - 两个目标文件\n2. `text.g` - 依赖文件\n3. `$(subst output,,$@)` -变量展开：\n   - `$@` 是自动变量，表示当前目标名\n   - `subst` 是替换函数，格式为 `$(subst from,to,text)`\n   - 此处将目标名中的 \"output\" 替换为空\n\n当规则执行时：\n- 对于 `bigoutput` 目标：\n  - `$@` 展开为 `bigoutput`\n  - `$(subst output,,$@)` 结果为 `big`\n  - 最终命令变为：`generate text.g -big > bigoutput`\n\n- 对于 `littleoutput` 目标：\n  - `$@` 展开为 `littleoutput`\n  - `$(subst output,,$@)` 结果为 `little`\n  - 最终命令变为：`generate text.g -little > littleoutput`\n\n<br>\n\n因此, 上述的多目标规则**等价**于:\n```makefile\nbigoutput : text.g\n    generate text.g -big > bigoutput\nlittleoutput : text.g\n    generate text.g -little > littleoutput\n```\n\n### 规则语法\n\n多目标规则（Multiple Targets）是 Makefile 中的一个重要特性：\n\n1. **基本语法**：\n   ```makefile\n   target1 target2 : prerequisites\n       commands\n   ```\n\n2. **特点**：\n   - 多个目标共享相同的依赖关系\n   - 命令会对每个目标分别执行一次\n   - 可以使用 `$@` 引用当前正在构建的目标\n\n3. **使用场景**：\n   - 生成相似但略有不同的文件\n   - 多个目标需要类似的构建过程\n   - 减少重复代码\n\n4. **示例**：\n   ```makefile\n   # 生成不同大小的图片\n   big.jpg small.jpg : original.jpg\n       convert original.jpg -resize $* > $@\n\n   # 生成不同格式的文档\n   manual.pdf manual.html : manual.txt\n       pandoc manual.txt -o $@\n   ```\n\n5. **优势**：\n   - 代码更简洁\n   - 易于维护\n   - 避免重复规则\n   - 更好的规则组织\n\n6. **注意事项**：\n   - 命令对每个目标都会执行一次\n   - 需要合理使用自动变量（如 `$@`）来区分不同目标\n   - 确保命令对所有目标都适用\n\n## 静态模式\n好的，让我从这几个角度来介绍 Makefile 中的静态模式规则。\n\n### 1. 引入背景\n\n在 Makefile 中，当我们需要将多个源文件编译成对应的目标文件时，如果按照普通的规则写法，往往需要为每个文件都写一条规则：\n\n```makefile\nfoo.o : foo.c\n    $(CC) -c $(CFLAGS) foo.c -o foo.o\n\nbar.o : bar.c\n    $(CC) -c $(CFLAGS) bar.c -o bar.o\n\ntest.o : test.c\n    $(CC) -c $(CFLAGS) test.c -o test.o\n```\n\n这种写法存在明显问题：\n- 规则重复，维护困难\n- 当新增源文件时需要手动添加规则\n- 代码冗长，不够优雅\n\n虽然可以使用多目标规则，但在处理源文件和目标文件的对应关系时仍然不够灵活。这就是引入静态模式规则的原因。\n\n### 2. 基本语法\n\n静态模式规则的基本语法如下：\n```makefile\ntargets ...: target-pattern: prereq-pattern\n    commands\n```\n\n其中：\n- `targets`: 要生成的目标文件列表\n- `target-pattern`: 目标的模式，通常包含 `%` 通配符\n- `prereq-pattern`: 依赖的模式，通常也包含 `%` 通配符\n- `commands`: 构建命令\n\n`%` 在 target-pattern 中匹配的内容，会在 prereq-pattern 中作为相同的替换内容。\n\n### 3. 综合示例\n\n让我们通过几个逐渐复杂的例子来说明静态模式的使用：\n\n#### 基础示例：编译 C 文件\n```makefile\nobjects = foo.o bar.o test.o\n\n$(objects): %.o: %.c\n    $(CC) -c $(CFLAGS) $< -o $@\n```\n\n#### 复杂示例：多种源文件处理\n```makefile\n# 定义源文件和目标文件\ncpp_sources := $(wildcard *.cpp)\nc_sources := $(wildcard *.c)\ncpp_objects := $(cpp_sources:.cpp=.o)\nc_objects := $(c_sources:.c=.o)\nall_objects := $(cpp_objects) $(c_objects)\n\n# C++ 源文件的编译规则\n$(cpp_objects): %.o: %.cpp\n    $(CXX) -c $(CXXFLAGS) $< -o $@\n\n# C 源文件的编译规则\n$(c_objects): %.o: %.c\n    $(CC) -c $(CFLAGS) $< -o $@\n\n# 生成可执行文件\nprogram: $(all_objects)\n    $(CXX) $^ -o $@\n```\n- `$(cpp_sources:.cpp=.o)`是一种**模式替换**, 会将`cpp_sources`中的所有`.cpp`文件替换为`.o`文件;\n  - 即`$(varname:pattern1=pattern2)` 会将`varname`中的所有`pattern1`替换为`pattern2`;\n\n#### 更复杂的示例：多目录处理\n```makefile\n# 目录结构\nSRCDIR = src\nOBJDIR = obj\n\n# 源文件和目标文件\nSOURCES = $(wildcard $(SRCDIR)/*.c)\nOBJECTS = $(SOURCES:$(SRCDIR)/%.c=$(OBJDIR)/%.o)\n\n# 确保目标目录存在\n$(OBJDIR):\n    mkdir -p $@\n\n# 静态模式规则\n$(OBJECTS): $(OBJDIR)/%.o: $(SRCDIR)/%.c | $(OBJDIR)\n    $(CC) -c $(CFLAGS) $< -o $@\n\n# 最终目标\nprogram: $(OBJECTS)\n    $(CC) $^ -o $@\n```\n> todo\n\n这个复杂示例展现了 Makefile 在处理现代项目时的多个高级特性。在**文件组织**方面，示例实现了跨目录的文件处理能力，通过将源文件和目标文件分别组织在不同的目录（如 `src` 和 `obj`）中，体现了项目结构的清晰性和模块化。Makefile 能够智能地在这些目录间进行文件操作，保持项目的整洁有序。\n\n在**目录管理**方面，示例引入了自动创建目标目录的机制。通过使用条件依赖（用 `|` 分隔符标识），确保在编译过程开始前目标目录已经存在。这种方式优雅地解决了目录创建的时序问题，避免了因目录不存在而导致的编译失败。特别是当多个目标文件同时需要某个目录时，条件依赖能够确保目录创建操作只执行一次，提高了构建效率。\n\n在**文件名处理**方面，示例展示了复杂的文件名转换技巧。通过巧妙运用 Make 的模式替换功能，实现了从源文件到目标文件的路径和扩展名转换。例如，将 `src/main.c` 转换为 `obj/main.o`，这种转换不仅处理了文件扩展名的变化，还同时处理了目录路径的变化。这种灵活的文件名处理机制，使得 Makefile 能够适应更复杂的项目结构和构建需求，同时保持了规则的简洁性和可维护性。\n\n---\n\n## 基本规则\n```makefile\ntarget ... : prerequisites ...\n    recipe\n    ...\n    ...\n```\n`target`: 目标文件 | 可执行文件 | 标签;\n`prerequisites`: 依赖文件 | `target`;\n`recipe`: 对应`target`所需的命令(以`Tap`缩进开头).\n\n<br>\n\n执行`recipe`命令的条件:\n- `prerequisites`中存在文件的日期早于`target`的日期;\n- `target`的文件不存在.\n\n## 使用变量\n```makefile\n# 定义变量: 类似于C的宏定义\nobjects = main.o display.o\n\n# 使用变量\nedit: $(objects)\n    cc -o edit $(objects)\n```\n1. 必须使用`Tab`缩进;\n2. 采取`$(variable)`的形式引用变量, 将会展开为变量的值;\n3. `cc -o edit` 声明采用C语言编译器同时指定输出文件名为`edit`.\n\n## Make的自动推导\n### 自动推导规则\n1. **文件关联**：\n   - 当make看到`.o`文件时，会自动将对应的`.c`文件加入依赖关系\n   - 例如：发现`whatever.o`时，会自动关联`whatever.c`作为依赖文件\n\n2. **命令推导**：\n   - 自动推导编译命令，如`cc -c whatever.c`\n   - 无需在每个`.o`文件后都手动写编译命令\n\n### 示例结构\n\n- **依赖关系**：\n```makefile\n# 自动推导之前\nmain.o : main.c defs.h\n    cc -c main.c\n\n# 自动推导下的简化书写\nmain.o : defs.h\n```\n\n- **清理目标**：\n```makefile\n.PHONY : clean\nclean :\n    rm edit $(objects)\n```\n\n- `.PHONY`表示`clean`是伪目标文件;\n- 这种自动推导方式大大简化了Makefile的编写;\n- `clean`总是放在文件的末尾.\n\n\n\n`make`命令在默认情况下会在当前目录下**依次**寻找文件名为`GNUmakefile`,`makefile`,`Makefile`的文件.\n- 推荐使用`Makefile`作为文件名;\n- 也可以使用`-f`或者`-file`参数来指定特定的`Makefile`文件.\n```shell\nmake -f Make.Linux\n```\n\n\n\n\n## include命令\n```makefile\n# 使用include命令可以将其他Makefile包含进来\ninclude <file-name>\n```\n- `include`命令前可以存在空字符, 但是不能为`Tab`缩进;\n- `include`与文件之间可以存在多个空格.\n\n\n### 直接指定文件\n```makefile\n# 最基本的include用法是直接指定文件名\ninclude config.mk\ninclude ./build/rules.mk\n\n# 同时包含多个文件\ninclude config.mk rules.mk tests.mk\n```\n\n### 使用通配符 *\n```makefile\n# * 匹配任意字符串\ninclude *.mk              # 包含当前目录下所有.mk文件\ninclude src/*.mk         # 包含src目录下的所有.mk文件\ninclude **/build/*.mk    # 包含任意子目录中build目录下的所有.mk文件\n```\n\n我们同样可以在变量中使用通配符 `*`:\n```makefile\n# 使用时展开\nobjects = *.o\n\n# 定义时展开(除非重新赋值, 否则保持定义时的展开状态)\nobjects := $(wildcard *.o)\n```\n\ne.g:\n```makefile\n$(patsubst %.c,%.o,$(wildcard *.c))\n```\n- `patsubst`是一个函数, 用于模式替换;\n- 语法为`patsubst <pattern>,<replacement>,<text>`;\n- 此处表示利用通配符, 将所有的`.c`文件名称替换为`.o`文件.\n\n\n### 使用单字符通配符\n```makefile\n# ? 匹配单个字符\ninclude test?.mk         # 匹配test1.mk, testA.mk等\ninclude rule_?.mk        # 匹配rule_1.mk, rule_2.mk等\ninclude config???.mk     # 匹配config后带三个字符的.mk文件\n```\n\n### 使用目录路径\n```makefile\n# 可以指定不同的目录路径\ninclude ./configs/*.mk    # 当前目录下的configs子目录\ninclude ../shared/*.mk    # 上级目录的shared子目录\ninclude /usr/local/include/make/*.mk  # 绝对路径\n```\n\n### 使用字符集[]\n```makefile\n# [] 用于匹配字符集中的任意一个字符\ninclude make[123].mk     # 匹配make1.mk, make2.mk, make3.mk\ninclude test[a-z].mk     # 匹配testa.mk到testz.mk\ninclude config[0-9].mk   # 匹配config0.mk到config9.mk\n```\n\n### 错误处理\n```makefile\n# 默认情况下，如果include的文件不存在，make会报错\n\n# 使用-include或sinclude可以忽略文件不存在的错误\n-include optional.mk     # 如果文件不存在，继续执行不报错\nsinclude optional.mk     # 与-include完全相同\n\n# 多个可选文件\n-include config/*.mk     # 如果config目录下有任何.mk文件不存在，继续执行\n```\n\n### 组合使用示例\n```makefile\n# 可以组合使用多种模式\ninclude config.mk \\\n        rules/*.mk \\\n        test[0-9].mk \\\n        ./build/**/*.mk\n\n# 使用变量\nINCLUDE_DIR = ./includes\ninclude $(INCLUDE_DIR)/*.mk\n\n# 条件包含\nifdef CUSTOM_RULES\n    include $(CUSTOM_RULES)\nendif\n```\n\n## make的工作方式\n1. 读取所有的`Makefile`;\n2. 读取`include`涉及的`Makefile`文件;\n3. 初始化文件当中的**变量**;\n4. 推导**隐式规则**并分析所有规则;\n5. 为目标文件创建依赖关系链;\n6. 根据依赖关系, 决定需要重新生成的文件;\n7. 执行生成命令.\n\n\n## 文件搜寻\n### VPATH\n默认情况下, `make`会在当前目录和所有子目录下寻找依赖文件和目标文件. \n为了能够在较大工程中扩大`make`的搜索范围, 我们可以通过特殊变量`VPATH`来指定搜索路径.\n\n\n```makefile\nVPATH = src:../headers\n```\n1. 不同的目录之间由`:`分隔, 上述定义指定了额外的`src`以及`../headers`目录;\n2. 当前目录的优先级最高, 在当前目录下无法找到相关文件时将会从指定的目录中**从左到右**继续寻找.\n\n### vpath\n上述的`VPATH`指定了全局文件的搜索路径, 而`vpath`允许为**不同类型**的文件指定不同的搜索路径.\n\n**语法**\n```makefile\n# 1. 为指定模式的文件设置搜索路径\nvpath pattern directory1:directory2\n\n# 2. 清除指定模式的搜索路径\nvpath pattern\n\n# 3. 清除所有已设置的 vpath\nvpath\n```\n\n**特点**\n- 可以为不同类型的文件指定不同的搜索路径;\n- 支持使用 `%` 通配符匹配文件名;\n- 可以有多条 vpath 指令, 且针对相同模式的命令将会起到**附加**而非覆盖的作用.\n\n\n**e.g.**\n```makefile\n# 定义编译器\nCC = gcc\n\nvpath %.h include\nvpath %.c src\nvpath %.o build\nvpath %.a lib\n\nprogram: main.o utils.o\n    $(CC) -o program main.o utils.o -L. -lmylib\n\nmain.o: main.c project.h\n    $(CC) -c main.c\n\nutils.o: utils.c utils.h\n    $(CC) -c utils.c\n```\n\n---\n\n`vpath`的指令必须都写在`Makefile`当中, 在`Make`解析`Makefile`文件时被处理, 例如:\n```makefile\n# 如果需要清理 .o 文件的搜索路径并重新设置\nclean-paths:\n\t# 清除 .o 文件的搜索路径\n\tvpath %.o\n\t# 设置新的搜索路径\n\tvpath %.o new/build\n\n# 如果需要完全重置所有搜索路径\nreset-paths:\n\t# 清除所有 vpath 设置\n\tvpath\n\t# 重新设置所需的搜索路径\n\tvpath %.h include\n\tvpath %.c src\n\tvpath %.o build\n```\n在终端中对应的指令:\n```shell\n$ make              # 使用默认搜索路径编译\n$ make clean-paths  # 执行搜索路径清理和重设\n$ make reset-paths  # 重置所有搜索路径\n```\n\n---\n\n**优先级**: 当前目录 > `vpath` > `VPATH`. \n\n\n","source":"_posts/其他/makefile.md","raw":"---\ntitle: makefile\ndate: 2025-02-12 18:15:25\ntags:\ncategories:\nexcerpt: 一起来学习makefile吧！\n---\n# 编译\n# 基本概念\n## 默认目标\n- `Makefile`当中的第一个目标会成为**默认目标**;\n- 不指定参数的`make`命令会执行默认目标;\n- 通常使用`all`的伪目标作为默认目标.\n\n## 伪目标\n当我们需要执行清理工作、运行测试等操作时, 我们不希望与实际文件名发生冲突, 此时就需要用到 **伪目标**.\n\n**语法**\n```makefile\n.PHONY: 目标名\n目标名:\n    命令\n```\n\n**使用示例**\n```makefile\n# 情景：需要清理编译产生的 .o 文件和可执行文件\n.PHONY: clean\nclean:\n    rm -f *.o program\n\n# 情景：需要运行测试\n.PHONY: test\ntest:\n    ./run_tests.sh\n\n# 使用方法：\n# make clean  # 清理文件\n# make test   # 运行测试\n```\n> 其中`-f`表示强制删除, 其他的参数如`-r`表示递归删除目录, `-rf`表示强制递归删除目录.\n\n### 多重构建\n我们还可以利用伪目标使得默认目标具有多个对象:\n```makefile \n.PHONY: all debug release clean\n\n# 默认目标包含常用的构建类型\nall: debug release\n\n# 调试版本\ndebug: main.c\n    @echo \"构建调试版本...\"\n    gcc -g main.c -o debug-program\n\n# 发布版本\nrelease: main.c\n    @echo \"构建发布版本...\"\n    gcc -O2 main.c -o release-program\n\nclean:\n    rm -f debug-program release-program\n\n# 使用：\n# make          # 构建调试版和发布版\n# make debug    # 只构建调试版\n# make release  # 只构建发布版\n# make clean    # 清理\n```\n\n## 多目标\ne.g: \n```makefile\nbigoutput littleoutput : text.g\n    generate text.g -$(subst output,,$@) > $@\n```\n\n### 解析\n\n```makefile\nbigoutput littleoutput : text.g\n    generate text.g -$(subst output,,$@) > $@\n```\n\n1. `bigoutput littleoutput` - 两个目标文件\n2. `text.g` - 依赖文件\n3. `$(subst output,,$@)` -变量展开：\n   - `$@` 是自动变量，表示当前目标名\n   - `subst` 是替换函数，格式为 `$(subst from,to,text)`\n   - 此处将目标名中的 \"output\" 替换为空\n\n当规则执行时：\n- 对于 `bigoutput` 目标：\n  - `$@` 展开为 `bigoutput`\n  - `$(subst output,,$@)` 结果为 `big`\n  - 最终命令变为：`generate text.g -big > bigoutput`\n\n- 对于 `littleoutput` 目标：\n  - `$@` 展开为 `littleoutput`\n  - `$(subst output,,$@)` 结果为 `little`\n  - 最终命令变为：`generate text.g -little > littleoutput`\n\n<br>\n\n因此, 上述的多目标规则**等价**于:\n```makefile\nbigoutput : text.g\n    generate text.g -big > bigoutput\nlittleoutput : text.g\n    generate text.g -little > littleoutput\n```\n\n### 规则语法\n\n多目标规则（Multiple Targets）是 Makefile 中的一个重要特性：\n\n1. **基本语法**：\n   ```makefile\n   target1 target2 : prerequisites\n       commands\n   ```\n\n2. **特点**：\n   - 多个目标共享相同的依赖关系\n   - 命令会对每个目标分别执行一次\n   - 可以使用 `$@` 引用当前正在构建的目标\n\n3. **使用场景**：\n   - 生成相似但略有不同的文件\n   - 多个目标需要类似的构建过程\n   - 减少重复代码\n\n4. **示例**：\n   ```makefile\n   # 生成不同大小的图片\n   big.jpg small.jpg : original.jpg\n       convert original.jpg -resize $* > $@\n\n   # 生成不同格式的文档\n   manual.pdf manual.html : manual.txt\n       pandoc manual.txt -o $@\n   ```\n\n5. **优势**：\n   - 代码更简洁\n   - 易于维护\n   - 避免重复规则\n   - 更好的规则组织\n\n6. **注意事项**：\n   - 命令对每个目标都会执行一次\n   - 需要合理使用自动变量（如 `$@`）来区分不同目标\n   - 确保命令对所有目标都适用\n\n## 静态模式\n好的，让我从这几个角度来介绍 Makefile 中的静态模式规则。\n\n### 1. 引入背景\n\n在 Makefile 中，当我们需要将多个源文件编译成对应的目标文件时，如果按照普通的规则写法，往往需要为每个文件都写一条规则：\n\n```makefile\nfoo.o : foo.c\n    $(CC) -c $(CFLAGS) foo.c -o foo.o\n\nbar.o : bar.c\n    $(CC) -c $(CFLAGS) bar.c -o bar.o\n\ntest.o : test.c\n    $(CC) -c $(CFLAGS) test.c -o test.o\n```\n\n这种写法存在明显问题：\n- 规则重复，维护困难\n- 当新增源文件时需要手动添加规则\n- 代码冗长，不够优雅\n\n虽然可以使用多目标规则，但在处理源文件和目标文件的对应关系时仍然不够灵活。这就是引入静态模式规则的原因。\n\n### 2. 基本语法\n\n静态模式规则的基本语法如下：\n```makefile\ntargets ...: target-pattern: prereq-pattern\n    commands\n```\n\n其中：\n- `targets`: 要生成的目标文件列表\n- `target-pattern`: 目标的模式，通常包含 `%` 通配符\n- `prereq-pattern`: 依赖的模式，通常也包含 `%` 通配符\n- `commands`: 构建命令\n\n`%` 在 target-pattern 中匹配的内容，会在 prereq-pattern 中作为相同的替换内容。\n\n### 3. 综合示例\n\n让我们通过几个逐渐复杂的例子来说明静态模式的使用：\n\n#### 基础示例：编译 C 文件\n```makefile\nobjects = foo.o bar.o test.o\n\n$(objects): %.o: %.c\n    $(CC) -c $(CFLAGS) $< -o $@\n```\n\n#### 复杂示例：多种源文件处理\n```makefile\n# 定义源文件和目标文件\ncpp_sources := $(wildcard *.cpp)\nc_sources := $(wildcard *.c)\ncpp_objects := $(cpp_sources:.cpp=.o)\nc_objects := $(c_sources:.c=.o)\nall_objects := $(cpp_objects) $(c_objects)\n\n# C++ 源文件的编译规则\n$(cpp_objects): %.o: %.cpp\n    $(CXX) -c $(CXXFLAGS) $< -o $@\n\n# C 源文件的编译规则\n$(c_objects): %.o: %.c\n    $(CC) -c $(CFLAGS) $< -o $@\n\n# 生成可执行文件\nprogram: $(all_objects)\n    $(CXX) $^ -o $@\n```\n- `$(cpp_sources:.cpp=.o)`是一种**模式替换**, 会将`cpp_sources`中的所有`.cpp`文件替换为`.o`文件;\n  - 即`$(varname:pattern1=pattern2)` 会将`varname`中的所有`pattern1`替换为`pattern2`;\n\n#### 更复杂的示例：多目录处理\n```makefile\n# 目录结构\nSRCDIR = src\nOBJDIR = obj\n\n# 源文件和目标文件\nSOURCES = $(wildcard $(SRCDIR)/*.c)\nOBJECTS = $(SOURCES:$(SRCDIR)/%.c=$(OBJDIR)/%.o)\n\n# 确保目标目录存在\n$(OBJDIR):\n    mkdir -p $@\n\n# 静态模式规则\n$(OBJECTS): $(OBJDIR)/%.o: $(SRCDIR)/%.c | $(OBJDIR)\n    $(CC) -c $(CFLAGS) $< -o $@\n\n# 最终目标\nprogram: $(OBJECTS)\n    $(CC) $^ -o $@\n```\n> todo\n\n这个复杂示例展现了 Makefile 在处理现代项目时的多个高级特性。在**文件组织**方面，示例实现了跨目录的文件处理能力，通过将源文件和目标文件分别组织在不同的目录（如 `src` 和 `obj`）中，体现了项目结构的清晰性和模块化。Makefile 能够智能地在这些目录间进行文件操作，保持项目的整洁有序。\n\n在**目录管理**方面，示例引入了自动创建目标目录的机制。通过使用条件依赖（用 `|` 分隔符标识），确保在编译过程开始前目标目录已经存在。这种方式优雅地解决了目录创建的时序问题，避免了因目录不存在而导致的编译失败。特别是当多个目标文件同时需要某个目录时，条件依赖能够确保目录创建操作只执行一次，提高了构建效率。\n\n在**文件名处理**方面，示例展示了复杂的文件名转换技巧。通过巧妙运用 Make 的模式替换功能，实现了从源文件到目标文件的路径和扩展名转换。例如，将 `src/main.c` 转换为 `obj/main.o`，这种转换不仅处理了文件扩展名的变化，还同时处理了目录路径的变化。这种灵活的文件名处理机制，使得 Makefile 能够适应更复杂的项目结构和构建需求，同时保持了规则的简洁性和可维护性。\n\n---\n\n## 基本规则\n```makefile\ntarget ... : prerequisites ...\n    recipe\n    ...\n    ...\n```\n`target`: 目标文件 | 可执行文件 | 标签;\n`prerequisites`: 依赖文件 | `target`;\n`recipe`: 对应`target`所需的命令(以`Tap`缩进开头).\n\n<br>\n\n执行`recipe`命令的条件:\n- `prerequisites`中存在文件的日期早于`target`的日期;\n- `target`的文件不存在.\n\n## 使用变量\n```makefile\n# 定义变量: 类似于C的宏定义\nobjects = main.o display.o\n\n# 使用变量\nedit: $(objects)\n    cc -o edit $(objects)\n```\n1. 必须使用`Tab`缩进;\n2. 采取`$(variable)`的形式引用变量, 将会展开为变量的值;\n3. `cc -o edit` 声明采用C语言编译器同时指定输出文件名为`edit`.\n\n## Make的自动推导\n### 自动推导规则\n1. **文件关联**：\n   - 当make看到`.o`文件时，会自动将对应的`.c`文件加入依赖关系\n   - 例如：发现`whatever.o`时，会自动关联`whatever.c`作为依赖文件\n\n2. **命令推导**：\n   - 自动推导编译命令，如`cc -c whatever.c`\n   - 无需在每个`.o`文件后都手动写编译命令\n\n### 示例结构\n\n- **依赖关系**：\n```makefile\n# 自动推导之前\nmain.o : main.c defs.h\n    cc -c main.c\n\n# 自动推导下的简化书写\nmain.o : defs.h\n```\n\n- **清理目标**：\n```makefile\n.PHONY : clean\nclean :\n    rm edit $(objects)\n```\n\n- `.PHONY`表示`clean`是伪目标文件;\n- 这种自动推导方式大大简化了Makefile的编写;\n- `clean`总是放在文件的末尾.\n\n\n\n`make`命令在默认情况下会在当前目录下**依次**寻找文件名为`GNUmakefile`,`makefile`,`Makefile`的文件.\n- 推荐使用`Makefile`作为文件名;\n- 也可以使用`-f`或者`-file`参数来指定特定的`Makefile`文件.\n```shell\nmake -f Make.Linux\n```\n\n\n\n\n## include命令\n```makefile\n# 使用include命令可以将其他Makefile包含进来\ninclude <file-name>\n```\n- `include`命令前可以存在空字符, 但是不能为`Tab`缩进;\n- `include`与文件之间可以存在多个空格.\n\n\n### 直接指定文件\n```makefile\n# 最基本的include用法是直接指定文件名\ninclude config.mk\ninclude ./build/rules.mk\n\n# 同时包含多个文件\ninclude config.mk rules.mk tests.mk\n```\n\n### 使用通配符 *\n```makefile\n# * 匹配任意字符串\ninclude *.mk              # 包含当前目录下所有.mk文件\ninclude src/*.mk         # 包含src目录下的所有.mk文件\ninclude **/build/*.mk    # 包含任意子目录中build目录下的所有.mk文件\n```\n\n我们同样可以在变量中使用通配符 `*`:\n```makefile\n# 使用时展开\nobjects = *.o\n\n# 定义时展开(除非重新赋值, 否则保持定义时的展开状态)\nobjects := $(wildcard *.o)\n```\n\ne.g:\n```makefile\n$(patsubst %.c,%.o,$(wildcard *.c))\n```\n- `patsubst`是一个函数, 用于模式替换;\n- 语法为`patsubst <pattern>,<replacement>,<text>`;\n- 此处表示利用通配符, 将所有的`.c`文件名称替换为`.o`文件.\n\n\n### 使用单字符通配符\n```makefile\n# ? 匹配单个字符\ninclude test?.mk         # 匹配test1.mk, testA.mk等\ninclude rule_?.mk        # 匹配rule_1.mk, rule_2.mk等\ninclude config???.mk     # 匹配config后带三个字符的.mk文件\n```\n\n### 使用目录路径\n```makefile\n# 可以指定不同的目录路径\ninclude ./configs/*.mk    # 当前目录下的configs子目录\ninclude ../shared/*.mk    # 上级目录的shared子目录\ninclude /usr/local/include/make/*.mk  # 绝对路径\n```\n\n### 使用字符集[]\n```makefile\n# [] 用于匹配字符集中的任意一个字符\ninclude make[123].mk     # 匹配make1.mk, make2.mk, make3.mk\ninclude test[a-z].mk     # 匹配testa.mk到testz.mk\ninclude config[0-9].mk   # 匹配config0.mk到config9.mk\n```\n\n### 错误处理\n```makefile\n# 默认情况下，如果include的文件不存在，make会报错\n\n# 使用-include或sinclude可以忽略文件不存在的错误\n-include optional.mk     # 如果文件不存在，继续执行不报错\nsinclude optional.mk     # 与-include完全相同\n\n# 多个可选文件\n-include config/*.mk     # 如果config目录下有任何.mk文件不存在，继续执行\n```\n\n### 组合使用示例\n```makefile\n# 可以组合使用多种模式\ninclude config.mk \\\n        rules/*.mk \\\n        test[0-9].mk \\\n        ./build/**/*.mk\n\n# 使用变量\nINCLUDE_DIR = ./includes\ninclude $(INCLUDE_DIR)/*.mk\n\n# 条件包含\nifdef CUSTOM_RULES\n    include $(CUSTOM_RULES)\nendif\n```\n\n## make的工作方式\n1. 读取所有的`Makefile`;\n2. 读取`include`涉及的`Makefile`文件;\n3. 初始化文件当中的**变量**;\n4. 推导**隐式规则**并分析所有规则;\n5. 为目标文件创建依赖关系链;\n6. 根据依赖关系, 决定需要重新生成的文件;\n7. 执行生成命令.\n\n\n## 文件搜寻\n### VPATH\n默认情况下, `make`会在当前目录和所有子目录下寻找依赖文件和目标文件. \n为了能够在较大工程中扩大`make`的搜索范围, 我们可以通过特殊变量`VPATH`来指定搜索路径.\n\n\n```makefile\nVPATH = src:../headers\n```\n1. 不同的目录之间由`:`分隔, 上述定义指定了额外的`src`以及`../headers`目录;\n2. 当前目录的优先级最高, 在当前目录下无法找到相关文件时将会从指定的目录中**从左到右**继续寻找.\n\n### vpath\n上述的`VPATH`指定了全局文件的搜索路径, 而`vpath`允许为**不同类型**的文件指定不同的搜索路径.\n\n**语法**\n```makefile\n# 1. 为指定模式的文件设置搜索路径\nvpath pattern directory1:directory2\n\n# 2. 清除指定模式的搜索路径\nvpath pattern\n\n# 3. 清除所有已设置的 vpath\nvpath\n```\n\n**特点**\n- 可以为不同类型的文件指定不同的搜索路径;\n- 支持使用 `%` 通配符匹配文件名;\n- 可以有多条 vpath 指令, 且针对相同模式的命令将会起到**附加**而非覆盖的作用.\n\n\n**e.g.**\n```makefile\n# 定义编译器\nCC = gcc\n\nvpath %.h include\nvpath %.c src\nvpath %.o build\nvpath %.a lib\n\nprogram: main.o utils.o\n    $(CC) -o program main.o utils.o -L. -lmylib\n\nmain.o: main.c project.h\n    $(CC) -c main.c\n\nutils.o: utils.c utils.h\n    $(CC) -c utils.c\n```\n\n---\n\n`vpath`的指令必须都写在`Makefile`当中, 在`Make`解析`Makefile`文件时被处理, 例如:\n```makefile\n# 如果需要清理 .o 文件的搜索路径并重新设置\nclean-paths:\n\t# 清除 .o 文件的搜索路径\n\tvpath %.o\n\t# 设置新的搜索路径\n\tvpath %.o new/build\n\n# 如果需要完全重置所有搜索路径\nreset-paths:\n\t# 清除所有 vpath 设置\n\tvpath\n\t# 重新设置所需的搜索路径\n\tvpath %.h include\n\tvpath %.c src\n\tvpath %.o build\n```\n在终端中对应的指令:\n```shell\n$ make              # 使用默认搜索路径编译\n$ make clean-paths  # 执行搜索路径清理和重设\n$ make reset-paths  # 重置所有搜索路径\n```\n\n---\n\n**优先级**: 当前目录 > `vpath` > `VPATH`. \n\n\n","slug":"其他/makefile","published":1,"updated":"2025-05-09T09:31:08.713Z","comments":1,"layout":"post","photos":[],"_id":"cmcbm7pqb000ge2qg0wy20p41","content":"<h1 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h1><h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><h2 id=\"默认目标\"><a href=\"#默认目标\" class=\"headerlink\" title=\"默认目标\"></a>默认目标</h2><ul>\n<li><code>Makefile</code>当中的第一个目标会成为<strong>默认目标</strong>;</li>\n<li>不指定参数的<code>make</code>命令会执行默认目标;</li>\n<li>通常使用<code>all</code>的伪目标作为默认目标.</li>\n</ul>\n<h2 id=\"伪目标\"><a href=\"#伪目标\" class=\"headerlink\" title=\"伪目标\"></a>伪目标</h2><p>当我们需要执行清理工作、运行测试等操作时, 我们不希望与实际文件名发生冲突, 此时就需要用到 <strong>伪目标</strong>.</p>\n<p><strong>语法</strong></p>\n<div class=\"code-container\" data-rel=\"Makefile\"><figure class=\"iseeu highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>: 目标名</span></span><br><span class=\"line\"><span class=\"section\">目标名:</span></span><br><span class=\"line\">    命令</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>使用示例</strong></p>\n<div class=\"code-container\" data-rel=\"Makefile\"><figure class=\"iseeu highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 情景：需要清理编译产生的 .o 文件和可执行文件</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>: clean</span></span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">    rm -f *.o program</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 情景：需要运行测试</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>: test</span></span><br><span class=\"line\"><span class=\"section\">test:</span></span><br><span class=\"line\">    ./run_tests.sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用方法：</span></span><br><span class=\"line\"><span class=\"comment\"># make clean  # 清理文件</span></span><br><span class=\"line\"><span class=\"comment\"># make test   # 运行测试</span></span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p>其中<code>-f</code>表示强制删除, 其他的参数如<code>-r</code>表示递归删除目录, <code>-rf</code>表示强制递归删除目录.</p>\n</blockquote>\n<h3 id=\"多重构建\"><a href=\"#多重构建\" class=\"headerlink\" title=\"多重构建\"></a>多重构建</h3><p>我们还可以利用伪目标使得默认目标具有多个对象:</p>\n<div class=\"code-container\" data-rel=\"Makefile\"><figure class=\"iseeu highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>: all debug release clean</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 默认目标包含常用的构建类型</span></span><br><span class=\"line\"><span class=\"section\">all: debug release</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调试版本</span></span><br><span class=\"line\"><span class=\"section\">debug: main.c</span></span><br><span class=\"line\">    @echo <span class=\"string\">&quot;构建调试版本...&quot;</span></span><br><span class=\"line\">    gcc -g main.c -o debug-program</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发布版本</span></span><br><span class=\"line\"><span class=\"section\">release: main.c</span></span><br><span class=\"line\">    @echo <span class=\"string\">&quot;构建发布版本...&quot;</span></span><br><span class=\"line\">    gcc -O2 main.c -o release-program</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">    rm -f debug-program release-program</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用：</span></span><br><span class=\"line\"><span class=\"comment\"># make          # 构建调试版和发布版</span></span><br><span class=\"line\"><span class=\"comment\"># make debug    # 只构建调试版</span></span><br><span class=\"line\"><span class=\"comment\"># make release  # 只构建发布版</span></span><br><span class=\"line\"><span class=\"comment\"># make clean    # 清理</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"多目标\"><a href=\"#多目标\" class=\"headerlink\" title=\"多目标\"></a>多目标</h2><p>e.g: </p>\n<div class=\"code-container\" data-rel=\"Makefile\"><figure class=\"iseeu highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bigoutput littleoutput : text.g</span><br><span class=\"line\">    generate text.g -<span class=\"variable\">$(<span class=\"built_in\">subst</span> output,,<span class=\"variable\">$@</span>)</span> &gt; <span class=\"variable\">$@</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h3><div class=\"code-container\" data-rel=\"Makefile\"><figure class=\"iseeu highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bigoutput littleoutput : text.g</span><br><span class=\"line\">    generate text.g -<span class=\"variable\">$(<span class=\"built_in\">subst</span> output,,<span class=\"variable\">$@</span>)</span> &gt; <span class=\"variable\">$@</span></span><br></pre></td></tr></table></figure></div>\n\n<ol>\n<li><code>bigoutput littleoutput</code> - 两个目标文件</li>\n<li><code>text.g</code> - 依赖文件</li>\n<li><code>$(subst output,,$@)</code> -变量展开：<ul>\n<li><code>$@</code> 是自动变量，表示当前目标名</li>\n<li><code>subst</code> 是替换函数，格式为 <code>$(subst from,to,text)</code></li>\n<li>此处将目标名中的 “output” 替换为空</li>\n</ul>\n</li>\n</ol>\n<p>当规则执行时：</p>\n<ul>\n<li><p>对于 <code>bigoutput</code> 目标：</p>\n<ul>\n<li><code>$@</code> 展开为 <code>bigoutput</code></li>\n<li><code>$(subst output,,$@)</code> 结果为 <code>big</code></li>\n<li>最终命令变为：<code>generate text.g -big &gt; bigoutput</code></li>\n</ul>\n</li>\n<li><p>对于 <code>littleoutput</code> 目标：</p>\n<ul>\n<li><code>$@</code> 展开为 <code>littleoutput</code></li>\n<li><code>$(subst output,,$@)</code> 结果为 <code>little</code></li>\n<li>最终命令变为：<code>generate text.g -little &gt; littleoutput</code></li>\n</ul>\n</li>\n</ul>\n<br>\n\n<p>因此, 上述的多目标规则<strong>等价</strong>于:</p>\n<div class=\"code-container\" data-rel=\"Makefile\"><figure class=\"iseeu highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bigoutput : text.g</span><br><span class=\"line\">    generate text.g -big &gt; bigoutput</span><br><span class=\"line\">littleoutput : text.g</span><br><span class=\"line\">    generate text.g -little &gt; littleoutput</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"规则语法\"><a href=\"#规则语法\" class=\"headerlink\" title=\"规则语法\"></a>规则语法</h3><p>多目标规则（Multiple Targets）是 Makefile 中的一个重要特性：</p>\n<ol>\n<li><p><strong>基本语法</strong>：</p>\n<div class=\"code-container\" data-rel=\"Makefile\"><figure class=\"iseeu highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target1 target2 : prerequisites</span><br><span class=\"line\">    commands</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p><strong>特点</strong>：</p>\n<ul>\n<li>多个目标共享相同的依赖关系</li>\n<li>命令会对每个目标分别执行一次</li>\n<li>可以使用 <code>$@</code> 引用当前正在构建的目标</li>\n</ul>\n</li>\n<li><p><strong>使用场景</strong>：</p>\n<ul>\n<li>生成相似但略有不同的文件</li>\n<li>多个目标需要类似的构建过程</li>\n<li>减少重复代码</li>\n</ul>\n</li>\n<li><p><strong>示例</strong>：</p>\n<div class=\"code-container\" data-rel=\"Makefile\"><figure class=\"iseeu highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成不同大小的图片</span></span><br><span class=\"line\">big.jpg small.jpg : original.jpg</span><br><span class=\"line\">    convert original.jpg -resize <span class=\"variable\">$*</span> &gt; <span class=\"variable\">$@</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成不同格式的文档</span></span><br><span class=\"line\">manual.pdf manual.html : manual.txt</span><br><span class=\"line\">    pandoc manual.txt -o <span class=\"variable\">$@</span></span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p><strong>优势</strong>：</p>\n<ul>\n<li>代码更简洁</li>\n<li>易于维护</li>\n<li>避免重复规则</li>\n<li>更好的规则组织</li>\n</ul>\n</li>\n<li><p><strong>注意事项</strong>：</p>\n<ul>\n<li>命令对每个目标都会执行一次</li>\n<li>需要合理使用自动变量（如 <code>$@</code>）来区分不同目标</li>\n<li>确保命令对所有目标都适用</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"静态模式\"><a href=\"#静态模式\" class=\"headerlink\" title=\"静态模式\"></a>静态模式</h2><p>好的，让我从这几个角度来介绍 Makefile 中的静态模式规则。</p>\n<h3 id=\"1-引入背景\"><a href=\"#1-引入背景\" class=\"headerlink\" title=\"1. 引入背景\"></a>1. 引入背景</h3><p>在 Makefile 中，当我们需要将多个源文件编译成对应的目标文件时，如果按照普通的规则写法，往往需要为每个文件都写一条规则：</p>\n<div class=\"code-container\" data-rel=\"Makefile\"><figure class=\"iseeu highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo.o : foo.c</span><br><span class=\"line\">    <span class=\"variable\">$(CC)</span> -c <span class=\"variable\">$(CFLAGS)</span> foo.c -o foo.o</span><br><span class=\"line\"></span><br><span class=\"line\">bar.o : bar.c</span><br><span class=\"line\">    <span class=\"variable\">$(CC)</span> -c <span class=\"variable\">$(CFLAGS)</span> bar.c -o bar.o</span><br><span class=\"line\"></span><br><span class=\"line\">test.o : test.c</span><br><span class=\"line\">    <span class=\"variable\">$(CC)</span> -c <span class=\"variable\">$(CFLAGS)</span> test.c -o test.o</span><br></pre></td></tr></table></figure></div>\n\n<p>这种写法存在明显问题：</p>\n<ul>\n<li>规则重复，维护困难</li>\n<li>当新增源文件时需要手动添加规则</li>\n<li>代码冗长，不够优雅</li>\n</ul>\n<p>虽然可以使用多目标规则，但在处理源文件和目标文件的对应关系时仍然不够灵活。这就是引入静态模式规则的原因。</p>\n<h3 id=\"2-基本语法\"><a href=\"#2-基本语法\" class=\"headerlink\" title=\"2. 基本语法\"></a>2. 基本语法</h3><p>静态模式规则的基本语法如下：</p>\n<div class=\"code-container\" data-rel=\"Makefile\"><figure class=\"iseeu highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">targets ...: target-pattern: prereq-pattern</span><br><span class=\"line\">    commands</span><br></pre></td></tr></table></figure></div>\n\n<p>其中：</p>\n<ul>\n<li><code>targets</code>: 要生成的目标文件列表</li>\n<li><code>target-pattern</code>: 目标的模式，通常包含 <code>%</code> 通配符</li>\n<li><code>prereq-pattern</code>: 依赖的模式，通常也包含 <code>%</code> 通配符</li>\n<li><code>commands</code>: 构建命令</li>\n</ul>\n<p><code>%</code> 在 target-pattern 中匹配的内容，会在 prereq-pattern 中作为相同的替换内容。</p>\n<h3 id=\"3-综合示例\"><a href=\"#3-综合示例\" class=\"headerlink\" title=\"3. 综合示例\"></a>3. 综合示例</h3><p>让我们通过几个逐渐复杂的例子来说明静态模式的使用：</p>\n<h4 id=\"基础示例：编译-C-文件\"><a href=\"#基础示例：编译-C-文件\" class=\"headerlink\" title=\"基础示例：编译 C 文件\"></a>基础示例：编译 C 文件</h4><div class=\"code-container\" data-rel=\"Makefile\"><figure class=\"iseeu highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objects = foo.o bar.o test.o</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$(objects)</span>: %.o: %.c</span><br><span class=\"line\">    <span class=\"variable\">$(CC)</span> -c <span class=\"variable\">$(CFLAGS)</span> <span class=\"variable\">$&lt;</span> -o <span class=\"variable\">$@</span></span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"复杂示例：多种源文件处理\"><a href=\"#复杂示例：多种源文件处理\" class=\"headerlink\" title=\"复杂示例：多种源文件处理\"></a>复杂示例：多种源文件处理</h4><div class=\"code-container\" data-rel=\"Makefile\"><figure class=\"iseeu highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义源文件和目标文件</span></span><br><span class=\"line\">cpp_sources := <span class=\"variable\">$(<span class=\"built_in\">wildcard</span> *.cpp)</span></span><br><span class=\"line\">c_sources := <span class=\"variable\">$(<span class=\"built_in\">wildcard</span> *.c)</span></span><br><span class=\"line\">cpp_objects := $(cpp_sources:.cpp=.o)</span><br><span class=\"line\">c_objects := $(c_sources:.c=.o)</span><br><span class=\"line\">all_objects := <span class=\"variable\">$(cpp_objects)</span> <span class=\"variable\">$(c_objects)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># C++ 源文件的编译规则</span></span><br><span class=\"line\"><span class=\"variable\">$(cpp_objects)</span>: %.o: %.cpp</span><br><span class=\"line\">    <span class=\"variable\">$(CXX)</span> -c <span class=\"variable\">$(CXXFLAGS)</span> <span class=\"variable\">$&lt;</span> -o <span class=\"variable\">$@</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># C 源文件的编译规则</span></span><br><span class=\"line\"><span class=\"variable\">$(c_objects)</span>: %.o: %.c</span><br><span class=\"line\">    <span class=\"variable\">$(CC)</span> -c <span class=\"variable\">$(CFLAGS)</span> <span class=\"variable\">$&lt;</span> -o <span class=\"variable\">$@</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成可执行文件</span></span><br><span class=\"line\"><span class=\"section\">program: <span class=\"variable\">$(all_objects)</span></span></span><br><span class=\"line\">    <span class=\"variable\">$(CXX)</span> <span class=\"variable\">$^</span> -o <span class=\"variable\">$@</span></span><br></pre></td></tr></table></figure></div>\n<ul>\n<li><code>$(cpp_sources:.cpp=.o)</code>是一种<strong>模式替换</strong>, 会将<code>cpp_sources</code>中的所有<code>.cpp</code>文件替换为<code>.o</code>文件;<ul>\n<li>即<code>$(varname:pattern1=pattern2)</code> 会将<code>varname</code>中的所有<code>pattern1</code>替换为<code>pattern2</code>;</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"更复杂的示例：多目录处理\"><a href=\"#更复杂的示例：多目录处理\" class=\"headerlink\" title=\"更复杂的示例：多目录处理\"></a>更复杂的示例：多目录处理</h4><div class=\"code-container\" data-rel=\"Makefile\"><figure class=\"iseeu highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 目录结构</span></span><br><span class=\"line\">SRCDIR = src</span><br><span class=\"line\">OBJDIR = obj</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 源文件和目标文件</span></span><br><span class=\"line\">SOURCES = <span class=\"variable\">$(<span class=\"built_in\">wildcard</span> <span class=\"variable\">$(SRCDIR)</span>/*.c)</span></span><br><span class=\"line\">OBJECTS = $(SOURCES:<span class=\"variable\">$(SRCDIR)</span>/%.c=<span class=\"variable\">$(OBJDIR)</span>/%.o)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 确保目标目录存在</span></span><br><span class=\"line\"><span class=\"variable\">$(OBJDIR)</span>:</span><br><span class=\"line\">    mkdir -p <span class=\"variable\">$@</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 静态模式规则</span></span><br><span class=\"line\"><span class=\"variable\">$(OBJECTS)</span>: <span class=\"variable\">$(OBJDIR)</span>/%.o: <span class=\"variable\">$(SRCDIR)</span>/%.c | <span class=\"variable\">$(OBJDIR)</span></span><br><span class=\"line\">    <span class=\"variable\">$(CC)</span> -c <span class=\"variable\">$(CFLAGS)</span> <span class=\"variable\">$&lt;</span> -o <span class=\"variable\">$@</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 最终目标</span></span><br><span class=\"line\"><span class=\"section\">program: <span class=\"variable\">$(OBJECTS)</span></span></span><br><span class=\"line\">    <span class=\"variable\">$(CC)</span> <span class=\"variable\">$^</span> -o <span class=\"variable\">$@</span></span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p>todo</p>\n</blockquote>\n<p>这个复杂示例展现了 Makefile 在处理现代项目时的多个高级特性。在<strong>文件组织</strong>方面，示例实现了跨目录的文件处理能力，通过将源文件和目标文件分别组织在不同的目录（如 <code>src</code> 和 <code>obj</code>）中，体现了项目结构的清晰性和模块化。Makefile 能够智能地在这些目录间进行文件操作，保持项目的整洁有序。</p>\n<p>在<strong>目录管理</strong>方面，示例引入了自动创建目标目录的机制。通过使用条件依赖（用 <code>|</code> 分隔符标识），确保在编译过程开始前目标目录已经存在。这种方式优雅地解决了目录创建的时序问题，避免了因目录不存在而导致的编译失败。特别是当多个目标文件同时需要某个目录时，条件依赖能够确保目录创建操作只执行一次，提高了构建效率。</p>\n<p>在<strong>文件名处理</strong>方面，示例展示了复杂的文件名转换技巧。通过巧妙运用 Make 的模式替换功能，实现了从源文件到目标文件的路径和扩展名转换。例如，将 <code>src/main.c</code> 转换为 <code>obj/main.o</code>，这种转换不仅处理了文件扩展名的变化，还同时处理了目录路径的变化。这种灵活的文件名处理机制，使得 Makefile 能够适应更复杂的项目结构和构建需求，同时保持了规则的简洁性和可维护性。</p>\n<hr>\n<h2 id=\"基本规则\"><a href=\"#基本规则\" class=\"headerlink\" title=\"基本规则\"></a>基本规则</h2><div class=\"code-container\" data-rel=\"Makefile\"><figure class=\"iseeu highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target ... : prerequisites ...</span><br><span class=\"line\">    recipe</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure></div>\n<p><code>target</code>: 目标文件 | 可执行文件 | 标签;<br><code>prerequisites</code>: 依赖文件 | <code>target</code>;<br><code>recipe</code>: 对应<code>target</code>所需的命令(以<code>Tap</code>缩进开头).</p>\n<br>\n\n<p>执行<code>recipe</code>命令的条件:</p>\n<ul>\n<li><code>prerequisites</code>中存在文件的日期早于<code>target</code>的日期;</li>\n<li><code>target</code>的文件不存在.</li>\n</ul>\n<h2 id=\"使用变量\"><a href=\"#使用变量\" class=\"headerlink\" title=\"使用变量\"></a>使用变量</h2><div class=\"code-container\" data-rel=\"Makefile\"><figure class=\"iseeu highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义变量: 类似于C的宏定义</span></span><br><span class=\"line\">objects = main.o display.o</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用变量</span></span><br><span class=\"line\"><span class=\"section\">edit: <span class=\"variable\">$(objects)</span></span></span><br><span class=\"line\">    cc -o edit <span class=\"variable\">$(objects)</span></span><br></pre></td></tr></table></figure></div>\n<ol>\n<li>必须使用<code>Tab</code>缩进;</li>\n<li>采取<code>$(variable)</code>的形式引用变量, 将会展开为变量的值;</li>\n<li><code>cc -o edit</code> 声明采用C语言编译器同时指定输出文件名为<code>edit</code>.</li>\n</ol>\n<h2 id=\"Make的自动推导\"><a href=\"#Make的自动推导\" class=\"headerlink\" title=\"Make的自动推导\"></a>Make的自动推导</h2><h3 id=\"自动推导规则\"><a href=\"#自动推导规则\" class=\"headerlink\" title=\"自动推导规则\"></a>自动推导规则</h3><ol>\n<li><p><strong>文件关联</strong>：</p>\n<ul>\n<li>当make看到<code>.o</code>文件时，会自动将对应的<code>.c</code>文件加入依赖关系</li>\n<li>例如：发现<code>whatever.o</code>时，会自动关联<code>whatever.c</code>作为依赖文件</li>\n</ul>\n</li>\n<li><p><strong>命令推导</strong>：</p>\n<ul>\n<li>自动推导编译命令，如<code>cc -c whatever.c</code></li>\n<li>无需在每个<code>.o</code>文件后都手动写编译命令</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"示例结构\"><a href=\"#示例结构\" class=\"headerlink\" title=\"示例结构\"></a>示例结构</h3><ul>\n<li><strong>依赖关系</strong>：</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Makefile\"><figure class=\"iseeu highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 自动推导之前</span></span><br><span class=\"line\">main.o : main.c defs.h</span><br><span class=\"line\">    cc -c main.c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 自动推导下的简化书写</span></span><br><span class=\"line\">main.o : defs.h</span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li><strong>清理目标</strong>：</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Makefile\"><figure class=\"iseeu highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.PHONY : clean</span><br><span class=\"line\">clean :</span><br><span class=\"line\">    rm edit <span class=\"variable\">$(objects)</span></span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li><code>.PHONY</code>表示<code>clean</code>是伪目标文件;</li>\n<li>这种自动推导方式大大简化了Makefile的编写;</li>\n<li><code>clean</code>总是放在文件的末尾.</li>\n</ul>\n<p><code>make</code>命令在默认情况下会在当前目录下<strong>依次</strong>寻找文件名为<code>GNUmakefile</code>,<code>makefile</code>,<code>Makefile</code>的文件.</p>\n<ul>\n<li>推荐使用<code>Makefile</code>作为文件名;</li>\n<li>也可以使用<code>-f</code>或者<code>-file</code>参数来指定特定的<code>Makefile</code>文件.</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make -f Make.Linux</span><br></pre></td></tr></table></figure></div>\n\n\n\n\n<h2 id=\"include命令\"><a href=\"#include命令\" class=\"headerlink\" title=\"include命令\"></a>include命令</h2><div class=\"code-container\" data-rel=\"Makefile\"><figure class=\"iseeu highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用include命令可以将其他Makefile包含进来</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> &lt;file-name&gt;</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li><code>include</code>命令前可以存在空字符, 但是不能为<code>Tab</code>缩进;</li>\n<li><code>include</code>与文件之间可以存在多个空格.</li>\n</ul>\n<h3 id=\"直接指定文件\"><a href=\"#直接指定文件\" class=\"headerlink\" title=\"直接指定文件\"></a>直接指定文件</h3><div class=\"code-container\" data-rel=\"Makefile\"><figure class=\"iseeu highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 最基本的include用法是直接指定文件名</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> config.mk</span><br><span class=\"line\"><span class=\"keyword\">include</span> ./build/rules.mk</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 同时包含多个文件</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> config.mk rules.mk tests.mk</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"使用通配符\"><a href=\"#使用通配符\" class=\"headerlink\" title=\"使用通配符 *\"></a>使用通配符 *</h3><div class=\"code-container\" data-rel=\"Makefile\"><figure class=\"iseeu highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># * 匹配任意字符串</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> *.mk              <span class=\"comment\"># 包含当前目录下所有.mk文件</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> src/*.mk         <span class=\"comment\"># 包含src目录下的所有.mk文件</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> **/build/*.mk    <span class=\"comment\"># 包含任意子目录中build目录下的所有.mk文件</span></span><br></pre></td></tr></table></figure></div>\n\n<p>我们同样可以在变量中使用通配符 <code>*</code>:</p>\n<div class=\"code-container\" data-rel=\"Makefile\"><figure class=\"iseeu highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用时展开</span></span><br><span class=\"line\">objects = *.o</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义时展开(除非重新赋值, 否则保持定义时的展开状态)</span></span><br><span class=\"line\">objects := <span class=\"variable\">$(<span class=\"built_in\">wildcard</span> *.o)</span></span><br></pre></td></tr></table></figure></div>\n\n<p>e.g:</p>\n<div class=\"code-container\" data-rel=\"Makefile\"><figure class=\"iseeu highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$(<span class=\"built_in\">patsubst</span> %.c,%.o,$(<span class=\"built_in\">wildcard</span> *.c)</span>)</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li><code>patsubst</code>是一个函数, 用于模式替换;</li>\n<li>语法为<code>patsubst &lt;pattern&gt;,&lt;replacement&gt;,&lt;text&gt;</code>;</li>\n<li>此处表示利用通配符, 将所有的<code>.c</code>文件名称替换为<code>.o</code>文件.</li>\n</ul>\n<h3 id=\"使用单字符通配符\"><a href=\"#使用单字符通配符\" class=\"headerlink\" title=\"使用单字符通配符\"></a>使用单字符通配符</h3><div class=\"code-container\" data-rel=\"Makefile\"><figure class=\"iseeu highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ? 匹配单个字符</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> test?.mk         <span class=\"comment\"># 匹配test1.mk, testA.mk等</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> rule_?.mk        <span class=\"comment\"># 匹配rule_1.mk, rule_2.mk等</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> config???.mk     <span class=\"comment\"># 匹配config后带三个字符的.mk文件</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"使用目录路径\"><a href=\"#使用目录路径\" class=\"headerlink\" title=\"使用目录路径\"></a>使用目录路径</h3><div class=\"code-container\" data-rel=\"Makefile\"><figure class=\"iseeu highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 可以指定不同的目录路径</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> ./configs/*.mk    <span class=\"comment\"># 当前目录下的configs子目录</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> ../shared/*.mk    <span class=\"comment\"># 上级目录的shared子目录</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> /usr/local/<span class=\"keyword\">include</span>/make/*.mk  <span class=\"comment\"># 绝对路径</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"使用字符集\"><a href=\"#使用字符集\" class=\"headerlink\" title=\"使用字符集[]\"></a>使用字符集[]</h3><div class=\"code-container\" data-rel=\"Makefile\"><figure class=\"iseeu highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># [] 用于匹配字符集中的任意一个字符</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> make[123].mk     <span class=\"comment\"># 匹配make1.mk, make2.mk, make3.mk</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> test[a-z].mk     <span class=\"comment\"># 匹配testa.mk到testz.mk</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> config[0-9].mk   <span class=\"comment\"># 匹配config0.mk到config9.mk</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h3><div class=\"code-container\" data-rel=\"Makefile\"><figure class=\"iseeu highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认情况下，如果include的文件不存在，make会报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用-include或sinclude可以忽略文件不存在的错误</span></span><br><span class=\"line\"><span class=\"keyword\">-include</span> optional.mk     <span class=\"comment\"># 如果文件不存在，继续执行不报错</span></span><br><span class=\"line\"><span class=\"keyword\">sinclude</span> optional.mk     <span class=\"comment\"># 与-include完全相同</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 多个可选文件</span></span><br><span class=\"line\"><span class=\"keyword\">-include</span> config/*.mk     <span class=\"comment\"># 如果config目录下有任何.mk文件不存在，继续执行</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"组合使用示例\"><a href=\"#组合使用示例\" class=\"headerlink\" title=\"组合使用示例\"></a>组合使用示例</h3><div class=\"code-container\" data-rel=\"Makefile\"><figure class=\"iseeu highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 可以组合使用多种模式</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> config.mk \\</span><br><span class=\"line\">        rules/*.mk \\</span><br><span class=\"line\">        test[0-9].mk \\</span><br><span class=\"line\">        ./build/**/*.mk</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用变量</span></span><br><span class=\"line\">INCLUDE_DIR = ./includes</span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(INCLUDE_DIR)</span>/*.mk</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 条件包含</span></span><br><span class=\"line\"><span class=\"keyword\">ifdef</span> CUSTOM_RULES</span><br><span class=\"line\">    <span class=\"keyword\">include</span> <span class=\"variable\">$(CUSTOM_RULES)</span></span><br><span class=\"line\"><span class=\"keyword\">endif</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"make的工作方式\"><a href=\"#make的工作方式\" class=\"headerlink\" title=\"make的工作方式\"></a>make的工作方式</h2><ol>\n<li>读取所有的<code>Makefile</code>;</li>\n<li>读取<code>include</code>涉及的<code>Makefile</code>文件;</li>\n<li>初始化文件当中的<strong>变量</strong>;</li>\n<li>推导<strong>隐式规则</strong>并分析所有规则;</li>\n<li>为目标文件创建依赖关系链;</li>\n<li>根据依赖关系, 决定需要重新生成的文件;</li>\n<li>执行生成命令.</li>\n</ol>\n<h2 id=\"文件搜寻\"><a href=\"#文件搜寻\" class=\"headerlink\" title=\"文件搜寻\"></a>文件搜寻</h2><h3 id=\"VPATH\"><a href=\"#VPATH\" class=\"headerlink\" title=\"VPATH\"></a>VPATH</h3><p>默认情况下, <code>make</code>会在当前目录和所有子目录下寻找依赖文件和目标文件.<br>为了能够在较大工程中扩大<code>make</code>的搜索范围, 我们可以通过特殊变量<code>VPATH</code>来指定搜索路径.</p>\n<div class=\"code-container\" data-rel=\"Makefile\"><figure class=\"iseeu highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VPATH = src:../headers</span><br></pre></td></tr></table></figure></div>\n<ol>\n<li>不同的目录之间由<code>:</code>分隔, 上述定义指定了额外的<code>src</code>以及<code>../headers</code>目录;</li>\n<li>当前目录的优先级最高, 在当前目录下无法找到相关文件时将会从指定的目录中<strong>从左到右</strong>继续寻找.</li>\n</ol>\n<h3 id=\"vpath\"><a href=\"#vpath\" class=\"headerlink\" title=\"vpath\"></a>vpath</h3><p>上述的<code>VPATH</code>指定了全局文件的搜索路径, 而<code>vpath</code>允许为<strong>不同类型</strong>的文件指定不同的搜索路径.</p>\n<p><strong>语法</strong></p>\n<div class=\"code-container\" data-rel=\"Makefile\"><figure class=\"iseeu highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 为指定模式的文件设置搜索路径</span></span><br><span class=\"line\"><span class=\"keyword\">vpath</span> pattern directory1:directory2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 清除指定模式的搜索路径</span></span><br><span class=\"line\"><span class=\"keyword\">vpath</span> pattern</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 清除所有已设置的 vpath</span></span><br><span class=\"line\"><span class=\"keyword\">vpath</span></span><br></pre></td></tr></table></figure></div>\n\n<p><strong>特点</strong></p>\n<ul>\n<li>可以为不同类型的文件指定不同的搜索路径;</li>\n<li>支持使用 <code>%</code> 通配符匹配文件名;</li>\n<li>可以有多条 vpath 指令, 且针对相同模式的命令将会起到<strong>附加</strong>而非覆盖的作用.</li>\n</ul>\n<p><strong>e.g.</strong></p>\n<div class=\"code-container\" data-rel=\"Makefile\"><figure class=\"iseeu highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义编译器</span></span><br><span class=\"line\">CC = gcc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">vpath</span> %.h <span class=\"keyword\">include</span></span><br><span class=\"line\"><span class=\"keyword\">vpath</span> %.c src</span><br><span class=\"line\"><span class=\"keyword\">vpath</span> %.o build</span><br><span class=\"line\"><span class=\"keyword\">vpath</span> %.a lib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">program: main.o utils.o</span></span><br><span class=\"line\">    <span class=\"variable\">$(CC)</span> -o program main.o utils.o -L. -lmylib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">main.o: main.c project.h</span></span><br><span class=\"line\">    <span class=\"variable\">$(CC)</span> -c main.c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">utils.o: utils.c utils.h</span></span><br><span class=\"line\">    <span class=\"variable\">$(CC)</span> -c utils.c</span><br></pre></td></tr></table></figure></div>\n\n<hr>\n<p><code>vpath</code>的指令必须都写在<code>Makefile</code>当中, 在<code>Make</code>解析<code>Makefile</code>文件时被处理, 例如:</p>\n<div class=\"code-container\" data-rel=\"Makefile\"><figure class=\"iseeu highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果需要清理 .o 文件的搜索路径并重新设置</span></span><br><span class=\"line\"><span class=\"section\">clean-paths:</span></span><br><span class=\"line\">\t<span class=\"comment\"># 清除 .o 文件的搜索路径</span></span><br><span class=\"line\">\t<span class=\"keyword\">vpath</span> %.o</span><br><span class=\"line\">\t<span class=\"comment\"># 设置新的搜索路径</span></span><br><span class=\"line\">\t<span class=\"keyword\">vpath</span> %.o new/build</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果需要完全重置所有搜索路径</span></span><br><span class=\"line\"><span class=\"section\">reset-paths:</span></span><br><span class=\"line\">\t<span class=\"comment\"># 清除所有 vpath 设置</span></span><br><span class=\"line\">\t<span class=\"keyword\">vpath</span></span><br><span class=\"line\">\t<span class=\"comment\"># 重新设置所需的搜索路径</span></span><br><span class=\"line\">\t<span class=\"keyword\">vpath</span> %.h <span class=\"keyword\">include</span></span><br><span class=\"line\">\t<span class=\"keyword\">vpath</span> %.c src</span><br><span class=\"line\">\t<span class=\"keyword\">vpath</span> %.o build</span><br></pre></td></tr></table></figure></div>\n<p>在终端中对应的指令:</p>\n<div class=\"code-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">make              <span class=\"comment\"># 使用默认搜索路径编译</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">make clean-paths  <span class=\"comment\"># 执行搜索路径清理和重设</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">make reset-paths  <span class=\"comment\"># 重置所有搜索路径</span></span></span><br></pre></td></tr></table></figure></div>\n\n<hr>\n<p><strong>优先级</strong>: 当前目录 &gt; <code>vpath</code> &gt; <code>VPATH</code>. </p>\n","more":"<h1 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h1><h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><h2 id=\"默认目标\"><a href=\"#默认目标\" class=\"headerlink\" title=\"默认目标\"></a>默认目标</h2><ul>\n<li><code>Makefile</code>当中的第一个目标会成为<strong>默认目标</strong>;</li>\n<li>不指定参数的<code>make</code>命令会执行默认目标;</li>\n<li>通常使用<code>all</code>的伪目标作为默认目标.</li>\n</ul>\n<h2 id=\"伪目标\"><a href=\"#伪目标\" class=\"headerlink\" title=\"伪目标\"></a>伪目标</h2><p>当我们需要执行清理工作、运行测试等操作时, 我们不希望与实际文件名发生冲突, 此时就需要用到 <strong>伪目标</strong>.</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>: 目标名</span></span><br><span class=\"line\"><span class=\"section\">目标名:</span></span><br><span class=\"line\">    命令</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用示例</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 情景：需要清理编译产生的 .o 文件和可执行文件</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>: clean</span></span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">    rm -f *.o program</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 情景：需要运行测试</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>: test</span></span><br><span class=\"line\"><span class=\"section\">test:</span></span><br><span class=\"line\">    ./run_tests.sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用方法：</span></span><br><span class=\"line\"><span class=\"comment\"># make clean  # 清理文件</span></span><br><span class=\"line\"><span class=\"comment\"># make test   # 运行测试</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>其中<code>-f</code>表示强制删除, 其他的参数如<code>-r</code>表示递归删除目录, <code>-rf</code>表示强制递归删除目录.</p>\n</blockquote>\n<h3 id=\"多重构建\"><a href=\"#多重构建\" class=\"headerlink\" title=\"多重构建\"></a>多重构建</h3><p>我们还可以利用伪目标使得默认目标具有多个对象:</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>: all debug release clean</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 默认目标包含常用的构建类型</span></span><br><span class=\"line\"><span class=\"section\">all: debug release</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调试版本</span></span><br><span class=\"line\"><span class=\"section\">debug: main.c</span></span><br><span class=\"line\">    @echo <span class=\"string\">&quot;构建调试版本...&quot;</span></span><br><span class=\"line\">    gcc -g main.c -o debug-program</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发布版本</span></span><br><span class=\"line\"><span class=\"section\">release: main.c</span></span><br><span class=\"line\">    @echo <span class=\"string\">&quot;构建发布版本...&quot;</span></span><br><span class=\"line\">    gcc -O2 main.c -o release-program</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">    rm -f debug-program release-program</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用：</span></span><br><span class=\"line\"><span class=\"comment\"># make          # 构建调试版和发布版</span></span><br><span class=\"line\"><span class=\"comment\"># make debug    # 只构建调试版</span></span><br><span class=\"line\"><span class=\"comment\"># make release  # 只构建发布版</span></span><br><span class=\"line\"><span class=\"comment\"># make clean    # 清理</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多目标\"><a href=\"#多目标\" class=\"headerlink\" title=\"多目标\"></a>多目标</h2><p>e.g: </p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bigoutput littleoutput : text.g</span><br><span class=\"line\">    generate text.g -<span class=\"variable\">$(<span class=\"built_in\">subst</span> output,,<span class=\"variable\">$@</span>)</span> &gt; <span class=\"variable\">$@</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h3><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bigoutput littleoutput : text.g</span><br><span class=\"line\">    generate text.g -<span class=\"variable\">$(<span class=\"built_in\">subst</span> output,,<span class=\"variable\">$@</span>)</span> &gt; <span class=\"variable\">$@</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><code>bigoutput littleoutput</code> - 两个目标文件</li>\n<li><code>text.g</code> - 依赖文件</li>\n<li><code>$(subst output,,$@)</code> -变量展开：<ul>\n<li><code>$@</code> 是自动变量，表示当前目标名</li>\n<li><code>subst</code> 是替换函数，格式为 <code>$(subst from,to,text)</code></li>\n<li>此处将目标名中的 “output” 替换为空</li>\n</ul>\n</li>\n</ol>\n<p>当规则执行时：</p>\n<ul>\n<li><p>对于 <code>bigoutput</code> 目标：</p>\n<ul>\n<li><code>$@</code> 展开为 <code>bigoutput</code></li>\n<li><code>$(subst output,,$@)</code> 结果为 <code>big</code></li>\n<li>最终命令变为：<code>generate text.g -big &gt; bigoutput</code></li>\n</ul>\n</li>\n<li><p>对于 <code>littleoutput</code> 目标：</p>\n<ul>\n<li><code>$@</code> 展开为 <code>littleoutput</code></li>\n<li><code>$(subst output,,$@)</code> 结果为 <code>little</code></li>\n<li>最终命令变为：<code>generate text.g -little &gt; littleoutput</code></li>\n</ul>\n</li>\n</ul>\n<br>\n\n<p>因此, 上述的多目标规则<strong>等价</strong>于:</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bigoutput : text.g</span><br><span class=\"line\">    generate text.g -big &gt; bigoutput</span><br><span class=\"line\">littleoutput : text.g</span><br><span class=\"line\">    generate text.g -little &gt; littleoutput</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"规则语法\"><a href=\"#规则语法\" class=\"headerlink\" title=\"规则语法\"></a>规则语法</h3><p>多目标规则（Multiple Targets）是 Makefile 中的一个重要特性：</p>\n<ol>\n<li><p><strong>基本语法</strong>：</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target1 target2 : prerequisites</span><br><span class=\"line\">    commands</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>特点</strong>：</p>\n<ul>\n<li>多个目标共享相同的依赖关系</li>\n<li>命令会对每个目标分别执行一次</li>\n<li>可以使用 <code>$@</code> 引用当前正在构建的目标</li>\n</ul>\n</li>\n<li><p><strong>使用场景</strong>：</p>\n<ul>\n<li>生成相似但略有不同的文件</li>\n<li>多个目标需要类似的构建过程</li>\n<li>减少重复代码</li>\n</ul>\n</li>\n<li><p><strong>示例</strong>：</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成不同大小的图片</span></span><br><span class=\"line\">big.jpg small.jpg : original.jpg</span><br><span class=\"line\">    convert original.jpg -resize <span class=\"variable\">$*</span> &gt; <span class=\"variable\">$@</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成不同格式的文档</span></span><br><span class=\"line\">manual.pdf manual.html : manual.txt</span><br><span class=\"line\">    pandoc manual.txt -o <span class=\"variable\">$@</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>优势</strong>：</p>\n<ul>\n<li>代码更简洁</li>\n<li>易于维护</li>\n<li>避免重复规则</li>\n<li>更好的规则组织</li>\n</ul>\n</li>\n<li><p><strong>注意事项</strong>：</p>\n<ul>\n<li>命令对每个目标都会执行一次</li>\n<li>需要合理使用自动变量（如 <code>$@</code>）来区分不同目标</li>\n<li>确保命令对所有目标都适用</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"静态模式\"><a href=\"#静态模式\" class=\"headerlink\" title=\"静态模式\"></a>静态模式</h2><p>好的，让我从这几个角度来介绍 Makefile 中的静态模式规则。</p>\n<h3 id=\"1-引入背景\"><a href=\"#1-引入背景\" class=\"headerlink\" title=\"1. 引入背景\"></a>1. 引入背景</h3><p>在 Makefile 中，当我们需要将多个源文件编译成对应的目标文件时，如果按照普通的规则写法，往往需要为每个文件都写一条规则：</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo.o : foo.c</span><br><span class=\"line\">    <span class=\"variable\">$(CC)</span> -c <span class=\"variable\">$(CFLAGS)</span> foo.c -o foo.o</span><br><span class=\"line\"></span><br><span class=\"line\">bar.o : bar.c</span><br><span class=\"line\">    <span class=\"variable\">$(CC)</span> -c <span class=\"variable\">$(CFLAGS)</span> bar.c -o bar.o</span><br><span class=\"line\"></span><br><span class=\"line\">test.o : test.c</span><br><span class=\"line\">    <span class=\"variable\">$(CC)</span> -c <span class=\"variable\">$(CFLAGS)</span> test.c -o test.o</span><br></pre></td></tr></table></figure>\n\n<p>这种写法存在明显问题：</p>\n<ul>\n<li>规则重复，维护困难</li>\n<li>当新增源文件时需要手动添加规则</li>\n<li>代码冗长，不够优雅</li>\n</ul>\n<p>虽然可以使用多目标规则，但在处理源文件和目标文件的对应关系时仍然不够灵活。这就是引入静态模式规则的原因。</p>\n<h3 id=\"2-基本语法\"><a href=\"#2-基本语法\" class=\"headerlink\" title=\"2. 基本语法\"></a>2. 基本语法</h3><p>静态模式规则的基本语法如下：</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">targets ...: target-pattern: prereq-pattern</span><br><span class=\"line\">    commands</span><br></pre></td></tr></table></figure>\n\n<p>其中：</p>\n<ul>\n<li><code>targets</code>: 要生成的目标文件列表</li>\n<li><code>target-pattern</code>: 目标的模式，通常包含 <code>%</code> 通配符</li>\n<li><code>prereq-pattern</code>: 依赖的模式，通常也包含 <code>%</code> 通配符</li>\n<li><code>commands</code>: 构建命令</li>\n</ul>\n<p><code>%</code> 在 target-pattern 中匹配的内容，会在 prereq-pattern 中作为相同的替换内容。</p>\n<h3 id=\"3-综合示例\"><a href=\"#3-综合示例\" class=\"headerlink\" title=\"3. 综合示例\"></a>3. 综合示例</h3><p>让我们通过几个逐渐复杂的例子来说明静态模式的使用：</p>\n<h4 id=\"基础示例：编译-C-文件\"><a href=\"#基础示例：编译-C-文件\" class=\"headerlink\" title=\"基础示例：编译 C 文件\"></a>基础示例：编译 C 文件</h4><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objects = foo.o bar.o test.o</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$(objects)</span>: %.o: %.c</span><br><span class=\"line\">    <span class=\"variable\">$(CC)</span> -c <span class=\"variable\">$(CFLAGS)</span> <span class=\"variable\">$&lt;</span> -o <span class=\"variable\">$@</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"复杂示例：多种源文件处理\"><a href=\"#复杂示例：多种源文件处理\" class=\"headerlink\" title=\"复杂示例：多种源文件处理\"></a>复杂示例：多种源文件处理</h4><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义源文件和目标文件</span></span><br><span class=\"line\">cpp_sources := <span class=\"variable\">$(<span class=\"built_in\">wildcard</span> *.cpp)</span></span><br><span class=\"line\">c_sources := <span class=\"variable\">$(<span class=\"built_in\">wildcard</span> *.c)</span></span><br><span class=\"line\">cpp_objects := $(cpp_sources:.cpp=.o)</span><br><span class=\"line\">c_objects := $(c_sources:.c=.o)</span><br><span class=\"line\">all_objects := <span class=\"variable\">$(cpp_objects)</span> <span class=\"variable\">$(c_objects)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># C++ 源文件的编译规则</span></span><br><span class=\"line\"><span class=\"variable\">$(cpp_objects)</span>: %.o: %.cpp</span><br><span class=\"line\">    <span class=\"variable\">$(CXX)</span> -c <span class=\"variable\">$(CXXFLAGS)</span> <span class=\"variable\">$&lt;</span> -o <span class=\"variable\">$@</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># C 源文件的编译规则</span></span><br><span class=\"line\"><span class=\"variable\">$(c_objects)</span>: %.o: %.c</span><br><span class=\"line\">    <span class=\"variable\">$(CC)</span> -c <span class=\"variable\">$(CFLAGS)</span> <span class=\"variable\">$&lt;</span> -o <span class=\"variable\">$@</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成可执行文件</span></span><br><span class=\"line\"><span class=\"section\">program: <span class=\"variable\">$(all_objects)</span></span></span><br><span class=\"line\">    <span class=\"variable\">$(CXX)</span> <span class=\"variable\">$^</span> -o <span class=\"variable\">$@</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>$(cpp_sources:.cpp=.o)</code>是一种<strong>模式替换</strong>, 会将<code>cpp_sources</code>中的所有<code>.cpp</code>文件替换为<code>.o</code>文件;<ul>\n<li>即<code>$(varname:pattern1=pattern2)</code> 会将<code>varname</code>中的所有<code>pattern1</code>替换为<code>pattern2</code>;</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"更复杂的示例：多目录处理\"><a href=\"#更复杂的示例：多目录处理\" class=\"headerlink\" title=\"更复杂的示例：多目录处理\"></a>更复杂的示例：多目录处理</h4><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 目录结构</span></span><br><span class=\"line\">SRCDIR = src</span><br><span class=\"line\">OBJDIR = obj</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 源文件和目标文件</span></span><br><span class=\"line\">SOURCES = <span class=\"variable\">$(<span class=\"built_in\">wildcard</span> <span class=\"variable\">$(SRCDIR)</span>/*.c)</span></span><br><span class=\"line\">OBJECTS = $(SOURCES:<span class=\"variable\">$(SRCDIR)</span>/%.c=<span class=\"variable\">$(OBJDIR)</span>/%.o)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 确保目标目录存在</span></span><br><span class=\"line\"><span class=\"variable\">$(OBJDIR)</span>:</span><br><span class=\"line\">    mkdir -p <span class=\"variable\">$@</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 静态模式规则</span></span><br><span class=\"line\"><span class=\"variable\">$(OBJECTS)</span>: <span class=\"variable\">$(OBJDIR)</span>/%.o: <span class=\"variable\">$(SRCDIR)</span>/%.c | <span class=\"variable\">$(OBJDIR)</span></span><br><span class=\"line\">    <span class=\"variable\">$(CC)</span> -c <span class=\"variable\">$(CFLAGS)</span> <span class=\"variable\">$&lt;</span> -o <span class=\"variable\">$@</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 最终目标</span></span><br><span class=\"line\"><span class=\"section\">program: <span class=\"variable\">$(OBJECTS)</span></span></span><br><span class=\"line\">    <span class=\"variable\">$(CC)</span> <span class=\"variable\">$^</span> -o <span class=\"variable\">$@</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>todo</p>\n</blockquote>\n<p>这个复杂示例展现了 Makefile 在处理现代项目时的多个高级特性。在<strong>文件组织</strong>方面，示例实现了跨目录的文件处理能力，通过将源文件和目标文件分别组织在不同的目录（如 <code>src</code> 和 <code>obj</code>）中，体现了项目结构的清晰性和模块化。Makefile 能够智能地在这些目录间进行文件操作，保持项目的整洁有序。</p>\n<p>在<strong>目录管理</strong>方面，示例引入了自动创建目标目录的机制。通过使用条件依赖（用 <code>|</code> 分隔符标识），确保在编译过程开始前目标目录已经存在。这种方式优雅地解决了目录创建的时序问题，避免了因目录不存在而导致的编译失败。特别是当多个目标文件同时需要某个目录时，条件依赖能够确保目录创建操作只执行一次，提高了构建效率。</p>\n<p>在<strong>文件名处理</strong>方面，示例展示了复杂的文件名转换技巧。通过巧妙运用 Make 的模式替换功能，实现了从源文件到目标文件的路径和扩展名转换。例如，将 <code>src/main.c</code> 转换为 <code>obj/main.o</code>，这种转换不仅处理了文件扩展名的变化，还同时处理了目录路径的变化。这种灵活的文件名处理机制，使得 Makefile 能够适应更复杂的项目结构和构建需求，同时保持了规则的简洁性和可维护性。</p>\n<hr>\n<h2 id=\"基本规则\"><a href=\"#基本规则\" class=\"headerlink\" title=\"基本规则\"></a>基本规则</h2><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target ... : prerequisites ...</span><br><span class=\"line\">    recipe</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n<p><code>target</code>: 目标文件 | 可执行文件 | 标签;<br><code>prerequisites</code>: 依赖文件 | <code>target</code>;<br><code>recipe</code>: 对应<code>target</code>所需的命令(以<code>Tap</code>缩进开头).</p>\n<br>\n\n<p>执行<code>recipe</code>命令的条件:</p>\n<ul>\n<li><code>prerequisites</code>中存在文件的日期早于<code>target</code>的日期;</li>\n<li><code>target</code>的文件不存在.</li>\n</ul>\n<h2 id=\"使用变量\"><a href=\"#使用变量\" class=\"headerlink\" title=\"使用变量\"></a>使用变量</h2><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义变量: 类似于C的宏定义</span></span><br><span class=\"line\">objects = main.o display.o</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用变量</span></span><br><span class=\"line\"><span class=\"section\">edit: <span class=\"variable\">$(objects)</span></span></span><br><span class=\"line\">    cc -o edit <span class=\"variable\">$(objects)</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>必须使用<code>Tab</code>缩进;</li>\n<li>采取<code>$(variable)</code>的形式引用变量, 将会展开为变量的值;</li>\n<li><code>cc -o edit</code> 声明采用C语言编译器同时指定输出文件名为<code>edit</code>.</li>\n</ol>\n<h2 id=\"Make的自动推导\"><a href=\"#Make的自动推导\" class=\"headerlink\" title=\"Make的自动推导\"></a>Make的自动推导</h2><h3 id=\"自动推导规则\"><a href=\"#自动推导规则\" class=\"headerlink\" title=\"自动推导规则\"></a>自动推导规则</h3><ol>\n<li><p><strong>文件关联</strong>：</p>\n<ul>\n<li>当make看到<code>.o</code>文件时，会自动将对应的<code>.c</code>文件加入依赖关系</li>\n<li>例如：发现<code>whatever.o</code>时，会自动关联<code>whatever.c</code>作为依赖文件</li>\n</ul>\n</li>\n<li><p><strong>命令推导</strong>：</p>\n<ul>\n<li>自动推导编译命令，如<code>cc -c whatever.c</code></li>\n<li>无需在每个<code>.o</code>文件后都手动写编译命令</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"示例结构\"><a href=\"#示例结构\" class=\"headerlink\" title=\"示例结构\"></a>示例结构</h3><ul>\n<li><strong>依赖关系</strong>：</li>\n</ul>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 自动推导之前</span></span><br><span class=\"line\">main.o : main.c defs.h</span><br><span class=\"line\">    cc -c main.c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 自动推导下的简化书写</span></span><br><span class=\"line\">main.o : defs.h</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>清理目标</strong>：</li>\n</ul>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.PHONY : clean</span><br><span class=\"line\">clean :</span><br><span class=\"line\">    rm edit <span class=\"variable\">$(objects)</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>.PHONY</code>表示<code>clean</code>是伪目标文件;</li>\n<li>这种自动推导方式大大简化了Makefile的编写;</li>\n<li><code>clean</code>总是放在文件的末尾.</li>\n</ul>\n<p><code>make</code>命令在默认情况下会在当前目录下<strong>依次</strong>寻找文件名为<code>GNUmakefile</code>,<code>makefile</code>,<code>Makefile</code>的文件.</p>\n<ul>\n<li>推荐使用<code>Makefile</code>作为文件名;</li>\n<li>也可以使用<code>-f</code>或者<code>-file</code>参数来指定特定的<code>Makefile</code>文件.</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make -f Make.Linux</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h2 id=\"include命令\"><a href=\"#include命令\" class=\"headerlink\" title=\"include命令\"></a>include命令</h2><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用include命令可以将其他Makefile包含进来</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> &lt;file-name&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>include</code>命令前可以存在空字符, 但是不能为<code>Tab</code>缩进;</li>\n<li><code>include</code>与文件之间可以存在多个空格.</li>\n</ul>\n<h3 id=\"直接指定文件\"><a href=\"#直接指定文件\" class=\"headerlink\" title=\"直接指定文件\"></a>直接指定文件</h3><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 最基本的include用法是直接指定文件名</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> config.mk</span><br><span class=\"line\"><span class=\"keyword\">include</span> ./build/rules.mk</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 同时包含多个文件</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> config.mk rules.mk tests.mk</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用通配符\"><a href=\"#使用通配符\" class=\"headerlink\" title=\"使用通配符 *\"></a>使用通配符 *</h3><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># * 匹配任意字符串</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> *.mk              <span class=\"comment\"># 包含当前目录下所有.mk文件</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> src/*.mk         <span class=\"comment\"># 包含src目录下的所有.mk文件</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> **/build/*.mk    <span class=\"comment\"># 包含任意子目录中build目录下的所有.mk文件</span></span><br></pre></td></tr></table></figure>\n\n<p>我们同样可以在变量中使用通配符 <code>*</code>:</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用时展开</span></span><br><span class=\"line\">objects = *.o</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义时展开(除非重新赋值, 否则保持定义时的展开状态)</span></span><br><span class=\"line\">objects := <span class=\"variable\">$(<span class=\"built_in\">wildcard</span> *.o)</span></span><br></pre></td></tr></table></figure>\n\n<p>e.g:</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$(<span class=\"built_in\">patsubst</span> %.c,%.o,$(<span class=\"built_in\">wildcard</span> *.c)</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>patsubst</code>是一个函数, 用于模式替换;</li>\n<li>语法为<code>patsubst &lt;pattern&gt;,&lt;replacement&gt;,&lt;text&gt;</code>;</li>\n<li>此处表示利用通配符, 将所有的<code>.c</code>文件名称替换为<code>.o</code>文件.</li>\n</ul>\n<h3 id=\"使用单字符通配符\"><a href=\"#使用单字符通配符\" class=\"headerlink\" title=\"使用单字符通配符\"></a>使用单字符通配符</h3><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ? 匹配单个字符</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> test?.mk         <span class=\"comment\"># 匹配test1.mk, testA.mk等</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> rule_?.mk        <span class=\"comment\"># 匹配rule_1.mk, rule_2.mk等</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> config???.mk     <span class=\"comment\"># 匹配config后带三个字符的.mk文件</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用目录路径\"><a href=\"#使用目录路径\" class=\"headerlink\" title=\"使用目录路径\"></a>使用目录路径</h3><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 可以指定不同的目录路径</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> ./configs/*.mk    <span class=\"comment\"># 当前目录下的configs子目录</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> ../shared/*.mk    <span class=\"comment\"># 上级目录的shared子目录</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> /usr/local/<span class=\"keyword\">include</span>/make/*.mk  <span class=\"comment\"># 绝对路径</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用字符集\"><a href=\"#使用字符集\" class=\"headerlink\" title=\"使用字符集[]\"></a>使用字符集[]</h3><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># [] 用于匹配字符集中的任意一个字符</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> make[123].mk     <span class=\"comment\"># 匹配make1.mk, make2.mk, make3.mk</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> test[a-z].mk     <span class=\"comment\"># 匹配testa.mk到testz.mk</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> config[0-9].mk   <span class=\"comment\"># 匹配config0.mk到config9.mk</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h3><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认情况下，如果include的文件不存在，make会报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用-include或sinclude可以忽略文件不存在的错误</span></span><br><span class=\"line\"><span class=\"keyword\">-include</span> optional.mk     <span class=\"comment\"># 如果文件不存在，继续执行不报错</span></span><br><span class=\"line\"><span class=\"keyword\">sinclude</span> optional.mk     <span class=\"comment\"># 与-include完全相同</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 多个可选文件</span></span><br><span class=\"line\"><span class=\"keyword\">-include</span> config/*.mk     <span class=\"comment\"># 如果config目录下有任何.mk文件不存在，继续执行</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"组合使用示例\"><a href=\"#组合使用示例\" class=\"headerlink\" title=\"组合使用示例\"></a>组合使用示例</h3><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 可以组合使用多种模式</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> config.mk \\</span><br><span class=\"line\">        rules/*.mk \\</span><br><span class=\"line\">        test[0-9].mk \\</span><br><span class=\"line\">        ./build/**/*.mk</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用变量</span></span><br><span class=\"line\">INCLUDE_DIR = ./includes</span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(INCLUDE_DIR)</span>/*.mk</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 条件包含</span></span><br><span class=\"line\"><span class=\"keyword\">ifdef</span> CUSTOM_RULES</span><br><span class=\"line\">    <span class=\"keyword\">include</span> <span class=\"variable\">$(CUSTOM_RULES)</span></span><br><span class=\"line\"><span class=\"keyword\">endif</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"make的工作方式\"><a href=\"#make的工作方式\" class=\"headerlink\" title=\"make的工作方式\"></a>make的工作方式</h2><ol>\n<li>读取所有的<code>Makefile</code>;</li>\n<li>读取<code>include</code>涉及的<code>Makefile</code>文件;</li>\n<li>初始化文件当中的<strong>变量</strong>;</li>\n<li>推导<strong>隐式规则</strong>并分析所有规则;</li>\n<li>为目标文件创建依赖关系链;</li>\n<li>根据依赖关系, 决定需要重新生成的文件;</li>\n<li>执行生成命令.</li>\n</ol>\n<h2 id=\"文件搜寻\"><a href=\"#文件搜寻\" class=\"headerlink\" title=\"文件搜寻\"></a>文件搜寻</h2><h3 id=\"VPATH\"><a href=\"#VPATH\" class=\"headerlink\" title=\"VPATH\"></a>VPATH</h3><p>默认情况下, <code>make</code>会在当前目录和所有子目录下寻找依赖文件和目标文件.<br>为了能够在较大工程中扩大<code>make</code>的搜索范围, 我们可以通过特殊变量<code>VPATH</code>来指定搜索路径.</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VPATH = src:../headers</span><br></pre></td></tr></table></figure>\n<ol>\n<li>不同的目录之间由<code>:</code>分隔, 上述定义指定了额外的<code>src</code>以及<code>../headers</code>目录;</li>\n<li>当前目录的优先级最高, 在当前目录下无法找到相关文件时将会从指定的目录中<strong>从左到右</strong>继续寻找.</li>\n</ol>\n<h3 id=\"vpath\"><a href=\"#vpath\" class=\"headerlink\" title=\"vpath\"></a>vpath</h3><p>上述的<code>VPATH</code>指定了全局文件的搜索路径, 而<code>vpath</code>允许为<strong>不同类型</strong>的文件指定不同的搜索路径.</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 为指定模式的文件设置搜索路径</span></span><br><span class=\"line\"><span class=\"keyword\">vpath</span> pattern directory1:directory2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 清除指定模式的搜索路径</span></span><br><span class=\"line\"><span class=\"keyword\">vpath</span> pattern</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 清除所有已设置的 vpath</span></span><br><span class=\"line\"><span class=\"keyword\">vpath</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>特点</strong></p>\n<ul>\n<li>可以为不同类型的文件指定不同的搜索路径;</li>\n<li>支持使用 <code>%</code> 通配符匹配文件名;</li>\n<li>可以有多条 vpath 指令, 且针对相同模式的命令将会起到<strong>附加</strong>而非覆盖的作用.</li>\n</ul>\n<p><strong>e.g.</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义编译器</span></span><br><span class=\"line\">CC = gcc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">vpath</span> %.h <span class=\"keyword\">include</span></span><br><span class=\"line\"><span class=\"keyword\">vpath</span> %.c src</span><br><span class=\"line\"><span class=\"keyword\">vpath</span> %.o build</span><br><span class=\"line\"><span class=\"keyword\">vpath</span> %.a lib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">program: main.o utils.o</span></span><br><span class=\"line\">    <span class=\"variable\">$(CC)</span> -o program main.o utils.o -L. -lmylib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">main.o: main.c project.h</span></span><br><span class=\"line\">    <span class=\"variable\">$(CC)</span> -c main.c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">utils.o: utils.c utils.h</span></span><br><span class=\"line\">    <span class=\"variable\">$(CC)</span> -c utils.c</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><code>vpath</code>的指令必须都写在<code>Makefile</code>当中, 在<code>Make</code>解析<code>Makefile</code>文件时被处理, 例如:</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果需要清理 .o 文件的搜索路径并重新设置</span></span><br><span class=\"line\"><span class=\"section\">clean-paths:</span></span><br><span class=\"line\">\t<span class=\"comment\"># 清除 .o 文件的搜索路径</span></span><br><span class=\"line\">\t<span class=\"keyword\">vpath</span> %.o</span><br><span class=\"line\">\t<span class=\"comment\"># 设置新的搜索路径</span></span><br><span class=\"line\">\t<span class=\"keyword\">vpath</span> %.o new/build</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果需要完全重置所有搜索路径</span></span><br><span class=\"line\"><span class=\"section\">reset-paths:</span></span><br><span class=\"line\">\t<span class=\"comment\"># 清除所有 vpath 设置</span></span><br><span class=\"line\">\t<span class=\"keyword\">vpath</span></span><br><span class=\"line\">\t<span class=\"comment\"># 重新设置所需的搜索路径</span></span><br><span class=\"line\">\t<span class=\"keyword\">vpath</span> %.h <span class=\"keyword\">include</span></span><br><span class=\"line\">\t<span class=\"keyword\">vpath</span> %.c src</span><br><span class=\"line\">\t<span class=\"keyword\">vpath</span> %.o build</span><br></pre></td></tr></table></figure>\n<p>在终端中对应的指令:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">make              <span class=\"comment\"># 使用默认搜索路径编译</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">make clean-paths  <span class=\"comment\"># 执行搜索路径清理和重设</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">make reset-paths  <span class=\"comment\"># 重置所有搜索路径</span></span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>优先级</strong>: 当前目录 &gt; <code>vpath</code> &gt; <code>VPATH</code>. </p>\n","_processedHighlight":true},{"title":"pip-tools","date":"2025-01-15T14:29:31.000Z","excerpt":"常常在python的虚拟环境中碰到依赖包版本冲突的问题吗? 试试pip-tools这个工具吧!","_content":"\n![pip-tools](https://img.shields.io/badge/pip--tools-6.13.0-green.svg)\n\n在 Python 项目开发中，依赖管理是一个常见但棘手的问题。特别是在团队协作时，不同成员的环境可能存在细微差异，导致\"在我这里能运行\"的经典问题。\n<img src=\"/img/2025-01-16-23-58-21.png\" width=\"70%\" />\n针对上述问题, 本文将详细介绍如何使用 `pip-tools`，实现精确的依赖版本控制。\n\n\n## 为什么需要 pip-tools？\n\n传统的依赖管理方式存在以下问题：\n- `requirements.txt` 手动维护容易出错\n- 间接依赖版本难以控制\n- 团队成员环境不一致\n- 依赖更新流程繁琐\n\n`pip-tools` 通过以下特性解决这些问题：\n- 自动生成完整的依赖关系\n- 锁定所有依赖的具体版本\n- 支持开发环境和生产环境分离\n- 提供简单的依赖更新机制\n\n## 环境准备\n\n### 1. 创建虚拟环境\n\n首先，我们需要创建一个独立的 Python 虚拟环境：\n\n```bash\n# 安装 virtualenv（如果还没有安装）\npip install virtualenv\n\n# 创建虚拟环境\nvirtualenv venv\n\n# 激活虚拟环境\n# Linux/macOS:\nsource venv/bin/activate\n# Windows:\n.\\venv\\Scripts\\activate\n```\n\n### 2. 项目结构\n\n推荐的项目结构如下：\n\n```\nmy_project/\n├── venv/\n├── requirements.in\n├── requirements.txt\n├── requirements-dev.in   # 可选：开发环境依赖\n├── requirements-dev.txt  # 可选：开发环境依赖锁定文件\n└── src/\n```\n\n## pip-tools 的安装与使用\n\n### 1. 安装 pip-tools\n\n```bash\npip install pip-tools\n```\n\n### 2. 创建依赖文件\n\n创建 `requirements.in` 文件，列出直接依赖：\n\n```bash\n# requirements.in\nflask\npython-dotenv\nopenai\nmarkdown-it-py\nfairy-doc[cpu]\n```\n> 注意, 此处不同的依赖包必须分行呈现.\n\n\n### 3. 生成锁定文件\n\n```bash\n# 生成 requirements.txt\npip-compile requirements.in\n\n# 如果有开发依赖\npip-compile requirements-dev.in\n```\n\n生成的 `requirements.txt` 示例：\n\n```bash\n#\n# This file is autogenerated by pip-compile\n# To update, run:\n#\n#    pip-compile requirements.in\n#\nflask==2.3.3\n  --hash=sha256:...\npython-dotenv==1.0.0\n  --hash=sha256:...\nopenai==0.27.8\n  --hash=sha256:...\nmarkdown-it-py==3.0.0\n  --hash=sha256:...\nfairy-doc[cpu]==1.2.0\n  --hash=sha256:...\n```\n\n### 4. 安装依赖\n\n```bash\n# 安装所有依赖\npip-sync requirements.txt\n\n# 如果同时需要开发依赖\npip-sync requirements.txt requirements-dev.txt\n```\n\n## 最佳实践\n\n### 1. 版本控制\n\n```bash\n# requirements.in\nflask>=2.0.0,<3.0.0  # 指定版本范围\npython-dotenv~=1.0.0  # 允许补丁版本更新\nopenai==0.27.8       # 锁定具体版本\n```\n\n### 2. 依赖分组\n\n```bash\n# requirements-dev.in\n-r requirements.in    # 包含基础依赖\npytest               # 测试框架\nblack                # 代码格式化\nflake8               # 代码检查\n```\n\n### 3. 更新依赖\n\n```bash\n# 更新单个包\npip-compile --upgrade-package flask requirements.in\n\n# 更新所有包\npip-compile --upgrade requirements.in\n```\n\n## 常见问题解决\n\n### 1. 依赖冲突\n\n如果遇到依赖冲突，可以：\n- 检查 `requirements.in` 中的版本约束\n- 使用 `pip-compile --verbose` 查看详细信息\n- 考虑降级某些包的版本\n\n### 2. Hash 不匹配\n\n如果出现 hash 不匹配：\n```bash\npip-compile --generate-hashes requirements.in\n```\n\n### 3. 环境不一致\n\n确保团队成员：\n- 使用相同的 Python 版本\n- 严格执行 `pip-sync`\n- 不要手动 `pip install`\n\n## 高级用法\n\n### 1. 自定义输出格式\n\n```bash\n# 生成带注释的依赖文件\npip-compile --annotate requirements.in\n\n# 生成带 hashes 的依赖文件\npip-compile --generate-hashes requirements.in\n```\n\n### 2. 多环境配置\n\n```bash\n# 开发环境\npip-compile requirements-dev.in\n\n# 生产环境\npip-compile requirements.in --output-file requirements-prod.txt\n```\n\n### 3. 依赖更新策略\n\n```bash\n# 只更新安全相关的包\npip-compile --upgrade-package flask --upgrade-package \"requests>=2.31.0\"\n\n# 保持现有版本\npip-compile --no-upgrade requirements.in\n```\n\n## 结语\n\n通过使用 `pip-tools`，我们可以：\n- 实现精确的依赖版本控制\n- 简化依赖管理流程\n- 确保团队环境一致性\n- 提高项目的可维护性\n\n希望这篇指南能帮助你更好地管理 Python 项目的依赖！\n<img src = \"/img/great.jpg\" width = \"70%\">\n## 参考资料\n\n- [pip-tools 官方文档](https://github.com/jazzband/pip-tools)\n- [Python Packaging User Guide](https://packaging.python.org/)\n- [PEP 508 – Dependency specification for Python Software Packages](https://www.python.org/dev/peps/pep-0508/)\n","source":"_posts/其他/pip-tools.md","raw":"---\ntitle: pip-tools\ndate: 2025-01-15 22:29:31\ntags: \n- python\n- 环境配置\ncategories: 通用技能\nexcerpt: 常常在python的虚拟环境中碰到依赖包版本冲突的问题吗? 试试pip-tools这个工具吧!\n---\n\n![pip-tools](https://img.shields.io/badge/pip--tools-6.13.0-green.svg)\n\n在 Python 项目开发中，依赖管理是一个常见但棘手的问题。特别是在团队协作时，不同成员的环境可能存在细微差异，导致\"在我这里能运行\"的经典问题。\n<img src=\"/img/2025-01-16-23-58-21.png\" width=\"70%\" />\n针对上述问题, 本文将详细介绍如何使用 `pip-tools`，实现精确的依赖版本控制。\n\n\n## 为什么需要 pip-tools？\n\n传统的依赖管理方式存在以下问题：\n- `requirements.txt` 手动维护容易出错\n- 间接依赖版本难以控制\n- 团队成员环境不一致\n- 依赖更新流程繁琐\n\n`pip-tools` 通过以下特性解决这些问题：\n- 自动生成完整的依赖关系\n- 锁定所有依赖的具体版本\n- 支持开发环境和生产环境分离\n- 提供简单的依赖更新机制\n\n## 环境准备\n\n### 1. 创建虚拟环境\n\n首先，我们需要创建一个独立的 Python 虚拟环境：\n\n```bash\n# 安装 virtualenv（如果还没有安装）\npip install virtualenv\n\n# 创建虚拟环境\nvirtualenv venv\n\n# 激活虚拟环境\n# Linux/macOS:\nsource venv/bin/activate\n# Windows:\n.\\venv\\Scripts\\activate\n```\n\n### 2. 项目结构\n\n推荐的项目结构如下：\n\n```\nmy_project/\n├── venv/\n├── requirements.in\n├── requirements.txt\n├── requirements-dev.in   # 可选：开发环境依赖\n├── requirements-dev.txt  # 可选：开发环境依赖锁定文件\n└── src/\n```\n\n## pip-tools 的安装与使用\n\n### 1. 安装 pip-tools\n\n```bash\npip install pip-tools\n```\n\n### 2. 创建依赖文件\n\n创建 `requirements.in` 文件，列出直接依赖：\n\n```bash\n# requirements.in\nflask\npython-dotenv\nopenai\nmarkdown-it-py\nfairy-doc[cpu]\n```\n> 注意, 此处不同的依赖包必须分行呈现.\n\n\n### 3. 生成锁定文件\n\n```bash\n# 生成 requirements.txt\npip-compile requirements.in\n\n# 如果有开发依赖\npip-compile requirements-dev.in\n```\n\n生成的 `requirements.txt` 示例：\n\n```bash\n#\n# This file is autogenerated by pip-compile\n# To update, run:\n#\n#    pip-compile requirements.in\n#\nflask==2.3.3\n  --hash=sha256:...\npython-dotenv==1.0.0\n  --hash=sha256:...\nopenai==0.27.8\n  --hash=sha256:...\nmarkdown-it-py==3.0.0\n  --hash=sha256:...\nfairy-doc[cpu]==1.2.0\n  --hash=sha256:...\n```\n\n### 4. 安装依赖\n\n```bash\n# 安装所有依赖\npip-sync requirements.txt\n\n# 如果同时需要开发依赖\npip-sync requirements.txt requirements-dev.txt\n```\n\n## 最佳实践\n\n### 1. 版本控制\n\n```bash\n# requirements.in\nflask>=2.0.0,<3.0.0  # 指定版本范围\npython-dotenv~=1.0.0  # 允许补丁版本更新\nopenai==0.27.8       # 锁定具体版本\n```\n\n### 2. 依赖分组\n\n```bash\n# requirements-dev.in\n-r requirements.in    # 包含基础依赖\npytest               # 测试框架\nblack                # 代码格式化\nflake8               # 代码检查\n```\n\n### 3. 更新依赖\n\n```bash\n# 更新单个包\npip-compile --upgrade-package flask requirements.in\n\n# 更新所有包\npip-compile --upgrade requirements.in\n```\n\n## 常见问题解决\n\n### 1. 依赖冲突\n\n如果遇到依赖冲突，可以：\n- 检查 `requirements.in` 中的版本约束\n- 使用 `pip-compile --verbose` 查看详细信息\n- 考虑降级某些包的版本\n\n### 2. Hash 不匹配\n\n如果出现 hash 不匹配：\n```bash\npip-compile --generate-hashes requirements.in\n```\n\n### 3. 环境不一致\n\n确保团队成员：\n- 使用相同的 Python 版本\n- 严格执行 `pip-sync`\n- 不要手动 `pip install`\n\n## 高级用法\n\n### 1. 自定义输出格式\n\n```bash\n# 生成带注释的依赖文件\npip-compile --annotate requirements.in\n\n# 生成带 hashes 的依赖文件\npip-compile --generate-hashes requirements.in\n```\n\n### 2. 多环境配置\n\n```bash\n# 开发环境\npip-compile requirements-dev.in\n\n# 生产环境\npip-compile requirements.in --output-file requirements-prod.txt\n```\n\n### 3. 依赖更新策略\n\n```bash\n# 只更新安全相关的包\npip-compile --upgrade-package flask --upgrade-package \"requests>=2.31.0\"\n\n# 保持现有版本\npip-compile --no-upgrade requirements.in\n```\n\n## 结语\n\n通过使用 `pip-tools`，我们可以：\n- 实现精确的依赖版本控制\n- 简化依赖管理流程\n- 确保团队环境一致性\n- 提高项目的可维护性\n\n希望这篇指南能帮助你更好地管理 Python 项目的依赖！\n<img src = \"/img/great.jpg\" width = \"70%\">\n## 参考资料\n\n- [pip-tools 官方文档](https://github.com/jazzband/pip-tools)\n- [Python Packaging User Guide](https://packaging.python.org/)\n- [PEP 508 – Dependency specification for Python Software Packages](https://www.python.org/dev/peps/pep-0508/)\n","slug":"其他/pip-tools","published":1,"updated":"2025-05-10T02:34:11.107Z","comments":1,"layout":"post","photos":[],"_id":"cmcbm7pqc000ie2qgd52o421x","content":"<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://img.shields.io/badge/pip--tools-6.13.0-green.svg\"\n                      alt=\"pip-tools\"\n                ></p>\n<p>在 Python 项目开发中，依赖管理是一个常见但棘手的问题。特别是在团队协作时，不同成员的环境可能存在细微差异，导致”在我这里能运行”的经典问题。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/img/2025-01-16-23-58-21.png\"\n                      width=\"70%\" \n                ><br>针对上述问题, 本文将详细介绍如何使用 <code>pip-tools</code>，实现精确的依赖版本控制。</p>\n<h2 id=\"为什么需要-pip-tools？\"><a href=\"#为什么需要-pip-tools？\" class=\"headerlink\" title=\"为什么需要 pip-tools？\"></a>为什么需要 pip-tools？</h2><p>传统的依赖管理方式存在以下问题：</p>\n<ul>\n<li><code>requirements.txt</code> 手动维护容易出错</li>\n<li>间接依赖版本难以控制</li>\n<li>团队成员环境不一致</li>\n<li>依赖更新流程繁琐</li>\n</ul>\n<p><code>pip-tools</code> 通过以下特性解决这些问题：</p>\n<ul>\n<li>自动生成完整的依赖关系</li>\n<li>锁定所有依赖的具体版本</li>\n<li>支持开发环境和生产环境分离</li>\n<li>提供简单的依赖更新机制</li>\n</ul>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><h3 id=\"1-创建虚拟环境\"><a href=\"#1-创建虚拟环境\" class=\"headerlink\" title=\"1. 创建虚拟环境\"></a>1. 创建虚拟环境</h3><p>首先，我们需要创建一个独立的 Python 虚拟环境：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 virtualenv（如果还没有安装）</span></span><br><span class=\"line\">pip install virtualenv</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建虚拟环境</span></span><br><span class=\"line\">virtualenv venv</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 激活虚拟环境</span></span><br><span class=\"line\"><span class=\"comment\"># Linux/macOS:</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> venv/bin/activate</span><br><span class=\"line\"><span class=\"comment\"># Windows:</span></span><br><span class=\"line\">.\\venv\\Scripts\\activate</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"2-项目结构\"><a href=\"#2-项目结构\" class=\"headerlink\" title=\"2. 项目结构\"></a>2. 项目结构</h3><p>推荐的项目结构如下：</p>\n<div class=\"code-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_project/</span><br><span class=\"line\">├── venv/</span><br><span class=\"line\">├── requirements.in</span><br><span class=\"line\">├── requirements.txt</span><br><span class=\"line\">├── requirements-dev.in   # 可选：开发环境依赖</span><br><span class=\"line\">├── requirements-dev.txt  # 可选：开发环境依赖锁定文件</span><br><span class=\"line\">└── src/</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"pip-tools-的安装与使用\"><a href=\"#pip-tools-的安装与使用\" class=\"headerlink\" title=\"pip-tools 的安装与使用\"></a>pip-tools 的安装与使用</h2><h3 id=\"1-安装-pip-tools\"><a href=\"#1-安装-pip-tools\" class=\"headerlink\" title=\"1. 安装 pip-tools\"></a>1. 安装 pip-tools</h3><div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pip-tools</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"2-创建依赖文件\"><a href=\"#2-创建依赖文件\" class=\"headerlink\" title=\"2. 创建依赖文件\"></a>2. 创建依赖文件</h3><p>创建 <code>requirements.in</code> 文件，列出直接依赖：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># requirements.in</span></span><br><span class=\"line\">flask</span><br><span class=\"line\">python-dotenv</span><br><span class=\"line\">openai</span><br><span class=\"line\">markdown-it-py</span><br><span class=\"line\">fairy-doc[cpu]</span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p>注意, 此处不同的依赖包必须分行呈现.</p>\n</blockquote>\n<h3 id=\"3-生成锁定文件\"><a href=\"#3-生成锁定文件\" class=\"headerlink\" title=\"3. 生成锁定文件\"></a>3. 生成锁定文件</h3><div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成 requirements.txt</span></span><br><span class=\"line\">pip-compile requirements.in</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果有开发依赖</span></span><br><span class=\"line\">pip-compile requirements-dev.in</span><br></pre></td></tr></table></figure></div>\n\n<p>生成的 <code>requirements.txt</code> 示例：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This file is autogenerated by pip-compile</span></span><br><span class=\"line\"><span class=\"comment\"># To update, run:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#    pip-compile requirements.in</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">flask==2.3.3</span><br><span class=\"line\">  --<span class=\"built_in\">hash</span>=sha256:...</span><br><span class=\"line\">python-dotenv==1.0.0</span><br><span class=\"line\">  --<span class=\"built_in\">hash</span>=sha256:...</span><br><span class=\"line\">openai==0.27.8</span><br><span class=\"line\">  --<span class=\"built_in\">hash</span>=sha256:...</span><br><span class=\"line\">markdown-it-py==3.0.0</span><br><span class=\"line\">  --<span class=\"built_in\">hash</span>=sha256:...</span><br><span class=\"line\">fairy-doc[cpu]==1.2.0</span><br><span class=\"line\">  --<span class=\"built_in\">hash</span>=sha256:...</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"4-安装依赖\"><a href=\"#4-安装依赖\" class=\"headerlink\" title=\"4. 安装依赖\"></a>4. 安装依赖</h3><div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装所有依赖</span></span><br><span class=\"line\">pip-sync requirements.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果同时需要开发依赖</span></span><br><span class=\"line\">pip-sync requirements.txt requirements-dev.txt</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h2><h3 id=\"1-版本控制\"><a href=\"#1-版本控制\" class=\"headerlink\" title=\"1. 版本控制\"></a>1. 版本控制</h3><div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># requirements.in</span></span><br><span class=\"line\">flask&gt;=2.0.0,&lt;3.0.0  <span class=\"comment\"># 指定版本范围</span></span><br><span class=\"line\">python-dotenv~=1.0.0  <span class=\"comment\"># 允许补丁版本更新</span></span><br><span class=\"line\">openai==0.27.8       <span class=\"comment\"># 锁定具体版本</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"2-依赖分组\"><a href=\"#2-依赖分组\" class=\"headerlink\" title=\"2. 依赖分组\"></a>2. 依赖分组</h3><div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># requirements-dev.in</span></span><br><span class=\"line\">-r requirements.in    <span class=\"comment\"># 包含基础依赖</span></span><br><span class=\"line\">pytest               <span class=\"comment\"># 测试框架</span></span><br><span class=\"line\">black                <span class=\"comment\"># 代码格式化</span></span><br><span class=\"line\">flake8               <span class=\"comment\"># 代码检查</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"3-更新依赖\"><a href=\"#3-更新依赖\" class=\"headerlink\" title=\"3. 更新依赖\"></a>3. 更新依赖</h3><div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 更新单个包</span></span><br><span class=\"line\">pip-compile --upgrade-package flask requirements.in</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新所有包</span></span><br><span class=\"line\">pip-compile --upgrade requirements.in</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"常见问题解决\"><a href=\"#常见问题解决\" class=\"headerlink\" title=\"常见问题解决\"></a>常见问题解决</h2><h3 id=\"1-依赖冲突\"><a href=\"#1-依赖冲突\" class=\"headerlink\" title=\"1. 依赖冲突\"></a>1. 依赖冲突</h3><p>如果遇到依赖冲突，可以：</p>\n<ul>\n<li>检查 <code>requirements.in</code> 中的版本约束</li>\n<li>使用 <code>pip-compile --verbose</code> 查看详细信息</li>\n<li>考虑降级某些包的版本</li>\n</ul>\n<h3 id=\"2-Hash-不匹配\"><a href=\"#2-Hash-不匹配\" class=\"headerlink\" title=\"2. Hash 不匹配\"></a>2. Hash 不匹配</h3><p>如果出现 hash 不匹配：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip-compile --generate-hashes requirements.in</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"3-环境不一致\"><a href=\"#3-环境不一致\" class=\"headerlink\" title=\"3. 环境不一致\"></a>3. 环境不一致</h3><p>确保团队成员：</p>\n<ul>\n<li>使用相同的 Python 版本</li>\n<li>严格执行 <code>pip-sync</code></li>\n<li>不要手动 <code>pip install</code></li>\n</ul>\n<h2 id=\"高级用法\"><a href=\"#高级用法\" class=\"headerlink\" title=\"高级用法\"></a>高级用法</h2><h3 id=\"1-自定义输出格式\"><a href=\"#1-自定义输出格式\" class=\"headerlink\" title=\"1. 自定义输出格式\"></a>1. 自定义输出格式</h3><div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成带注释的依赖文件</span></span><br><span class=\"line\">pip-compile --annotate requirements.in</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成带 hashes 的依赖文件</span></span><br><span class=\"line\">pip-compile --generate-hashes requirements.in</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"2-多环境配置\"><a href=\"#2-多环境配置\" class=\"headerlink\" title=\"2. 多环境配置\"></a>2. 多环境配置</h3><div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 开发环境</span></span><br><span class=\"line\">pip-compile requirements-dev.in</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生产环境</span></span><br><span class=\"line\">pip-compile requirements.in --output-file requirements-prod.txt</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"3-依赖更新策略\"><a href=\"#3-依赖更新策略\" class=\"headerlink\" title=\"3. 依赖更新策略\"></a>3. 依赖更新策略</h3><div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 只更新安全相关的包</span></span><br><span class=\"line\">pip-compile --upgrade-package flask --upgrade-package <span class=\"string\">&quot;requests&gt;=2.31.0&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 保持现有版本</span></span><br><span class=\"line\">pip-compile --no-upgrade requirements.in</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>通过使用 <code>pip-tools</code>，我们可以：</p>\n<ul>\n<li>实现精确的依赖版本控制</li>\n<li>简化依赖管理流程</li>\n<li>确保团队环境一致性</li>\n<li>提高项目的可维护性</li>\n</ul>\n<p>希望这篇指南能帮助你更好地管理 Python 项目的依赖！<br><img src = \"/img/great.jpg\" width = \"70%\"></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a class=\"link\"   href=\"https://github.com/jazzband/pip-tools\" >pip-tools 官方文档<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n<li><a class=\"link\"   href=\"https://packaging.python.org/\" >Python Packaging User Guide<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n<li><a class=\"link\"   href=\"https://www.python.org/dev/peps/pep-0508/\" >PEP 508 – Dependency specification for Python Software Packages<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n</ul>\n","more":"<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://img.shields.io/badge/pip--tools-6.13.0-green.svg\"\n                      alt=\"pip-tools\"\n                ></p>\n<p>在 Python 项目开发中，依赖管理是一个常见但棘手的问题。特别是在团队协作时，不同成员的环境可能存在细微差异，导致”在我这里能运行”的经典问题。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/img/2025-01-16-23-58-21.png\"\n                      width=\"70%\" \n                ><br>针对上述问题, 本文将详细介绍如何使用 <code>pip-tools</code>，实现精确的依赖版本控制。</p>\n<h2 id=\"为什么需要-pip-tools？\"><a href=\"#为什么需要-pip-tools？\" class=\"headerlink\" title=\"为什么需要 pip-tools？\"></a>为什么需要 pip-tools？</h2><p>传统的依赖管理方式存在以下问题：</p>\n<ul>\n<li><code>requirements.txt</code> 手动维护容易出错</li>\n<li>间接依赖版本难以控制</li>\n<li>团队成员环境不一致</li>\n<li>依赖更新流程繁琐</li>\n</ul>\n<p><code>pip-tools</code> 通过以下特性解决这些问题：</p>\n<ul>\n<li>自动生成完整的依赖关系</li>\n<li>锁定所有依赖的具体版本</li>\n<li>支持开发环境和生产环境分离</li>\n<li>提供简单的依赖更新机制</li>\n</ul>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><h3 id=\"1-创建虚拟环境\"><a href=\"#1-创建虚拟环境\" class=\"headerlink\" title=\"1. 创建虚拟环境\"></a>1. 创建虚拟环境</h3><p>首先，我们需要创建一个独立的 Python 虚拟环境：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 virtualenv（如果还没有安装）</span></span><br><span class=\"line\">pip install virtualenv</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建虚拟环境</span></span><br><span class=\"line\">virtualenv venv</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 激活虚拟环境</span></span><br><span class=\"line\"><span class=\"comment\"># Linux/macOS:</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> venv/bin/activate</span><br><span class=\"line\"><span class=\"comment\"># Windows:</span></span><br><span class=\"line\">.\\venv\\Scripts\\activate</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-项目结构\"><a href=\"#2-项目结构\" class=\"headerlink\" title=\"2. 项目结构\"></a>2. 项目结构</h3><p>推荐的项目结构如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_project/</span><br><span class=\"line\">├── venv/</span><br><span class=\"line\">├── requirements.in</span><br><span class=\"line\">├── requirements.txt</span><br><span class=\"line\">├── requirements-dev.in   # 可选：开发环境依赖</span><br><span class=\"line\">├── requirements-dev.txt  # 可选：开发环境依赖锁定文件</span><br><span class=\"line\">└── src/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"pip-tools-的安装与使用\"><a href=\"#pip-tools-的安装与使用\" class=\"headerlink\" title=\"pip-tools 的安装与使用\"></a>pip-tools 的安装与使用</h2><h3 id=\"1-安装-pip-tools\"><a href=\"#1-安装-pip-tools\" class=\"headerlink\" title=\"1. 安装 pip-tools\"></a>1. 安装 pip-tools</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pip-tools</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-创建依赖文件\"><a href=\"#2-创建依赖文件\" class=\"headerlink\" title=\"2. 创建依赖文件\"></a>2. 创建依赖文件</h3><p>创建 <code>requirements.in</code> 文件，列出直接依赖：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># requirements.in</span></span><br><span class=\"line\">flask</span><br><span class=\"line\">python-dotenv</span><br><span class=\"line\">openai</span><br><span class=\"line\">markdown-it-py</span><br><span class=\"line\">fairy-doc[cpu]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意, 此处不同的依赖包必须分行呈现.</p>\n</blockquote>\n<h3 id=\"3-生成锁定文件\"><a href=\"#3-生成锁定文件\" class=\"headerlink\" title=\"3. 生成锁定文件\"></a>3. 生成锁定文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成 requirements.txt</span></span><br><span class=\"line\">pip-compile requirements.in</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果有开发依赖</span></span><br><span class=\"line\">pip-compile requirements-dev.in</span><br></pre></td></tr></table></figure>\n\n<p>生成的 <code>requirements.txt</code> 示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This file is autogenerated by pip-compile</span></span><br><span class=\"line\"><span class=\"comment\"># To update, run:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#    pip-compile requirements.in</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">flask==2.3.3</span><br><span class=\"line\">  --<span class=\"built_in\">hash</span>=sha256:...</span><br><span class=\"line\">python-dotenv==1.0.0</span><br><span class=\"line\">  --<span class=\"built_in\">hash</span>=sha256:...</span><br><span class=\"line\">openai==0.27.8</span><br><span class=\"line\">  --<span class=\"built_in\">hash</span>=sha256:...</span><br><span class=\"line\">markdown-it-py==3.0.0</span><br><span class=\"line\">  --<span class=\"built_in\">hash</span>=sha256:...</span><br><span class=\"line\">fairy-doc[cpu]==1.2.0</span><br><span class=\"line\">  --<span class=\"built_in\">hash</span>=sha256:...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-安装依赖\"><a href=\"#4-安装依赖\" class=\"headerlink\" title=\"4. 安装依赖\"></a>4. 安装依赖</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装所有依赖</span></span><br><span class=\"line\">pip-sync requirements.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果同时需要开发依赖</span></span><br><span class=\"line\">pip-sync requirements.txt requirements-dev.txt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h2><h3 id=\"1-版本控制\"><a href=\"#1-版本控制\" class=\"headerlink\" title=\"1. 版本控制\"></a>1. 版本控制</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># requirements.in</span></span><br><span class=\"line\">flask&gt;=2.0.0,&lt;3.0.0  <span class=\"comment\"># 指定版本范围</span></span><br><span class=\"line\">python-dotenv~=1.0.0  <span class=\"comment\"># 允许补丁版本更新</span></span><br><span class=\"line\">openai==0.27.8       <span class=\"comment\"># 锁定具体版本</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-依赖分组\"><a href=\"#2-依赖分组\" class=\"headerlink\" title=\"2. 依赖分组\"></a>2. 依赖分组</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># requirements-dev.in</span></span><br><span class=\"line\">-r requirements.in    <span class=\"comment\"># 包含基础依赖</span></span><br><span class=\"line\">pytest               <span class=\"comment\"># 测试框架</span></span><br><span class=\"line\">black                <span class=\"comment\"># 代码格式化</span></span><br><span class=\"line\">flake8               <span class=\"comment\"># 代码检查</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-更新依赖\"><a href=\"#3-更新依赖\" class=\"headerlink\" title=\"3. 更新依赖\"></a>3. 更新依赖</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 更新单个包</span></span><br><span class=\"line\">pip-compile --upgrade-package flask requirements.in</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新所有包</span></span><br><span class=\"line\">pip-compile --upgrade requirements.in</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常见问题解决\"><a href=\"#常见问题解决\" class=\"headerlink\" title=\"常见问题解决\"></a>常见问题解决</h2><h3 id=\"1-依赖冲突\"><a href=\"#1-依赖冲突\" class=\"headerlink\" title=\"1. 依赖冲突\"></a>1. 依赖冲突</h3><p>如果遇到依赖冲突，可以：</p>\n<ul>\n<li>检查 <code>requirements.in</code> 中的版本约束</li>\n<li>使用 <code>pip-compile --verbose</code> 查看详细信息</li>\n<li>考虑降级某些包的版本</li>\n</ul>\n<h3 id=\"2-Hash-不匹配\"><a href=\"#2-Hash-不匹配\" class=\"headerlink\" title=\"2. Hash 不匹配\"></a>2. Hash 不匹配</h3><p>如果出现 hash 不匹配：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip-compile --generate-hashes requirements.in</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-环境不一致\"><a href=\"#3-环境不一致\" class=\"headerlink\" title=\"3. 环境不一致\"></a>3. 环境不一致</h3><p>确保团队成员：</p>\n<ul>\n<li>使用相同的 Python 版本</li>\n<li>严格执行 <code>pip-sync</code></li>\n<li>不要手动 <code>pip install</code></li>\n</ul>\n<h2 id=\"高级用法\"><a href=\"#高级用法\" class=\"headerlink\" title=\"高级用法\"></a>高级用法</h2><h3 id=\"1-自定义输出格式\"><a href=\"#1-自定义输出格式\" class=\"headerlink\" title=\"1. 自定义输出格式\"></a>1. 自定义输出格式</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成带注释的依赖文件</span></span><br><span class=\"line\">pip-compile --annotate requirements.in</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成带 hashes 的依赖文件</span></span><br><span class=\"line\">pip-compile --generate-hashes requirements.in</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-多环境配置\"><a href=\"#2-多环境配置\" class=\"headerlink\" title=\"2. 多环境配置\"></a>2. 多环境配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 开发环境</span></span><br><span class=\"line\">pip-compile requirements-dev.in</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生产环境</span></span><br><span class=\"line\">pip-compile requirements.in --output-file requirements-prod.txt</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-依赖更新策略\"><a href=\"#3-依赖更新策略\" class=\"headerlink\" title=\"3. 依赖更新策略\"></a>3. 依赖更新策略</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 只更新安全相关的包</span></span><br><span class=\"line\">pip-compile --upgrade-package flask --upgrade-package <span class=\"string\">&quot;requests&gt;=2.31.0&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 保持现有版本</span></span><br><span class=\"line\">pip-compile --no-upgrade requirements.in</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>通过使用 <code>pip-tools</code>，我们可以：</p>\n<ul>\n<li>实现精确的依赖版本控制</li>\n<li>简化依赖管理流程</li>\n<li>确保团队环境一致性</li>\n<li>提高项目的可维护性</li>\n</ul>\n<p>希望这篇指南能帮助你更好地管理 Python 项目的依赖！<br><img src = \"/img/great.jpg\" width = \"70%\"></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a class=\"link\"   href=\"https://github.com/jazzband/pip-tools\" >pip-tools 官方文档<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n<li><a class=\"link\"   href=\"https://packaging.python.org/\" >Python Packaging User Guide<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n<li><a class=\"link\"   href=\"https://www.python.org/dev/peps/pep-0508/\" >PEP 508 – Dependency specification for Python Software Packages<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n</ul>\n","_processedHighlight":true},{"title":"React 主题切换","date":"2025-01-23T02:06:34.000Z","excerpt":"通过CSS变量和上下文管理, 以React框架为例介绍主题的变色设置.","mathjsx":true,"_content":"$\\underline{主题切换}$  即通过点击某个组件来切换背景与文字的颜色等 CSS 属性。这要求我们的组件能够控制某个\"环境变量\", 且`index.css`中的 CSS 应随这个\"环境变量\"而改变。\n\n要实现这个需求,我们需要解决以下几个问题：\n\n1. 如何定义和管理这个\"环境变量\"？\n2. 组件如何控制这个变量？\n3. CSS 如何响应变量的变化？\n\n这些问题的解决方案涉及到几个重要的基础概念,让我们逐一了解。\n\n## 基础知识\n### Context 的创建和使用\n\n**Context** 提供了一种在组件树中共享数据的方式,无需手动在每一层传递 props。\n\n```tsx\n// 创建 Context\nconst ThemeContext = createContext<ThemeType | undefined>(undefined);\n\n// 提供 Context\nconst ThemeProvider = ({ children }) => {\n  const [theme, setTheme] = useState('light');\n  \n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\n// 使用 Context\nconst ChildComponent = () => {\n  const { theme } = useContext(ThemeContext);\n  return <div>Current theme: {theme}</div>;\n};\n```\n因此, 我们可以在`src/context/`目录下创建一个`ThemeContext`来定义和管理相关上下文.\n- 在其中利用`useState`定义主题反转的函数;\n- 在点击按钮组件中使用上述的函数,\n\n### CSS 变量\n\nCSS 变量(也称为自定义属性)允许我们定义可重用的值：\n\n```css\n/* 定义变量 */\n:root {\n  --primary-color: #007bff;\n}\n\n/* 使用变量 */\n.button {\n  background-color: var(--primary-color);\n}\n```\n1. 为了区分CSS的变量与常量, `--xx-y`的命名格式是CSS变量的规范;\n2. 通过`var(<c--xx-y>)`的形式使用CSS变量.\n\n### HTML data-* 属性\n\n`document.documentElement.setAttribute('data-theme', theme)` 的作用是在 HTML 根元素上设置一个自定义数据属性：\n\n```js\n// JavaScript 设置\ndocument.documentElement.setAttribute('data-theme', 'dark');\n\n// 结果的 HTML\n<html data-theme=\"dark\">\n  ...\n</html>\n\n// 对应的 CSS\n[data-theme='dark'] {\n  --bg-color: #141414;\n}\n```\n\n## 主题切换实现\n\n### 主题变量设计\n\n首先设计主题相关的 CSS 变量：\n\n```css\n:root {\n  /* Light theme variables */\n  --bg-color: #ffffff;\n  --text-color: #000000;\n  --sidebar-bg: #f0f2f5;\n  --border-color: #e5e2e2;\n  --shadow-color: rgba(0, 0, 0, 0.1);\n}\n\n[data-theme='dark'] {\n  --bg-color: #141414;\n  --text-color: #ffffff;\n  --sidebar-bg: #1f1f1f;\n  --border-color: #434343;\n  --shadow-color: rgba(0, 0, 0, 0.3);\n}\n```\n> 可根据实际需要增减CSS变量.\n\n### 主题状态管理\n\n创建主题 Context 进行状态管理：\n\n```typescript\nimport React, { createContext, useState, useContext, useEffect } from 'react';\n\ntype Theme = 'light' | 'dark';\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [theme, setTheme] = useState<Theme>(() => {\n    const savedTheme = localStorage.getItem('theme');\n    return (savedTheme as Theme) || 'light';\n  });\n\n  useEffect(() => {\n    document.documentElement.setAttribute('data-theme', theme);\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prev => prev === 'light' ? 'dark' : 'light');\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n```\n\n<br>\n\n在设置上下文组件之后, 我们需要明确其作用的范围. 我们希望主题变色需要在全局范围内生效, 以react框架为例:\n```html\n<!-- App.tsx -->\nimport { ThemeProvider } from './context/ThemeContext';\n\nfunction App(){\n    ...\n    return (\n        <ThemeProvider>\n            <div className = \"App\">\n                ...\n            </div>\n        </ThemeProvider>\n    )\n}\n\n```\n### 主题切换组件\n\n实现主题切换按钮：\n\n```typescript\nimport React from 'react';\nimport { Tooltip } from 'antd';\nimport { useTheme } from '../context/ThemeContext';\nimport { BsSun, BsMoonStars } from 'react-icons/bs';\nimport styles from './ThemeToggle.module.css';\n\nconst ThemeToggle: React.FC = () => {\n  const { theme, toggleTheme } = useTheme();\n\n  return (\n    <Tooltip title={theme === 'light' ? '切换到暗色模式' : '切换到亮色模式'} placement=\"right\">\n      <button \n        className={styles.themeToggle} \n        onClick={toggleTheme}\n        aria-label=\"Toggle theme\"\n      >\n        {theme === 'light' ? <BsMoonStars /> : <BsSun />}\n      </button>\n    </Tooltip>\n  );\n};\n\nexport default ThemeToggle;\n```\n1. 此处使用`antd`的`Tooltip`, 用于在鼠标悬浮按钮组件时显示文字提示;\n2. `aria-label=\"Toggle theme\"` 在`<button>`内设置这个属性不是必要的, 但是可以帮助屏幕阅读器读出 \"Toggle theme“.\n\n\n### 组件样式应用\n在组件内部使用CSS变量的方式已经在 [CSS变量](#CSS-变量) 中介绍, 在此给出示例:\n```css\n.sidebar_container {\n    background-color: var(--sidebar-bg);\n    color: var(--text-color);\n}\n\n.icon_button {\n    color: var(--text-color);\n    background-color: transparent;\n}\n\n.icon_button:hover {\n    background-color: var(--sidebar-hover-color);\n}\n```\n\n<br>\n\n如果某个CSS不需要作为变量进行统一管理, 可以直接使用 **属性选择器** 进行单独设置:\n```css\n[data-theme='dark'] .icon_example{\n  --bg-color: #141414;\n}\n``` \n\n## 总结与参考\n通过以上实现,我们构建了一个完整的主题切换系统。关键点包括：\n\n1. 使用 CSS 变量管理主题样式\n2. 通过 Context API 实现状态管理\n3. 利用 data-theme 属性切换主题\n4. 本地存储保持主题持久化\n\n### 参考 🔗\n1. [React Context API](https://react.dev/reference/react/useContext)\n2. [CSS Custom Properties](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties)\n3. [HTML data-* Attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes)","source":"_posts/其他/themechange.md","raw":"---\ntitle: React 主题切换\ndate: 2025-01-23 10:06:34\ntags:\ncategories:\nexcerpt: 通过CSS变量和上下文管理, 以React框架为例介绍主题的变色设置.\nmathjsx: true\n---\n$\\underline{主题切换}$  即通过点击某个组件来切换背景与文字的颜色等 CSS 属性。这要求我们的组件能够控制某个\"环境变量\", 且`index.css`中的 CSS 应随这个\"环境变量\"而改变。\n\n要实现这个需求,我们需要解决以下几个问题：\n\n1. 如何定义和管理这个\"环境变量\"？\n2. 组件如何控制这个变量？\n3. CSS 如何响应变量的变化？\n\n这些问题的解决方案涉及到几个重要的基础概念,让我们逐一了解。\n\n## 基础知识\n### Context 的创建和使用\n\n**Context** 提供了一种在组件树中共享数据的方式,无需手动在每一层传递 props。\n\n```tsx\n// 创建 Context\nconst ThemeContext = createContext<ThemeType | undefined>(undefined);\n\n// 提供 Context\nconst ThemeProvider = ({ children }) => {\n  const [theme, setTheme] = useState('light');\n  \n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\n// 使用 Context\nconst ChildComponent = () => {\n  const { theme } = useContext(ThemeContext);\n  return <div>Current theme: {theme}</div>;\n};\n```\n因此, 我们可以在`src/context/`目录下创建一个`ThemeContext`来定义和管理相关上下文.\n- 在其中利用`useState`定义主题反转的函数;\n- 在点击按钮组件中使用上述的函数,\n\n### CSS 变量\n\nCSS 变量(也称为自定义属性)允许我们定义可重用的值：\n\n```css\n/* 定义变量 */\n:root {\n  --primary-color: #007bff;\n}\n\n/* 使用变量 */\n.button {\n  background-color: var(--primary-color);\n}\n```\n1. 为了区分CSS的变量与常量, `--xx-y`的命名格式是CSS变量的规范;\n2. 通过`var(<c--xx-y>)`的形式使用CSS变量.\n\n### HTML data-* 属性\n\n`document.documentElement.setAttribute('data-theme', theme)` 的作用是在 HTML 根元素上设置一个自定义数据属性：\n\n```js\n// JavaScript 设置\ndocument.documentElement.setAttribute('data-theme', 'dark');\n\n// 结果的 HTML\n<html data-theme=\"dark\">\n  ...\n</html>\n\n// 对应的 CSS\n[data-theme='dark'] {\n  --bg-color: #141414;\n}\n```\n\n## 主题切换实现\n\n### 主题变量设计\n\n首先设计主题相关的 CSS 变量：\n\n```css\n:root {\n  /* Light theme variables */\n  --bg-color: #ffffff;\n  --text-color: #000000;\n  --sidebar-bg: #f0f2f5;\n  --border-color: #e5e2e2;\n  --shadow-color: rgba(0, 0, 0, 0.1);\n}\n\n[data-theme='dark'] {\n  --bg-color: #141414;\n  --text-color: #ffffff;\n  --sidebar-bg: #1f1f1f;\n  --border-color: #434343;\n  --shadow-color: rgba(0, 0, 0, 0.3);\n}\n```\n> 可根据实际需要增减CSS变量.\n\n### 主题状态管理\n\n创建主题 Context 进行状态管理：\n\n```typescript\nimport React, { createContext, useState, useContext, useEffect } from 'react';\n\ntype Theme = 'light' | 'dark';\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [theme, setTheme] = useState<Theme>(() => {\n    const savedTheme = localStorage.getItem('theme');\n    return (savedTheme as Theme) || 'light';\n  });\n\n  useEffect(() => {\n    document.documentElement.setAttribute('data-theme', theme);\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prev => prev === 'light' ? 'dark' : 'light');\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n```\n\n<br>\n\n在设置上下文组件之后, 我们需要明确其作用的范围. 我们希望主题变色需要在全局范围内生效, 以react框架为例:\n```html\n<!-- App.tsx -->\nimport { ThemeProvider } from './context/ThemeContext';\n\nfunction App(){\n    ...\n    return (\n        <ThemeProvider>\n            <div className = \"App\">\n                ...\n            </div>\n        </ThemeProvider>\n    )\n}\n\n```\n### 主题切换组件\n\n实现主题切换按钮：\n\n```typescript\nimport React from 'react';\nimport { Tooltip } from 'antd';\nimport { useTheme } from '../context/ThemeContext';\nimport { BsSun, BsMoonStars } from 'react-icons/bs';\nimport styles from './ThemeToggle.module.css';\n\nconst ThemeToggle: React.FC = () => {\n  const { theme, toggleTheme } = useTheme();\n\n  return (\n    <Tooltip title={theme === 'light' ? '切换到暗色模式' : '切换到亮色模式'} placement=\"right\">\n      <button \n        className={styles.themeToggle} \n        onClick={toggleTheme}\n        aria-label=\"Toggle theme\"\n      >\n        {theme === 'light' ? <BsMoonStars /> : <BsSun />}\n      </button>\n    </Tooltip>\n  );\n};\n\nexport default ThemeToggle;\n```\n1. 此处使用`antd`的`Tooltip`, 用于在鼠标悬浮按钮组件时显示文字提示;\n2. `aria-label=\"Toggle theme\"` 在`<button>`内设置这个属性不是必要的, 但是可以帮助屏幕阅读器读出 \"Toggle theme“.\n\n\n### 组件样式应用\n在组件内部使用CSS变量的方式已经在 [CSS变量](#CSS-变量) 中介绍, 在此给出示例:\n```css\n.sidebar_container {\n    background-color: var(--sidebar-bg);\n    color: var(--text-color);\n}\n\n.icon_button {\n    color: var(--text-color);\n    background-color: transparent;\n}\n\n.icon_button:hover {\n    background-color: var(--sidebar-hover-color);\n}\n```\n\n<br>\n\n如果某个CSS不需要作为变量进行统一管理, 可以直接使用 **属性选择器** 进行单独设置:\n```css\n[data-theme='dark'] .icon_example{\n  --bg-color: #141414;\n}\n``` \n\n## 总结与参考\n通过以上实现,我们构建了一个完整的主题切换系统。关键点包括：\n\n1. 使用 CSS 变量管理主题样式\n2. 通过 Context API 实现状态管理\n3. 利用 data-theme 属性切换主题\n4. 本地存储保持主题持久化\n\n### 参考 🔗\n1. [React Context API](https://react.dev/reference/react/useContext)\n2. [CSS Custom Properties](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties)\n3. [HTML data-* Attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes)","slug":"其他/themechange","published":1,"updated":"2025-05-09T09:32:25.862Z","comments":1,"layout":"post","photos":[],"_id":"cmcbm7pqc000me2qgc65o7r5v","content":"<p>$\\underline{主题切换}$  即通过点击某个组件来切换背景与文字的颜色等 CSS 属性。这要求我们的组件能够控制某个”环境变量”, 且<code>index.css</code>中的 CSS 应随这个”环境变量”而改变。</p>\n<p>要实现这个需求,我们需要解决以下几个问题：</p>\n<ol>\n<li>如何定义和管理这个”环境变量”？</li>\n<li>组件如何控制这个变量？</li>\n<li>CSS 如何响应变量的变化？</li>\n</ol>\n<p>这些问题的解决方案涉及到几个重要的基础概念,让我们逐一了解。</p>\n<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><h3 id=\"Context-的创建和使用\"><a href=\"#Context-的创建和使用\" class=\"headerlink\" title=\"Context 的创建和使用\"></a>Context 的创建和使用</h3><p><strong>Context</strong> 提供了一种在组件树中共享数据的方式,无需手动在每一层传递 props。</p>\n<div class=\"code-container\" data-rel=\"Tsx\"><figure class=\"iseeu highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建 Context</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ThemeContext</span> = createContext&lt;<span class=\"title class_\">ThemeType</span> | <span class=\"literal\">undefined</span>&gt;(<span class=\"literal\">undefined</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 提供 Context</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">ThemeProvider</span> = (<span class=\"params\">&#123; children &#125;</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [theme, setTheme] = <span class=\"title function_\">useState</span>(<span class=\"string\">&#x27;light&#x27;</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ThemeContext.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">theme</span>, <span class=\"attr\">setTheme</span> &#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;children&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">ThemeContext.Provider</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 Context</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">ChildComponent</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; theme &#125; = <span class=\"title function_\">useContext</span>(<span class=\"title class_\">ThemeContext</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Current theme: &#123;theme&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></div>\n<p>因此, 我们可以在<code>src/context/</code>目录下创建一个<code>ThemeContext</code>来定义和管理相关上下文.</p>\n<ul>\n<li>在其中利用<code>useState</code>定义主题反转的函数;</li>\n<li>在点击按钮组件中使用上述的函数,</li>\n</ul>\n<h3 id=\"CSS-变量\"><a href=\"#CSS-变量\" class=\"headerlink\" title=\"CSS 变量\"></a>CSS 变量</h3><p>CSS 变量(也称为自定义属性)允许我们定义可重用的值：</p>\n<div class=\"code-container\" data-rel=\"Css\"><figure class=\"iseeu highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 定义变量 */</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">:root</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">--primary-color</span>: <span class=\"number\">#007bff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 使用变量 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.button</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"built_in\">var</span>(--primary-color);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<ol>\n<li>为了区分CSS的变量与常量, <code>--xx-y</code>的命名格式是CSS变量的规范;</li>\n<li>通过<code>var(&lt;c--xx-y&gt;)</code>的形式使用CSS变量.</li>\n</ol>\n<h3 id=\"HTML-data-属性\"><a href=\"#HTML-data-属性\" class=\"headerlink\" title=\"HTML data-* 属性\"></a>HTML data-* 属性</h3><p><code>document.documentElement.setAttribute(&#39;data-theme&#39;, theme)</code> 的作用是在 HTML 根元素上设置一个自定义数据属性：</p>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// JavaScript 设置</span></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">&#x27;data-theme&#x27;</span>, <span class=\"string\">&#x27;dark&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结果的 HTML</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">data-theme</span>=<span class=\"string\">&quot;dark&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  ...</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对应的 CSS</span></span><br><span class=\"line\">[data-theme=<span class=\"string\">&#x27;dark&#x27;</span>] &#123;</span><br><span class=\"line\">  --bg-<span class=\"attr\">color</span>: #<span class=\"number\">141414</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"主题切换实现\"><a href=\"#主题切换实现\" class=\"headerlink\" title=\"主题切换实现\"></a>主题切换实现</h2><h3 id=\"主题变量设计\"><a href=\"#主题变量设计\" class=\"headerlink\" title=\"主题变量设计\"></a>主题变量设计</h3><p>首先设计主题相关的 CSS 变量：</p>\n<div class=\"code-container\" data-rel=\"Css\"><figure class=\"iseeu highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* Light theme variables */</span></span><br><span class=\"line\">  <span class=\"attr\">--bg-color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">  <span class=\"attr\">--text-color</span>: <span class=\"number\">#000000</span>;</span><br><span class=\"line\">  <span class=\"attr\">--sidebar-bg</span>: <span class=\"number\">#f0f2f5</span>;</span><br><span class=\"line\">  <span class=\"attr\">--border-color</span>: <span class=\"number\">#e5e2e2</span>;</span><br><span class=\"line\">  <span class=\"attr\">--shadow-color</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-theme=<span class=\"string\">&#x27;dark&#x27;</span>]</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">--bg-color</span>: <span class=\"number\">#141414</span>;</span><br><span class=\"line\">  <span class=\"attr\">--text-color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">  <span class=\"attr\">--sidebar-bg</span>: <span class=\"number\">#1f1f1f</span>;</span><br><span class=\"line\">  <span class=\"attr\">--border-color</span>: <span class=\"number\">#434343</span>;</span><br><span class=\"line\">  <span class=\"attr\">--shadow-color</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.3</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p>可根据实际需要增减CSS变量.</p>\n</blockquote>\n<h3 id=\"主题状态管理\"><a href=\"#主题状态管理\" class=\"headerlink\" title=\"主题状态管理\"></a>主题状态管理</h3><p>创建主题 Context 进行状态管理：</p>\n<div class=\"code-container\" data-rel=\"Typescript\"><figure class=\"iseeu highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; createContext, useState, useContext, useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Theme</span> = <span class=\"string\">&#x27;light&#x27;</span> | <span class=\"string\">&#x27;dark&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ThemeContextType</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">theme</span>: <span class=\"title class_\">Theme</span>;</span><br><span class=\"line\">  <span class=\"attr\">toggleTheme</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ThemeContext</span> = createContext&lt;<span class=\"title class_\">ThemeContextType</span> | <span class=\"literal\">undefined</span>&gt;(<span class=\"literal\">undefined</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">ThemeProvider</span>: <span class=\"title class_\">React</span>.<span class=\"property\">FC</span>&lt;&#123; <span class=\"attr\">children</span>: <span class=\"title class_\">React</span>.<span class=\"property\">ReactNode</span> &#125;&gt; = <span class=\"function\">(<span class=\"params\">&#123; children &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [theme, setTheme] = useState&lt;<span class=\"title class_\">Theme</span>&gt;(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> savedTheme = <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&#x27;theme&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (savedTheme <span class=\"keyword\">as</span> <span class=\"title class_\">Theme</span>) || <span class=\"string\">&#x27;light&#x27;</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">&#x27;data-theme&#x27;</span>, theme);</span><br><span class=\"line\">    <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">&#x27;theme&#x27;</span>, theme);</span><br><span class=\"line\">  &#125;, [theme]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">toggleTheme</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setTheme</span>(<span class=\"function\"><span class=\"params\">prev</span> =&gt;</span> prev === <span class=\"string\">&#x27;light&#x27;</span> ? <span class=\"string\">&#x27;dark&#x27;</span> : <span class=\"string\">&#x27;light&#x27;</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ThemeContext.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">theme</span>, <span class=\"attr\">toggleTheme</span> &#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;children&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">ThemeContext.Provider</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">useTheme</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> context = <span class=\"title function_\">useContext</span>(<span class=\"title class_\">ThemeContext</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (context === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;useTheme must be used within a ThemeProvider&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> context;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></div>\n\n<br>\n\n<p>在设置上下文组件之后, 我们需要明确其作用的范围. 我们希望主题变色需要在全局范围内生效, 以react框架为例:</p>\n<div class=\"code-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- App.tsx --&gt;</span></span><br><span class=\"line\">import &#123; ThemeProvider &#125; from &#x27;./context/ThemeContext&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">function App()&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    return (</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ThemeProvider</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span> = <span class=\"string\">&quot;App&quot;</span>&gt;</span></span><br><span class=\"line\">                ...</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ThemeProvider</span>&gt;</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"主题切换组件\"><a href=\"#主题切换组件\" class=\"headerlink\" title=\"主题切换组件\"></a>主题切换组件</h3><p>实现主题切换按钮：</p>\n<div class=\"code-container\" data-rel=\"Typescript\"><figure class=\"iseeu highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Tooltip</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;antd&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useTheme &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../context/ThemeContext&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BsSun</span>, <span class=\"title class_\">BsMoonStars</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-icons/bs&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> styles <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./ThemeToggle.module.css&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ThemeToggle</span>: <span class=\"title class_\">React</span>.<span class=\"property\">FC</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; theme, toggleTheme &#125; = <span class=\"title function_\">useTheme</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Tooltip</span> <span class=\"attr\">title</span>=<span class=\"string\">&#123;theme</span> === <span class=\"string\">&#x27;light&#x27;</span> ? &#x27;<span class=\"attr\">切换到暗色模式</span>&#x27; <span class=\"attr\">:</span> &#x27;<span class=\"attr\">切换到亮色模式</span>&#x27;&#125; <span class=\"attr\">placement</span>=<span class=\"string\">&quot;right&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">className</span>=<span class=\"string\">&#123;styles.themeToggle&#125;</span> </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;toggleTheme&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">aria-label</span>=<span class=\"string\">&quot;Toggle theme&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;theme === &#x27;light&#x27; ? <span class=\"tag\">&lt;<span class=\"name\">BsMoonStars</span> /&gt;</span> : <span class=\"tag\">&lt;<span class=\"name\">BsSun</span> /&gt;</span>&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">Tooltip</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">ThemeToggle</span>;</span><br></pre></td></tr></table></figure></div>\n<ol>\n<li>此处使用<code>antd</code>的<code>Tooltip</code>, 用于在鼠标悬浮按钮组件时显示文字提示;</li>\n<li><code>aria-label=&quot;Toggle theme&quot;</code> 在<code>&lt;button&gt;</code>内设置这个属性不是必要的, 但是可以帮助屏幕阅读器读出 “Toggle theme“.</li>\n</ol>\n<h3 id=\"组件样式应用\"><a href=\"#组件样式应用\" class=\"headerlink\" title=\"组件样式应用\"></a>组件样式应用</h3><p>在组件内部使用CSS变量的方式已经在 <a href=\"#CSS-%E5%8F%98%E9%87%8F\">CSS变量</a> 中介绍, 在此给出示例:</p>\n<div class=\"code-container\" data-rel=\"Css\"><figure class=\"iseeu highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.sidebar_container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">var</span>(--sidebar-bg);</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--text-color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.icon_button</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--text-color);</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: transparent;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.icon_button</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">var</span>(--sidebar-hover-color);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<br>\n\n<p>如果某个CSS不需要作为变量进行统一管理, 可以直接使用 <strong>属性选择器</strong> 进行单独设置:</p>\n<div class=\"code-container\" data-rel=\"Css\"><figure class=\"iseeu highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-attr\">[data-theme=<span class=\"string\">&#x27;dark&#x27;</span>]</span> <span class=\"selector-class\">.icon_example</span>&#123;</span><br><span class=\"line\">  <span class=\"attr\">--bg-color</span>: <span class=\"number\">#141414</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"总结与参考\"><a href=\"#总结与参考\" class=\"headerlink\" title=\"总结与参考\"></a>总结与参考</h2><p>通过以上实现,我们构建了一个完整的主题切换系统。关键点包括：</p>\n<ol>\n<li>使用 CSS 变量管理主题样式</li>\n<li>通过 Context API 实现状态管理</li>\n<li>利用 data-theme 属性切换主题</li>\n<li>本地存储保持主题持久化</li>\n</ol>\n<h3 id=\"参考-🔗\"><a href=\"#参考-🔗\" class=\"headerlink\" title=\"参考 🔗\"></a>参考 🔗</h3><ol>\n<li><a class=\"link\"   href=\"https://react.dev/reference/react/useContext\" >React Context API<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n<li><a class=\"link\"   href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties\" >CSS Custom Properties<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n<li><a class=\"link\"   href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes\" >HTML data-* Attributes<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n</ol>\n","more":"<p>$\\underline{主题切换}$  即通过点击某个组件来切换背景与文字的颜色等 CSS 属性。这要求我们的组件能够控制某个”环境变量”, 且<code>index.css</code>中的 CSS 应随这个”环境变量”而改变。</p>\n<p>要实现这个需求,我们需要解决以下几个问题：</p>\n<ol>\n<li>如何定义和管理这个”环境变量”？</li>\n<li>组件如何控制这个变量？</li>\n<li>CSS 如何响应变量的变化？</li>\n</ol>\n<p>这些问题的解决方案涉及到几个重要的基础概念,让我们逐一了解。</p>\n<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><h3 id=\"Context-的创建和使用\"><a href=\"#Context-的创建和使用\" class=\"headerlink\" title=\"Context 的创建和使用\"></a>Context 的创建和使用</h3><p><strong>Context</strong> 提供了一种在组件树中共享数据的方式,无需手动在每一层传递 props。</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建 Context</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ThemeContext</span> = createContext&lt;<span class=\"title class_\">ThemeType</span> | <span class=\"literal\">undefined</span>&gt;(<span class=\"literal\">undefined</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 提供 Context</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">ThemeProvider</span> = (<span class=\"params\">&#123; children &#125;</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [theme, setTheme] = <span class=\"title function_\">useState</span>(<span class=\"string\">&#x27;light&#x27;</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ThemeContext.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">theme</span>, <span class=\"attr\">setTheme</span> &#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;children&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">ThemeContext.Provider</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 Context</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">ChildComponent</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; theme &#125; = <span class=\"title function_\">useContext</span>(<span class=\"title class_\">ThemeContext</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Current theme: &#123;theme&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>因此, 我们可以在<code>src/context/</code>目录下创建一个<code>ThemeContext</code>来定义和管理相关上下文.</p>\n<ul>\n<li>在其中利用<code>useState</code>定义主题反转的函数;</li>\n<li>在点击按钮组件中使用上述的函数,</li>\n</ul>\n<h3 id=\"CSS-变量\"><a href=\"#CSS-变量\" class=\"headerlink\" title=\"CSS 变量\"></a>CSS 变量</h3><p>CSS 变量(也称为自定义属性)允许我们定义可重用的值：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 定义变量 */</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">:root</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">--primary-color</span>: <span class=\"number\">#007bff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 使用变量 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.button</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"built_in\">var</span>(--primary-color);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>为了区分CSS的变量与常量, <code>--xx-y</code>的命名格式是CSS变量的规范;</li>\n<li>通过<code>var(&lt;c--xx-y&gt;)</code>的形式使用CSS变量.</li>\n</ol>\n<h3 id=\"HTML-data-属性\"><a href=\"#HTML-data-属性\" class=\"headerlink\" title=\"HTML data-* 属性\"></a>HTML data-* 属性</h3><p><code>document.documentElement.setAttribute(&#39;data-theme&#39;, theme)</code> 的作用是在 HTML 根元素上设置一个自定义数据属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// JavaScript 设置</span></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">&#x27;data-theme&#x27;</span>, <span class=\"string\">&#x27;dark&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结果的 HTML</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">data-theme</span>=<span class=\"string\">&quot;dark&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  ...</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对应的 CSS</span></span><br><span class=\"line\">[data-theme=<span class=\"string\">&#x27;dark&#x27;</span>] &#123;</span><br><span class=\"line\">  --bg-<span class=\"attr\">color</span>: #<span class=\"number\">141414</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"主题切换实现\"><a href=\"#主题切换实现\" class=\"headerlink\" title=\"主题切换实现\"></a>主题切换实现</h2><h3 id=\"主题变量设计\"><a href=\"#主题变量设计\" class=\"headerlink\" title=\"主题变量设计\"></a>主题变量设计</h3><p>首先设计主题相关的 CSS 变量：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* Light theme variables */</span></span><br><span class=\"line\">  <span class=\"attr\">--bg-color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">  <span class=\"attr\">--text-color</span>: <span class=\"number\">#000000</span>;</span><br><span class=\"line\">  <span class=\"attr\">--sidebar-bg</span>: <span class=\"number\">#f0f2f5</span>;</span><br><span class=\"line\">  <span class=\"attr\">--border-color</span>: <span class=\"number\">#e5e2e2</span>;</span><br><span class=\"line\">  <span class=\"attr\">--shadow-color</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-theme=<span class=\"string\">&#x27;dark&#x27;</span>]</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">--bg-color</span>: <span class=\"number\">#141414</span>;</span><br><span class=\"line\">  <span class=\"attr\">--text-color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">  <span class=\"attr\">--sidebar-bg</span>: <span class=\"number\">#1f1f1f</span>;</span><br><span class=\"line\">  <span class=\"attr\">--border-color</span>: <span class=\"number\">#434343</span>;</span><br><span class=\"line\">  <span class=\"attr\">--shadow-color</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.3</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>可根据实际需要增减CSS变量.</p>\n</blockquote>\n<h3 id=\"主题状态管理\"><a href=\"#主题状态管理\" class=\"headerlink\" title=\"主题状态管理\"></a>主题状态管理</h3><p>创建主题 Context 进行状态管理：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; createContext, useState, useContext, useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Theme</span> = <span class=\"string\">&#x27;light&#x27;</span> | <span class=\"string\">&#x27;dark&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ThemeContextType</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">theme</span>: <span class=\"title class_\">Theme</span>;</span><br><span class=\"line\">  <span class=\"attr\">toggleTheme</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ThemeContext</span> = createContext&lt;<span class=\"title class_\">ThemeContextType</span> | <span class=\"literal\">undefined</span>&gt;(<span class=\"literal\">undefined</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">ThemeProvider</span>: <span class=\"title class_\">React</span>.<span class=\"property\">FC</span>&lt;&#123; <span class=\"attr\">children</span>: <span class=\"title class_\">React</span>.<span class=\"property\">ReactNode</span> &#125;&gt; = <span class=\"function\">(<span class=\"params\">&#123; children &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [theme, setTheme] = useState&lt;<span class=\"title class_\">Theme</span>&gt;(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> savedTheme = <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&#x27;theme&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (savedTheme <span class=\"keyword\">as</span> <span class=\"title class_\">Theme</span>) || <span class=\"string\">&#x27;light&#x27;</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">&#x27;data-theme&#x27;</span>, theme);</span><br><span class=\"line\">    <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">&#x27;theme&#x27;</span>, theme);</span><br><span class=\"line\">  &#125;, [theme]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">toggleTheme</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setTheme</span>(<span class=\"function\"><span class=\"params\">prev</span> =&gt;</span> prev === <span class=\"string\">&#x27;light&#x27;</span> ? <span class=\"string\">&#x27;dark&#x27;</span> : <span class=\"string\">&#x27;light&#x27;</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ThemeContext.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">theme</span>, <span class=\"attr\">toggleTheme</span> &#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;children&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">ThemeContext.Provider</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">useTheme</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> context = <span class=\"title function_\">useContext</span>(<span class=\"title class_\">ThemeContext</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (context === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;useTheme must be used within a ThemeProvider&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> context;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<p>在设置上下文组件之后, 我们需要明确其作用的范围. 我们希望主题变色需要在全局范围内生效, 以react框架为例:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- App.tsx --&gt;</span></span><br><span class=\"line\">import &#123; ThemeProvider &#125; from &#x27;./context/ThemeContext&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">function App()&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    return (</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ThemeProvider</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span> = <span class=\"string\">&quot;App&quot;</span>&gt;</span></span><br><span class=\"line\">                ...</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ThemeProvider</span>&gt;</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"主题切换组件\"><a href=\"#主题切换组件\" class=\"headerlink\" title=\"主题切换组件\"></a>主题切换组件</h3><p>实现主题切换按钮：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Tooltip</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;antd&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useTheme &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../context/ThemeContext&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BsSun</span>, <span class=\"title class_\">BsMoonStars</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-icons/bs&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> styles <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./ThemeToggle.module.css&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ThemeToggle</span>: <span class=\"title class_\">React</span>.<span class=\"property\">FC</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; theme, toggleTheme &#125; = <span class=\"title function_\">useTheme</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Tooltip</span> <span class=\"attr\">title</span>=<span class=\"string\">&#123;theme</span> === <span class=\"string\">&#x27;light&#x27;</span> ? &#x27;<span class=\"attr\">切换到暗色模式</span>&#x27; <span class=\"attr\">:</span> &#x27;<span class=\"attr\">切换到亮色模式</span>&#x27;&#125; <span class=\"attr\">placement</span>=<span class=\"string\">&quot;right&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">className</span>=<span class=\"string\">&#123;styles.themeToggle&#125;</span> </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;toggleTheme&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">aria-label</span>=<span class=\"string\">&quot;Toggle theme&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;theme === &#x27;light&#x27; ? <span class=\"tag\">&lt;<span class=\"name\">BsMoonStars</span> /&gt;</span> : <span class=\"tag\">&lt;<span class=\"name\">BsSun</span> /&gt;</span>&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">Tooltip</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">ThemeToggle</span>;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>此处使用<code>antd</code>的<code>Tooltip</code>, 用于在鼠标悬浮按钮组件时显示文字提示;</li>\n<li><code>aria-label=&quot;Toggle theme&quot;</code> 在<code>&lt;button&gt;</code>内设置这个属性不是必要的, 但是可以帮助屏幕阅读器读出 “Toggle theme“.</li>\n</ol>\n<h3 id=\"组件样式应用\"><a href=\"#组件样式应用\" class=\"headerlink\" title=\"组件样式应用\"></a>组件样式应用</h3><p>在组件内部使用CSS变量的方式已经在 <a href=\"#CSS-%E5%8F%98%E9%87%8F\">CSS变量</a> 中介绍, 在此给出示例:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.sidebar_container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">var</span>(--sidebar-bg);</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--text-color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.icon_button</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--text-color);</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: transparent;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.icon_button</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">var</span>(--sidebar-hover-color);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<p>如果某个CSS不需要作为变量进行统一管理, 可以直接使用 <strong>属性选择器</strong> 进行单独设置:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-attr\">[data-theme=<span class=\"string\">&#x27;dark&#x27;</span>]</span> <span class=\"selector-class\">.icon_example</span>&#123;</span><br><span class=\"line\">  <span class=\"attr\">--bg-color</span>: <span class=\"number\">#141414</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结与参考\"><a href=\"#总结与参考\" class=\"headerlink\" title=\"总结与参考\"></a>总结与参考</h2><p>通过以上实现,我们构建了一个完整的主题切换系统。关键点包括：</p>\n<ol>\n<li>使用 CSS 变量管理主题样式</li>\n<li>通过 Context API 实现状态管理</li>\n<li>利用 data-theme 属性切换主题</li>\n<li>本地存储保持主题持久化</li>\n</ol>\n<h3 id=\"参考-🔗\"><a href=\"#参考-🔗\" class=\"headerlink\" title=\"参考 🔗\"></a>参考 🔗</h3><ol>\n<li><a class=\"link\"   href=\"https://react.dev/reference/react/useContext\" >React Context API<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n<li><a class=\"link\"   href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties\" >CSS Custom Properties<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n<li><a class=\"link\"   href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes\" >HTML data-* Attributes<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n</ol>\n","_processedHighlight":true},{"title":"媒体查询","date":"2025-01-08T11:16:49.000Z","excerpt":"利用媒体查询建立响应式的设计","_content":"> [媒体查询入门指南](https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/CSS_layout/Media_queries)\n> [使用编程方法测试媒体查询](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_media_queries/Testing_media_queries)\n\n# 媒体查询入门\n对于前端, 如果我们想实现响应式的设计, 那么媒体查询是必不可少的工具. 媒体查询可以帮助我们根据不同的设备和屏幕尺寸, 调整我们的网页的布局和样式.\n\n媒体查询的范式:\n```css\n@media media-type and (media-feature) {\n    /*css rules*/\n}\n```\n> 1. 媒体类型用于声明css文件被用作什么类型的媒体;\n> 2. 媒体表达式用于指定媒体特征, 只有满足媒体特征的条件下, 才会应用css规则;\n> 3. 通过测试且符合媒体类型的情况下应用内部的CSS样式.\n\n**media-type**: all, print, screen, speech.\n\n## 媒体特征\n### 屏幕尺寸\n使用`min`,`max`在一定的数值范围内启用当前的CSS样式.\n> 如果去掉前缀, 将仅在恰好为当前数值中启用.\n```css\n/* 启用宽度大于或等于600px的屏幕 */\n@media screen and (max-width: 600px){\n    ...\n}\n\n/* 启用宽度小于或等于600px的屏幕 */\n@media screen and (min-width: 600px){\n    ...\n}\n\n/* 窗口恰好等于600px时 */\n@media screen and (width: 600px) {\n    ...\n}\n```\n\n### 朝向\n`orientation`可以检测设备的方向, 如竖屏或横屏.\n```css\n@media screen and (orientation: portrait) {\n    /* 竖放时的CSS样式 */\n}\n@media screen and (orientation: landscape) {\n    /* 横屏时的CSS样式 */\n}\n```\n\n## 更复杂的媒体查询\n- `and`实现与逻辑:\n```css\n@media screen and (min-width: 400px) and (orientation: landscape) {\n  body {\n    color: blue;\n  }\n}\n```\n\n- `,`实现或逻辑:\n```css\n@media (min-width: 768px) and (orientation: landscape), (max-width: 480px) {\n  /* \n  (屏幕宽度大于等于 768px 且屏幕方向为横向) 或 (屏幕宽度小于等于 480px)\n  */\n}\n```\n> 与C中的`&`和`|`类似, 与的优先级更高, 先将`and`的条件进行判断, 然后视作整体.\n\n- `not`实现非逻辑:\n```css\n@media not all and (orientation: landscape) {\n/* 非全部屏幕且屏幕方向为横向 */\n}\n```\n\n- `not`实现 **反转查询**:\n> 与最近的`and`组合所绑定, 注意优先级\n\n```css\n@media not screen and (color), print and (color) { ... }\n```\n`,`将媒体查询的表达式分为了前后两级, 因此上述的媒体查询等价于:\n```css\n@media (not (screen and (color))), print and (color) { ... }\n```\n\n\n---\n\n# 利用查询结果扩展设计\n上述在CSS中利用`@media`可以实现响应式的设计, 如果我们希望在js/ts中使用媒体查询的结果呢? 利用媒体查询列表进行设计可以帮助我们实现更加自由的设计.\n\n- 使用`window.matchMedia()`方法存放媒体查询结果:\n```js\n// 检测设备的旋转方向是否为纵向\nvar mediaQueryList = window.matchMedia(\"(orientation: portrait)\");\n```\n\n- 检查属性`matches`获取对应的查询结果:\n```css\nif (mediaQueryList.matches) {\n  /* 设备的旋转方向为纵向 portrait */\n} else {\n  /* 设备的旋转方向不是纵向，也就是横向 landscape */\n}\n```\n\n- 通过`addListener()`方法注册监听器, 持续监听查询列表的结果\n```ts\n// 定义媒体查询字符串\nconst mediaQueryString: string = \"(orientation: portrait)\";\n\n// 创建查询列表\nconst mediaQueryList: MediaQueryList = window.matchMedia(mediaQueryString);\n\n// 定义回调函数，使用 MediaQueryListEvent 类型\nfunction handleOrientationChange(event: MediaQueryListEvent): void {\n  if (event.matches) {\n    // 媒体查询匹配（竖屏）\n    console.log(\"Orientation changed to portrait\");\n    // 在这里执行竖屏时的逻辑\n  } else {\n    // 媒体查询不匹配（横屏）\n    console.log(\"Orientation changed to landscape\");\n    // 在这里执行横屏时的逻辑\n  }\n}\n\n// 先运行一次回调函数，传入 MediaQueryList 对象\nhandleOrientationChange({\n    matches: mediaQueryList.matches,\n    media: mediaQueryList.media,\n    type: 'change',\n} as MediaQueryListEvent);\n\n// 为查询列表注册监听器，同时将回调函数传给监听器\nmediaQueryList.addEventListener('change', handleOrientationChange);\n\n// (可选) 在组件卸载时或不再需要监听时，移除事件监听器\n// mediaQueryList.removeEventListener('change', handleOrientationChange);\n```\n\n","source":"_posts/其他/媒体查询.md","raw":"---\ntitle: 媒体查询\ndate: 2025-01-08 19:16:49\ncategories: 学习笔记\ntags: \n- 前端\n- CSS\nexcerpt: 利用媒体查询建立响应式的设计\n---\n> [媒体查询入门指南](https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/CSS_layout/Media_queries)\n> [使用编程方法测试媒体查询](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_media_queries/Testing_media_queries)\n\n# 媒体查询入门\n对于前端, 如果我们想实现响应式的设计, 那么媒体查询是必不可少的工具. 媒体查询可以帮助我们根据不同的设备和屏幕尺寸, 调整我们的网页的布局和样式.\n\n媒体查询的范式:\n```css\n@media media-type and (media-feature) {\n    /*css rules*/\n}\n```\n> 1. 媒体类型用于声明css文件被用作什么类型的媒体;\n> 2. 媒体表达式用于指定媒体特征, 只有满足媒体特征的条件下, 才会应用css规则;\n> 3. 通过测试且符合媒体类型的情况下应用内部的CSS样式.\n\n**media-type**: all, print, screen, speech.\n\n## 媒体特征\n### 屏幕尺寸\n使用`min`,`max`在一定的数值范围内启用当前的CSS样式.\n> 如果去掉前缀, 将仅在恰好为当前数值中启用.\n```css\n/* 启用宽度大于或等于600px的屏幕 */\n@media screen and (max-width: 600px){\n    ...\n}\n\n/* 启用宽度小于或等于600px的屏幕 */\n@media screen and (min-width: 600px){\n    ...\n}\n\n/* 窗口恰好等于600px时 */\n@media screen and (width: 600px) {\n    ...\n}\n```\n\n### 朝向\n`orientation`可以检测设备的方向, 如竖屏或横屏.\n```css\n@media screen and (orientation: portrait) {\n    /* 竖放时的CSS样式 */\n}\n@media screen and (orientation: landscape) {\n    /* 横屏时的CSS样式 */\n}\n```\n\n## 更复杂的媒体查询\n- `and`实现与逻辑:\n```css\n@media screen and (min-width: 400px) and (orientation: landscape) {\n  body {\n    color: blue;\n  }\n}\n```\n\n- `,`实现或逻辑:\n```css\n@media (min-width: 768px) and (orientation: landscape), (max-width: 480px) {\n  /* \n  (屏幕宽度大于等于 768px 且屏幕方向为横向) 或 (屏幕宽度小于等于 480px)\n  */\n}\n```\n> 与C中的`&`和`|`类似, 与的优先级更高, 先将`and`的条件进行判断, 然后视作整体.\n\n- `not`实现非逻辑:\n```css\n@media not all and (orientation: landscape) {\n/* 非全部屏幕且屏幕方向为横向 */\n}\n```\n\n- `not`实现 **反转查询**:\n> 与最近的`and`组合所绑定, 注意优先级\n\n```css\n@media not screen and (color), print and (color) { ... }\n```\n`,`将媒体查询的表达式分为了前后两级, 因此上述的媒体查询等价于:\n```css\n@media (not (screen and (color))), print and (color) { ... }\n```\n\n\n---\n\n# 利用查询结果扩展设计\n上述在CSS中利用`@media`可以实现响应式的设计, 如果我们希望在js/ts中使用媒体查询的结果呢? 利用媒体查询列表进行设计可以帮助我们实现更加自由的设计.\n\n- 使用`window.matchMedia()`方法存放媒体查询结果:\n```js\n// 检测设备的旋转方向是否为纵向\nvar mediaQueryList = window.matchMedia(\"(orientation: portrait)\");\n```\n\n- 检查属性`matches`获取对应的查询结果:\n```css\nif (mediaQueryList.matches) {\n  /* 设备的旋转方向为纵向 portrait */\n} else {\n  /* 设备的旋转方向不是纵向，也就是横向 landscape */\n}\n```\n\n- 通过`addListener()`方法注册监听器, 持续监听查询列表的结果\n```ts\n// 定义媒体查询字符串\nconst mediaQueryString: string = \"(orientation: portrait)\";\n\n// 创建查询列表\nconst mediaQueryList: MediaQueryList = window.matchMedia(mediaQueryString);\n\n// 定义回调函数，使用 MediaQueryListEvent 类型\nfunction handleOrientationChange(event: MediaQueryListEvent): void {\n  if (event.matches) {\n    // 媒体查询匹配（竖屏）\n    console.log(\"Orientation changed to portrait\");\n    // 在这里执行竖屏时的逻辑\n  } else {\n    // 媒体查询不匹配（横屏）\n    console.log(\"Orientation changed to landscape\");\n    // 在这里执行横屏时的逻辑\n  }\n}\n\n// 先运行一次回调函数，传入 MediaQueryList 对象\nhandleOrientationChange({\n    matches: mediaQueryList.matches,\n    media: mediaQueryList.media,\n    type: 'change',\n} as MediaQueryListEvent);\n\n// 为查询列表注册监听器，同时将回调函数传给监听器\nmediaQueryList.addEventListener('change', handleOrientationChange);\n\n// (可选) 在组件卸载时或不再需要监听时，移除事件监听器\n// mediaQueryList.removeEventListener('change', handleOrientationChange);\n```\n\n","slug":"其他/媒体查询","published":1,"updated":"2025-05-09T09:31:21.417Z","comments":1,"layout":"post","photos":[],"_id":"cmcbm7pqc000oe2qg3mxwev2b","content":"<blockquote>\n<p><a class=\"link\"   href=\"https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/CSS_layout/Media_queries\" >媒体查询入门指南<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a><br><a class=\"link\"   href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_media_queries/Testing_media_queries\" >使用编程方法测试媒体查询<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></p>\n</blockquote>\n<h1 id=\"媒体查询入门\"><a href=\"#媒体查询入门\" class=\"headerlink\" title=\"媒体查询入门\"></a>媒体查询入门</h1><p>对于前端, 如果我们想实现响应式的设计, 那么媒体查询是必不可少的工具. 媒体查询可以帮助我们根据不同的设备和屏幕尺寸, 调整我们的网页的布局和样式.</p>\n<p>媒体查询的范式:</p>\n<div class=\"code-container\" data-rel=\"Css\"><figure class=\"iseeu highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@media</span> media-type <span class=\"keyword\">and</span> (media-feature) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*css rules*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<ol>\n<li>媒体类型用于声明css文件被用作什么类型的媒体;</li>\n<li>媒体表达式用于指定媒体特征, 只有满足媒体特征的条件下, 才会应用css规则;</li>\n<li>通过测试且符合媒体类型的情况下应用内部的CSS样式.</li>\n</ol>\n</blockquote>\n<p><strong>media-type</strong>: all, print, screen, speech.</p>\n<h2 id=\"媒体特征\"><a href=\"#媒体特征\" class=\"headerlink\" title=\"媒体特征\"></a>媒体特征</h2><h3 id=\"屏幕尺寸\"><a href=\"#屏幕尺寸\" class=\"headerlink\" title=\"屏幕尺寸\"></a>屏幕尺寸</h3><p>使用<code>min</code>,<code>max</code>在一定的数值范围内启用当前的CSS样式.</p>\n<blockquote>\n<p>如果去掉前缀, 将仅在恰好为当前数值中启用.</p>\n</blockquote>\n<div class=\"code-container\" data-rel=\"Css\"><figure class=\"iseeu highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 启用宽度大于或等于600px的屏幕 */</span></span><br><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">max-width</span>: <span class=\"number\">600px</span>)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 启用宽度小于或等于600px的屏幕 */</span></span><br><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">min-width</span>: <span class=\"number\">600px</span>)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 窗口恰好等于600px时 */</span></span><br><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">width</span>: <span class=\"number\">600px</span>) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"朝向\"><a href=\"#朝向\" class=\"headerlink\" title=\"朝向\"></a>朝向</h3><p><code>orientation</code>可以检测设备的方向, 如竖屏或横屏.</p>\n<div class=\"code-container\" data-rel=\"Css\"><figure class=\"iseeu highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">orientation</span>: portrait) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 竖放时的CSS样式 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">orientation</span>: landscape) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 横屏时的CSS样式 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"更复杂的媒体查询\"><a href=\"#更复杂的媒体查询\" class=\"headerlink\" title=\"更复杂的媒体查询\"></a>更复杂的媒体查询</h2><ul>\n<li><code>and</code>实现与逻辑:</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Css\"><figure class=\"iseeu highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">min-width</span>: <span class=\"number\">400px</span>) <span class=\"keyword\">and</span> (<span class=\"attribute\">orientation</span>: landscape) &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: blue;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li><code>,</code>实现或逻辑:</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Css\"><figure class=\"iseeu highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">min-width</span>: <span class=\"number\">768px</span>) <span class=\"keyword\">and</span> (<span class=\"attribute\">orientation</span>: landscape), (<span class=\"attribute\">max-width</span>: <span class=\"number\">480px</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">  (屏幕宽度大于等于 768px 且屏幕方向为横向) 或 (屏幕宽度小于等于 480px)</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p>与C中的<code>&amp;</code>和<code>|</code>类似, 与的优先级更高, 先将<code>and</code>的条件进行判断, 然后视作整体.</p>\n</blockquote>\n<ul>\n<li><code>not</code>实现非逻辑:</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Css\"><figure class=\"iseeu highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@media</span> <span class=\"keyword\">not</span> all <span class=\"keyword\">and</span> (<span class=\"attribute\">orientation</span>: landscape) &#123;</span><br><span class=\"line\"><span class=\"comment\">/* 非全部屏幕且屏幕方向为横向 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li><code>not</code>实现 <strong>反转查询</strong>:<blockquote>\n<p>与最近的<code>and</code>组合所绑定, 注意优先级</p>\n</blockquote>\n</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Css\"><figure class=\"iseeu highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@media</span> <span class=\"keyword\">not</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">color</span>), print <span class=\"keyword\">and</span> (<span class=\"attribute\">color</span>) &#123; ... &#125;</span><br></pre></td></tr></table></figure></div>\n<p><code>,</code>将媒体查询的表达式分为了前后两级, 因此上述的媒体查询等价于:</p>\n<div class=\"code-container\" data-rel=\"Css\"><figure class=\"iseeu highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"keyword\">not</span> (screen <span class=\"keyword\">and</span> (<span class=\"attribute\">color</span>))), print <span class=\"keyword\">and</span> (<span class=\"attribute\">color</span>) &#123; ... &#125;</span><br></pre></td></tr></table></figure></div>\n\n\n<hr>\n<h1 id=\"利用查询结果扩展设计\"><a href=\"#利用查询结果扩展设计\" class=\"headerlink\" title=\"利用查询结果扩展设计\"></a>利用查询结果扩展设计</h1><p>上述在CSS中利用<code>@media</code>可以实现响应式的设计, 如果我们希望在js&#x2F;ts中使用媒体查询的结果呢? 利用媒体查询列表进行设计可以帮助我们实现更加自由的设计.</p>\n<ul>\n<li>使用<code>window.matchMedia()</code>方法存放媒体查询结果:</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 检测设备的旋转方向是否为纵向</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mediaQueryList = <span class=\"variable language_\">window</span>.<span class=\"title function_\">matchMedia</span>(<span class=\"string\">&quot;(orientation: portrait)&quot;</span>);</span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li>检查属性<code>matches</code>获取对应的查询结果:</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Css\"><figure class=\"iseeu highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (mediaQueryList<span class=\"selector-class\">.matches</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 设备的旋转方向为纵向 portrait */</span></span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 设备的旋转方向不是纵向，也就是横向 landscape */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li>通过<code>addListener()</code>方法注册监听器, 持续监听查询列表的结果</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Ts\"><figure class=\"iseeu highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义媒体查询字符串</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">mediaQueryString</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&quot;(orientation: portrait)&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建查询列表</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">mediaQueryList</span>: <span class=\"title class_\">MediaQueryList</span> = <span class=\"variable language_\">window</span>.<span class=\"title function_\">matchMedia</span>(mediaQueryString);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义回调函数，使用 MediaQueryListEvent 类型</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handleOrientationChange</span>(<span class=\"params\"><span class=\"attr\">event</span>: <span class=\"title class_\">MediaQueryListEvent</span></span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (event.<span class=\"property\">matches</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 媒体查询匹配（竖屏）</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Orientation changed to portrait&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 在这里执行竖屏时的逻辑</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 媒体查询不匹配（横屏）</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Orientation changed to landscape&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 在这里执行横屏时的逻辑</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 先运行一次回调函数，传入 MediaQueryList 对象</span></span><br><span class=\"line\"><span class=\"title function_\">handleOrientationChange</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">matches</span>: mediaQueryList.<span class=\"property\">matches</span>,</span><br><span class=\"line\">    <span class=\"attr\">media</span>: mediaQueryList.<span class=\"property\">media</span>,</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&#x27;change&#x27;</span>,</span><br><span class=\"line\">&#125; <span class=\"keyword\">as</span> <span class=\"title class_\">MediaQueryListEvent</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 为查询列表注册监听器，同时将回调函数传给监听器</span></span><br><span class=\"line\">mediaQueryList.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;change&#x27;</span>, handleOrientationChange);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// (可选) 在组件卸载时或不再需要监听时，移除事件监听器</span></span><br><span class=\"line\"><span class=\"comment\">// mediaQueryList.removeEventListener(&#x27;change&#x27;, handleOrientationChange);</span></span><br></pre></td></tr></table></figure></div>\n\n","more":"<blockquote>\n<p><a class=\"link\"   href=\"https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/CSS_layout/Media_queries\" >媒体查询入门指南<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a><br><a class=\"link\"   href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_media_queries/Testing_media_queries\" >使用编程方法测试媒体查询<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></p>\n</blockquote>\n<h1 id=\"媒体查询入门\"><a href=\"#媒体查询入门\" class=\"headerlink\" title=\"媒体查询入门\"></a>媒体查询入门</h1><p>对于前端, 如果我们想实现响应式的设计, 那么媒体查询是必不可少的工具. 媒体查询可以帮助我们根据不同的设备和屏幕尺寸, 调整我们的网页的布局和样式.</p>\n<p>媒体查询的范式:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@media</span> media-type <span class=\"keyword\">and</span> (media-feature) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*css rules*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li>媒体类型用于声明css文件被用作什么类型的媒体;</li>\n<li>媒体表达式用于指定媒体特征, 只有满足媒体特征的条件下, 才会应用css规则;</li>\n<li>通过测试且符合媒体类型的情况下应用内部的CSS样式.</li>\n</ol>\n</blockquote>\n<p><strong>media-type</strong>: all, print, screen, speech.</p>\n<h2 id=\"媒体特征\"><a href=\"#媒体特征\" class=\"headerlink\" title=\"媒体特征\"></a>媒体特征</h2><h3 id=\"屏幕尺寸\"><a href=\"#屏幕尺寸\" class=\"headerlink\" title=\"屏幕尺寸\"></a>屏幕尺寸</h3><p>使用<code>min</code>,<code>max</code>在一定的数值范围内启用当前的CSS样式.</p>\n<blockquote>\n<p>如果去掉前缀, 将仅在恰好为当前数值中启用.</p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 启用宽度大于或等于600px的屏幕 */</span></span><br><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">max-width</span>: <span class=\"number\">600px</span>)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 启用宽度小于或等于600px的屏幕 */</span></span><br><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">min-width</span>: <span class=\"number\">600px</span>)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 窗口恰好等于600px时 */</span></span><br><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">width</span>: <span class=\"number\">600px</span>) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"朝向\"><a href=\"#朝向\" class=\"headerlink\" title=\"朝向\"></a>朝向</h3><p><code>orientation</code>可以检测设备的方向, 如竖屏或横屏.</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">orientation</span>: portrait) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 竖放时的CSS样式 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">orientation</span>: landscape) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 横屏时的CSS样式 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更复杂的媒体查询\"><a href=\"#更复杂的媒体查询\" class=\"headerlink\" title=\"更复杂的媒体查询\"></a>更复杂的媒体查询</h2><ul>\n<li><code>and</code>实现与逻辑:</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">min-width</span>: <span class=\"number\">400px</span>) <span class=\"keyword\">and</span> (<span class=\"attribute\">orientation</span>: landscape) &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: blue;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>,</code>实现或逻辑:</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">min-width</span>: <span class=\"number\">768px</span>) <span class=\"keyword\">and</span> (<span class=\"attribute\">orientation</span>: landscape), (<span class=\"attribute\">max-width</span>: <span class=\"number\">480px</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">  (屏幕宽度大于等于 768px 且屏幕方向为横向) 或 (屏幕宽度小于等于 480px)</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>与C中的<code>&amp;</code>和<code>|</code>类似, 与的优先级更高, 先将<code>and</code>的条件进行判断, 然后视作整体.</p>\n</blockquote>\n<ul>\n<li><code>not</code>实现非逻辑:</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@media</span> <span class=\"keyword\">not</span> all <span class=\"keyword\">and</span> (<span class=\"attribute\">orientation</span>: landscape) &#123;</span><br><span class=\"line\"><span class=\"comment\">/* 非全部屏幕且屏幕方向为横向 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>not</code>实现 <strong>反转查询</strong>:<blockquote>\n<p>与最近的<code>and</code>组合所绑定, 注意优先级</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@media</span> <span class=\"keyword\">not</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">color</span>), print <span class=\"keyword\">and</span> (<span class=\"attribute\">color</span>) &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n<p><code>,</code>将媒体查询的表达式分为了前后两级, 因此上述的媒体查询等价于:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"keyword\">not</span> (screen <span class=\"keyword\">and</span> (<span class=\"attribute\">color</span>))), print <span class=\"keyword\">and</span> (<span class=\"attribute\">color</span>) &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n\n\n<hr>\n<h1 id=\"利用查询结果扩展设计\"><a href=\"#利用查询结果扩展设计\" class=\"headerlink\" title=\"利用查询结果扩展设计\"></a>利用查询结果扩展设计</h1><p>上述在CSS中利用<code>@media</code>可以实现响应式的设计, 如果我们希望在js&#x2F;ts中使用媒体查询的结果呢? 利用媒体查询列表进行设计可以帮助我们实现更加自由的设计.</p>\n<ul>\n<li>使用<code>window.matchMedia()</code>方法存放媒体查询结果:</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 检测设备的旋转方向是否为纵向</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mediaQueryList = <span class=\"variable language_\">window</span>.<span class=\"title function_\">matchMedia</span>(<span class=\"string\">&quot;(orientation: portrait)&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>检查属性<code>matches</code>获取对应的查询结果:</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (mediaQueryList<span class=\"selector-class\">.matches</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 设备的旋转方向为纵向 portrait */</span></span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 设备的旋转方向不是纵向，也就是横向 landscape */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过<code>addListener()</code>方法注册监听器, 持续监听查询列表的结果</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义媒体查询字符串</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">mediaQueryString</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&quot;(orientation: portrait)&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建查询列表</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">mediaQueryList</span>: <span class=\"title class_\">MediaQueryList</span> = <span class=\"variable language_\">window</span>.<span class=\"title function_\">matchMedia</span>(mediaQueryString);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义回调函数，使用 MediaQueryListEvent 类型</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handleOrientationChange</span>(<span class=\"params\"><span class=\"attr\">event</span>: <span class=\"title class_\">MediaQueryListEvent</span></span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (event.<span class=\"property\">matches</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 媒体查询匹配（竖屏）</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Orientation changed to portrait&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 在这里执行竖屏时的逻辑</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 媒体查询不匹配（横屏）</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Orientation changed to landscape&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 在这里执行横屏时的逻辑</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 先运行一次回调函数，传入 MediaQueryList 对象</span></span><br><span class=\"line\"><span class=\"title function_\">handleOrientationChange</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">matches</span>: mediaQueryList.<span class=\"property\">matches</span>,</span><br><span class=\"line\">    <span class=\"attr\">media</span>: mediaQueryList.<span class=\"property\">media</span>,</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&#x27;change&#x27;</span>,</span><br><span class=\"line\">&#125; <span class=\"keyword\">as</span> <span class=\"title class_\">MediaQueryListEvent</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 为查询列表注册监听器，同时将回调函数传给监听器</span></span><br><span class=\"line\">mediaQueryList.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;change&#x27;</span>, handleOrientationChange);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// (可选) 在组件卸载时或不再需要监听时，移除事件监听器</span></span><br><span class=\"line\"><span class=\"comment\">// mediaQueryList.removeEventListener(&#x27;change&#x27;, handleOrientationChange);</span></span><br></pre></td></tr></table></figure>\n\n","_processedHighlight":true},{"title":"协议切换与认证配置","date":"2025-01-18T04:47:21.000Z","excerpt":"已经为服务器配置了代理还是在初次push时显示 Connection timed out?😱 不要急, 可能需要在SSH与Https协议之间进行切换~","_content":"\n## 背景介绍\n在使用 Git 进行版本控制时，我们经常需要在 SSH 和 HTTPS 两种协议之间进行切换。本文将详细介绍这两种认证方式的特点、转换方法以及相关的常见问题解决方案。\n\n## 认证机制解析\n\n### 双层认证架构\n1. **服务器层认证**\n   - 用于验证用户对服务器的访问权限\n   - 通常通过 SSH 密钥或密码完成\n\n2. **仓库层认证**\n   - 验证用户对特定 Git 仓库的操作权限\n   - 独立于服务器认证系统\n   - 确保代码安全性和提交者身份\n\n### SSH vs HTTPS \n\n\n1. **SSH 协议**\n   - 优势：\n     - 更安全，使用密钥对进行加密\n     - 配置一次可永久使用\n     - 可以避免每次输入密码\n   - 劣势：\n     - 可能被防火墙阻止（22端口）\n     - 在某些企业网络中可能无法使用\n     - 配置相对复杂\n\n2. **HTTPS 协议**\n   - 优势：\n     - 几乎总是可用（443端口）\n     - 穿透防火墙能力强\n     - 配置简单\n   - 劣势：\n     - 需要管理凭证\n     - 可能需要频繁输入认证信息\n\n## 连接问题分析\n\n### SSH 超时问题解析\nSSH 连接可能出现超时的原因：\n1. **网络限制**\n   - 企业防火墙可能会阻止或限制 SSH 连接\n   - 某些网络环境会定期切断长时间的 SSH 连接\n\n2. **代理影响**\n   - SSH 不会自动使用系统代理\n   - 需要额外配置 SSH 的代理设置\n\n3. **防火墙策略**\n   - 22 端口经常被封锁\n   - 某些地区可能限制 SSH 协议\n\n### HTTPS 连接优势\n1. **标准 Web 端口**\n   - 使用 443 端口，几乎总是开放的\n   - 与普通网页浏览使用相同的端口\n\n2. **代理兼容**\n   - 自动使用系统代理设置\n   - 更好的网络兼容性\n\n3. **连接特性**\n   - 非持久连接，每次请求独立\n   - 不受长连接限制影响\n\n## 协议转换实践\n在尝试直接`git push`时显示:\n![](/img/2025-01-18-12-58-38.png)\n通过执行命令`git remote -v`查看当前远程仓库的地址:\n![](/img/2025-01-18-13-01-29.png)\n> `git@`的前缀格式说明是通过`ssh`的方式, 我们尝试修改为`https`的协议来解决超时问题.\n\n更新仓库的URL:\n```bash\ngit remote set-url origin https://github.com/用户名/仓库名.git\n```\ne.g.: \n![](/img/2025-01-18-13-03-21.png)\n> 在更新之后执行`get remote -v`, 检查发现已经转换为`HTTPS`.\n\n\n### 配置凭证管理\n此时依旧无法直接`git push`, 因为仓库层认证的密码验证方式已经不受`github`支持, 如果尝试通过用户名-密码的方式验证, 将会失败:\n![](/img/2025-01-18-13-09-11.png)\n\n因此我们需要通过 **个人访问令牌**(PAT) 的方式来鉴权.\n1. **配置凭证管理:**\n```bash\n# 永久存储凭证\ngit config --global credential.helper store\n\n# 或临时缓存（如15分钟）\ngit config --global credential.helper 'cache --timeout=900'\n```\n> 如果不希望影响其他仓库, 去除`--global`即可.\n\n2. **获取PAT**:\n   1. 访问 GitHub Settings;\n   2. 下滑到底部,进入 `Developer settings`;\n   3. 选择 `Personal access tokens` → `Tokens (classic)`;\n   4. 在右上角选择生成新的`access token`;\n   5. 生成新令牌并设置适当的权限范围 (至少勾选`repo`).\n![](/img/2025-01-18-13-15-38.png)\n> 在生成PAT之后立即复制并保存.\n\n\n### 通过PAT鉴权\n此时, 我们可以`git push`然后利用PAT来鉴权:\n```bash\ngit push\nUsername: <GitHub用户名>\nPassword: <个人访问令牌>\n```\ne.g.\n![](/img/2025-01-18-13-23-22.png)\n\n## 安全相关建议\n\n### 凭证管理\n1. **凭证存储位置**\n   - Linux/Mac: `~/.git-credentials`\n   - Windows: `%USERPROFILE%\\.git-credentials`\n\n2. **安全建议**\n   - 定期更新访问令牌\n   - 在共享环境使用临时缓存\n   - 及时清理凭证缓存\n\n### 故障排除\n```bash\n# 删除全局凭证配置\ngit config --global --unset credential.helper\n\n# 删除凭证文件\nrm ~/.git-credentials  # Linux/Mac\ndel \"%USERPROFILE%\\.git-credentials\"  # Windows\n```\n","source":"_posts/其他/认证配置.md","raw":"---\ntitle: 协议切换与认证配置\ndate: 2025-01-18 12:47:21\ntags: \n- 服务器\n- PAT\ncategories: 通用技能\nexcerpt: 已经为服务器配置了代理还是在初次push时显示 Connection timed out?😱 不要急, 可能需要在SSH与Https协议之间进行切换~\n---\n\n## 背景介绍\n在使用 Git 进行版本控制时，我们经常需要在 SSH 和 HTTPS 两种协议之间进行切换。本文将详细介绍这两种认证方式的特点、转换方法以及相关的常见问题解决方案。\n\n## 认证机制解析\n\n### 双层认证架构\n1. **服务器层认证**\n   - 用于验证用户对服务器的访问权限\n   - 通常通过 SSH 密钥或密码完成\n\n2. **仓库层认证**\n   - 验证用户对特定 Git 仓库的操作权限\n   - 独立于服务器认证系统\n   - 确保代码安全性和提交者身份\n\n### SSH vs HTTPS \n\n\n1. **SSH 协议**\n   - 优势：\n     - 更安全，使用密钥对进行加密\n     - 配置一次可永久使用\n     - 可以避免每次输入密码\n   - 劣势：\n     - 可能被防火墙阻止（22端口）\n     - 在某些企业网络中可能无法使用\n     - 配置相对复杂\n\n2. **HTTPS 协议**\n   - 优势：\n     - 几乎总是可用（443端口）\n     - 穿透防火墙能力强\n     - 配置简单\n   - 劣势：\n     - 需要管理凭证\n     - 可能需要频繁输入认证信息\n\n## 连接问题分析\n\n### SSH 超时问题解析\nSSH 连接可能出现超时的原因：\n1. **网络限制**\n   - 企业防火墙可能会阻止或限制 SSH 连接\n   - 某些网络环境会定期切断长时间的 SSH 连接\n\n2. **代理影响**\n   - SSH 不会自动使用系统代理\n   - 需要额外配置 SSH 的代理设置\n\n3. **防火墙策略**\n   - 22 端口经常被封锁\n   - 某些地区可能限制 SSH 协议\n\n### HTTPS 连接优势\n1. **标准 Web 端口**\n   - 使用 443 端口，几乎总是开放的\n   - 与普通网页浏览使用相同的端口\n\n2. **代理兼容**\n   - 自动使用系统代理设置\n   - 更好的网络兼容性\n\n3. **连接特性**\n   - 非持久连接，每次请求独立\n   - 不受长连接限制影响\n\n## 协议转换实践\n在尝试直接`git push`时显示:\n![](/img/2025-01-18-12-58-38.png)\n通过执行命令`git remote -v`查看当前远程仓库的地址:\n![](/img/2025-01-18-13-01-29.png)\n> `git@`的前缀格式说明是通过`ssh`的方式, 我们尝试修改为`https`的协议来解决超时问题.\n\n更新仓库的URL:\n```bash\ngit remote set-url origin https://github.com/用户名/仓库名.git\n```\ne.g.: \n![](/img/2025-01-18-13-03-21.png)\n> 在更新之后执行`get remote -v`, 检查发现已经转换为`HTTPS`.\n\n\n### 配置凭证管理\n此时依旧无法直接`git push`, 因为仓库层认证的密码验证方式已经不受`github`支持, 如果尝试通过用户名-密码的方式验证, 将会失败:\n![](/img/2025-01-18-13-09-11.png)\n\n因此我们需要通过 **个人访问令牌**(PAT) 的方式来鉴权.\n1. **配置凭证管理:**\n```bash\n# 永久存储凭证\ngit config --global credential.helper store\n\n# 或临时缓存（如15分钟）\ngit config --global credential.helper 'cache --timeout=900'\n```\n> 如果不希望影响其他仓库, 去除`--global`即可.\n\n2. **获取PAT**:\n   1. 访问 GitHub Settings;\n   2. 下滑到底部,进入 `Developer settings`;\n   3. 选择 `Personal access tokens` → `Tokens (classic)`;\n   4. 在右上角选择生成新的`access token`;\n   5. 生成新令牌并设置适当的权限范围 (至少勾选`repo`).\n![](/img/2025-01-18-13-15-38.png)\n> 在生成PAT之后立即复制并保存.\n\n\n### 通过PAT鉴权\n此时, 我们可以`git push`然后利用PAT来鉴权:\n```bash\ngit push\nUsername: <GitHub用户名>\nPassword: <个人访问令牌>\n```\ne.g.\n![](/img/2025-01-18-13-23-22.png)\n\n## 安全相关建议\n\n### 凭证管理\n1. **凭证存储位置**\n   - Linux/Mac: `~/.git-credentials`\n   - Windows: `%USERPROFILE%\\.git-credentials`\n\n2. **安全建议**\n   - 定期更新访问令牌\n   - 在共享环境使用临时缓存\n   - 及时清理凭证缓存\n\n### 故障排除\n```bash\n# 删除全局凭证配置\ngit config --global --unset credential.helper\n\n# 删除凭证文件\nrm ~/.git-credentials  # Linux/Mac\ndel \"%USERPROFILE%\\.git-credentials\"  # Windows\n```\n","slug":"其他/认证配置","published":1,"updated":"2025-05-09T09:31:41.069Z","comments":1,"layout":"post","photos":[],"_id":"cmcbm7pqd000se2qg16k73cel","content":"<h2 id=\"背景介绍\"><a href=\"#背景介绍\" class=\"headerlink\" title=\"背景介绍\"></a>背景介绍</h2><p>在使用 Git 进行版本控制时，我们经常需要在 SSH 和 HTTPS 两种协议之间进行切换。本文将详细介绍这两种认证方式的特点、转换方法以及相关的常见问题解决方案。</p>\n<h2 id=\"认证机制解析\"><a href=\"#认证机制解析\" class=\"headerlink\" title=\"认证机制解析\"></a>认证机制解析</h2><h3 id=\"双层认证架构\"><a href=\"#双层认证架构\" class=\"headerlink\" title=\"双层认证架构\"></a>双层认证架构</h3><ol>\n<li><p><strong>服务器层认证</strong></p>\n<ul>\n<li>用于验证用户对服务器的访问权限</li>\n<li>通常通过 SSH 密钥或密码完成</li>\n</ul>\n</li>\n<li><p><strong>仓库层认证</strong></p>\n<ul>\n<li>验证用户对特定 Git 仓库的操作权限</li>\n<li>独立于服务器认证系统</li>\n<li>确保代码安全性和提交者身份</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"SSH-vs-HTTPS\"><a href=\"#SSH-vs-HTTPS\" class=\"headerlink\" title=\"SSH vs HTTPS\"></a>SSH vs HTTPS</h3><ol>\n<li><p><strong>SSH 协议</strong></p>\n<ul>\n<li>优势：<ul>\n<li>更安全，使用密钥对进行加密</li>\n<li>配置一次可永久使用</li>\n<li>可以避免每次输入密码</li>\n</ul>\n</li>\n<li>劣势：<ul>\n<li>可能被防火墙阻止（22端口）</li>\n<li>在某些企业网络中可能无法使用</li>\n<li>配置相对复杂</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>HTTPS 协议</strong></p>\n<ul>\n<li>优势：<ul>\n<li>几乎总是可用（443端口）</li>\n<li>穿透防火墙能力强</li>\n<li>配置简单</li>\n</ul>\n</li>\n<li>劣势：<ul>\n<li>需要管理凭证</li>\n<li>可能需要频繁输入认证信息</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"连接问题分析\"><a href=\"#连接问题分析\" class=\"headerlink\" title=\"连接问题分析\"></a>连接问题分析</h2><h3 id=\"SSH-超时问题解析\"><a href=\"#SSH-超时问题解析\" class=\"headerlink\" title=\"SSH 超时问题解析\"></a>SSH 超时问题解析</h3><p>SSH 连接可能出现超时的原因：</p>\n<ol>\n<li><p><strong>网络限制</strong></p>\n<ul>\n<li>企业防火墙可能会阻止或限制 SSH 连接</li>\n<li>某些网络环境会定期切断长时间的 SSH 连接</li>\n</ul>\n</li>\n<li><p><strong>代理影响</strong></p>\n<ul>\n<li>SSH 不会自动使用系统代理</li>\n<li>需要额外配置 SSH 的代理设置</li>\n</ul>\n</li>\n<li><p><strong>防火墙策略</strong></p>\n<ul>\n<li>22 端口经常被封锁</li>\n<li>某些地区可能限制 SSH 协议</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"HTTPS-连接优势\"><a href=\"#HTTPS-连接优势\" class=\"headerlink\" title=\"HTTPS 连接优势\"></a>HTTPS 连接优势</h3><ol>\n<li><p><strong>标准 Web 端口</strong></p>\n<ul>\n<li>使用 443 端口，几乎总是开放的</li>\n<li>与普通网页浏览使用相同的端口</li>\n</ul>\n</li>\n<li><p><strong>代理兼容</strong></p>\n<ul>\n<li>自动使用系统代理设置</li>\n<li>更好的网络兼容性</li>\n</ul>\n</li>\n<li><p><strong>连接特性</strong></p>\n<ul>\n<li>非持久连接，每次请求独立</li>\n<li>不受长连接限制影响</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"协议转换实践\"><a href=\"#协议转换实践\" class=\"headerlink\" title=\"协议转换实践\"></a>协议转换实践</h2><p>在尝试直接<code>git push</code>时显示:<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/img/2025-01-18-12-58-38.png\"\n                     \n                ><br>通过执行命令<code>git remote -v</code>查看当前远程仓库的地址:<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/img/2025-01-18-13-01-29.png\"\n                     \n                ></p>\n<blockquote>\n<p><code>git@</code>的前缀格式说明是通过<code>ssh</code>的方式, 我们尝试修改为<code>https</code>的协议来解决超时问题.</p>\n</blockquote>\n<p>更新仓库的URL:</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote set-url origin https://github.com/用户名/仓库名.git</span><br></pre></td></tr></table></figure></div>\n<p>e.g.:<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/img/2025-01-18-13-03-21.png\"\n                     \n                ></p>\n<blockquote>\n<p>在更新之后执行<code>get remote -v</code>, 检查发现已经转换为<code>HTTPS</code>.</p>\n</blockquote>\n<h3 id=\"配置凭证管理\"><a href=\"#配置凭证管理\" class=\"headerlink\" title=\"配置凭证管理\"></a>配置凭证管理</h3><p>此时依旧无法直接<code>git push</code>, 因为仓库层认证的密码验证方式已经不受<code>github</code>支持, 如果尝试通过用户名-密码的方式验证, 将会失败:<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/img/2025-01-18-13-09-11.png\"\n                     \n                ></p>\n<p>因此我们需要通过 <strong>个人访问令牌</strong>(PAT) 的方式来鉴权.</p>\n<ol>\n<li><strong>配置凭证管理:</strong></li>\n</ol>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 永久存储凭证</span></span><br><span class=\"line\">git config --global credential.helper store</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 或临时缓存（如15分钟）</span></span><br><span class=\"line\">git config --global credential.helper <span class=\"string\">&#x27;cache --timeout=900&#x27;</span></span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p>如果不希望影响其他仓库, 去除<code>--global</code>即可.</p>\n</blockquote>\n<ol start=\"2\">\n<li><strong>获取PAT</strong>:<ol>\n<li>访问 GitHub Settings;</li>\n<li>下滑到底部,进入 <code>Developer settings</code>;</li>\n<li>选择 <code>Personal access tokens</code> → <code>Tokens (classic)</code>;</li>\n<li>在右上角选择生成新的<code>access token</code>;</li>\n<li>生成新令牌并设置适当的权限范围 (至少勾选<code>repo</code>).<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/img/2025-01-18-13-15-38.png\"\n                     \n                ><blockquote>\n<p>在生成PAT之后立即复制并保存.</p>\n</blockquote>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"通过PAT鉴权\"><a href=\"#通过PAT鉴权\" class=\"headerlink\" title=\"通过PAT鉴权\"></a>通过PAT鉴权</h3><p>此时, 我们可以<code>git push</code>然后利用PAT来鉴权:</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push</span><br><span class=\"line\">Username: &lt;GitHub用户名&gt;</span><br><span class=\"line\">Password: &lt;个人访问令牌&gt;</span><br></pre></td></tr></table></figure></div>\n<p>e.g.<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/img/2025-01-18-13-23-22.png\"\n                     \n                ></p>\n<h2 id=\"安全相关建议\"><a href=\"#安全相关建议\" class=\"headerlink\" title=\"安全相关建议\"></a>安全相关建议</h2><h3 id=\"凭证管理\"><a href=\"#凭证管理\" class=\"headerlink\" title=\"凭证管理\"></a>凭证管理</h3><ol>\n<li><p><strong>凭证存储位置</strong></p>\n<ul>\n<li>Linux&#x2F;Mac: <code>~/.git-credentials</code></li>\n<li>Windows: <code>%USERPROFILE%\\.git-credentials</code></li>\n</ul>\n</li>\n<li><p><strong>安全建议</strong></p>\n<ul>\n<li>定期更新访问令牌</li>\n<li>在共享环境使用临时缓存</li>\n<li>及时清理凭证缓存</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"故障排除\"><a href=\"#故障排除\" class=\"headerlink\" title=\"故障排除\"></a>故障排除</h3><div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除全局凭证配置</span></span><br><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> credential.helper</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除凭证文件</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> ~/.git-credentials  <span class=\"comment\"># Linux/Mac</span></span><br><span class=\"line\">del <span class=\"string\">&quot;%USERPROFILE%\\.git-credentials&quot;</span>  <span class=\"comment\"># Windows</span></span><br></pre></td></tr></table></figure></div>\n","more":"<h2 id=\"背景介绍\"><a href=\"#背景介绍\" class=\"headerlink\" title=\"背景介绍\"></a>背景介绍</h2><p>在使用 Git 进行版本控制时，我们经常需要在 SSH 和 HTTPS 两种协议之间进行切换。本文将详细介绍这两种认证方式的特点、转换方法以及相关的常见问题解决方案。</p>\n<h2 id=\"认证机制解析\"><a href=\"#认证机制解析\" class=\"headerlink\" title=\"认证机制解析\"></a>认证机制解析</h2><h3 id=\"双层认证架构\"><a href=\"#双层认证架构\" class=\"headerlink\" title=\"双层认证架构\"></a>双层认证架构</h3><ol>\n<li><p><strong>服务器层认证</strong></p>\n<ul>\n<li>用于验证用户对服务器的访问权限</li>\n<li>通常通过 SSH 密钥或密码完成</li>\n</ul>\n</li>\n<li><p><strong>仓库层认证</strong></p>\n<ul>\n<li>验证用户对特定 Git 仓库的操作权限</li>\n<li>独立于服务器认证系统</li>\n<li>确保代码安全性和提交者身份</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"SSH-vs-HTTPS\"><a href=\"#SSH-vs-HTTPS\" class=\"headerlink\" title=\"SSH vs HTTPS\"></a>SSH vs HTTPS</h3><ol>\n<li><p><strong>SSH 协议</strong></p>\n<ul>\n<li>优势：<ul>\n<li>更安全，使用密钥对进行加密</li>\n<li>配置一次可永久使用</li>\n<li>可以避免每次输入密码</li>\n</ul>\n</li>\n<li>劣势：<ul>\n<li>可能被防火墙阻止（22端口）</li>\n<li>在某些企业网络中可能无法使用</li>\n<li>配置相对复杂</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>HTTPS 协议</strong></p>\n<ul>\n<li>优势：<ul>\n<li>几乎总是可用（443端口）</li>\n<li>穿透防火墙能力强</li>\n<li>配置简单</li>\n</ul>\n</li>\n<li>劣势：<ul>\n<li>需要管理凭证</li>\n<li>可能需要频繁输入认证信息</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"连接问题分析\"><a href=\"#连接问题分析\" class=\"headerlink\" title=\"连接问题分析\"></a>连接问题分析</h2><h3 id=\"SSH-超时问题解析\"><a href=\"#SSH-超时问题解析\" class=\"headerlink\" title=\"SSH 超时问题解析\"></a>SSH 超时问题解析</h3><p>SSH 连接可能出现超时的原因：</p>\n<ol>\n<li><p><strong>网络限制</strong></p>\n<ul>\n<li>企业防火墙可能会阻止或限制 SSH 连接</li>\n<li>某些网络环境会定期切断长时间的 SSH 连接</li>\n</ul>\n</li>\n<li><p><strong>代理影响</strong></p>\n<ul>\n<li>SSH 不会自动使用系统代理</li>\n<li>需要额外配置 SSH 的代理设置</li>\n</ul>\n</li>\n<li><p><strong>防火墙策略</strong></p>\n<ul>\n<li>22 端口经常被封锁</li>\n<li>某些地区可能限制 SSH 协议</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"HTTPS-连接优势\"><a href=\"#HTTPS-连接优势\" class=\"headerlink\" title=\"HTTPS 连接优势\"></a>HTTPS 连接优势</h3><ol>\n<li><p><strong>标准 Web 端口</strong></p>\n<ul>\n<li>使用 443 端口，几乎总是开放的</li>\n<li>与普通网页浏览使用相同的端口</li>\n</ul>\n</li>\n<li><p><strong>代理兼容</strong></p>\n<ul>\n<li>自动使用系统代理设置</li>\n<li>更好的网络兼容性</li>\n</ul>\n</li>\n<li><p><strong>连接特性</strong></p>\n<ul>\n<li>非持久连接，每次请求独立</li>\n<li>不受长连接限制影响</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"协议转换实践\"><a href=\"#协议转换实践\" class=\"headerlink\" title=\"协议转换实践\"></a>协议转换实践</h2><p>在尝试直接<code>git push</code>时显示:<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/img/2025-01-18-12-58-38.png\"\n                     \n                ><br>通过执行命令<code>git remote -v</code>查看当前远程仓库的地址:<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/img/2025-01-18-13-01-29.png\"\n                     \n                ></p>\n<blockquote>\n<p><code>git@</code>的前缀格式说明是通过<code>ssh</code>的方式, 我们尝试修改为<code>https</code>的协议来解决超时问题.</p>\n</blockquote>\n<p>更新仓库的URL:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote set-url origin https://github.com/用户名/仓库名.git</span><br></pre></td></tr></table></figure>\n<p>e.g.:<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/img/2025-01-18-13-03-21.png\"\n                     \n                ></p>\n<blockquote>\n<p>在更新之后执行<code>get remote -v</code>, 检查发现已经转换为<code>HTTPS</code>.</p>\n</blockquote>\n<h3 id=\"配置凭证管理\"><a href=\"#配置凭证管理\" class=\"headerlink\" title=\"配置凭证管理\"></a>配置凭证管理</h3><p>此时依旧无法直接<code>git push</code>, 因为仓库层认证的密码验证方式已经不受<code>github</code>支持, 如果尝试通过用户名-密码的方式验证, 将会失败:<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/img/2025-01-18-13-09-11.png\"\n                     \n                ></p>\n<p>因此我们需要通过 <strong>个人访问令牌</strong>(PAT) 的方式来鉴权.</p>\n<ol>\n<li><strong>配置凭证管理:</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 永久存储凭证</span></span><br><span class=\"line\">git config --global credential.helper store</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 或临时缓存（如15分钟）</span></span><br><span class=\"line\">git config --global credential.helper <span class=\"string\">&#x27;cache --timeout=900&#x27;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果不希望影响其他仓库, 去除<code>--global</code>即可.</p>\n</blockquote>\n<ol start=\"2\">\n<li><strong>获取PAT</strong>:<ol>\n<li>访问 GitHub Settings;</li>\n<li>下滑到底部,进入 <code>Developer settings</code>;</li>\n<li>选择 <code>Personal access tokens</code> → <code>Tokens (classic)</code>;</li>\n<li>在右上角选择生成新的<code>access token</code>;</li>\n<li>生成新令牌并设置适当的权限范围 (至少勾选<code>repo</code>).<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/img/2025-01-18-13-15-38.png\"\n                     \n                ><blockquote>\n<p>在生成PAT之后立即复制并保存.</p>\n</blockquote>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"通过PAT鉴权\"><a href=\"#通过PAT鉴权\" class=\"headerlink\" title=\"通过PAT鉴权\"></a>通过PAT鉴权</h3><p>此时, 我们可以<code>git push</code>然后利用PAT来鉴权:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push</span><br><span class=\"line\">Username: &lt;GitHub用户名&gt;</span><br><span class=\"line\">Password: &lt;个人访问令牌&gt;</span><br></pre></td></tr></table></figure>\n<p>e.g.<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/img/2025-01-18-13-23-22.png\"\n                     \n                ></p>\n<h2 id=\"安全相关建议\"><a href=\"#安全相关建议\" class=\"headerlink\" title=\"安全相关建议\"></a>安全相关建议</h2><h3 id=\"凭证管理\"><a href=\"#凭证管理\" class=\"headerlink\" title=\"凭证管理\"></a>凭证管理</h3><ol>\n<li><p><strong>凭证存储位置</strong></p>\n<ul>\n<li>Linux&#x2F;Mac: <code>~/.git-credentials</code></li>\n<li>Windows: <code>%USERPROFILE%\\.git-credentials</code></li>\n</ul>\n</li>\n<li><p><strong>安全建议</strong></p>\n<ul>\n<li>定期更新访问令牌</li>\n<li>在共享环境使用临时缓存</li>\n<li>及时清理凭证缓存</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"故障排除\"><a href=\"#故障排除\" class=\"headerlink\" title=\"故障排除\"></a>故障排除</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除全局凭证配置</span></span><br><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> credential.helper</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除凭证文件</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> ~/.git-credentials  <span class=\"comment\"># Linux/Mac</span></span><br><span class=\"line\">del <span class=\"string\">&quot;%USERPROFILE%\\.git-credentials&quot;</span>  <span class=\"comment\"># Windows</span></span><br></pre></td></tr></table></figure>\n","_processedHighlight":true},{"title":"JavaScript","date":"2025-01-09T06:06:30.000Z","excerpt":"一种轻量级、解释型、面向对象的编程语言. 作为前端三件套之一以及TS的基础, JS语言细节十分难嚼. 本文在「料理的加护」下, 尽可能将JS处理得更加可口一些)","mathjax":true,"index_img":"/img/料理的加护.jpg","_content":"> JavaScript是一种轻量级、解释型、面向对象的编程语言. 作为前端三件套之一以及TS的基础, JS语言细节十分难嚼. 本文在「**料理的加护**」下, 尽可能将JS处理得更加**可口**一些)\n<img src=\"/img/料理的加护.jpg\" width = \"35%\">\n\n# 创建JS代码块\n## 变量\n### `var` or `let`?\n`var`先于`let`的产生, 后者是现代版本的JS中新的关键字.\n\n使用`var`, 可以对一个先前已被声明且初始化的变量重新声明, 这不会带来报错, 代码依旧可以工作. 但是`let`并不适用.\n```js\nmyName = \"Chris\";\n\nfunction logName() {\n  console.log(myName);\n}\n\nlogName(); //输出\"Chris\"\n\nvar myName = \"Aniya\";\nlogName(); //输出\"Aniya\"\n```\n\n除此之外, 可以使用`var`前后声明相同的变量, 这并不会报错:\n```js\nvar myName = \"Chris\";\nvar myName = \"Bob\";\n```\n\n而`let`只能声明一次:\n```js\nlet myName = \"Chris\";\nmyName = \"Bob\";\n```\n\n因此, 在代码编写中应尽量**多使用**`let`而非`var`, 这可以帮助我们排除无意中重新命名相同变量而导致的错误.\n\n\n### 变量命名的规则\n与C语言类似, 建议以 **字母、数字、下划线** 组成的标识符来命名变量.\n- 不可用`_`开头, 因为可能被JS设计为特殊的含义;\n- 不可用数字开头, 否则引发错误;\n- 大小写敏感;\n- 建议采用 **小写驼峰命名法** ,即小写整个命名的第一个字母然后大写剩下单词的首字符;\n- 避免使用保留字, 比如`var`,`let`,`for`等.\n\n### 变量类型\n\n```js\nlet myAge = 20 ;// 数字\nlet dolphinGoodbye = \"So long and thanks for all the fish\"; // 字符串\nlet test = 6 < 3; //boolean\n\n//数组类型\nlet myNameArray = [\"Chris\", \"Bob\", \"Jim\"];\nlet myNumberArray = [10, 15, 40];\n\n//对象类型\nlet dog = { name: \"Spot\", breed: \"Dalmatian\" };\n\n```\n> 对象类型的访问与结构体相似, `dog.name;`\n\n在上面的几种变量类型中, 我们都采用`let`关键字声明变量, 这体现了JS是一种 **动态类型语言** ,即无需指定变量包含的数据类型.\n\n同时, 这也意味着我们可以像`python`一样对同一个变量先后赋值不同类型的值:\n```js\nlet myNumber = \"500\";\ntypeof myNumber;\n// 输出 'string'\n\nmyNumber = 500; \ntypeof myNumber;\n//输出'number'\n```\n\n\n## 函数\n- $\\underline{提升}$ 解释器在执行代码之前，似乎将函数、变量、类或导入的声明移动到其作用域的顶部的过程.\n```js\nexampleFunction();\n\nfunction exampleFunction() {\n  console.log(\"函数内\");\n  console.log(x);\n}\n```\n> 由于 **提升** 的存在, 上述的函数调用不会出错.\n\n\n### 默认参数\n在编写函数时, 可以通过在参数名称后添加`=`, 再指定默认值, 这样当调用函数时, 如果没有传入该参数, 则使用默认值。\n```js\nfunction greeding(name = \"my friend\") {\n    console.log(`Hello, ${name}!`);\n}\nhello(); //Hello, my friend!\nhello(\"world\"); //Hello, world!\n```\n\n<br>\n\n事件处理函数的默认接受值是`event`:\n```html\n<button>\nonclick\n</button>\n\n<p>\nnothing here\n</p>\n\n<script>\nbtn = document.querySelector(\"button\")\npara = document.querySelector(\"p\")\n\nbtn.onclick = click;\n\nfunction click(string){\n  console.log(\"clicked!\")\n  para.textContent = string;\n}\n</script>\n```\n1. 上述的`btn`在点击之后调用函数`click`, 该函数需要一个参数`string`, 由于`btn.onclick = click;`的绑定方式, 我们无法指定传参的值, 因此点击之后的`para`的内容显示为: `[object PointerEvent]`;\n2. `textContent`是属性而非方法, 因此采用赋值实现;\n\n\n```js\nbtn.onclick = function click(string) {\n  console.log(\"clicked!\")\n  para.textContent = \"You have clicked the button!\";\n}\n```\n> 将上述的绑定方式如此改写, 可以在`btn`外对`string`进行赋值, 然后点击按钮可以传入指定参数供后续处理.\n\n\n\n### 箭头函数\n在了解箭头函数的作用之前, 需要先介绍 $\\underline{匿名函数}$:\n```js\nfunction myFunction() {\n  alert(\"你好\");\n}\n\n// 匿名函数\n(function () {\n  alert(\"你好\");\n});\n```\n> 正如其名, 匿名函数没有函数名, 不能被调用, 但可以作为参数传入其他函数中.\n\n如果我们希望在监听某个事件发生时调用简单的函数来处理, 则可以通过调用上述的匿名函数实现:\n```js\nfunction logKey(event) {\n  console.log(`You pressed \"${event.key}\".`);\n}\n\ntextBox.addEventListener(\"keydown\", logKey);\n```\n这部分代码通过监听html元素的keydown事件, 调用函数输出按下的键盘按键. 我们可以通过匿名函数来简化书写:\n```js\ntextBox.addEventListener(\"keydown\", function (event) {\n  console.log(`You pressed \"${event.key}\".`);\n});\n```\n>只需传入函数体, 而不需要函数名, 就可以实现监听事件并调用函数的功能.\n\n而**箭头函数**则是在此情况下更简洁的函数定义方式:\n```js\ntextBox.addEventListener(\"keydown\", (event) => {\n  console.log(`You pressed \"${event.key}\".`);\n});\n\n//如果函数只接受一个参数, 也可以省略参数周围的括号\ntextBox.addEventListener(\"keydown\", event => {\n  console.log(`You pressed \"${event.key}\".`);\n});\n```\n\n如果只包含一行的`return`,则可以忽略`{}`和`return`关键字:\n```js\nconst originals = [1, 2, 3];\n\nconst doubled = originals.map(item => item * 2);\n\nconsole.log(doubled); // [2, 4, 6]\n```\n> `item => item * 2`等价于:\n```js\nfunction doubleItem(item) {\n  return item * 2;\n}\n```\n\n#### 一个实例\n```html\n<input id=\"textBox\" type=\"text\" />\n<div id=\"output\"></div>\n```\n```js\nconst textBox = document.querySelector(\"#textBox\");\nconst output = document.querySelector(\"#output\");\n\ntextBox.addEventListener(\"keydown\", (event) => {\n  output.textContent = `You pressed \"${event.key}\".`;\n});\n```\n通过监听输入框的keydown事件, 输出按下的键盘按键.\n\n### 函数作用域和冲突\n$\\underline{作用域}$ 指当前的执行上下文, 在其中的值和表达式可以被访问. \n- 全局作用域: 脚本模式运行所有代码的默认作用域;\n- 模块作用域: 模块模式中运行代码的作用域;\n- 函数作用域: 由函数创建的作用域\n\n和C语言相似, 在函数外部`let`定义的变量, 以及`const`定义的常量可以在函数内部访问.\n\n如果HTML调用了多个外部JS文件, 其中具有相同的函数名, 那么只能访问的第一个函数, 第二个函数将被忽略:\n```html\n<!-- Excerpt from my HTML -->\n<script src=\"first.js\"></script>\n<script src=\"second.js\"></script>\n<script>\n  greeting();\n</script>\n```\n> 如果两个JS文件都定义了`greeting`函数, 则只有第一个文件中的函数才会被调用.\n\n## 数据类型\n### 数字和操作符\n大部分与C语言相同, 概括需要注意的差异:\n- JS当中只有一种数字类型 -- `number`, 对于整型或者浮点数的初始化得到的量, 由`typeof`均得到`number`;\n- 算术运算符: 求幂为`**`;\n- 常量无法使用自增或自减,~~好像也是C语言的 忘了~~\n- `===`表示严格等于, `!==`表示不等于;\n> 同时存在`==`和`!=`来判断是否相等, 但是它们只是测试 **值** 是否相等, 会忽略数据类型的差异; 而上述的比较会同时比较数据类型. 因此推荐使用`===`和`!==`来避免类型不一致的错误.\n\n### 字符串\n创建字符串\n```js\nlet myString = \"A string\";\nconst constString = myString;\nconsole.log(constString);\n//A string\n``` \n可以使用单引号,双引号和**反引号**来包裹字符串, 但是必须确保字符串的开头和结尾使用相同的字符:\n```js\nconst single = '单引号';\nconst double = \"双引号\";\nconst backtick = `反引号`;\n```\n\n反引号包裹的字符串称为$\\underline{模板字符串}$, 大多数情况下,它与其他两种字符串类似, 但是具有特殊的属性:\n- 可以嵌入 **JavaScript**;\n- 可以声明**多行**的模板字面量.\n\n#### 字符串的拼接\n字符串的拼接有两种方法, 我们先介绍上述提到的模板字符串中的 $\\underline{串联法}$:\n```js\nconst name = \"克里斯\";\nconst greeting = `你好，${name}`;\nconsole.log(greeting); // \"你好，克里斯\"\n```\n> 在模板字面量中用`${}`包装JS的变量或者表达式.\n\n\n```js\nconst one = \"你好，\";\nconst two = \"请问最近如何？\";\nconst joined = `${one}${two}`;\nconsole.log(joined); // \"你好，请问最近如何？\"\n```\n> 连接2个变量.\n\n```js\nconst song = \"青花瓷\";\nconst score = 9;\nconst highestScore = 10;\nconst output = `我喜欢歌曲《${song}》。我给它打了 ${\n  (score / highestScore) * 100\n} 分。`;\nconsole.log(output); // \"我喜欢歌曲《青花瓷》。我给它打了 90 分。\"\n```\n> 在模板字面量的`${}`内部包含表达式.\n\n<br>\n除此之外,对于普通的字符串(使用单引号或者双引号得到的字符串), 我们可以使用`+`直接连接:\n```js\nconst greeting = \"你好\";\nconst name = \"克里斯\";\nconsole.log(greeting + \"，\" + name); // \"你好，克里斯\"\n```\n\n#### 多行字符串\n模板字符串会**保留**源代码中的换行符，因此可以编写跨越多行的字符串:\n```js\nconst newline = `终于有一天，\n你知道了必须做的事情，而且开始……`;\nconsole.log(newline);\n\n/*\n终于有一天，\n你知道了必须做的事情，而且开始……\n*/\n```\n\n如果希望用普通的字符串得到等效的输出, 必须在字符串中包含`\\n`,而非直接跨行:\n```js\nconst newline = \"终于有一天，\\n你知道了必须做的事情，而且开始……\";\nconsole.log(newline);\n\n/*\n终于有一天，\n你知道了必须做的事情，而且开始……\n*/\n```\n\n#### 显示引号\n1. $\\underline{转义}$  通过在符号前加上反斜杠`\\`, 可以转义字符串中的特殊字符,包括字符串中的引号:\n```js\nconst bigmouth = 'I\\'ve got no right to take my place…';\n```\n2. 换用其他字符: 在字面量内用不同于包裹字符串的引号:\n```js\nconst goodQuotes1 = 'She said \"I think so!\"';\nconst goodQuotes2 = `She said \"I'm not going in there!\"`;\n```\n\n\n#### 常用方法\n对于字符串对象实例,其常用的方法:\n- `.length`: 获取字符串的长度;\n- `[]`: 返回字符串中对应索引的字符, 索引同样从`0`开始;\n- `.indexOf(\"\")`: 查找子字符串\n  - **input**: 希望查找的子字符串;\n  - **output**: 子字符串开始的下标(如果不存在则返回`-1`);\n- `.slice(indedxStart, indexEnd)`: 截取字符串\n  - **input**: 起始下标, 结束下标(不包含该下标). 如果不存在结束下标则提取之后剩余的全部字符;\n  - **output**: 截取的子字符串;\n\n更多的`slice`知识:\n1. $\\underline{标准化负值}$ 如果索引是个负数, 取`index+str.length`进行标准化;\n2. 如果`indexStart`大于`str.length`, 返回空字符串;\n3. 如果标准化负值之后, `indexStart`大于`indexEnd`, 也返回空字符串;\n \n- `.toLowerCase()` & `.toUpperCase()`: 转换字符串中的所有字符为小写或大写;\n- `.replace(original, new)`: 替换字符串中`original`子字符串为`new`;\n> 此时不会直接改变原字符串的值, 而是返回一个修改之后的字符串. 因此, 如果想要将原来的值替换, 需要用上述方法得到的值去赋值原来的字符串.\n\n#### Cases\n利用 **indexOf** 和 **slice** 方法, 获取新字符串:\n- **input**: `\"str3\"`三位长字符串+`\"...\"`(无关字符串)+`\";\"`+`strLast`(剩余字符串);\n- **output**: `\"str3\"+\";\"+strLast`\n\n```js\nvar stations = ['MAN675847583748sjt567654;Manchester Piccadilly',\n                'GNF576746573fhdg4737dh4;Greenfield',\n                'LIV5hg65hd737456236dch46dg4;Liverpool Lime Street',\n                'SYB4f65hf75f736463;Stalybridge',\n                'HUD5767ghtyfyr4536dh45dg45dg3;Huddersfield'];\n\nfor(var i = 0; i < stations.length; i++){\n    var input = stations[i];\n    var str3 = input.slice(0,3);\n    var strLast = input.slice(input.indexOf(\";\")+1); //indexOf获取;位置\n    var output = str3 + \";\" + strLast;\n}\n```\n\n---\n\n通过 **indexOf** 根据子字符串筛选字符串数组:\n- **input**: 可能包含 *Christmas* 的字符串数组;\n- **output**: 包含 *Christmas* 的字符串数组;\n\n```js\nvar list = document.querySelector('.output ul');\nlist.innerHTML = '';\nvar greetings = ['Happy Birthday!',\n                 'Merry Christmas my love',\n                 'A happy Christmas to all the family',\n                 'You\\'re all I want for Christmas',\n                 'Get well soon'];\n\nfor(var i = 0; i < greetings.length; i++) {\n  var input = greetings[i];\n  if(greetings[i].indexOf('Christmas') !== -1) {\n    var result = input;\n    var listItem = document.createElement('li');\n    listItem.textContent = result;\n    list.appendChild(listItem);\n  }\n}\n```\n\n### 数字与字符串\n#### 相互转换\n非常神奇, 在JS当中, 数字和字符串可以直接通过函数`Number()`和`String()`进行转换, 与C语言不同.\n```js\nconst myString = \"123\";\nconst myNum = Number(myString);\nconsole.log(typeof myNum);\n// number\nconsole.log(myNum);\n// 123\n```\n\n```js\nconst myNum2 = 123;\nconst myString2 = String(myNum2);\nconsole.log(typeof myString2);\n// string\nconsole.log(myString2);\n// \"123\"\n```\n> 对于浮点数同样成立.\n\n#### 前后拼接\n使用`+`将字符串类型和数字类型的变量or常量直接拼接, 得到的是以空格相隔的字符串:\n```js\nconst name = \"Front \";\nconst number = 242;\nconst combine = name + number;\n\nconsole.log(combine); //Front 242\n\nconsole.log(typeof(combine));  //string\n```\n\n### 数组\n1. 存储任意类型元素--字符串，数字，对象，变量，**另一个数组**;\n2. 可以 **混合** 元素类型:\n```js\nlet random = [\"tree\", 795, [0, 1, 2]];\n```\n3. 像访问字符串一样, 利用索引访问数组元素;\n4. $\\underline{多维数组}$ 包含数组的数组结构称为~\n\n#### split()\n- 作用: 将一个字符串根据给定的字符分隔为字符串数组;\n```js\nlet myData = \"Manchester,London,Liverpool,Birmingham,Leeds,Carlisle\";\nlet myArray = myData.split(\",\");\nconsole.log(myArray);\n // [\"Manchester\", \"London\", \"Liverpool\", \"Birmingham\", \"Leeds\", \"Carlisle\"]\n```\n\n#### join()\n`split`的反向操作, 给出分隔符号, 将数组的字符串拼接成一个字符串:\n```js\nlet myNewString = myArray.join(\",\");\nmyNewString;\n```\n\n#### toString()\n与`join`方法相似, 但是无法自定义分隔符, 默认为`,`:\n```js\nlet dogNames = [\"Rocket\", \"Flash\", \"Bella\", \"Slugger\"];\ndogNames.toString(); //Rocket,Flash,Bella,Slugger\n```\n\n#### push & pop\n`push()`方法可以将1或多个元素添加到数组的 **末尾**:\n1. 将会直接改写原来的数组,不需要重新赋值;\n2. 该方法具有返回值, 且返回的是更新之后的数组长度(包含元素的个数);\n```js\nlet myArray = [1, 2, 3];\nlet newLength = myArray.push(4, 5,\"string\");\nconsole.log(myArray); // [1, 2, 3, 4, 5, \"string\"]\nconsole.log(newLength); // 6\n```\n\n使用`.pop()`从数组中删除最后一个元素:\n```js\nmyArray.pop(); //\"string\"\nconsole.log(myArray); // [1, 2, 3, 4, 5]\n```\n1. 方法调用返回值就是删除的元素本身;\n2. 直接对原始数组操作并赋值, 不需要另外的赋值操作;\n\n> shift & unshift:\n> 在功能上分别与`push`和`pop`相同, 但是作用于数组的开始位置.\n\n## 条件语句\nJS的条件语句与C语言十分相似, 在此仅给出官方文档的一些例子:\n### 天气预报\n```html\n<label for=\"weather\">选择今天的天气：</label\n><select id=\"weather\">\n  <option value=\"\">--作出选择--</option>\n  <option value=\"sunny\">晴天</option>\n  <option value=\"rainy\">雨天</option>\n  <option value=\"snowing\">雪天</option>\n  <option value=\"overcast\">阴天</option>\n</select>\n\n<p></p>\n```\n> `lable`当中的`for`标签与`select`标签的`id`属性对应, 用于关联两个标签.\n\n```js\nconst select = document.querySelector(\"select\");\nconst para = document.querySelector(\"p\");\n\nselect.addEventListener(\"change\", setWeather);\n\nfunction setWeather() {\n  const choice = select.value;\n\n  switch (choice) {\n    case \"sunny\":\n      para.textContent = \"阳光明媚。穿上短裤吧！去海滩，或公园，吃个冰淇淋。\";\n      break;\n    case \"rainy\":\n      para.textContent = \"外面下着雨；带上雨衣和雨伞，不要在外面呆太久。\";\n      break;\n    case \"snowing\":\n      para.textContent =\n        \"大雪纷飞，天寒地冻！最好呆在家里喝杯热巧克力，或者去堆个雪人。\";\n      break;\n    case \"overcast\":\n      para.textContent =\n        \"虽然没有下雨，但天空灰蒙蒙的，随时都可能变天，所以要带一件雨衣以防万一。\";\n      break;\n    default:\n      para.textContent = \"\";\n  }\n}\n```\n> 1. 通过`querySelector`方法获取`select`和`p`标签;\n> 2. 然后为`select`标签添加事件监听器, 当内容改变时触发 **change** 事件, 同时调用`setWeather`函数;\n> 3. 进而通过 **switch** 语句处理不同天气的情况, 并设置相应的文字内容;\n> 在线网页示例:[simple-switch](https://mdn.github.io/learning-area/javascript/building-blocks/simple-switch.html)\n\n\n## 事件介绍\n什么是$\\underline{事件}$? \n- 用户选择、点击或者光标悬停在某一元素;\n- 用户在键盘中按下某个按键;\n- 网页结束加载;\n- ...\n\n$\\underline{事件处理器}$ 为了响应事件, 我们需要编写一份JS代码块用于在事件发生之后运行. 这样的代码块称之为~.\n\n### 处理点击事件\n以点击事件为例, 介绍html与js如何进行事件处理的交互:\n```html\n<button> 改变颜色 </button>\n```\n```js\nconst btn = document.querySelector(\"button\");\n\nfunction random(number){\n  return Math.floor(Math.random()*(number+1));\n  \n}\n\nbtn.addEventListener(\"click\", ()=>{\n  const rndCol = `rgb(${random(255)},${random(255)},${random(255)})`;\n  document.body.style.backgroundColor = rndCol;\n})\n```\n1. `Math.random()`方法生成一个介于[0,1)之间的随机数;\n2. `*(number+1)`之后利用向下取整的方法`Math.floor()`将其转换为整数, 范围为[0,number];\n> 假如输入的number为`4`, 则`random(4)`的结果可能为`0`, `1`, `2`, `3`, `4`中的一个;\n> 假设输入的number为`3.6`, 则输出的结果还是0~4中的整数.\n3. ``rndCol = `rgb(${random(255)},${random(255)},${random(255)})`` 采用的是在$\\underline{模板字符串}$内部使用`${}`调用函数变量的方法.\n\n### addEventListener()\n`adEventListener`方法已经在之前的例子中出现过, 现在具体介绍其作用和语法.\n\n通过`EventTarget.adddEventListener()`的方法, 将指定的监听器注册到对象上, 具体的语法如下:\n```js\naddEventListener(type, listener);\naddEventListener(type, listener, options);\naddEventListener(type, listener, useCapture);\n```\n- `type`: 事件类型, 如`click`, `mouseover`, `mouseout`, `keydown`, `keyup`等;\n- `listener`: 事件处理函数, 该函数将在事件发生时被调用;\n  - 包括 **回调函数** 以及 实现了 **EventListener 接口的对象**;\n- `options`: 可选参数, 用于配置事件监听器的行为;\n> 可以为单个事件添加多个事件监听器.\n\n\n#### listener\n$\\underline{回调函数}$ 简单来说, ~指的是当某个事件发生时被调用的一段代码.\n- 是一个函数, 但是只有等到特定的事件发生时才会执行.\n\n实现了 EventListener 接口的对象:\n- **特点**: 以对象作为listener, 对象中具有名为`handleEvent()`的方法;\n- **作用**: \n  - 将事件处理封装到一个对象当中, 可以更好地组织代码;\n  - 便于在对象中保存更多的状态信息;\n```js\nconst listenerObject = {\n    count: 0,\n    handleEvent(event) {\n        this.count++;\n        console.log(`事件类型是：${event.type}，已触发 ${this.count} 次`);\n    }\n};\n\nconst button = document.querySelector('button');\nbutton.addEventListener('click', listenerObject);\n```\n\n#### options\n一个指定有关 listener 属性的可选参数对象.\n##### Capture\n- 含义:\n  - 一个布尔值，表示 listener 会在该类型的事件捕获阶段传播到该 EventTarget 时触发;\n  - 默认为false, 表示只有在冒泡阶段才触发.\n\n- 区别:\n  - `capture`和`useCapture`实际上指的都是 **监听器是否在捕获阶段触发** 的布尔值.\n> 捕获阶段: 从最外层的元素开始, 逐层向内捕获事件, 直到事件到达目标元素.\n  - 后来DOM的规范更新时引入了`options`参数, 此后`capture`取代了`useCapture`的作用.\n  - 如果`addEventListener`的第三个参数不指定对象, 只有布尔值, 那么默认是在设置`useCapture`\n\n> 可以先查看[事件传播的阶段](#事件传播的阶段)来辅助理解不同的阶段.\n\n##### Once\n- 含义:\n  - 一个布尔值，表示 listener 在添加之后最多只调用一次;\n  - 默认为false, 表示可以多次调用.\n- e.g.\n```js\nchild.addEventListener('click', () => {\n    console.log('子元素 - 目标阶段');\n},{once: true});\n```\n> `once`属性被设置为`true`, 当调用一次之后事件监听器会被自动清除. 因此只有第一次的点击才会console.\n\n##### Passive\n- 含义:\n  - 一个布尔值，设置为 true 时，表示 listener 永远不会调用 preventDefault();\n\n- 作用:\n  - 明确不会在`listener`中不会调用`preventDefault()`方法, 即不会阻止浏览器的[默认行为](#默认行为);\n  - 此时, 浏览器可以直接渲染默认行为的结果, 无需等待`listener`的执行与默认行为的检查, 从而提高了性能.\n- Notice:\n  - 如果设置`passive`为`true`, 则`listener`当中不可出现`preventDefault()`方法, 否则会报错.\n\ne.g.\n```js\ndocument.addEventListener('wheel',()=>{\n\tevent.preventDefault();\n  console.log(\"scrolling\");\n},{passive: false});\n```\n- `wheel`事件的默认行为是滚动页面;\n- `event.preventDefault();`表示会阻止鼠标滚动带来的页面滚动;\n\n\n```js\ndocument.addEventListener('wheel',()=>{\n  console.log(\"scrolling\");\n},{passive: true});\n```\n> 明确不会阻止默认行为, 浏览器可以直接渲染页面的滚动效果, 因此提高了显示的效果.\n\n```js\ndocument.addEventListener('wheel',()=>{\n  event.preventDefault();\n  console.log(\"scrolling\");\n},{passive: true});\n```\n> `passive`的设置与`listener`内部矛盾, 将会报错.\n\n##### Signal\n用于有条件地移除事件监听器, 具体使用参见[可被移除的监听器](#可被移除的监听器).\n\n### 事件传播的阶段\n1. 捕获阶段 $\\underline{capture\\space phase}$: 事件从根节点开始向目标节点传播;\n> e.g. 点击事件从document开始传播, 经过html,body直到目标元素.\n2. 目标阶段阶段 $\\underline{target\\space phase}$: 事件到达目标元素;\n3. 冒泡阶段 $\\underline{bubble\\space phase}$: 事件从目标元素开始沿着DOM树向上传播.\n\n#### Case\n```html\n<div id=\"parent\">\n  parent\n  <div id=\"child\">child</div>\n</div>\n```\n```js\nconst parent = document.querySelector('#parent');\nconst child = document.querySelector('#child');\n\nparent.addEventListener('click', () => {\n    console.log('父元素 - 冒泡阶段');\n});\n\nparent.addEventListener('click', () => {\n    console.log('父元素 - 捕获阶段');\n}, { capture: true });\n\nchild.addEventListener('click', () => {\n    console.log('子元素 - 目标阶段');\n});\n```\n上述的`child`被包裹在`parent`内部.\n- 当点击`parent`时将会显示:\n```bash\n\"父元素 - 捕获阶段\"\n\"父元素 - 冒泡阶段\"\n```\n> 由于设置了在捕获阶段就触发, 所以先触发了捕获阶段的监听器, 然后再触发冒泡阶段的监听器;\n\n- 当点击`child`时将会显示:\n```bash\n\"父元素 - 捕获阶段\"\n\"子元素 - 目标阶段\"\n\"父元素 - 冒泡阶段\"\n```\n> `child`是整个事件流的目标元素, 所以触发时机介于二者之间.\n\n#### Notice\n1. 如果将`div`换成`button`, 则点击`child`时可能只会显示 **目标** 阶段的输出.\n> 这是因为, 不同浏览器对于`button`元素的默认行为不同, 可能默认阻止了捕获阶段和冒泡阶段\n\n2.  `event.stopPropagation();`加入该~~咒语~~代码可以在此停止事件的传播, 比如可以在上述的捕获阶段监听器加入该代码:\n```js\nparent.addEventListener('click', () => {\n    console.log('父元素 - 捕获阶段');\n    event.stopPropagation();\n}, { capture: true });\n```\n> 此时, 点击`parent`时, 只会触发捕获阶段的监听器, 不会触发冒泡阶段的监听器.\n\n### 可被移除的监听器\n```html\n<table id=\"outside\">\n  <tr>\n    <td id=\"t1\">one</td>\n  </tr>\n  <tr>\n    <td id=\"t2\">two</td>\n  </tr>\n</table>\n```\n```js\n// 为 table 添加可被移除的事件监听器\nconst controller = new AbortController();\nconst el = document.getElementById(\"outside\");\nel.addEventListener(\"click\", modifyText, { signal: controller.signal });\n\n// 改变 t2 内容的函数\nfunction modifyText() {\n  const t2 = document.getElementById(\"t2\");\n  if (t2.firstChild.nodeValue === \"three\") {\n    t2.firstChild.nodeValue = \"two\";\n  } else {\n    t2.firstChild.nodeValue = \"three\";\n    controller.abort(); // 当值变为 \"three\" 后，移除监听器\n  }\n}\n```\n> - `AbortController`是一个构造函数, 用于创建一个可被移除的事件监听器的控制器;\n> - `signal`属性是一个`AbortSignal`对象, 用于控制监听器的移除;\n> - `controller.abort()`方法用于移除监听器;\n> - 当`t2`的内容变为\"three\"时, 移除监听器, 使得`modifyText`函数不再执行. 此后, 点击`t2`不会触发`modifyText`函数.\n\n具体的**构造步骤:**\n1. 创建一个`AbortController`实例: `const controller = new AbortController();`\n2. 在事件监听器内的参数中添加`signal: controller.signal`选项;\n3. 在需要移除监听器的地方调用`controller.abort()`方法;\n\n---\n\n我们也可以直接使用`removeEventListener()`方法来移除事件监听器:\n```js\nremoveEventListener(type, listener);\nremoveEventListener(type, listener, options);\nremoveEventListener(type, listener, useCapture);\n```\n\n\n- Notices:\n  - 如果同一个对象上存在2个事件监听器, 且仅在`useCapture`参数存在差异, 那么需要先后2次调用`removeEventListener()`方法才能完全移除其事件监听器;\n  - 如果无法匹配当前注册的事件监听器, 那么该函数将不会起任何作用;\n  - `type`,`listener`参数必须完全匹配才能移除事件监听器;\n  - 对于`options`参数:\n    - 字段相同: 一定可以移除;\n    - 字段不同: 需要与默认值false匹配才可以移除.\n```js\nelement.addEventListener(\"mousedown\", handleMouseDown, { passive: true });\n\nelement.removeEventListener(\"mousedown\", handleMouseDown, { passive: true }); // 成功\nelement.removeEventListener(\"mousedown\", handleMouseDown, { capture: false }); // 成功\nelement.removeEventListener(\"mousedown\", handleMouseDown, { capture: true }); // 失败\nelement.removeEventListener(\"mousedown\", handleMouseDown, { passive: false }); // 成功\nelement.removeEventListener(\"mousedown\", handleMouseDown, false); // 成功\nelement.removeEventListener(\"mousedown\", handleMouseDown, true); // 失败\n```\n\n---\n**添加与移除**的结合使用:\n```js\nconst body = document.querySelector(\"body\");\nconst clickTarget = document.getElementById(\"click-target\");\nconst mouseOverTarget = document.getElementById(\"mouse-over-target\");\n\nlet toggle = false;\nfunction makeBackgroundYellow() {\n  body.style.backgroundColor = toggle ? \"white\" : \"yellow\";\n\n  toggle = !toggle;\n}\n\nclickTarget.addEventListener(\"click\", makeBackgroundYellow, false);\n\nmouseOverTarget.addEventListener(\"mouseover\", () => {\n  clickTarget.removeEventListener(\"click\", makeBackgroundYellow, false);\n});\n```\n\n\n### 使用匿名函数\n在上述`html`例子下:\n```js\n// 改变 t2 内容的函数\nfunction modifyText(new_text) {\n  const t2 = document.getElementById(\"t2\");\n  t2.firstChild.nodeValue = new_text;\n}\n\n// 用匿名函数为 table 添加事件监听器\nconst el = document.getElementById(\"outside\");\nel.addEventListener(\n  \"click\",\n  function () {\n    modifyText(\"four\");\n  },\n  false,\n);\n```\n通过匿名函数封装代码, 将参数传入函数`modifyText`, 使得函数可以被调用.\n\n### 使用箭头函数\n```js\n// 改变 t2 内容的函数\nfunction modifyText(new_text) {\n  var t2 = document.getElementById(\"t2\");\n  t2.firstChild.nodeValue = new_text;\n}\n\n// 用箭头函数为 table 添加事件监听器\nconst el = document.getElementById(\"outside\");\nel.addEventListener(\n  \"click\",\n  () => {\n    modifyText(\"four\");\n  },\n  false,\n);\n```\n通过`=>{}`形式的箭头函数简化代码书写.\n\n---\n#### 比较匿名与箭头\n匿名函数与箭头函数在此处的应用基本相同, 但是在`this`的指向上有所不同:\n- 匿名函数与其他普通的JS函数:`this`指向调用它的对象之作用域(如果没有直接调用关系, 默认为全局对象, 且严格模式下为`undefined`);\n```js\nfunction sayHello() {\n  console.log(this); // 在非严格模式下，this 指向 window\n}\nsayHello();\n```\n\n- 箭头函数的`this`继承自外部作用域, 即调用该方法的对象.\n```js\nconst obj = {\n  name: \"ZJU\",\n  greet: function () {\n    console.log(this.name); // this 指向 obj\n  },\n};\nobj.greet(); // 输出：ZJU\n```\n\n- e.g.\n```js\nconst obj = {\n  name: \"ZJU\",\n  getNameWithAnonymous: function () {\n    return function () {\n      console.log(this.name);\n    };\n  },\n  getNameWithArrow: function () {\n    return () => {\n      console.log(this.name);\n    };\n  },\n};\n\nconst anonymousFn = obj.getNameWithAnonymous();\nanonymousFn(); // 输出：undefined\n\nconst arrowFn = obj.getNameWithArrow();\narrowFn(); // 输出：ZJU\n```\n> 进一步完善.\n\n### 事件对象\n$\\underline{事件对象}$ 在事件处理函数的内部, 以固定指定名称出现的参数, 例如`event`,`e`,`evt`. 它被自动传递给事件处理函数，以提供额外的功能和信息。\n\n`e.target`始终是对 **事件刚刚发生的元素** 的引用\n\n## 表达式和运算符\n### new()\n$\\underline{new}$ 用来创建对象实例的一个关键字. \n- 作用: **调用** 一个 构造函数, 并返回一个由该构造函数创建的对象实例.\n#### 语法\n```js\nnew constructor\nnew constructor()\nnew constructor(arg1)\nnew constructor(arg1, arg2)\nnew constructor(arg1, arg2, /* …, */ argN)\n```\n1. 如果没有指定参数, 默认为在不带参数的情况下调用构造函数. 即`new foo` 等价于 `new foo()`;\n2. 构造函数内部的`this`将被绑定到新建的对象实例上;\n\n- e.g. \n```js\nfunction Car(color, brand) {\n  this.color = color;   // 将 color 赋值给新对象\n  this.brand = brand;   // 将 brand 赋值给新对象\n}\n\nconst myCar = new Car(\"red\", \"Toyota\");\n\nconsole.log(myCar.color); // 输出 \"red\"\nconsole.log(myCar.brand); // 输出 \"Toyota\"\n```\n\n使用`new()`的**步骤**:\n 1. 定义构造函数;\n 2. 使用`new()`并传入构造函数的参数;\n 3. 将返回的对象实例赋值给一个变量;\n\n#### 新增属性\n- 为已经定义的对象实例直接新增属性, 但是不会影响其他相同类型的对象和构造函数本身:\n```js\ncar1.color = \"black\" //为car1新增color属性\n```\n<br>\n\n- 添加共享属性到构造函数中的`prototype`:\n```js\nfunction Car() {}\ncar1 = new Car();\ncar2 = new Car();\n\nconsole.log(car1.color); // undefined\n\nCar.prototype.color = \"原色\";\nconsole.log(car1.color); // '原色'\n\ncar1.color = \"黑色\";\nconsole.log(car1.color); // '黑色'\n\nconsole.log(Object.getPrototypeOf(car1).color); // '原色'\nconsole.log(Object.getPrototypeOf(car2).color); // '原色'\nconsole.log(car1.color); // '黑色'\nconsole.log(car2.color); // '原色'\n```\n> - 此处的构造函数名为`Car`, 因此通过`Car.prototype`可以访问到构造函数的原型对象;\n> - `getPrototypeOf` 表示获取对象的**原型对象**, 因此此处均为最初定义的 **原色**.\n\n#### new.target\n函数通过`new.target`属性可以判断是否通过`new`关键字调用, 即构造.\n- 如果函数是正常调用, 则返回`undefined`;\n- 如果函数是通过`new`调用, 返回被调用的构造函数.\n\n- e.g.\n```js\nfunction Car(color) {\n  if (!new.target) {\n    // 以函数的形式被调用。\n    return `${color}车`;\n  }\n  // 通过 new 被调用。\n  this.color = color;\n}\n\nconst a = Car(\"红\"); // a 是“红车”\nconst b = new Car(\"红\"); // b 是 `Car { color: \"红\" }`\n```\n\n#### 对象类型与实例\n$\\underline{对象类型}$ 通过构造函数可以创建一个对象类型:\n```js\nfunction Car(make, model, year) {\n  this.make = make;\n  this.model = model;\n  this.year = year;\n}\n```\n\n$\\underline{对象实例}$ 通过使用`new()`方法, 由对象类型构造一个对象实例:\n```js\nconst myCar = new Car(\"鹰牌\", \"Talon TSi\", 1993);\n```\n\n#### 类与new\n在JS当中, 类 **必须** 通过`new`调用.\n> 可以优先阅读[类相关的知识](#类)\n\n- e.g. \n```js\nclass Animal {\n  //构造函数\n  constructor(name) {\n    this.name = name;\n  }\n  //实例方法\n  greet() {\n    console.log(`你好，我的名字是${this.name}`);\n  }\n}\n```\n对于上述的类, 必须使用如下的调用方式:\n```js\nconst animal = new Animal(\"Dog\"); // 正常\n```\n而下面这样类似于普通函数的调用方式会抛出错误:\n```js\nAnimal(\"Cat\"); // TypeError:  Class constructor Animal cannot be invoked without 'new'\n```\n<br>\n\n在使用正确方法得到类的实例对象之后, 可以用访问属性的方式来调用实例方法:\n```js\nanimal.greet(); // 输出 \"你好，我的名字是Dog\"\n```\n\n---\n\n下面给出与普通函数的区别:\n```js\nfunction Car(model) {\n  this.model = model;\n}\n\nconst car = new Car(\"Toyota\"); // 正常\nCar(\"Honda\"); // 不抛出错误，但 this 会指向全局对象.\nconst anotherCar = Car(\"cat\"); //此时全局对象下的model值为 \"cat\", 覆盖了上一行的定义.\n```\n总结:\n- 以构造函数形式呈现的普通函数, 可以被直接调用, 但是此时内部的参数赋值给了全局对象;\n- 如果以new方法构造得到对象实例, 依旧正常.\n\n---\n\n# 补充\n## 默认行为\n$\\underline{默认行为}$ 是指浏览器在某些事件发生时，自动执行的内置操作, 是浏览器的“默认反应”.\n\n- 比如存在以下的默认行为:\n  - 滚动事件：触摸屏上滑动手指，页面会滚动;\n  - 拖拽文件到浏览器：浏览器会尝试加载文件;\n  - 点击链接 `(<a href=\"...\">)`：跳转到指定的 URL;\n\n$\\underline{阻止默认行为}$ 使用 `event.preventDefault()` 方法可以阻止事件的默认行为.\n\n- e.g: 阻止链接跳转\n```js\ndocument.querySelector('a').addEventListener('click', function(event) {\n    event.preventDefault(); // 阻止点击链接时的默认行为\n    console.log('链接被点击，但没有跳转');\n});\n```\n\n- 作用:\n  - 通过阻止默认行为, 可以实现自定义逻辑.\n\n## this\n\n- `this`可以视作函数的一个隐参数, 是在函数被执行时创建的绑定;\n- `this` 指向的是**当前函数的调用者**，而不是函数内部定义的变量.\n\n<br>\n\n- e.g.\n```js\nconst obj = {\n    a: \"a in the obj\",\n    b: \"b in the obj\",\n    f: function() {\n        const b = \"b in the function\"; // 函数作用域\n        console.log(this.b); // 访问 this.b\n    }\n};\n\nconst b = \"b outside of the func\";\n\nobj.f();\n```\n> 此处的`f`\n\n### 函数上下文中的this\n- `this`参数的值取决于函数**如何**被调用, 而不是函数如何被定义.\n```js\n// 对象可以作为第一个参数传递给 'call' 或 'apply'，\n// 并且 'this' 将被绑定到它。\nconst obj = { a: \"Custom\" };\n\n// 使用 var 声明的变量成为 'globalThis' 的属性。\nvar a = \"Global\";\n\nfunction whatsThis() {\n  return this.a; // 'this' 取决于函数如何被调用\n}\n\nwhatsThis(); // 'Global'; 在非严格模式下，'this' 参数默认为 'globalThis'\nobj.whatsThis = whatsThis;\nobj.whatsThis(); // 'Custom'; 'this' 参数被绑定到 obj\n```\n1. 同样是调用函数`whatsThis()`, 但是`this`参数被绑定到不同的对象上, 导致返回值不同;\n2. 在非严格模式下, `this`参数默认指向`globalThis`, 即全局对象;\n3. 对于典型函数, `this`指向函数访问的对象;\n\n- e.g. \n```js\nconst obj = {\n    b: \"b in the obj\",\n    f: function() {\n        const b = \"b in the function\"; // 函数作用域\n        console.log(this.b); // 访问 this.b\n    }\n};\n\nconst b = \"b outside of the func\";\n\nobj.f();\n```\n> 此处`f`作为`obj`对象的方法被调用, 因此普通函数的`this`指向`obj`.\n\n- e.g. 直接调用的普通函数`this`指向全局:\n```js\nconst obj = {\n    a: \"a in the obj\",\n    f: function() {\n        const funcA = function () { return this.a }; // 普通函数，this 由调用方式决定\n        console.log(funcA()); // 访问 this.a\n    }\n};\n\nvar a = \"a in the global\";\nobj.f(); // \"a in the global\"\n```\n> - 此处的`funcA`并没有类似于作为对象的属性调用(`obj.funcA()`), 因此其`this`指向全局作用域(`window`), 输出`undefined`, 而是直接调用的形式, 因此其`this`指向全局作用域.\n\n\n\n\n\n### 对this传值\n使用`call()`以及`apply()`方法可以将`this`绑定到其他对象上.\n#### call()\n- 形式: `func.call(thisArg, arg1, arg2, ...)`\n- e.g:\n```js\nfunction add(c, d) {\n  return this.a + this.b + c + d;\n}\n\nconst o = { a: 1, b: 3 };\n\n// 第一个参数被绑定到隐式的 'this' 参数；\n// 剩余的参数被绑定到命名参数。\nadd.call(o, 5, 7); // 16\n```\n\n#### apply()\n- 形式: `func.apply(thisArg, [argsArray])`\n- e.g:\n```js\nfunction add(c, d) {\n  return this.a + this.b + c + d;\n}\n\nconst o = { a: 1, b: 3 };\n\n// 第一个参数被绑定到隐式的 'this' 参数；\n// 第二个参数是一个数组，其成员被绑定到命名参数。\nadd.apply(o, [10, 20]); // 34\n```\n\n#### bind()\n- 形式: `f.bind(someObject)`;\n- **作用**: \n  - 创建一个新的函数(需要重新赋值), 具有与`f`相同的函数体和作用域;\n  - 新函数的`this`被 **永久地** 绑定到`someObject`, 不随调用方式的变化而变化.\n- **限制**: \n  - `bind`无法多次生效. 即对函数f`bind`得到的g, 无法继续用`bind`得到期望的h;\n- e.g. 多次`bind`:\n```js\nfunction f() {\n  return this.a;\n}\n\nconst g = f.bind({ b: \"azerty\" });\nconsole.log(g()); // undefined\n\nconst h = g.bind({ a: \"yoo\" }); // bind 只能生效一次！\nconsole.log(h()); // undefined\n\nconst o = { a: 37, f, g, h };\nconsole.log(o.a, o.f(), o.g(), o.h()); // 37 37 undefined undefined\n```\n> - 由于`bind`只能对一个原始函数作用, 因此由f得到的g无法继续由`bind`绑定`this`得到期望的h, 此处h的`this`依旧是`{b: \"azerty\"}`, 因此在输出对象`a`时显示`undefined`;\n> - `o.f()`的调用是普通函数的调用, 因此其`this`继承自对象`o`, 输出`37`;\n\n- e.g. 对象\n```js\nfunction f() {\n  return this.a + \" \" + this.c;\n}\n\nconst g = f.bind({ b: \"azerty\" , c:\"ccc\"});\nconsole.log(g()); // \"undefined ccc\"\n\nconst h = g.bind({ a: \"yoo\" }); // bind 只能生效一次！\nconsole.log(h()); // \"undefined ccc\"\n\nconst o = { a: 37, f, g, h };\nconsole.log(o.a, o.f(), o.g(), o.h()); // 37 37 azerty azerty\n```\n> - `bind`绑定的`this`是永久覆盖, 而非简单叠加;\n> - 由于`bind`绑定的`this`不随者调用方式的变化而变化, 因此即使处于对象`o`当中, `g`,`h`依旧不会输出`o`中的`a`.\n\n### 箭头函数中的this\n\n\n使用 call()、apply() 或 bind() 调用箭头函数时，传入的 this 值会被忽略，但其他参数仍然会正常传递。\n\n\n普通函数:\n```js\nconst a = \"a in the global\";\nconst foo = function () {return this.a};\n\nconst obj = {\n a: \"a in the obj\",\n f: foo\n};\n\nconsole.log(obj.f()); // \"a in the obj\"\n```\n\n`call()`、 `apply()`、 `bind()` 无法改变箭头函数的`this`(但是call与apply的其他参数可以正常传递:\n```js\nconst foo = ()=> this.a;\n\nconst obj = {\n a: \"a in the obj\",\n f: foo.bind({a:\"a in the bind\"}) // 显式绑定 this 到 obj, 但是无法生效\n};\n\nconsole.log(obj.f()); // undefined\n\n```\n> 换成普通函数则输出`a in the obj`.\n\n\n- 全局作用域\n```js\nvar a = \"a in the global\";\nconst foo1 = () => this.a;\n\nconst obj = {\n\ta: \"a in the obj\",\n\tf: ()=> a\n};\n\nconsole.log(obj.f());\n```\n\n## 作用域\n$\\underline{作用域}$ 指当前的执行上下文, 在其中的值和表达式可以被访问. \n- 全局作用域: 脚本模式运行所有代码的默认作用域;\n- 模块作用域: 模块模式中运行代码的作用域;\n- 函数作用域: 由函数创建的作用域\n- 块级作用域: 由`let`或`const`声明的变量的作用域.(对于`var`无效);\n\n```js\n{\n  var x = 1;\n}\nconsole.log(x); // 1\n\n{\n  const x = 1;\n}\nconsole.log(x); // undefined\n```\n\nNotices:\n- 对象本身并不会创建作用域, 只是一个键值对的集合;\n- 箭头函数也不会创建自己的作用域, 而是 **继承** 外层作用域中的`this`;\n\n### 变量与作用域\n- `var`在全局作用域中声明时会成为 **全局对象** (`window`或`global`)的属性;\n- `let`和`const`即使在全局作用域中声明, 也不会成为全局对象的属性;\n```js\nvar a = \"1\";\nlet b = \"2\";\n\nwindow.a; // \"1\"\nwindow.b; // undefined\n```\n> 因此, 建议在全局作用域中不要使用`var`声明变量, 而使用`let`或`const`声明变量. 从而避免导致意外的覆盖和冲突.\n\n\n### 函数与作用域\n#### 普通函数\n普通函数和匿名函数的作用域继承自其定义时的作用域.\n```js\nconst obj = {\n    a: \"a in the obj\",\n    insideObj: {\n        g: function() {\n            return this.a; // 普通函数，this 动态绑定到 insideObj\n        }\n    },\n    f: function() {\n        return this.a; // 普通函数，this 动态绑定到 obj\n    }\n};\n\nconsole.log(obj.f());        // \"a in the obj\"\nconsole.log(obj.insideObj.g()); // undefined，因为 insideObj 中没有 a\n```\n\n#### 箭头函数\ne.g. **箭头函数继承外层作用域**:\n```js\nvar a = \"a in the global\";\n\nconst obj = {\n    a: \"a in the obj\",\n    insideObj: {\n        g: () => this.a\n    },\n    f: () => this.a\n};\n\nconsole.log(obj.f());        // \"a in the global\"\nconsole.log(obj.insideObj.g()); //\"a in the global\"\n```\n由于对象不会创建作用域, 因此此处的箭头函数的`this`继承了外层作用域(window)的`this`, 且`var`创建的变量存在于全局作用域中.\n\n## 语法糖\n$\\underline{语法糖}$ 一种让代码更简洁、更易读的语法形式.\n- 本质上没有增加语言的功能, 而是对已有功能的 **包装** 或者优化;\n- **可读性提升**: ~~让代码更填~~ 使得代码更加容易理解和书写;\n- **底层实现**: 实质上依旧用基础的语法实现.\n\n### 类\n类 `class` 是 ES6 引入的语法糖, 它提供了面向对象编程的简洁语法. 本质上是对原型继承`prototype`的封装.\n\n使用`class`的写法:\n```js\nclass Person {\n  constructor(name) {\n    this.name = name;\n  }\n\n  greet() {\n    console.log(`Hello, my name is ${this.name}`);\n  }\n}\n\nconst person = new Person(\"Alice\");\nperson.greet(); // 输出：Hello, my name is Alice\n```\n\n等价的原型写法:\n```js\nfunction Person(name) {\n  this.name = name;\n}\n\nPerson.prototype.greet = function() {\n  console.log(`Hello, my name is ${this.name}`);\n};\n\nconst person = new Person(\"Alice\");\nperson.greet(); // 输出：Hello, my name is Alice\n```\n\n### 箭头函数\n箭头函数简化了函数定义的书写, 其本质上依旧是一个普通函数, 因此也是语法糖的一种.\n\n- e.g.\n```js\n// 使用箭头函数\nconst add = (a, b) => a + b;\n\n// 等价的普通函数\nconst add = function add(a, b) {\n  return a + b;\n}\n```\n\n### 结构赋值\n$\\underline{结构赋值}$ 手动提取**对象**属性的语法糖.\n\n- 使用结构赋值:\n```js\nconst person = {name:\"Zhuo\", gender:\"male\"};\n\nconst {name, gender} = person;\n```\n\n- 等价的原型写法:\n```js\nconst person = {name:\"Zhuo\", gender:\"male\"};\n\nconst name = person.name;\nconst gender = person.gender;\n```\n\n#### 赋值规则\n结构赋值时, 基于 **属性名匹配** 而非顺序. \n因此, 对象结构的`{}`内部属性必须和 **对象的属性名** 相对应.\n\n**错误**的示例:\n```js\nconst person = { name: \"Alice\", age: 25 };\nconst { a, b } = person;\n\nconsole.log(a); // 输出：undefined\nconsole.log(b); // 输出：undefined\n```\n\n**重命名属性**的写法:\n```js\nconst person = { name: \"Alice\", age: 25 };\nconst { name: a, age: b } = person;\n\nconsole.log(a); // 输出：Alice\nconsole.log(b); // 输出：25\n```\n\n**手动赋值**: 对于结构对象中不存在的属性, 可以采取普通赋值的方式与结构赋值相结合:\n```js\nconst person = { name: \"Alice\" };\nconst { name, age = 30 } = person;\n\nconsole.log(name); // 输出：Alice\nconsole.log(age);  // 输出：30 （因为 person 中没有 age 属性，所以使用了默认值）\n```\n#### 数组的结构赋值\n上述讨论的结构赋值都是对 **对象** 的结构赋值, 对于数组同样可以结构赋值, 且赋值规则与对象相反—— **基于顺序**赋值:\n```js\nconst arr = [\"Alice\", 25];\nconst [a, b] = arr;\n\nconsole.log(a); // 输出：Alice\nconsole.log(b); // 输出：25\n```\n","source":"_posts/编程语言/JavaScript.md","raw":"---\ntitle: JavaScript\ndate: 2025-01-09 14:06:30\ntags: \n- 前端\n- JS\ncategories: 学习笔记\nexcerpt: 一种轻量级、解释型、面向对象的编程语言. 作为前端三件套之一以及TS的基础, JS语言细节十分难嚼. 本文在「料理的加护」下, 尽可能将JS处理得更加可口一些)\nmathjax: true\nindex_img: /img/料理的加护.jpg\n---\n> JavaScript是一种轻量级、解释型、面向对象的编程语言. 作为前端三件套之一以及TS的基础, JS语言细节十分难嚼. 本文在「**料理的加护**」下, 尽可能将JS处理得更加**可口**一些)\n<img src=\"/img/料理的加护.jpg\" width = \"35%\">\n\n# 创建JS代码块\n## 变量\n### `var` or `let`?\n`var`先于`let`的产生, 后者是现代版本的JS中新的关键字.\n\n使用`var`, 可以对一个先前已被声明且初始化的变量重新声明, 这不会带来报错, 代码依旧可以工作. 但是`let`并不适用.\n```js\nmyName = \"Chris\";\n\nfunction logName() {\n  console.log(myName);\n}\n\nlogName(); //输出\"Chris\"\n\nvar myName = \"Aniya\";\nlogName(); //输出\"Aniya\"\n```\n\n除此之外, 可以使用`var`前后声明相同的变量, 这并不会报错:\n```js\nvar myName = \"Chris\";\nvar myName = \"Bob\";\n```\n\n而`let`只能声明一次:\n```js\nlet myName = \"Chris\";\nmyName = \"Bob\";\n```\n\n因此, 在代码编写中应尽量**多使用**`let`而非`var`, 这可以帮助我们排除无意中重新命名相同变量而导致的错误.\n\n\n### 变量命名的规则\n与C语言类似, 建议以 **字母、数字、下划线** 组成的标识符来命名变量.\n- 不可用`_`开头, 因为可能被JS设计为特殊的含义;\n- 不可用数字开头, 否则引发错误;\n- 大小写敏感;\n- 建议采用 **小写驼峰命名法** ,即小写整个命名的第一个字母然后大写剩下单词的首字符;\n- 避免使用保留字, 比如`var`,`let`,`for`等.\n\n### 变量类型\n\n```js\nlet myAge = 20 ;// 数字\nlet dolphinGoodbye = \"So long and thanks for all the fish\"; // 字符串\nlet test = 6 < 3; //boolean\n\n//数组类型\nlet myNameArray = [\"Chris\", \"Bob\", \"Jim\"];\nlet myNumberArray = [10, 15, 40];\n\n//对象类型\nlet dog = { name: \"Spot\", breed: \"Dalmatian\" };\n\n```\n> 对象类型的访问与结构体相似, `dog.name;`\n\n在上面的几种变量类型中, 我们都采用`let`关键字声明变量, 这体现了JS是一种 **动态类型语言** ,即无需指定变量包含的数据类型.\n\n同时, 这也意味着我们可以像`python`一样对同一个变量先后赋值不同类型的值:\n```js\nlet myNumber = \"500\";\ntypeof myNumber;\n// 输出 'string'\n\nmyNumber = 500; \ntypeof myNumber;\n//输出'number'\n```\n\n\n## 函数\n- $\\underline{提升}$ 解释器在执行代码之前，似乎将函数、变量、类或导入的声明移动到其作用域的顶部的过程.\n```js\nexampleFunction();\n\nfunction exampleFunction() {\n  console.log(\"函数内\");\n  console.log(x);\n}\n```\n> 由于 **提升** 的存在, 上述的函数调用不会出错.\n\n\n### 默认参数\n在编写函数时, 可以通过在参数名称后添加`=`, 再指定默认值, 这样当调用函数时, 如果没有传入该参数, 则使用默认值。\n```js\nfunction greeding(name = \"my friend\") {\n    console.log(`Hello, ${name}!`);\n}\nhello(); //Hello, my friend!\nhello(\"world\"); //Hello, world!\n```\n\n<br>\n\n事件处理函数的默认接受值是`event`:\n```html\n<button>\nonclick\n</button>\n\n<p>\nnothing here\n</p>\n\n<script>\nbtn = document.querySelector(\"button\")\npara = document.querySelector(\"p\")\n\nbtn.onclick = click;\n\nfunction click(string){\n  console.log(\"clicked!\")\n  para.textContent = string;\n}\n</script>\n```\n1. 上述的`btn`在点击之后调用函数`click`, 该函数需要一个参数`string`, 由于`btn.onclick = click;`的绑定方式, 我们无法指定传参的值, 因此点击之后的`para`的内容显示为: `[object PointerEvent]`;\n2. `textContent`是属性而非方法, 因此采用赋值实现;\n\n\n```js\nbtn.onclick = function click(string) {\n  console.log(\"clicked!\")\n  para.textContent = \"You have clicked the button!\";\n}\n```\n> 将上述的绑定方式如此改写, 可以在`btn`外对`string`进行赋值, 然后点击按钮可以传入指定参数供后续处理.\n\n\n\n### 箭头函数\n在了解箭头函数的作用之前, 需要先介绍 $\\underline{匿名函数}$:\n```js\nfunction myFunction() {\n  alert(\"你好\");\n}\n\n// 匿名函数\n(function () {\n  alert(\"你好\");\n});\n```\n> 正如其名, 匿名函数没有函数名, 不能被调用, 但可以作为参数传入其他函数中.\n\n如果我们希望在监听某个事件发生时调用简单的函数来处理, 则可以通过调用上述的匿名函数实现:\n```js\nfunction logKey(event) {\n  console.log(`You pressed \"${event.key}\".`);\n}\n\ntextBox.addEventListener(\"keydown\", logKey);\n```\n这部分代码通过监听html元素的keydown事件, 调用函数输出按下的键盘按键. 我们可以通过匿名函数来简化书写:\n```js\ntextBox.addEventListener(\"keydown\", function (event) {\n  console.log(`You pressed \"${event.key}\".`);\n});\n```\n>只需传入函数体, 而不需要函数名, 就可以实现监听事件并调用函数的功能.\n\n而**箭头函数**则是在此情况下更简洁的函数定义方式:\n```js\ntextBox.addEventListener(\"keydown\", (event) => {\n  console.log(`You pressed \"${event.key}\".`);\n});\n\n//如果函数只接受一个参数, 也可以省略参数周围的括号\ntextBox.addEventListener(\"keydown\", event => {\n  console.log(`You pressed \"${event.key}\".`);\n});\n```\n\n如果只包含一行的`return`,则可以忽略`{}`和`return`关键字:\n```js\nconst originals = [1, 2, 3];\n\nconst doubled = originals.map(item => item * 2);\n\nconsole.log(doubled); // [2, 4, 6]\n```\n> `item => item * 2`等价于:\n```js\nfunction doubleItem(item) {\n  return item * 2;\n}\n```\n\n#### 一个实例\n```html\n<input id=\"textBox\" type=\"text\" />\n<div id=\"output\"></div>\n```\n```js\nconst textBox = document.querySelector(\"#textBox\");\nconst output = document.querySelector(\"#output\");\n\ntextBox.addEventListener(\"keydown\", (event) => {\n  output.textContent = `You pressed \"${event.key}\".`;\n});\n```\n通过监听输入框的keydown事件, 输出按下的键盘按键.\n\n### 函数作用域和冲突\n$\\underline{作用域}$ 指当前的执行上下文, 在其中的值和表达式可以被访问. \n- 全局作用域: 脚本模式运行所有代码的默认作用域;\n- 模块作用域: 模块模式中运行代码的作用域;\n- 函数作用域: 由函数创建的作用域\n\n和C语言相似, 在函数外部`let`定义的变量, 以及`const`定义的常量可以在函数内部访问.\n\n如果HTML调用了多个外部JS文件, 其中具有相同的函数名, 那么只能访问的第一个函数, 第二个函数将被忽略:\n```html\n<!-- Excerpt from my HTML -->\n<script src=\"first.js\"></script>\n<script src=\"second.js\"></script>\n<script>\n  greeting();\n</script>\n```\n> 如果两个JS文件都定义了`greeting`函数, 则只有第一个文件中的函数才会被调用.\n\n## 数据类型\n### 数字和操作符\n大部分与C语言相同, 概括需要注意的差异:\n- JS当中只有一种数字类型 -- `number`, 对于整型或者浮点数的初始化得到的量, 由`typeof`均得到`number`;\n- 算术运算符: 求幂为`**`;\n- 常量无法使用自增或自减,~~好像也是C语言的 忘了~~\n- `===`表示严格等于, `!==`表示不等于;\n> 同时存在`==`和`!=`来判断是否相等, 但是它们只是测试 **值** 是否相等, 会忽略数据类型的差异; 而上述的比较会同时比较数据类型. 因此推荐使用`===`和`!==`来避免类型不一致的错误.\n\n### 字符串\n创建字符串\n```js\nlet myString = \"A string\";\nconst constString = myString;\nconsole.log(constString);\n//A string\n``` \n可以使用单引号,双引号和**反引号**来包裹字符串, 但是必须确保字符串的开头和结尾使用相同的字符:\n```js\nconst single = '单引号';\nconst double = \"双引号\";\nconst backtick = `反引号`;\n```\n\n反引号包裹的字符串称为$\\underline{模板字符串}$, 大多数情况下,它与其他两种字符串类似, 但是具有特殊的属性:\n- 可以嵌入 **JavaScript**;\n- 可以声明**多行**的模板字面量.\n\n#### 字符串的拼接\n字符串的拼接有两种方法, 我们先介绍上述提到的模板字符串中的 $\\underline{串联法}$:\n```js\nconst name = \"克里斯\";\nconst greeting = `你好，${name}`;\nconsole.log(greeting); // \"你好，克里斯\"\n```\n> 在模板字面量中用`${}`包装JS的变量或者表达式.\n\n\n```js\nconst one = \"你好，\";\nconst two = \"请问最近如何？\";\nconst joined = `${one}${two}`;\nconsole.log(joined); // \"你好，请问最近如何？\"\n```\n> 连接2个变量.\n\n```js\nconst song = \"青花瓷\";\nconst score = 9;\nconst highestScore = 10;\nconst output = `我喜欢歌曲《${song}》。我给它打了 ${\n  (score / highestScore) * 100\n} 分。`;\nconsole.log(output); // \"我喜欢歌曲《青花瓷》。我给它打了 90 分。\"\n```\n> 在模板字面量的`${}`内部包含表达式.\n\n<br>\n除此之外,对于普通的字符串(使用单引号或者双引号得到的字符串), 我们可以使用`+`直接连接:\n```js\nconst greeting = \"你好\";\nconst name = \"克里斯\";\nconsole.log(greeting + \"，\" + name); // \"你好，克里斯\"\n```\n\n#### 多行字符串\n模板字符串会**保留**源代码中的换行符，因此可以编写跨越多行的字符串:\n```js\nconst newline = `终于有一天，\n你知道了必须做的事情，而且开始……`;\nconsole.log(newline);\n\n/*\n终于有一天，\n你知道了必须做的事情，而且开始……\n*/\n```\n\n如果希望用普通的字符串得到等效的输出, 必须在字符串中包含`\\n`,而非直接跨行:\n```js\nconst newline = \"终于有一天，\\n你知道了必须做的事情，而且开始……\";\nconsole.log(newline);\n\n/*\n终于有一天，\n你知道了必须做的事情，而且开始……\n*/\n```\n\n#### 显示引号\n1. $\\underline{转义}$  通过在符号前加上反斜杠`\\`, 可以转义字符串中的特殊字符,包括字符串中的引号:\n```js\nconst bigmouth = 'I\\'ve got no right to take my place…';\n```\n2. 换用其他字符: 在字面量内用不同于包裹字符串的引号:\n```js\nconst goodQuotes1 = 'She said \"I think so!\"';\nconst goodQuotes2 = `She said \"I'm not going in there!\"`;\n```\n\n\n#### 常用方法\n对于字符串对象实例,其常用的方法:\n- `.length`: 获取字符串的长度;\n- `[]`: 返回字符串中对应索引的字符, 索引同样从`0`开始;\n- `.indexOf(\"\")`: 查找子字符串\n  - **input**: 希望查找的子字符串;\n  - **output**: 子字符串开始的下标(如果不存在则返回`-1`);\n- `.slice(indedxStart, indexEnd)`: 截取字符串\n  - **input**: 起始下标, 结束下标(不包含该下标). 如果不存在结束下标则提取之后剩余的全部字符;\n  - **output**: 截取的子字符串;\n\n更多的`slice`知识:\n1. $\\underline{标准化负值}$ 如果索引是个负数, 取`index+str.length`进行标准化;\n2. 如果`indexStart`大于`str.length`, 返回空字符串;\n3. 如果标准化负值之后, `indexStart`大于`indexEnd`, 也返回空字符串;\n \n- `.toLowerCase()` & `.toUpperCase()`: 转换字符串中的所有字符为小写或大写;\n- `.replace(original, new)`: 替换字符串中`original`子字符串为`new`;\n> 此时不会直接改变原字符串的值, 而是返回一个修改之后的字符串. 因此, 如果想要将原来的值替换, 需要用上述方法得到的值去赋值原来的字符串.\n\n#### Cases\n利用 **indexOf** 和 **slice** 方法, 获取新字符串:\n- **input**: `\"str3\"`三位长字符串+`\"...\"`(无关字符串)+`\";\"`+`strLast`(剩余字符串);\n- **output**: `\"str3\"+\";\"+strLast`\n\n```js\nvar stations = ['MAN675847583748sjt567654;Manchester Piccadilly',\n                'GNF576746573fhdg4737dh4;Greenfield',\n                'LIV5hg65hd737456236dch46dg4;Liverpool Lime Street',\n                'SYB4f65hf75f736463;Stalybridge',\n                'HUD5767ghtyfyr4536dh45dg45dg3;Huddersfield'];\n\nfor(var i = 0; i < stations.length; i++){\n    var input = stations[i];\n    var str3 = input.slice(0,3);\n    var strLast = input.slice(input.indexOf(\";\")+1); //indexOf获取;位置\n    var output = str3 + \";\" + strLast;\n}\n```\n\n---\n\n通过 **indexOf** 根据子字符串筛选字符串数组:\n- **input**: 可能包含 *Christmas* 的字符串数组;\n- **output**: 包含 *Christmas* 的字符串数组;\n\n```js\nvar list = document.querySelector('.output ul');\nlist.innerHTML = '';\nvar greetings = ['Happy Birthday!',\n                 'Merry Christmas my love',\n                 'A happy Christmas to all the family',\n                 'You\\'re all I want for Christmas',\n                 'Get well soon'];\n\nfor(var i = 0; i < greetings.length; i++) {\n  var input = greetings[i];\n  if(greetings[i].indexOf('Christmas') !== -1) {\n    var result = input;\n    var listItem = document.createElement('li');\n    listItem.textContent = result;\n    list.appendChild(listItem);\n  }\n}\n```\n\n### 数字与字符串\n#### 相互转换\n非常神奇, 在JS当中, 数字和字符串可以直接通过函数`Number()`和`String()`进行转换, 与C语言不同.\n```js\nconst myString = \"123\";\nconst myNum = Number(myString);\nconsole.log(typeof myNum);\n// number\nconsole.log(myNum);\n// 123\n```\n\n```js\nconst myNum2 = 123;\nconst myString2 = String(myNum2);\nconsole.log(typeof myString2);\n// string\nconsole.log(myString2);\n// \"123\"\n```\n> 对于浮点数同样成立.\n\n#### 前后拼接\n使用`+`将字符串类型和数字类型的变量or常量直接拼接, 得到的是以空格相隔的字符串:\n```js\nconst name = \"Front \";\nconst number = 242;\nconst combine = name + number;\n\nconsole.log(combine); //Front 242\n\nconsole.log(typeof(combine));  //string\n```\n\n### 数组\n1. 存储任意类型元素--字符串，数字，对象，变量，**另一个数组**;\n2. 可以 **混合** 元素类型:\n```js\nlet random = [\"tree\", 795, [0, 1, 2]];\n```\n3. 像访问字符串一样, 利用索引访问数组元素;\n4. $\\underline{多维数组}$ 包含数组的数组结构称为~\n\n#### split()\n- 作用: 将一个字符串根据给定的字符分隔为字符串数组;\n```js\nlet myData = \"Manchester,London,Liverpool,Birmingham,Leeds,Carlisle\";\nlet myArray = myData.split(\",\");\nconsole.log(myArray);\n // [\"Manchester\", \"London\", \"Liverpool\", \"Birmingham\", \"Leeds\", \"Carlisle\"]\n```\n\n#### join()\n`split`的反向操作, 给出分隔符号, 将数组的字符串拼接成一个字符串:\n```js\nlet myNewString = myArray.join(\",\");\nmyNewString;\n```\n\n#### toString()\n与`join`方法相似, 但是无法自定义分隔符, 默认为`,`:\n```js\nlet dogNames = [\"Rocket\", \"Flash\", \"Bella\", \"Slugger\"];\ndogNames.toString(); //Rocket,Flash,Bella,Slugger\n```\n\n#### push & pop\n`push()`方法可以将1或多个元素添加到数组的 **末尾**:\n1. 将会直接改写原来的数组,不需要重新赋值;\n2. 该方法具有返回值, 且返回的是更新之后的数组长度(包含元素的个数);\n```js\nlet myArray = [1, 2, 3];\nlet newLength = myArray.push(4, 5,\"string\");\nconsole.log(myArray); // [1, 2, 3, 4, 5, \"string\"]\nconsole.log(newLength); // 6\n```\n\n使用`.pop()`从数组中删除最后一个元素:\n```js\nmyArray.pop(); //\"string\"\nconsole.log(myArray); // [1, 2, 3, 4, 5]\n```\n1. 方法调用返回值就是删除的元素本身;\n2. 直接对原始数组操作并赋值, 不需要另外的赋值操作;\n\n> shift & unshift:\n> 在功能上分别与`push`和`pop`相同, 但是作用于数组的开始位置.\n\n## 条件语句\nJS的条件语句与C语言十分相似, 在此仅给出官方文档的一些例子:\n### 天气预报\n```html\n<label for=\"weather\">选择今天的天气：</label\n><select id=\"weather\">\n  <option value=\"\">--作出选择--</option>\n  <option value=\"sunny\">晴天</option>\n  <option value=\"rainy\">雨天</option>\n  <option value=\"snowing\">雪天</option>\n  <option value=\"overcast\">阴天</option>\n</select>\n\n<p></p>\n```\n> `lable`当中的`for`标签与`select`标签的`id`属性对应, 用于关联两个标签.\n\n```js\nconst select = document.querySelector(\"select\");\nconst para = document.querySelector(\"p\");\n\nselect.addEventListener(\"change\", setWeather);\n\nfunction setWeather() {\n  const choice = select.value;\n\n  switch (choice) {\n    case \"sunny\":\n      para.textContent = \"阳光明媚。穿上短裤吧！去海滩，或公园，吃个冰淇淋。\";\n      break;\n    case \"rainy\":\n      para.textContent = \"外面下着雨；带上雨衣和雨伞，不要在外面呆太久。\";\n      break;\n    case \"snowing\":\n      para.textContent =\n        \"大雪纷飞，天寒地冻！最好呆在家里喝杯热巧克力，或者去堆个雪人。\";\n      break;\n    case \"overcast\":\n      para.textContent =\n        \"虽然没有下雨，但天空灰蒙蒙的，随时都可能变天，所以要带一件雨衣以防万一。\";\n      break;\n    default:\n      para.textContent = \"\";\n  }\n}\n```\n> 1. 通过`querySelector`方法获取`select`和`p`标签;\n> 2. 然后为`select`标签添加事件监听器, 当内容改变时触发 **change** 事件, 同时调用`setWeather`函数;\n> 3. 进而通过 **switch** 语句处理不同天气的情况, 并设置相应的文字内容;\n> 在线网页示例:[simple-switch](https://mdn.github.io/learning-area/javascript/building-blocks/simple-switch.html)\n\n\n## 事件介绍\n什么是$\\underline{事件}$? \n- 用户选择、点击或者光标悬停在某一元素;\n- 用户在键盘中按下某个按键;\n- 网页结束加载;\n- ...\n\n$\\underline{事件处理器}$ 为了响应事件, 我们需要编写一份JS代码块用于在事件发生之后运行. 这样的代码块称之为~.\n\n### 处理点击事件\n以点击事件为例, 介绍html与js如何进行事件处理的交互:\n```html\n<button> 改变颜色 </button>\n```\n```js\nconst btn = document.querySelector(\"button\");\n\nfunction random(number){\n  return Math.floor(Math.random()*(number+1));\n  \n}\n\nbtn.addEventListener(\"click\", ()=>{\n  const rndCol = `rgb(${random(255)},${random(255)},${random(255)})`;\n  document.body.style.backgroundColor = rndCol;\n})\n```\n1. `Math.random()`方法生成一个介于[0,1)之间的随机数;\n2. `*(number+1)`之后利用向下取整的方法`Math.floor()`将其转换为整数, 范围为[0,number];\n> 假如输入的number为`4`, 则`random(4)`的结果可能为`0`, `1`, `2`, `3`, `4`中的一个;\n> 假设输入的number为`3.6`, 则输出的结果还是0~4中的整数.\n3. ``rndCol = `rgb(${random(255)},${random(255)},${random(255)})`` 采用的是在$\\underline{模板字符串}$内部使用`${}`调用函数变量的方法.\n\n### addEventListener()\n`adEventListener`方法已经在之前的例子中出现过, 现在具体介绍其作用和语法.\n\n通过`EventTarget.adddEventListener()`的方法, 将指定的监听器注册到对象上, 具体的语法如下:\n```js\naddEventListener(type, listener);\naddEventListener(type, listener, options);\naddEventListener(type, listener, useCapture);\n```\n- `type`: 事件类型, 如`click`, `mouseover`, `mouseout`, `keydown`, `keyup`等;\n- `listener`: 事件处理函数, 该函数将在事件发生时被调用;\n  - 包括 **回调函数** 以及 实现了 **EventListener 接口的对象**;\n- `options`: 可选参数, 用于配置事件监听器的行为;\n> 可以为单个事件添加多个事件监听器.\n\n\n#### listener\n$\\underline{回调函数}$ 简单来说, ~指的是当某个事件发生时被调用的一段代码.\n- 是一个函数, 但是只有等到特定的事件发生时才会执行.\n\n实现了 EventListener 接口的对象:\n- **特点**: 以对象作为listener, 对象中具有名为`handleEvent()`的方法;\n- **作用**: \n  - 将事件处理封装到一个对象当中, 可以更好地组织代码;\n  - 便于在对象中保存更多的状态信息;\n```js\nconst listenerObject = {\n    count: 0,\n    handleEvent(event) {\n        this.count++;\n        console.log(`事件类型是：${event.type}，已触发 ${this.count} 次`);\n    }\n};\n\nconst button = document.querySelector('button');\nbutton.addEventListener('click', listenerObject);\n```\n\n#### options\n一个指定有关 listener 属性的可选参数对象.\n##### Capture\n- 含义:\n  - 一个布尔值，表示 listener 会在该类型的事件捕获阶段传播到该 EventTarget 时触发;\n  - 默认为false, 表示只有在冒泡阶段才触发.\n\n- 区别:\n  - `capture`和`useCapture`实际上指的都是 **监听器是否在捕获阶段触发** 的布尔值.\n> 捕获阶段: 从最外层的元素开始, 逐层向内捕获事件, 直到事件到达目标元素.\n  - 后来DOM的规范更新时引入了`options`参数, 此后`capture`取代了`useCapture`的作用.\n  - 如果`addEventListener`的第三个参数不指定对象, 只有布尔值, 那么默认是在设置`useCapture`\n\n> 可以先查看[事件传播的阶段](#事件传播的阶段)来辅助理解不同的阶段.\n\n##### Once\n- 含义:\n  - 一个布尔值，表示 listener 在添加之后最多只调用一次;\n  - 默认为false, 表示可以多次调用.\n- e.g.\n```js\nchild.addEventListener('click', () => {\n    console.log('子元素 - 目标阶段');\n},{once: true});\n```\n> `once`属性被设置为`true`, 当调用一次之后事件监听器会被自动清除. 因此只有第一次的点击才会console.\n\n##### Passive\n- 含义:\n  - 一个布尔值，设置为 true 时，表示 listener 永远不会调用 preventDefault();\n\n- 作用:\n  - 明确不会在`listener`中不会调用`preventDefault()`方法, 即不会阻止浏览器的[默认行为](#默认行为);\n  - 此时, 浏览器可以直接渲染默认行为的结果, 无需等待`listener`的执行与默认行为的检查, 从而提高了性能.\n- Notice:\n  - 如果设置`passive`为`true`, 则`listener`当中不可出现`preventDefault()`方法, 否则会报错.\n\ne.g.\n```js\ndocument.addEventListener('wheel',()=>{\n\tevent.preventDefault();\n  console.log(\"scrolling\");\n},{passive: false});\n```\n- `wheel`事件的默认行为是滚动页面;\n- `event.preventDefault();`表示会阻止鼠标滚动带来的页面滚动;\n\n\n```js\ndocument.addEventListener('wheel',()=>{\n  console.log(\"scrolling\");\n},{passive: true});\n```\n> 明确不会阻止默认行为, 浏览器可以直接渲染页面的滚动效果, 因此提高了显示的效果.\n\n```js\ndocument.addEventListener('wheel',()=>{\n  event.preventDefault();\n  console.log(\"scrolling\");\n},{passive: true});\n```\n> `passive`的设置与`listener`内部矛盾, 将会报错.\n\n##### Signal\n用于有条件地移除事件监听器, 具体使用参见[可被移除的监听器](#可被移除的监听器).\n\n### 事件传播的阶段\n1. 捕获阶段 $\\underline{capture\\space phase}$: 事件从根节点开始向目标节点传播;\n> e.g. 点击事件从document开始传播, 经过html,body直到目标元素.\n2. 目标阶段阶段 $\\underline{target\\space phase}$: 事件到达目标元素;\n3. 冒泡阶段 $\\underline{bubble\\space phase}$: 事件从目标元素开始沿着DOM树向上传播.\n\n#### Case\n```html\n<div id=\"parent\">\n  parent\n  <div id=\"child\">child</div>\n</div>\n```\n```js\nconst parent = document.querySelector('#parent');\nconst child = document.querySelector('#child');\n\nparent.addEventListener('click', () => {\n    console.log('父元素 - 冒泡阶段');\n});\n\nparent.addEventListener('click', () => {\n    console.log('父元素 - 捕获阶段');\n}, { capture: true });\n\nchild.addEventListener('click', () => {\n    console.log('子元素 - 目标阶段');\n});\n```\n上述的`child`被包裹在`parent`内部.\n- 当点击`parent`时将会显示:\n```bash\n\"父元素 - 捕获阶段\"\n\"父元素 - 冒泡阶段\"\n```\n> 由于设置了在捕获阶段就触发, 所以先触发了捕获阶段的监听器, 然后再触发冒泡阶段的监听器;\n\n- 当点击`child`时将会显示:\n```bash\n\"父元素 - 捕获阶段\"\n\"子元素 - 目标阶段\"\n\"父元素 - 冒泡阶段\"\n```\n> `child`是整个事件流的目标元素, 所以触发时机介于二者之间.\n\n#### Notice\n1. 如果将`div`换成`button`, 则点击`child`时可能只会显示 **目标** 阶段的输出.\n> 这是因为, 不同浏览器对于`button`元素的默认行为不同, 可能默认阻止了捕获阶段和冒泡阶段\n\n2.  `event.stopPropagation();`加入该~~咒语~~代码可以在此停止事件的传播, 比如可以在上述的捕获阶段监听器加入该代码:\n```js\nparent.addEventListener('click', () => {\n    console.log('父元素 - 捕获阶段');\n    event.stopPropagation();\n}, { capture: true });\n```\n> 此时, 点击`parent`时, 只会触发捕获阶段的监听器, 不会触发冒泡阶段的监听器.\n\n### 可被移除的监听器\n```html\n<table id=\"outside\">\n  <tr>\n    <td id=\"t1\">one</td>\n  </tr>\n  <tr>\n    <td id=\"t2\">two</td>\n  </tr>\n</table>\n```\n```js\n// 为 table 添加可被移除的事件监听器\nconst controller = new AbortController();\nconst el = document.getElementById(\"outside\");\nel.addEventListener(\"click\", modifyText, { signal: controller.signal });\n\n// 改变 t2 内容的函数\nfunction modifyText() {\n  const t2 = document.getElementById(\"t2\");\n  if (t2.firstChild.nodeValue === \"three\") {\n    t2.firstChild.nodeValue = \"two\";\n  } else {\n    t2.firstChild.nodeValue = \"three\";\n    controller.abort(); // 当值变为 \"three\" 后，移除监听器\n  }\n}\n```\n> - `AbortController`是一个构造函数, 用于创建一个可被移除的事件监听器的控制器;\n> - `signal`属性是一个`AbortSignal`对象, 用于控制监听器的移除;\n> - `controller.abort()`方法用于移除监听器;\n> - 当`t2`的内容变为\"three\"时, 移除监听器, 使得`modifyText`函数不再执行. 此后, 点击`t2`不会触发`modifyText`函数.\n\n具体的**构造步骤:**\n1. 创建一个`AbortController`实例: `const controller = new AbortController();`\n2. 在事件监听器内的参数中添加`signal: controller.signal`选项;\n3. 在需要移除监听器的地方调用`controller.abort()`方法;\n\n---\n\n我们也可以直接使用`removeEventListener()`方法来移除事件监听器:\n```js\nremoveEventListener(type, listener);\nremoveEventListener(type, listener, options);\nremoveEventListener(type, listener, useCapture);\n```\n\n\n- Notices:\n  - 如果同一个对象上存在2个事件监听器, 且仅在`useCapture`参数存在差异, 那么需要先后2次调用`removeEventListener()`方法才能完全移除其事件监听器;\n  - 如果无法匹配当前注册的事件监听器, 那么该函数将不会起任何作用;\n  - `type`,`listener`参数必须完全匹配才能移除事件监听器;\n  - 对于`options`参数:\n    - 字段相同: 一定可以移除;\n    - 字段不同: 需要与默认值false匹配才可以移除.\n```js\nelement.addEventListener(\"mousedown\", handleMouseDown, { passive: true });\n\nelement.removeEventListener(\"mousedown\", handleMouseDown, { passive: true }); // 成功\nelement.removeEventListener(\"mousedown\", handleMouseDown, { capture: false }); // 成功\nelement.removeEventListener(\"mousedown\", handleMouseDown, { capture: true }); // 失败\nelement.removeEventListener(\"mousedown\", handleMouseDown, { passive: false }); // 成功\nelement.removeEventListener(\"mousedown\", handleMouseDown, false); // 成功\nelement.removeEventListener(\"mousedown\", handleMouseDown, true); // 失败\n```\n\n---\n**添加与移除**的结合使用:\n```js\nconst body = document.querySelector(\"body\");\nconst clickTarget = document.getElementById(\"click-target\");\nconst mouseOverTarget = document.getElementById(\"mouse-over-target\");\n\nlet toggle = false;\nfunction makeBackgroundYellow() {\n  body.style.backgroundColor = toggle ? \"white\" : \"yellow\";\n\n  toggle = !toggle;\n}\n\nclickTarget.addEventListener(\"click\", makeBackgroundYellow, false);\n\nmouseOverTarget.addEventListener(\"mouseover\", () => {\n  clickTarget.removeEventListener(\"click\", makeBackgroundYellow, false);\n});\n```\n\n\n### 使用匿名函数\n在上述`html`例子下:\n```js\n// 改变 t2 内容的函数\nfunction modifyText(new_text) {\n  const t2 = document.getElementById(\"t2\");\n  t2.firstChild.nodeValue = new_text;\n}\n\n// 用匿名函数为 table 添加事件监听器\nconst el = document.getElementById(\"outside\");\nel.addEventListener(\n  \"click\",\n  function () {\n    modifyText(\"four\");\n  },\n  false,\n);\n```\n通过匿名函数封装代码, 将参数传入函数`modifyText`, 使得函数可以被调用.\n\n### 使用箭头函数\n```js\n// 改变 t2 内容的函数\nfunction modifyText(new_text) {\n  var t2 = document.getElementById(\"t2\");\n  t2.firstChild.nodeValue = new_text;\n}\n\n// 用箭头函数为 table 添加事件监听器\nconst el = document.getElementById(\"outside\");\nel.addEventListener(\n  \"click\",\n  () => {\n    modifyText(\"four\");\n  },\n  false,\n);\n```\n通过`=>{}`形式的箭头函数简化代码书写.\n\n---\n#### 比较匿名与箭头\n匿名函数与箭头函数在此处的应用基本相同, 但是在`this`的指向上有所不同:\n- 匿名函数与其他普通的JS函数:`this`指向调用它的对象之作用域(如果没有直接调用关系, 默认为全局对象, 且严格模式下为`undefined`);\n```js\nfunction sayHello() {\n  console.log(this); // 在非严格模式下，this 指向 window\n}\nsayHello();\n```\n\n- 箭头函数的`this`继承自外部作用域, 即调用该方法的对象.\n```js\nconst obj = {\n  name: \"ZJU\",\n  greet: function () {\n    console.log(this.name); // this 指向 obj\n  },\n};\nobj.greet(); // 输出：ZJU\n```\n\n- e.g.\n```js\nconst obj = {\n  name: \"ZJU\",\n  getNameWithAnonymous: function () {\n    return function () {\n      console.log(this.name);\n    };\n  },\n  getNameWithArrow: function () {\n    return () => {\n      console.log(this.name);\n    };\n  },\n};\n\nconst anonymousFn = obj.getNameWithAnonymous();\nanonymousFn(); // 输出：undefined\n\nconst arrowFn = obj.getNameWithArrow();\narrowFn(); // 输出：ZJU\n```\n> 进一步完善.\n\n### 事件对象\n$\\underline{事件对象}$ 在事件处理函数的内部, 以固定指定名称出现的参数, 例如`event`,`e`,`evt`. 它被自动传递给事件处理函数，以提供额外的功能和信息。\n\n`e.target`始终是对 **事件刚刚发生的元素** 的引用\n\n## 表达式和运算符\n### new()\n$\\underline{new}$ 用来创建对象实例的一个关键字. \n- 作用: **调用** 一个 构造函数, 并返回一个由该构造函数创建的对象实例.\n#### 语法\n```js\nnew constructor\nnew constructor()\nnew constructor(arg1)\nnew constructor(arg1, arg2)\nnew constructor(arg1, arg2, /* …, */ argN)\n```\n1. 如果没有指定参数, 默认为在不带参数的情况下调用构造函数. 即`new foo` 等价于 `new foo()`;\n2. 构造函数内部的`this`将被绑定到新建的对象实例上;\n\n- e.g. \n```js\nfunction Car(color, brand) {\n  this.color = color;   // 将 color 赋值给新对象\n  this.brand = brand;   // 将 brand 赋值给新对象\n}\n\nconst myCar = new Car(\"red\", \"Toyota\");\n\nconsole.log(myCar.color); // 输出 \"red\"\nconsole.log(myCar.brand); // 输出 \"Toyota\"\n```\n\n使用`new()`的**步骤**:\n 1. 定义构造函数;\n 2. 使用`new()`并传入构造函数的参数;\n 3. 将返回的对象实例赋值给一个变量;\n\n#### 新增属性\n- 为已经定义的对象实例直接新增属性, 但是不会影响其他相同类型的对象和构造函数本身:\n```js\ncar1.color = \"black\" //为car1新增color属性\n```\n<br>\n\n- 添加共享属性到构造函数中的`prototype`:\n```js\nfunction Car() {}\ncar1 = new Car();\ncar2 = new Car();\n\nconsole.log(car1.color); // undefined\n\nCar.prototype.color = \"原色\";\nconsole.log(car1.color); // '原色'\n\ncar1.color = \"黑色\";\nconsole.log(car1.color); // '黑色'\n\nconsole.log(Object.getPrototypeOf(car1).color); // '原色'\nconsole.log(Object.getPrototypeOf(car2).color); // '原色'\nconsole.log(car1.color); // '黑色'\nconsole.log(car2.color); // '原色'\n```\n> - 此处的构造函数名为`Car`, 因此通过`Car.prototype`可以访问到构造函数的原型对象;\n> - `getPrototypeOf` 表示获取对象的**原型对象**, 因此此处均为最初定义的 **原色**.\n\n#### new.target\n函数通过`new.target`属性可以判断是否通过`new`关键字调用, 即构造.\n- 如果函数是正常调用, 则返回`undefined`;\n- 如果函数是通过`new`调用, 返回被调用的构造函数.\n\n- e.g.\n```js\nfunction Car(color) {\n  if (!new.target) {\n    // 以函数的形式被调用。\n    return `${color}车`;\n  }\n  // 通过 new 被调用。\n  this.color = color;\n}\n\nconst a = Car(\"红\"); // a 是“红车”\nconst b = new Car(\"红\"); // b 是 `Car { color: \"红\" }`\n```\n\n#### 对象类型与实例\n$\\underline{对象类型}$ 通过构造函数可以创建一个对象类型:\n```js\nfunction Car(make, model, year) {\n  this.make = make;\n  this.model = model;\n  this.year = year;\n}\n```\n\n$\\underline{对象实例}$ 通过使用`new()`方法, 由对象类型构造一个对象实例:\n```js\nconst myCar = new Car(\"鹰牌\", \"Talon TSi\", 1993);\n```\n\n#### 类与new\n在JS当中, 类 **必须** 通过`new`调用.\n> 可以优先阅读[类相关的知识](#类)\n\n- e.g. \n```js\nclass Animal {\n  //构造函数\n  constructor(name) {\n    this.name = name;\n  }\n  //实例方法\n  greet() {\n    console.log(`你好，我的名字是${this.name}`);\n  }\n}\n```\n对于上述的类, 必须使用如下的调用方式:\n```js\nconst animal = new Animal(\"Dog\"); // 正常\n```\n而下面这样类似于普通函数的调用方式会抛出错误:\n```js\nAnimal(\"Cat\"); // TypeError:  Class constructor Animal cannot be invoked without 'new'\n```\n<br>\n\n在使用正确方法得到类的实例对象之后, 可以用访问属性的方式来调用实例方法:\n```js\nanimal.greet(); // 输出 \"你好，我的名字是Dog\"\n```\n\n---\n\n下面给出与普通函数的区别:\n```js\nfunction Car(model) {\n  this.model = model;\n}\n\nconst car = new Car(\"Toyota\"); // 正常\nCar(\"Honda\"); // 不抛出错误，但 this 会指向全局对象.\nconst anotherCar = Car(\"cat\"); //此时全局对象下的model值为 \"cat\", 覆盖了上一行的定义.\n```\n总结:\n- 以构造函数形式呈现的普通函数, 可以被直接调用, 但是此时内部的参数赋值给了全局对象;\n- 如果以new方法构造得到对象实例, 依旧正常.\n\n---\n\n# 补充\n## 默认行为\n$\\underline{默认行为}$ 是指浏览器在某些事件发生时，自动执行的内置操作, 是浏览器的“默认反应”.\n\n- 比如存在以下的默认行为:\n  - 滚动事件：触摸屏上滑动手指，页面会滚动;\n  - 拖拽文件到浏览器：浏览器会尝试加载文件;\n  - 点击链接 `(<a href=\"...\">)`：跳转到指定的 URL;\n\n$\\underline{阻止默认行为}$ 使用 `event.preventDefault()` 方法可以阻止事件的默认行为.\n\n- e.g: 阻止链接跳转\n```js\ndocument.querySelector('a').addEventListener('click', function(event) {\n    event.preventDefault(); // 阻止点击链接时的默认行为\n    console.log('链接被点击，但没有跳转');\n});\n```\n\n- 作用:\n  - 通过阻止默认行为, 可以实现自定义逻辑.\n\n## this\n\n- `this`可以视作函数的一个隐参数, 是在函数被执行时创建的绑定;\n- `this` 指向的是**当前函数的调用者**，而不是函数内部定义的变量.\n\n<br>\n\n- e.g.\n```js\nconst obj = {\n    a: \"a in the obj\",\n    b: \"b in the obj\",\n    f: function() {\n        const b = \"b in the function\"; // 函数作用域\n        console.log(this.b); // 访问 this.b\n    }\n};\n\nconst b = \"b outside of the func\";\n\nobj.f();\n```\n> 此处的`f`\n\n### 函数上下文中的this\n- `this`参数的值取决于函数**如何**被调用, 而不是函数如何被定义.\n```js\n// 对象可以作为第一个参数传递给 'call' 或 'apply'，\n// 并且 'this' 将被绑定到它。\nconst obj = { a: \"Custom\" };\n\n// 使用 var 声明的变量成为 'globalThis' 的属性。\nvar a = \"Global\";\n\nfunction whatsThis() {\n  return this.a; // 'this' 取决于函数如何被调用\n}\n\nwhatsThis(); // 'Global'; 在非严格模式下，'this' 参数默认为 'globalThis'\nobj.whatsThis = whatsThis;\nobj.whatsThis(); // 'Custom'; 'this' 参数被绑定到 obj\n```\n1. 同样是调用函数`whatsThis()`, 但是`this`参数被绑定到不同的对象上, 导致返回值不同;\n2. 在非严格模式下, `this`参数默认指向`globalThis`, 即全局对象;\n3. 对于典型函数, `this`指向函数访问的对象;\n\n- e.g. \n```js\nconst obj = {\n    b: \"b in the obj\",\n    f: function() {\n        const b = \"b in the function\"; // 函数作用域\n        console.log(this.b); // 访问 this.b\n    }\n};\n\nconst b = \"b outside of the func\";\n\nobj.f();\n```\n> 此处`f`作为`obj`对象的方法被调用, 因此普通函数的`this`指向`obj`.\n\n- e.g. 直接调用的普通函数`this`指向全局:\n```js\nconst obj = {\n    a: \"a in the obj\",\n    f: function() {\n        const funcA = function () { return this.a }; // 普通函数，this 由调用方式决定\n        console.log(funcA()); // 访问 this.a\n    }\n};\n\nvar a = \"a in the global\";\nobj.f(); // \"a in the global\"\n```\n> - 此处的`funcA`并没有类似于作为对象的属性调用(`obj.funcA()`), 因此其`this`指向全局作用域(`window`), 输出`undefined`, 而是直接调用的形式, 因此其`this`指向全局作用域.\n\n\n\n\n\n### 对this传值\n使用`call()`以及`apply()`方法可以将`this`绑定到其他对象上.\n#### call()\n- 形式: `func.call(thisArg, arg1, arg2, ...)`\n- e.g:\n```js\nfunction add(c, d) {\n  return this.a + this.b + c + d;\n}\n\nconst o = { a: 1, b: 3 };\n\n// 第一个参数被绑定到隐式的 'this' 参数；\n// 剩余的参数被绑定到命名参数。\nadd.call(o, 5, 7); // 16\n```\n\n#### apply()\n- 形式: `func.apply(thisArg, [argsArray])`\n- e.g:\n```js\nfunction add(c, d) {\n  return this.a + this.b + c + d;\n}\n\nconst o = { a: 1, b: 3 };\n\n// 第一个参数被绑定到隐式的 'this' 参数；\n// 第二个参数是一个数组，其成员被绑定到命名参数。\nadd.apply(o, [10, 20]); // 34\n```\n\n#### bind()\n- 形式: `f.bind(someObject)`;\n- **作用**: \n  - 创建一个新的函数(需要重新赋值), 具有与`f`相同的函数体和作用域;\n  - 新函数的`this`被 **永久地** 绑定到`someObject`, 不随调用方式的变化而变化.\n- **限制**: \n  - `bind`无法多次生效. 即对函数f`bind`得到的g, 无法继续用`bind`得到期望的h;\n- e.g. 多次`bind`:\n```js\nfunction f() {\n  return this.a;\n}\n\nconst g = f.bind({ b: \"azerty\" });\nconsole.log(g()); // undefined\n\nconst h = g.bind({ a: \"yoo\" }); // bind 只能生效一次！\nconsole.log(h()); // undefined\n\nconst o = { a: 37, f, g, h };\nconsole.log(o.a, o.f(), o.g(), o.h()); // 37 37 undefined undefined\n```\n> - 由于`bind`只能对一个原始函数作用, 因此由f得到的g无法继续由`bind`绑定`this`得到期望的h, 此处h的`this`依旧是`{b: \"azerty\"}`, 因此在输出对象`a`时显示`undefined`;\n> - `o.f()`的调用是普通函数的调用, 因此其`this`继承自对象`o`, 输出`37`;\n\n- e.g. 对象\n```js\nfunction f() {\n  return this.a + \" \" + this.c;\n}\n\nconst g = f.bind({ b: \"azerty\" , c:\"ccc\"});\nconsole.log(g()); // \"undefined ccc\"\n\nconst h = g.bind({ a: \"yoo\" }); // bind 只能生效一次！\nconsole.log(h()); // \"undefined ccc\"\n\nconst o = { a: 37, f, g, h };\nconsole.log(o.a, o.f(), o.g(), o.h()); // 37 37 azerty azerty\n```\n> - `bind`绑定的`this`是永久覆盖, 而非简单叠加;\n> - 由于`bind`绑定的`this`不随者调用方式的变化而变化, 因此即使处于对象`o`当中, `g`,`h`依旧不会输出`o`中的`a`.\n\n### 箭头函数中的this\n\n\n使用 call()、apply() 或 bind() 调用箭头函数时，传入的 this 值会被忽略，但其他参数仍然会正常传递。\n\n\n普通函数:\n```js\nconst a = \"a in the global\";\nconst foo = function () {return this.a};\n\nconst obj = {\n a: \"a in the obj\",\n f: foo\n};\n\nconsole.log(obj.f()); // \"a in the obj\"\n```\n\n`call()`、 `apply()`、 `bind()` 无法改变箭头函数的`this`(但是call与apply的其他参数可以正常传递:\n```js\nconst foo = ()=> this.a;\n\nconst obj = {\n a: \"a in the obj\",\n f: foo.bind({a:\"a in the bind\"}) // 显式绑定 this 到 obj, 但是无法生效\n};\n\nconsole.log(obj.f()); // undefined\n\n```\n> 换成普通函数则输出`a in the obj`.\n\n\n- 全局作用域\n```js\nvar a = \"a in the global\";\nconst foo1 = () => this.a;\n\nconst obj = {\n\ta: \"a in the obj\",\n\tf: ()=> a\n};\n\nconsole.log(obj.f());\n```\n\n## 作用域\n$\\underline{作用域}$ 指当前的执行上下文, 在其中的值和表达式可以被访问. \n- 全局作用域: 脚本模式运行所有代码的默认作用域;\n- 模块作用域: 模块模式中运行代码的作用域;\n- 函数作用域: 由函数创建的作用域\n- 块级作用域: 由`let`或`const`声明的变量的作用域.(对于`var`无效);\n\n```js\n{\n  var x = 1;\n}\nconsole.log(x); // 1\n\n{\n  const x = 1;\n}\nconsole.log(x); // undefined\n```\n\nNotices:\n- 对象本身并不会创建作用域, 只是一个键值对的集合;\n- 箭头函数也不会创建自己的作用域, 而是 **继承** 外层作用域中的`this`;\n\n### 变量与作用域\n- `var`在全局作用域中声明时会成为 **全局对象** (`window`或`global`)的属性;\n- `let`和`const`即使在全局作用域中声明, 也不会成为全局对象的属性;\n```js\nvar a = \"1\";\nlet b = \"2\";\n\nwindow.a; // \"1\"\nwindow.b; // undefined\n```\n> 因此, 建议在全局作用域中不要使用`var`声明变量, 而使用`let`或`const`声明变量. 从而避免导致意外的覆盖和冲突.\n\n\n### 函数与作用域\n#### 普通函数\n普通函数和匿名函数的作用域继承自其定义时的作用域.\n```js\nconst obj = {\n    a: \"a in the obj\",\n    insideObj: {\n        g: function() {\n            return this.a; // 普通函数，this 动态绑定到 insideObj\n        }\n    },\n    f: function() {\n        return this.a; // 普通函数，this 动态绑定到 obj\n    }\n};\n\nconsole.log(obj.f());        // \"a in the obj\"\nconsole.log(obj.insideObj.g()); // undefined，因为 insideObj 中没有 a\n```\n\n#### 箭头函数\ne.g. **箭头函数继承外层作用域**:\n```js\nvar a = \"a in the global\";\n\nconst obj = {\n    a: \"a in the obj\",\n    insideObj: {\n        g: () => this.a\n    },\n    f: () => this.a\n};\n\nconsole.log(obj.f());        // \"a in the global\"\nconsole.log(obj.insideObj.g()); //\"a in the global\"\n```\n由于对象不会创建作用域, 因此此处的箭头函数的`this`继承了外层作用域(window)的`this`, 且`var`创建的变量存在于全局作用域中.\n\n## 语法糖\n$\\underline{语法糖}$ 一种让代码更简洁、更易读的语法形式.\n- 本质上没有增加语言的功能, 而是对已有功能的 **包装** 或者优化;\n- **可读性提升**: ~~让代码更填~~ 使得代码更加容易理解和书写;\n- **底层实现**: 实质上依旧用基础的语法实现.\n\n### 类\n类 `class` 是 ES6 引入的语法糖, 它提供了面向对象编程的简洁语法. 本质上是对原型继承`prototype`的封装.\n\n使用`class`的写法:\n```js\nclass Person {\n  constructor(name) {\n    this.name = name;\n  }\n\n  greet() {\n    console.log(`Hello, my name is ${this.name}`);\n  }\n}\n\nconst person = new Person(\"Alice\");\nperson.greet(); // 输出：Hello, my name is Alice\n```\n\n等价的原型写法:\n```js\nfunction Person(name) {\n  this.name = name;\n}\n\nPerson.prototype.greet = function() {\n  console.log(`Hello, my name is ${this.name}`);\n};\n\nconst person = new Person(\"Alice\");\nperson.greet(); // 输出：Hello, my name is Alice\n```\n\n### 箭头函数\n箭头函数简化了函数定义的书写, 其本质上依旧是一个普通函数, 因此也是语法糖的一种.\n\n- e.g.\n```js\n// 使用箭头函数\nconst add = (a, b) => a + b;\n\n// 等价的普通函数\nconst add = function add(a, b) {\n  return a + b;\n}\n```\n\n### 结构赋值\n$\\underline{结构赋值}$ 手动提取**对象**属性的语法糖.\n\n- 使用结构赋值:\n```js\nconst person = {name:\"Zhuo\", gender:\"male\"};\n\nconst {name, gender} = person;\n```\n\n- 等价的原型写法:\n```js\nconst person = {name:\"Zhuo\", gender:\"male\"};\n\nconst name = person.name;\nconst gender = person.gender;\n```\n\n#### 赋值规则\n结构赋值时, 基于 **属性名匹配** 而非顺序. \n因此, 对象结构的`{}`内部属性必须和 **对象的属性名** 相对应.\n\n**错误**的示例:\n```js\nconst person = { name: \"Alice\", age: 25 };\nconst { a, b } = person;\n\nconsole.log(a); // 输出：undefined\nconsole.log(b); // 输出：undefined\n```\n\n**重命名属性**的写法:\n```js\nconst person = { name: \"Alice\", age: 25 };\nconst { name: a, age: b } = person;\n\nconsole.log(a); // 输出：Alice\nconsole.log(b); // 输出：25\n```\n\n**手动赋值**: 对于结构对象中不存在的属性, 可以采取普通赋值的方式与结构赋值相结合:\n```js\nconst person = { name: \"Alice\" };\nconst { name, age = 30 } = person;\n\nconsole.log(name); // 输出：Alice\nconsole.log(age);  // 输出：30 （因为 person 中没有 age 属性，所以使用了默认值）\n```\n#### 数组的结构赋值\n上述讨论的结构赋值都是对 **对象** 的结构赋值, 对于数组同样可以结构赋值, 且赋值规则与对象相反—— **基于顺序**赋值:\n```js\nconst arr = [\"Alice\", 25];\nconst [a, b] = arr;\n\nconsole.log(a); // 输出：Alice\nconsole.log(b); // 输出：25\n```\n","slug":"编程语言/JavaScript","published":1,"updated":"2025-05-08T11:54:46.819Z","comments":1,"layout":"post","photos":[],"_id":"cmcbm7pqd000ue2qgg8k9b8x0","content":"<blockquote>\n<p>JavaScript是一种轻量级、解释型、面向对象的编程语言. 作为前端三件套之一以及TS的基础, JS语言细节十分难嚼. 本文在「<strong>料理的加护</strong>」下, 尽可能将JS处理得更加<strong>可口</strong>一些)</p>\n<img lazyload=\"\" src=\"/images/loading.svg\" data-src=\"/img/料理的加护.jpg\" width=\"35%\"></blockquote>\n<h1 id=\"创建JS代码块\"><a href=\"#创建JS代码块\" class=\"headerlink\" title=\"创建JS代码块\"></a>创建JS代码块</h1><h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><h3 id=\"var-or-let\"><a href=\"#var-or-let\" class=\"headerlink\" title=\"var or let?\"></a><code>var</code> or <code>let</code>?</h3><p><code>var</code>先于<code>let</code>的产生, 后者是现代版本的JS中新的关键字.</p>\n<p>使用<code>var</code>, 可以对一个先前已被声明且初始化的变量重新声明, 这不会带来报错, 代码依旧可以工作. 但是<code>let</code>并不适用.</p>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myName = <span class=\"string\">\"Chris\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">logName</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myName);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">logName</span>(); <span class=\"comment\">//输出\"Chris\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myName = <span class=\"string\">\"Aniya\"</span>;</span><br><span class=\"line\"><span class=\"title function_\">logName</span>(); <span class=\"comment\">//输出\"Aniya\"</span></span><br></pre></td></tr></table></figure></div>\n\n<p>除此之外, 可以使用<code>var</code>前后声明相同的变量, 这并不会报错:</p>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myName = <span class=\"string\">\"Chris\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> myName = <span class=\"string\">\"Bob\"</span>;</span><br></pre></td></tr></table></figure></div>\n\n<p>而<code>let</code>只能声明一次:</p>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myName = <span class=\"string\">\"Chris\"</span>;</span><br><span class=\"line\">myName = <span class=\"string\">\"Bob\"</span>;</span><br></pre></td></tr></table></figure></div>\n\n<p>因此, 在代码编写中应尽量<strong>多使用</strong><code>let</code>而非<code>var</code>, 这可以帮助我们排除无意中重新命名相同变量而导致的错误.</p>\n<h3 id=\"变量命名的规则\"><a href=\"#变量命名的规则\" class=\"headerlink\" title=\"变量命名的规则\"></a>变量命名的规则</h3><p>与C语言类似, 建议以 <strong>字母、数字、下划线</strong> 组成的标识符来命名变量.</p>\n<ul>\n<li>不可用<code>_</code>开头, 因为可能被JS设计为特殊的含义;</li>\n<li>不可用数字开头, 否则引发错误;</li>\n<li>大小写敏感;</li>\n<li>建议采用 <strong>小写驼峰命名法</strong> ,即小写整个命名的第一个字母然后大写剩下单词的首字符;</li>\n<li>避免使用保留字, 比如<code>var</code>,<code>let</code>,<code>for</code>等.</li>\n</ul>\n<h3 id=\"变量类型\"><a href=\"#变量类型\" class=\"headerlink\" title=\"变量类型\"></a>变量类型</h3><div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myAge = <span class=\"number\">20</span> ;<span class=\"comment\">// 数字</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dolphinGoodbye = <span class=\"string\">\"So long and thanks for all the fish\"</span>; <span class=\"comment\">// 字符串</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> test = <span class=\"number\">6</span> &lt; <span class=\"number\">3</span>; <span class=\"comment\">//boolean</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//数组类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> myNameArray = [<span class=\"string\">\"Chris\"</span>, <span class=\"string\">\"Bob\"</span>, <span class=\"string\">\"Jim\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> myNumberArray = [<span class=\"number\">10</span>, <span class=\"number\">15</span>, <span class=\"number\">40</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对象类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dog = { <span class=\"attr\">name</span>: <span class=\"string\">\"Spot\"</span>, <span class=\"attr\">breed</span>: <span class=\"string\">\"Dalmatian\"</span> };</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p>对象类型的访问与结构体相似, <code>dog.name;</code></p>\n</blockquote>\n<p>在上面的几种变量类型中, 我们都采用<code>let</code>关键字声明变量, 这体现了JS是一种 <strong>动态类型语言</strong> ,即无需指定变量包含的数据类型.</p>\n<p>同时, 这也意味着我们可以像<code>python</code>一样对同一个变量先后赋值不同类型的值:</p>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myNumber = <span class=\"string\">\"500\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">typeof</span> myNumber;</span><br><span class=\"line\"><span class=\"comment\">// 输出 'string'</span></span><br><span class=\"line\"></span><br><span class=\"line\">myNumber = <span class=\"number\">500</span>; </span><br><span class=\"line\"><span class=\"keyword\">typeof</span> myNumber;</span><br><span class=\"line\"><span class=\"comment\">//输出'number'</span></span><br></pre></td></tr></table></figure></div>\n\n\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><ul>\n<li><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.17ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"2.867ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 2000 1267\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">提</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">升</text></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-665)\"><svg width=\"2000\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"500 148 2000 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(6,1)\"></path></svg></g></g></g></g></svg></mjx-container> 解释器在执行代码之前，似乎将函数、变量、类或导入的声明移动到其作用域的顶部的过程.</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">exampleFunction</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">exampleFunction</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">\"函数内\"</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p>由于 <strong>提升</strong> 的存在, 上述的函数调用不会出错.</p>\n</blockquote>\n<h3 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数\"></a>默认参数</h3><p>在编写函数时, 可以通过在参数名称后添加<code>=</code>, 再指定默认值, 这样当调用函数时, 如果没有传入该参数, 则使用默认值。</p>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">greeding</span>(<span class=\"params\">name = <span class=\"string\">\"my friend\"</span></span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Hello, <span class=\"subst\">${name}</span>!`</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"title function_\">hello</span>(); <span class=\"comment\">//Hello, my friend!</span></span><br><span class=\"line\"><span class=\"title function_\">hello</span>(<span class=\"string\">\"world\"</span>); <span class=\"comment\">//Hello, world!</span></span><br></pre></td></tr></table></figure></div>\n\n<br>\n\n<p>事件处理函数的默认接受值是<code>event</code>:</p>\n<div class=\"code-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">onclick</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">nothing here</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">\"button\"</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">para = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">\"p\"</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">btn.<span class=\"property\">onclick</span> = click;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">function</span> <span class=\"title function_\">click</span>(<span class=\"params\">string</span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">\"clicked!\"</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">  para.<span class=\"property\">textContent</span> = string;</span></span><br><span class=\"line\"><span class=\"language-javascript\">}</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<ol>\n<li>上述的<code>btn</code>在点击之后调用函数<code>click</code>, 该函数需要一个参数<code>string</code>, 由于<code>btn.onclick = click;</code>的绑定方式, 我们无法指定传参的值, 因此点击之后的<code>para</code>的内容显示为: <code>[object PointerEvent]</code>;</li>\n<li><code>textContent</code>是属性而非方法, 因此采用赋值实现;</li>\n</ol>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btn.<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span> <span class=\"title function_\">click</span>(<span class=\"params\">string</span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">\"clicked!\"</span>)</span><br><span class=\"line\">  para.<span class=\"property\">textContent</span> = <span class=\"string\">\"You have clicked the button!\"</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p>将上述的绑定方式如此改写, 可以在<code>btn</code>外对<code>string</code>进行赋值, 然后点击按钮可以传入指定参数供后续处理.</p>\n</blockquote>\n<h3 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3><p>在了解箭头函数的作用之前, 需要先介绍 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.17ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9.05ex\" height=\"2.867ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 4000 1267\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">匿</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">名</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">函</text></g><g data-mml-node=\"mi\" transform=\"translate(3000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">数</text></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-665)\"><svg width=\"4000\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"1000 148 4000 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(12,1)\"></path></svg></g></g></g></g></svg></mjx-container>:</p>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myFunction</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(<span class=\"string\">\"你好\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 匿名函数</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(<span class=\"string\">\"你好\"</span>);</span><br><span class=\"line\">});</span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p>正如其名, 匿名函数没有函数名, 不能被调用, 但可以作为参数传入其他函数中.</p>\n</blockquote>\n<p>如果我们希望在监听某个事件发生时调用简单的函数来处理, 则可以通过调用上述的匿名函数实现:</p>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">logKey</span>(<span class=\"params\">event</span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`You pressed \"<span class=\"subst\">${event.key}</span>\".`</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">textBox.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">\"keydown\"</span>, logKey);</span><br></pre></td></tr></table></figure></div>\n<p>这部分代码通过监听html元素的keydown事件, 调用函数输出按下的键盘按键. 我们可以通过匿名函数来简化书写:</p>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">textBox.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">\"keydown\"</span>, <span class=\"keyword\">function</span> (<span class=\"params\">event</span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`You pressed \"<span class=\"subst\">${event.key}</span>\".`</span>);</span><br><span class=\"line\">});</span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p>只需传入函数体, 而不需要函数名, 就可以实现监听事件并调用函数的功能.</p>\n</blockquote>\n<p>而<strong>箭头函数</strong>则是在此情况下更简洁的函数定义方式:</p>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">textBox.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">\"keydown\"</span>, <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`You pressed \"<span class=\"subst\">${event.key}</span>\".`</span>);</span><br><span class=\"line\">});</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果函数只接受一个参数, 也可以省略参数周围的括号</span></span><br><span class=\"line\">textBox.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">\"keydown\"</span>, <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`You pressed \"<span class=\"subst\">${event.key}</span>\".`</span>);</span><br><span class=\"line\">});</span><br></pre></td></tr></table></figure></div>\n\n<p>如果只包含一行的<code>return</code>,则可以忽略<code>{}</code>和<code>return</code>关键字:</p>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> originals = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> doubled = originals.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item * <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(doubled); <span class=\"comment\">// [2, 4, 6]</span></span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p><code>item =&gt; item * 2</code>等价于:</p>\n</blockquote>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">doubleItem</span>(<span class=\"params\">item</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item * <span class=\"number\">2</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"一个实例\"><a href=\"#一个实例\" class=\"headerlink\" title=\"一个实例\"></a>一个实例</h4><div class=\"code-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"textBox\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"output\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> textBox = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">\"#textBox\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> output = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">\"#output\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">textBox.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">\"keydown\"</span>, <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> {</span><br><span class=\"line\">  output.<span class=\"property\">textContent</span> = <span class=\"string\">`You pressed \"<span class=\"subst\">${event.key}</span>\".`</span>;</span><br><span class=\"line\">});</span><br></pre></td></tr></table></figure></div>\n<p>通过监听输入框的keydown事件, 输出按下的键盘按键.</p>\n<h3 id=\"函数作用域和冲突\"><a href=\"#函数作用域和冲突\" class=\"headerlink\" title=\"函数作用域和冲突\"></a>函数作用域和冲突</h3><p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.17ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"6.787ex\" height=\"2.867ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 3000 1267\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">作</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">用</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">域</text></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-665)\"><svg width=\"3000\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"750 148 3000 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(9,1)\"></path></svg></g></g></g></g></svg></mjx-container> 指当前的执行上下文, 在其中的值和表达式可以被访问. </p>\n<ul>\n<li>全局作用域: 脚本模式运行所有代码的默认作用域;</li>\n<li>模块作用域: 模块模式中运行代码的作用域;</li>\n<li>函数作用域: 由函数创建的作用域</li>\n</ul>\n<p>和C语言相似, 在函数外部<code>let</code>定义的变量, 以及<code>const</code>定义的常量可以在函数内部访问.</p>\n<p>如果HTML调用了多个外部JS文件, 其中具有相同的函数名, 那么只能访问的第一个函数, 第二个函数将被忽略:</p>\n<div class=\"code-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Excerpt from my HTML --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"first.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"second.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  greeting();</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p>如果两个JS文件都定义了<code>greeting</code>函数, 则只有第一个文件中的函数才会被调用.</p>\n</blockquote>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"数字和操作符\"><a href=\"#数字和操作符\" class=\"headerlink\" title=\"数字和操作符\"></a>数字和操作符</h3><p>大部分与C语言相同, 概括需要注意的差异:</p>\n<ul>\n<li>JS当中只有一种数字类型 – <code>number</code>, 对于整型或者浮点数的初始化得到的量, 由<code>typeof</code>均得到<code>number</code>;</li>\n<li>算术运算符: 求幂为<code>**</code>;</li>\n<li>常量无法使用自增或自减,<del>好像也是C语言的 忘了</del></li>\n<li><code>===</code>表示严格等于, <code>!==</code>表示不等于;<blockquote>\n<p>同时存在<code>==</code>和<code>!=</code>来判断是否相等, 但是它们只是测试 <strong>值</strong> 是否相等, 会忽略数据类型的差异; 而上述的比较会同时比较数据类型. 因此推荐使用<code>===</code>和<code>!==</code>来避免类型不一致的错误.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><p>创建字符串</p>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myString = <span class=\"string\">\"A string\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> constString = myString;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(constString);</span><br><span class=\"line\"><span class=\"comment\">//A string</span></span><br></pre></td></tr></table></figure></div>\n<p>可以使用单引号,双引号和<strong>反引号</strong>来包裹字符串, 但是必须确保字符串的开头和结尾使用相同的字符:</p>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> single = <span class=\"string\">'单引号'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> double = <span class=\"string\">\"双引号\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> backtick = <span class=\"string\">`反引号`</span>;</span><br></pre></td></tr></table></figure></div>\n\n<p>反引号包裹的字符串称为<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.17ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"11.312ex\" height=\"2.867ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 5000 1267\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">模</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">板</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">字</text></g><g data-mml-node=\"mi\" transform=\"translate(3000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">符</text></g><g data-mml-node=\"mi\" transform=\"translate(4000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">串</text></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-665)\"><svg width=\"5000\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"1250 148 5000 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(15,1)\"></path></svg></g></g></g></g></svg></mjx-container>, 大多数情况下,它与其他两种字符串类似, 但是具有特殊的属性:</p>\n<ul>\n<li>可以嵌入 <strong>JavaScript</strong>;</li>\n<li>可以声明<strong>多行</strong>的模板字面量.</li>\n</ul>\n<h4 id=\"字符串的拼接\"><a href=\"#字符串的拼接\" class=\"headerlink\" title=\"字符串的拼接\"></a>字符串的拼接</h4><p>字符串的拼接有两种方法, 我们先介绍上述提到的模板字符串中的 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.17ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"6.787ex\" height=\"2.867ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 3000 1267\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">串</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">联</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">法</text></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-665)\"><svg width=\"3000\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"750 148 3000 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(9,1)\"></path></svg></g></g></g></g></svg></mjx-container>:</p>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">\"克里斯\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> greeting = <span class=\"string\">`你好，<span class=\"subst\">${name}</span>`</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(greeting); <span class=\"comment\">// \"你好，克里斯\"</span></span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p>在模板字面量中用<code>${}</code>包装JS的变量或者表达式.</p>\n</blockquote>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> one = <span class=\"string\">\"你好，\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> two = <span class=\"string\">\"请问最近如何？\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> joined = <span class=\"string\">`<span class=\"subst\">${one}</span><span class=\"subst\">${two}</span>`</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(joined); <span class=\"comment\">// \"你好，请问最近如何？\"</span></span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p>连接2个变量.</p>\n</blockquote>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> song = <span class=\"string\">\"青花瓷\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> score = <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> highestScore = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> output = <span class=\"string\">`我喜欢歌曲《<span class=\"subst\">${song}</span>》。我给它打了 <span class=\"subst\">${</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">  (score / highestScore) * <span class=\"number\">100</span></span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">}</span> 分。`</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(output); <span class=\"comment\">// \"我喜欢歌曲《青花瓷》。我给它打了 90 分。\"</span></span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p>在模板字面量的<code>${}</code>内部包含表达式.</p>\n</blockquote>\n<br>\n除此之外,对于普通的字符串(使用单引号或者双引号得到的字符串), 我们可以使用`+`直接连接:\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> greeting = <span class=\"string\">\"你好\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">\"克里斯\"</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(greeting + <span class=\"string\">\"，\"</span> + name); <span class=\"comment\">// \"你好，克里斯\"</span></span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"多行字符串\"><a href=\"#多行字符串\" class=\"headerlink\" title=\"多行字符串\"></a>多行字符串</h4><p>模板字符串会<strong>保留</strong>源代码中的换行符，因此可以编写跨越多行的字符串:</p>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newline = <span class=\"string\">`终于有一天，</span></span><br><span class=\"line\"><span class=\"string\">你知道了必须做的事情，而且开始……`</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newline);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">终于有一天，</span></span><br><span class=\"line\"><span class=\"comment\">你知道了必须做的事情，而且开始……</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure></div>\n\n<p>如果希望用普通的字符串得到等效的输出, 必须在字符串中包含<code>\\n</code>,而非直接跨行:</p>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newline = <span class=\"string\">\"终于有一天，\\n你知道了必须做的事情，而且开始……\"</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newline);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">终于有一天，</span></span><br><span class=\"line\"><span class=\"comment\">你知道了必须做的事情，而且开始……</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"显示引号\"><a href=\"#显示引号\" class=\"headerlink\" title=\"显示引号\"></a>显示引号</h4><ol>\n<li><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.17ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"2.867ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 2000 1267\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">转</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">义</text></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-665)\"><svg width=\"2000\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"500 148 2000 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(6,1)\"></path></svg></g></g></g></g></svg></mjx-container>  通过在符号前加上反斜杠<code>\\</code>, 可以转义字符串中的特殊字符,包括字符串中的引号:</li>\n</ol>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> bigmouth = <span class=\"string\">'I\\'ve got no right to take my place…'</span>;</span><br></pre></td></tr></table></figure></div>\n<ol start=\"2\">\n<li>换用其他字符: 在字面量内用不同于包裹字符串的引号:</li>\n</ol>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> goodQuotes1 = <span class=\"string\">'She said \"I think so!\"'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> goodQuotes2 = <span class=\"string\">`She said \"I'm not going in there!\"`</span>;</span><br></pre></td></tr></table></figure></div>\n\n\n<h4 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h4><p>对于字符串对象实例,其常用的方法:</p>\n<ul>\n<li><code>.length</code>: 获取字符串的长度;</li>\n<li><code>[]</code>: 返回字符串中对应索引的字符, 索引同样从<code>0</code>开始;</li>\n<li><code>.indexOf(\"\")</code>: 查找子字符串<ul>\n<li><strong>input</strong>: 希望查找的子字符串;</li>\n<li><strong>output</strong>: 子字符串开始的下标(如果不存在则返回<code>-1</code>);</li>\n</ul>\n</li>\n<li><code>.slice(indedxStart, indexEnd)</code>: 截取字符串<ul>\n<li><strong>input</strong>: 起始下标, 结束下标(不包含该下标). 如果不存在结束下标则提取之后剩余的全部字符;</li>\n<li><strong>output</strong>: 截取的子字符串;</li>\n</ul>\n</li>\n</ul>\n<p>更多的<code>slice</code>知识:</p>\n<ol>\n<li><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.17ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"11.312ex\" height=\"2.867ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 5000 1267\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">标</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">准</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">化</text></g><g data-mml-node=\"mi\" transform=\"translate(3000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">负</text></g><g data-mml-node=\"mi\" transform=\"translate(4000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">值</text></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-665)\"><svg width=\"5000\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"1250 148 5000 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(15,1)\"></path></svg></g></g></g></g></svg></mjx-container> 如果索引是个负数, 取<code>index+str.length</code>进行标准化;</li>\n<li>如果<code>indexStart</code>大于<code>str.length</code>, 返回空字符串;</li>\n<li>如果标准化负值之后, <code>indexStart</code>大于<code>indexEnd</code>, 也返回空字符串;</li>\n</ol>\n<ul>\n<li><code>.toLowerCase()</code> &amp; <code>.toUpperCase()</code>: 转换字符串中的所有字符为小写或大写;</li>\n<li><code>.replace(original, new)</code>: 替换字符串中<code>original</code>子字符串为<code>new</code>;<blockquote>\n<p>此时不会直接改变原字符串的值, 而是返回一个修改之后的字符串. 因此, 如果想要将原来的值替换, 需要用上述方法得到的值去赋值原来的字符串.</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"Cases\"><a href=\"#Cases\" class=\"headerlink\" title=\"Cases\"></a>Cases</h4><p>利用 <strong>indexOf</strong> 和 <strong>slice</strong> 方法, 获取新字符串:</p>\n<ul>\n<li><strong>input</strong>: <code>\"str3\"</code>三位长字符串+<code>\"...\"</code>(无关字符串)+<code>\";\"</code>+<code>strLast</code>(剩余字符串);</li>\n<li><strong>output</strong>: <code>\"str3\"+\";\"+strLast</code></li>\n</ul>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> stations = [<span class=\"string\">'MAN675847583748sjt567654;Manchester Piccadilly'</span>,</span><br><span class=\"line\">                <span class=\"string\">'GNF576746573fhdg4737dh4;Greenfield'</span>,</span><br><span class=\"line\">                <span class=\"string\">'LIV5hg65hd737456236dch46dg4;Liverpool Lime Street'</span>,</span><br><span class=\"line\">                <span class=\"string\">'SYB4f65hf75f736463;Stalybridge'</span>,</span><br><span class=\"line\">                <span class=\"string\">'HUD5767ghtyfyr4536dh45dg45dg3;Huddersfield'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; stations.<span class=\"property\">length</span>; i++){</span><br><span class=\"line\">    <span class=\"keyword\">var</span> input = stations[i];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str3 = input.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> strLast = input.<span class=\"title function_\">slice</span>(input.<span class=\"title function_\">indexOf</span>(<span class=\"string\">\";\"</span>)+<span class=\"number\">1</span>); <span class=\"comment\">//indexOf获取;位置</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> output = str3 + <span class=\"string\">\";\"</span> + strLast;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></div>\n\n<hr>\n<p>通过 <strong>indexOf</strong> 根据子字符串筛选字符串数组:</p>\n<ul>\n<li><strong>input</strong>: 可能包含 <em>Christmas</em> 的字符串数组;</li>\n<li><strong>output</strong>: 包含 <em>Christmas</em> 的字符串数组;</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> list = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">'.output ul'</span>);</span><br><span class=\"line\">list.<span class=\"property\">innerHTML</span> = <span class=\"string\">''</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> greetings = [<span class=\"string\">'Happy Birthday!'</span>,</span><br><span class=\"line\">                 <span class=\"string\">'Merry Christmas my love'</span>,</span><br><span class=\"line\">                 <span class=\"string\">'A happy Christmas to all the family'</span>,</span><br><span class=\"line\">                 <span class=\"string\">'You\\'re all I want for Christmas'</span>,</span><br><span class=\"line\">                 <span class=\"string\">'Get well soon'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; greetings.<span class=\"property\">length</span>; i++) {</span><br><span class=\"line\">  <span class=\"keyword\">var</span> input = greetings[i];</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(greetings[i].<span class=\"title function_\">indexOf</span>(<span class=\"string\">'Christmas'</span>) !== -<span class=\"number\">1</span>) {</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = input;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> listItem = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">'li'</span>);</span><br><span class=\"line\">    listItem.<span class=\"property\">textContent</span> = result;</span><br><span class=\"line\">    list.<span class=\"title function_\">appendChild</span>(listItem);</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"数字与字符串\"><a href=\"#数字与字符串\" class=\"headerlink\" title=\"数字与字符串\"></a>数字与字符串</h3><h4 id=\"相互转换\"><a href=\"#相互转换\" class=\"headerlink\" title=\"相互转换\"></a>相互转换</h4><p>非常神奇, 在JS当中, 数字和字符串可以直接通过函数<code>Number()</code>和<code>String()</code>进行转换, 与C语言不同.</p>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myString = <span class=\"string\">\"123\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> myNum = <span class=\"title class_\">Number</span>(myString);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> myNum);</span><br><span class=\"line\"><span class=\"comment\">// number</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myNum);</span><br><span class=\"line\"><span class=\"comment\">// 123</span></span><br></pre></td></tr></table></figure></div>\n\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myNum2 = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> myString2 = <span class=\"title class_\">String</span>(myNum2);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> myString2);</span><br><span class=\"line\"><span class=\"comment\">// string</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myString2);</span><br><span class=\"line\"><span class=\"comment\">// \"123\"</span></span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p>对于浮点数同样成立.</p>\n</blockquote>\n<h4 id=\"前后拼接\"><a href=\"#前后拼接\" class=\"headerlink\" title=\"前后拼接\"></a>前后拼接</h4><p>使用<code>+</code>将字符串类型和数字类型的变量or常量直接拼接, 得到的是以空格相隔的字符串:</p>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">\"Front \"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> number = <span class=\"number\">242</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> combine = name + number;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(combine); <span class=\"comment\">//Front 242</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">typeof</span>(combine));  <span class=\"comment\">//string</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><ol>\n<li>存储任意类型元素–字符串，数字，对象，变量，<strong>另一个数组</strong>;</li>\n<li>可以 <strong>混合</strong> 元素类型:</li>\n</ol>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> random = [<span class=\"string\">\"tree\"</span>, <span class=\"number\">795</span>, [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]];</span><br></pre></td></tr></table></figure></div>\n<ol start=\"3\">\n<li>像访问字符串一样, 利用索引访问数组元素;</li>\n<li><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.17ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9.05ex\" height=\"2.867ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 4000 1267\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">多</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">维</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">数</text></g><g data-mml-node=\"mi\" transform=\"translate(3000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">组</text></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-665)\"><svg width=\"4000\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"1000 148 4000 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(12,1)\"></path></svg></g></g></g></g></svg></mjx-container> 包含数组的数组结构称为~</li>\n</ol>\n<h4 id=\"split\"><a href=\"#split\" class=\"headerlink\" title=\"split()\"></a>split()</h4><ul>\n<li>作用: 将一个字符串根据给定的字符分隔为字符串数组;</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myData = <span class=\"string\">\"Manchester,London,Liverpool,Birmingham,Leeds,Carlisle\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> myArray = myData.<span class=\"title function_\">split</span>(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myArray);</span><br><span class=\"line\"> <span class=\"comment\">// [\"Manchester\", \"London\", \"Liverpool\", \"Birmingham\", \"Leeds\", \"Carlisle\"]</span></span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join()\"></a>join()</h4><p><code>split</code>的反向操作, 给出分隔符号, 将数组的字符串拼接成一个字符串:</p>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myNewString = myArray.<span class=\"title function_\">join</span>(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">myNewString;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"toString-NaN\"><a href=\"#toString-NaN\" class=\"headerlink\" title=\"toString()\"></a>toString()</h4><p>与<code>join</code>方法相似, 但是无法自定义分隔符, 默认为<code>,</code>:</p>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> dogNames = [<span class=\"string\">\"Rocket\"</span>, <span class=\"string\">\"Flash\"</span>, <span class=\"string\">\"Bella\"</span>, <span class=\"string\">\"Slugger\"</span>];</span><br><span class=\"line\">dogNames.<span class=\"title function_\">toString</span>(); <span class=\"comment\">//Rocket,Flash,Bella,Slugger</span></span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"push-pop\"><a href=\"#push-pop\" class=\"headerlink\" title=\"push & pop\"></a>push &amp; pop</h4><p><code>push()</code>方法可以将1或多个元素添加到数组的 <strong>末尾</strong>:</p>\n<ol>\n<li>将会直接改写原来的数组,不需要重新赋值;</li>\n<li>该方法具有返回值, 且返回的是更新之后的数组长度(包含元素的个数);</li>\n</ol>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myArray = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> newLength = myArray.<span class=\"title function_\">push</span>(<span class=\"number\">4</span>, <span class=\"number\">5</span>,<span class=\"string\">\"string\"</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myArray); <span class=\"comment\">// [1, 2, 3, 4, 5, \"string\"]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newLength); <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure></div>\n\n<p>使用<code>.pop()</code>从数组中删除最后一个元素:</p>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myArray.<span class=\"title function_\">pop</span>(); <span class=\"comment\">//\"string\"</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myArray); <span class=\"comment\">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure></div>\n<ol>\n<li>方法调用返回值就是删除的元素本身;</li>\n<li>直接对原始数组操作并赋值, 不需要另外的赋值操作;</li>\n</ol>\n<blockquote>\n<p>shift &amp; unshift:<br>在功能上分别与<code>push</code>和<code>pop</code>相同, 但是作用于数组的开始位置.</p>\n</blockquote>\n<h2 id=\"条件语句\"><a href=\"#条件语句\" class=\"headerlink\" title=\"条件语句\"></a>条件语句</h2><p>JS的条件语句与C语言十分相似, 在此仅给出官方文档的一些例子:</p>\n<h3 id=\"天气预报\"><a href=\"#天气预报\" class=\"headerlink\" title=\"天气预报\"></a>天气预报</h3><div class=\"code-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"weather\"</span>&gt;</span>选择今天的天气：&lt;/label</span><br><span class=\"line\">&gt;<span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"weather\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span>&gt;</span>--作出选择--<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"sunny\"</span>&gt;</span>晴天<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"rainy\"</span>&gt;</span>雨天<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"snowing\"</span>&gt;</span>雪天<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"overcast\"</span>&gt;</span>阴天<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p><code>lable</code>当中的<code>for</code>标签与<code>select</code>标签的<code>id</code>属性对应, 用于关联两个标签.</p>\n</blockquote>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> select = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">\"select\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> para = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">\"p\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">select.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">\"change\"</span>, setWeather);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">setWeather</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> choice = select.<span class=\"property\">value</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (choice) {</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"sunny\"</span>:</span><br><span class=\"line\">      para.<span class=\"property\">textContent</span> = <span class=\"string\">\"阳光明媚。穿上短裤吧！去海滩，或公园，吃个冰淇淋。\"</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"rainy\"</span>:</span><br><span class=\"line\">      para.<span class=\"property\">textContent</span> = <span class=\"string\">\"外面下着雨；带上雨衣和雨伞，不要在外面呆太久。\"</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"snowing\"</span>:</span><br><span class=\"line\">      para.<span class=\"property\">textContent</span> =</span><br><span class=\"line\">        <span class=\"string\">\"大雪纷飞，天寒地冻！最好呆在家里喝杯热巧克力，或者去堆个雪人。\"</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"overcast\"</span>:</span><br><span class=\"line\">      para.<span class=\"property\">textContent</span> =</span><br><span class=\"line\">        <span class=\"string\">\"虽然没有下雨，但天空灰蒙蒙的，随时都可能变天，所以要带一件雨衣以防万一。\"</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">      para.<span class=\"property\">textContent</span> = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<ol>\n<li>通过<code>querySelector</code>方法获取<code>select</code>和<code>p</code>标签;</li>\n<li>然后为<code>select</code>标签添加事件监听器, 当内容改变时触发 <strong>change</strong> 事件, 同时调用<code>setWeather</code>函数;</li>\n<li>进而通过 <strong>switch</strong> 语句处理不同天气的情况, 并设置相应的文字内容;<br>在线网页示例:<a class=\"link\" href=\"https://mdn.github.io/learning-area/javascript/building-blocks/simple-switch.html\">simple-switch<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n</ol>\n</blockquote>\n<h2 id=\"事件介绍\"><a href=\"#事件介绍\" class=\"headerlink\" title=\"事件介绍\"></a>事件介绍</h2><p>什么是<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.17ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"2.867ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 2000 1267\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">事</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">件</text></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-665)\"><svg width=\"2000\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"500 148 2000 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(6,1)\"></path></svg></g></g></g></g></svg></mjx-container>? </p>\n<ul>\n<li>用户选择、点击或者光标悬停在某一元素;</li>\n<li>用户在键盘中按下某个按键;</li>\n<li>网页结束加载;</li>\n<li>…</li>\n</ul>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.17ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"11.312ex\" height=\"2.867ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 5000 1267\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">事</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">件</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">处</text></g><g data-mml-node=\"mi\" transform=\"translate(3000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">理</text></g><g data-mml-node=\"mi\" transform=\"translate(4000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">器</text></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-665)\"><svg width=\"5000\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"1250 148 5000 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(15,1)\"></path></svg></g></g></g></g></svg></mjx-container> 为了响应事件, 我们需要编写一份JS代码块用于在事件发生之后运行. 这样的代码块称之为~.</p>\n<h3 id=\"处理点击事件\"><a href=\"#处理点击事件\" class=\"headerlink\" title=\"处理点击事件\"></a>处理点击事件</h3><p>以点击事件为例, 介绍html与js如何进行事件处理的交互:</p>\n<div class=\"code-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span> 改变颜色 <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">\"button\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">random</span>(<span class=\"params\">number</span>){</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>()*(number+<span class=\"number\">1</span>));</span><br><span class=\"line\">  </span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">btn.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">\"click\"</span>, <span class=\"function\">()=&gt;</span>{</span><br><span class=\"line\">  <span class=\"keyword\">const</span> rndCol = <span class=\"string\">`rgb(<span class=\"subst\">${random(<span class=\"number\">255</span>)}</span>,<span class=\"subst\">${random(<span class=\"number\">255</span>)}</span>,<span class=\"subst\">${random(<span class=\"number\">255</span>)}</span>)`</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">style</span>.<span class=\"property\">backgroundColor</span> = rndCol;</span><br><span class=\"line\">})</span><br></pre></td></tr></table></figure></div>\n<ol>\n<li><code>Math.random()</code>方法生成一个介于[0,1)之间的随机数;</li>\n<li><code>*(number+1)</code>之后利用向下取整的方法<code>Math.floor()</code>将其转换为整数, 范围为[0,number];<blockquote>\n<p>假如输入的number为<code>4</code>, 则<code>random(4)</code>的结果可能为<code>0</code>, <code>1</code>, <code>2</code>, <code>3</code>, <code>4</code>中的一个;<br>假设输入的number为<code>3.6</code>, 则输出的结果还是0~4中的整数.</p>\n</blockquote>\n</li>\n<li><code>rndCol = `rgb(${random(255)},${random(255)},${random(255)})</code> 采用的是在<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.17ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"11.312ex\" height=\"2.867ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 5000 1267\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">模</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">板</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">字</text></g><g data-mml-node=\"mi\" transform=\"translate(3000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">符</text></g><g data-mml-node=\"mi\" transform=\"translate(4000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">串</text></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-665)\"><svg width=\"5000\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"1250 148 5000 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(15,1)\"></path></svg></g></g></g></g></svg></mjx-container>内部使用<code>${}</code>调用函数变量的方法.</li>\n</ol>\n<h3 id=\"addEventListener\"><a href=\"#addEventListener\" class=\"headerlink\" title=\"addEventListener()\"></a>addEventListener()</h3><p><code>adEventListener</code>方法已经在之前的例子中出现过, 现在具体介绍其作用和语法.</p>\n<p>通过<code>EventTarget.adddEventListener()</code>的方法, 将指定的监听器注册到对象上, 具体的语法如下:</p>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">addEventListener</span>(type, listener);</span><br><span class=\"line\"><span class=\"title function_\">addEventListener</span>(type, listener, options);</span><br><span class=\"line\"><span class=\"title function_\">addEventListener</span>(type, listener, useCapture);</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li><code>type</code>: 事件类型, 如<code>click</code>, <code>mouseover</code>, <code>mouseout</code>, <code>keydown</code>, <code>keyup</code>等;</li>\n<li><code>listener</code>: 事件处理函数, 该函数将在事件发生时被调用;<ul>\n<li>包括 <strong>回调函数</strong> 以及 实现了 <strong>EventListener 接口的对象</strong>;</li>\n</ul>\n</li>\n<li><code>options</code>: 可选参数, 用于配置事件监听器的行为;<blockquote>\n<p>可以为单个事件添加多个事件监听器.</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"listener\"><a href=\"#listener\" class=\"headerlink\" title=\"listener\"></a>listener</h4><p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.17ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9.05ex\" height=\"2.867ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 4000 1267\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">回</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">调</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">函</text></g><g data-mml-node=\"mi\" transform=\"translate(3000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">数</text></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-665)\"><svg width=\"4000\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"1000 148 4000 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(12,1)\"></path></svg></g></g></g></g></svg></mjx-container> 简单来说, ~指的是当某个事件发生时被调用的一段代码.</p>\n<ul>\n<li>是一个函数, 但是只有等到特定的事件发生时才会执行.</li>\n</ul>\n<p>实现了 EventListener 接口的对象:</p>\n<ul>\n<li><strong>特点</strong>: 以对象作为listener, 对象中具有名为<code>handleEvent()</code>的方法;</li>\n<li><strong>作用</strong>: <ul>\n<li>将事件处理封装到一个对象当中, 可以更好地组织代码;</li>\n<li>便于在对象中保存更多的状态信息;</li>\n</ul>\n</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> listenerObject = {</span><br><span class=\"line\">    <span class=\"attr\">count</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"title function_\">handleEvent</span>(<span class=\"params\">event</span>) {</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">count</span>++;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`事件类型是：<span class=\"subst\">${event.type}</span>，已触发 <span class=\"subst\">${<span class=\"variable language_\">this</span>.count}</span> 次`</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> button = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">'button'</span>);</span><br><span class=\"line\">button.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">'click'</span>, listenerObject);</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"options\"><a href=\"#options\" class=\"headerlink\" title=\"options\"></a>options</h4><p>一个指定有关 listener 属性的可选参数对象.</p>\n<h5 id=\"Capture\"><a href=\"#Capture\" class=\"headerlink\" title=\"Capture\"></a>Capture</h5><ul>\n<li><p>含义:</p>\n<ul>\n<li>一个布尔值，表示 listener 会在该类型的事件捕获阶段传播到该 EventTarget 时触发;</li>\n<li>默认为false, 表示只有在冒泡阶段才触发.</li>\n</ul>\n</li>\n<li><p>区别:</p>\n<ul>\n<li><code>capture</code>和<code>useCapture</code>实际上指的都是 <strong>监听器是否在捕获阶段触发</strong> 的布尔值.<blockquote>\n<p>捕获阶段: 从最外层的元素开始, 逐层向内捕获事件, 直到事件到达目标元素.</p>\n</blockquote>\n</li>\n<li>后来DOM的规范更新时引入了<code>options</code>参数, 此后<code>capture</code>取代了<code>useCapture</code>的作用.</li>\n<li>如果<code>addEventListener</code>的第三个参数不指定对象, 只有布尔值, 那么默认是在设置<code>useCapture</code></li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>可以先查看<a href=\"#%E4%BA%8B%E4%BB%B6%E4%BC%A0%E6%92%AD%E7%9A%84%E9%98%B6%E6%AE%B5\">事件传播的阶段</a>来辅助理解不同的阶段.</p>\n</blockquote>\n<h5 id=\"Once\"><a href=\"#Once\" class=\"headerlink\" title=\"Once\"></a>Once</h5><ul>\n<li>含义:<ul>\n<li>一个布尔值，表示 listener 在添加之后最多只调用一次;</li>\n<li>默认为false, 表示可以多次调用.</li>\n</ul>\n</li>\n<li>e.g.</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">child.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">'子元素 - 目标阶段'</span>);</span><br><span class=\"line\">},{<span class=\"attr\">once</span>: <span class=\"literal\">true</span>});</span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p><code>once</code>属性被设置为<code>true</code>, 当调用一次之后事件监听器会被自动清除. 因此只有第一次的点击才会console.</p>\n</blockquote>\n<h5 id=\"Passive\"><a href=\"#Passive\" class=\"headerlink\" title=\"Passive\"></a>Passive</h5><ul>\n<li><p>含义:</p>\n<ul>\n<li>一个布尔值，设置为 true 时，表示 listener 永远不会调用 preventDefault();</li>\n</ul>\n</li>\n<li><p>作用:</p>\n<ul>\n<li>明确不会在<code>listener</code>中不会调用<code>preventDefault()</code>方法, 即不会阻止浏览器的<a href=\"#%E9%BB%98%E8%AE%A4%E8%A1%8C%E4%B8%BA\">默认行为</a>;</li>\n<li>此时, 浏览器可以直接渲染默认行为的结果, 无需等待<code>listener</code>的执行与默认行为的检查, 从而提高了性能.</li>\n</ul>\n</li>\n<li><p>Notice:</p>\n<ul>\n<li>如果设置<code>passive</code>为<code>true</code>, 则<code>listener</code>当中不可出现<code>preventDefault()</code>方法, 否则会报错.</li>\n</ul>\n</li>\n</ul>\n<p>e.g.</p>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">'wheel'</span>,<span class=\"function\">()=&gt;</span>{</span><br><span class=\"line\">\tevent.<span class=\"title function_\">preventDefault</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">\"scrolling\"</span>);</span><br><span class=\"line\">},{<span class=\"attr\">passive</span>: <span class=\"literal\">false</span>});</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li><code>wheel</code>事件的默认行为是滚动页面;</li>\n<li><code>event.preventDefault();</code>表示会阻止鼠标滚动带来的页面滚动;</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">'wheel'</span>,<span class=\"function\">()=&gt;</span>{</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">\"scrolling\"</span>);</span><br><span class=\"line\">},{<span class=\"attr\">passive</span>: <span class=\"literal\">true</span>});</span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p>明确不会阻止默认行为, 浏览器可以直接渲染页面的滚动效果, 因此提高了显示的效果.</p>\n</blockquote>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">'wheel'</span>,<span class=\"function\">()=&gt;</span>{</span><br><span class=\"line\">  event.<span class=\"title function_\">preventDefault</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">\"scrolling\"</span>);</span><br><span class=\"line\">},{<span class=\"attr\">passive</span>: <span class=\"literal\">true</span>});</span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p><code>passive</code>的设置与<code>listener</code>内部矛盾, 将会报错.</p>\n</blockquote>\n<h5 id=\"Signal\"><a href=\"#Signal\" class=\"headerlink\" title=\"Signal\"></a>Signal</h5><p>用于有条件地移除事件监听器, 具体使用参见<a href=\"#%E5%8F%AF%E8%A2%AB%E7%A7%BB%E9%99%A4%E7%9A%84%E7%9B%91%E5%90%AC%E5%99%A8\">可被移除的监听器</a>.</p>\n<h3 id=\"事件传播的阶段\"><a href=\"#事件传播的阶段\" class=\"headerlink\" title=\"事件传播的阶段\"></a>事件传播的阶段</h3><ol>\n<li>捕获阶段 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.156ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"13.819ex\" height=\"2.726ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 6108 1205\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(433,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(962,0)\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1465,0)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1826,0)\"><path data-c=\"1D462\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2398,0)\"><path data-c=\"1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2849,0)\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path></g><g data-mml-node=\"mtext\" transform=\"translate(3315,0)\"><path data-c=\"A0\" d=\"\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3565,0)\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4068,0)\"><path data-c=\"210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4644,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(5173,0)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(5642,0)\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-659)\"><svg width=\"6108\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"1527 148 6108 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(18.324,1)\"></path></svg></g></g></g></g></svg></mjx-container>: 事件从根节点开始向目标节点传播;<blockquote>\n<p>e.g. 点击事件从document开始传播, 经过html,body直到目标元素.</p>\n</blockquote>\n</li>\n<li>目标阶段阶段 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.181ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"12.303ex\" height=\"2.751ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 5438 1216\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(361,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(890,0)\"><path data-c=\"1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1341,0)\"><path data-c=\"1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1818,0)\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2284,0)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g><g data-mml-node=\"mtext\" transform=\"translate(2645,0)\"><path data-c=\"A0\" d=\"\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2895,0)\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3398,0)\"><path data-c=\"210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3974,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4503,0)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4972,0)\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-670)\"><svg width=\"5438\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"1359.5 148 5438 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(16.314,1)\"></path></svg></g></g></g></g></svg></mjx-container>: 事件到达目标元素;</li>\n<li>冒泡阶段 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.156ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"12.253ex\" height=\"2.726ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 5416 1205\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(429,0)\"><path data-c=\"1D462\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1001,0)\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1430,0)\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1859,0)\"><path data-c=\"1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2157,0)\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path></g><g data-mml-node=\"mtext\" transform=\"translate(2623,0)\"><path data-c=\"A0\" d=\"\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2873,0)\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3376,0)\"><path data-c=\"210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3952,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4481,0)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4950,0)\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-659)\"><svg width=\"5416\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"1354 148 5416 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(16.248,1)\"></path></svg></g></g></g></g></svg></mjx-container>: 事件从目标元素开始沿着DOM树向上传播.</li>\n</ol>\n<h4 id=\"Case\"><a href=\"#Case\" class=\"headerlink\" title=\"Case\"></a>Case</h4><div class=\"code-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  parent</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"child\"</span>&gt;</span>child<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> parent = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">'#parent'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> child = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">'#child'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">parent.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">'父元素 - 冒泡阶段'</span>);</span><br><span class=\"line\">});</span><br><span class=\"line\"></span><br><span class=\"line\">parent.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">'父元素 - 捕获阶段'</span>);</span><br><span class=\"line\">}, { <span class=\"attr\">capture</span>: <span class=\"literal\">true</span> });</span><br><span class=\"line\"></span><br><span class=\"line\">child.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">'子元素 - 目标阶段'</span>);</span><br><span class=\"line\">});</span><br></pre></td></tr></table></figure></div>\n<p>上述的<code>child</code>被包裹在<code>parent</code>内部.</p>\n<ul>\n<li>当点击<code>parent</code>时将会显示:</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"父元素 - 捕获阶段\"</span></span><br><span class=\"line\"><span class=\"string\">\"父元素 - 冒泡阶段\"</span></span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p>由于设置了在捕获阶段就触发, 所以先触发了捕获阶段的监听器, 然后再触发冒泡阶段的监听器;</p>\n</blockquote>\n<ul>\n<li>当点击<code>child</code>时将会显示:</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"父元素 - 捕获阶段\"</span></span><br><span class=\"line\"><span class=\"string\">\"子元素 - 目标阶段\"</span></span><br><span class=\"line\"><span class=\"string\">\"父元素 - 冒泡阶段\"</span></span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p><code>child</code>是整个事件流的目标元素, 所以触发时机介于二者之间.</p>\n</blockquote>\n<h4 id=\"Notice\"><a href=\"#Notice\" class=\"headerlink\" title=\"Notice\"></a>Notice</h4><ol>\n<li><p>如果将<code>div</code>换成<code>button</code>, 则点击<code>child</code>时可能只会显示 <strong>目标</strong> 阶段的输出.</p>\n<blockquote>\n<p>这是因为, 不同浏览器对于<code>button</code>元素的默认行为不同, 可能默认阻止了捕获阶段和冒泡阶段</p>\n</blockquote>\n</li>\n<li><p><code>event.stopPropagation();</code>加入该<del>咒语</del>代码可以在此停止事件的传播, 比如可以在上述的捕获阶段监听器加入该代码:</p>\n</li>\n</ol>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parent.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">'父元素 - 捕获阶段'</span>);</span><br><span class=\"line\">    event.<span class=\"title function_\">stopPropagation</span>();</span><br><span class=\"line\">}, { <span class=\"attr\">capture</span>: <span class=\"literal\">true</span> });</span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p>此时, 点击<code>parent</code>时, 只会触发捕获阶段的监听器, 不会触发冒泡阶段的监听器.</p>\n</blockquote>\n<h3 id=\"可被移除的监听器\"><a href=\"#可被移除的监听器\" class=\"headerlink\" title=\"可被移除的监听器\"></a>可被移除的监听器</h3><div class=\"code-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">id</span>=<span class=\"string\">\"outside\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">id</span>=<span class=\"string\">\"t1\"</span>&gt;</span>one<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">id</span>=<span class=\"string\">\"t2\"</span>&gt;</span>two<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 为 table 添加可被移除的事件监听器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> controller = <span class=\"keyword\">new</span> <span class=\"title class_\">AbortController</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> el = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">\"outside\"</span>);</span><br><span class=\"line\">el.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">\"click\"</span>, modifyText, { <span class=\"attr\">signal</span>: controller.<span class=\"property\">signal</span> });</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 改变 t2 内容的函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">modifyText</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> t2 = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">\"t2\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (t2.<span class=\"property\">firstChild</span>.<span class=\"property\">nodeValue</span> === <span class=\"string\">\"three\"</span>) {</span><br><span class=\"line\">    t2.<span class=\"property\">firstChild</span>.<span class=\"property\">nodeValue</span> = <span class=\"string\">\"two\"</span>;</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    t2.<span class=\"property\">firstChild</span>.<span class=\"property\">nodeValue</span> = <span class=\"string\">\"three\"</span>;</span><br><span class=\"line\">    controller.<span class=\"title function_\">abort</span>(); <span class=\"comment\">// 当值变为 \"three\" 后，移除监听器</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<ul>\n<li><code>AbortController</code>是一个构造函数, 用于创建一个可被移除的事件监听器的控制器;</li>\n<li><code>signal</code>属性是一个<code>AbortSignal</code>对象, 用于控制监听器的移除;</li>\n<li><code>controller.abort()</code>方法用于移除监听器;</li>\n<li>当<code>t2</code>的内容变为”three”时, 移除监听器, 使得<code>modifyText</code>函数不再执行. 此后, 点击<code>t2</code>不会触发<code>modifyText</code>函数.</li>\n</ul>\n</blockquote>\n<p>具体的<strong>构造步骤:</strong></p>\n<ol>\n<li>创建一个<code>AbortController</code>实例: <code>const controller = new AbortController();</code></li>\n<li>在事件监听器内的参数中添加<code>signal: controller.signal</code>选项;</li>\n<li>在需要移除监听器的地方调用<code>controller.abort()</code>方法;</li>\n</ol>\n<hr>\n<p>我们也可以直接使用<code>removeEventListener()</code>方法来移除事件监听器:</p>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">removeEventListener</span>(type, listener);</span><br><span class=\"line\"><span class=\"title function_\">removeEventListener</span>(type, listener, options);</span><br><span class=\"line\"><span class=\"title function_\">removeEventListener</span>(type, listener, useCapture);</span><br></pre></td></tr></table></figure></div>\n\n\n<ul>\n<li>Notices:<ul>\n<li>如果同一个对象上存在2个事件监听器, 且仅在<code>useCapture</code>参数存在差异, 那么需要先后2次调用<code>removeEventListener()</code>方法才能完全移除其事件监听器;</li>\n<li>如果无法匹配当前注册的事件监听器, 那么该函数将不会起任何作用;</li>\n<li><code>type</code>,<code>listener</code>参数必须完全匹配才能移除事件监听器;</li>\n<li>对于<code>options</code>参数:<ul>\n<li>字段相同: 一定可以移除;</li>\n<li>字段不同: 需要与默认值false匹配才可以移除.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">element.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">\"mousedown\"</span>, handleMouseDown, { <span class=\"attr\">passive</span>: <span class=\"literal\">true</span> });</span><br><span class=\"line\"></span><br><span class=\"line\">element.<span class=\"title function_\">removeEventListener</span>(<span class=\"string\">\"mousedown\"</span>, handleMouseDown, { <span class=\"attr\">passive</span>: <span class=\"literal\">true</span> }); <span class=\"comment\">// 成功</span></span><br><span class=\"line\">element.<span class=\"title function_\">removeEventListener</span>(<span class=\"string\">\"mousedown\"</span>, handleMouseDown, { <span class=\"attr\">capture</span>: <span class=\"literal\">false</span> }); <span class=\"comment\">// 成功</span></span><br><span class=\"line\">element.<span class=\"title function_\">removeEventListener</span>(<span class=\"string\">\"mousedown\"</span>, handleMouseDown, { <span class=\"attr\">capture</span>: <span class=\"literal\">true</span> }); <span class=\"comment\">// 失败</span></span><br><span class=\"line\">element.<span class=\"title function_\">removeEventListener</span>(<span class=\"string\">\"mousedown\"</span>, handleMouseDown, { <span class=\"attr\">passive</span>: <span class=\"literal\">false</span> }); <span class=\"comment\">// 成功</span></span><br><span class=\"line\">element.<span class=\"title function_\">removeEventListener</span>(<span class=\"string\">\"mousedown\"</span>, handleMouseDown, <span class=\"literal\">false</span>); <span class=\"comment\">// 成功</span></span><br><span class=\"line\">element.<span class=\"title function_\">removeEventListener</span>(<span class=\"string\">\"mousedown\"</span>, handleMouseDown, <span class=\"literal\">true</span>); <span class=\"comment\">// 失败</span></span><br></pre></td></tr></table></figure></div>\n\n<hr>\n<p><strong>添加与移除</strong>的结合使用:</p>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> body = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">\"body\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> clickTarget = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">\"click-target\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> mouseOverTarget = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">\"mouse-over-target\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> toggle = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">makeBackgroundYellow</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  body.<span class=\"property\">style</span>.<span class=\"property\">backgroundColor</span> = toggle ? <span class=\"string\">\"white\"</span> : <span class=\"string\">\"yellow\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  toggle = !toggle;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">clickTarget.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">\"click\"</span>, makeBackgroundYellow, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">mouseOverTarget.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">\"mouseover\"</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  clickTarget.<span class=\"title function_\">removeEventListener</span>(<span class=\"string\">\"click\"</span>, makeBackgroundYellow, <span class=\"literal\">false</span>);</span><br><span class=\"line\">});</span><br></pre></td></tr></table></figure></div>\n\n\n<h3 id=\"使用匿名函数\"><a href=\"#使用匿名函数\" class=\"headerlink\" title=\"使用匿名函数\"></a>使用匿名函数</h3><p>在上述<code>html</code>例子下:</p>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 改变 t2 内容的函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">modifyText</span>(<span class=\"params\">new_text</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> t2 = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">\"t2\"</span>);</span><br><span class=\"line\">  t2.<span class=\"property\">firstChild</span>.<span class=\"property\">nodeValue</span> = new_text;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用匿名函数为 table 添加事件监听器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> el = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">\"outside\"</span>);</span><br><span class=\"line\">el.<span class=\"title function_\">addEventListener</span>(</span><br><span class=\"line\">  <span class=\"string\">\"click\"</span>,</span><br><span class=\"line\">  <span class=\"keyword\">function</span> (<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"title function_\">modifyText</span>(<span class=\"string\">\"four\"</span>);</span><br><span class=\"line\">  },</span><br><span class=\"line\">  <span class=\"literal\">false</span>,</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></div>\n<p>通过匿名函数封装代码, 将参数传入函数<code>modifyText</code>, 使得函数可以被调用.</p>\n<h3 id=\"使用箭头函数\"><a href=\"#使用箭头函数\" class=\"headerlink\" title=\"使用箭头函数\"></a>使用箭头函数</h3><div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 改变 t2 内容的函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">modifyText</span>(<span class=\"params\">new_text</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">var</span> t2 = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">\"t2\"</span>);</span><br><span class=\"line\">  t2.<span class=\"property\">firstChild</span>.<span class=\"property\">nodeValue</span> = new_text;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用箭头函数为 table 添加事件监听器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> el = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">\"outside\"</span>);</span><br><span class=\"line\">el.<span class=\"title function_\">addEventListener</span>(</span><br><span class=\"line\">  <span class=\"string\">\"click\"</span>,</span><br><span class=\"line\">  <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">    <span class=\"title function_\">modifyText</span>(<span class=\"string\">\"four\"</span>);</span><br><span class=\"line\">  },</span><br><span class=\"line\">  <span class=\"literal\">false</span>,</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></div>\n<p>通过<code>=&gt;{}</code>形式的箭头函数简化代码书写.</p>\n<hr>\n<h4 id=\"比较匿名与箭头\"><a href=\"#比较匿名与箭头\" class=\"headerlink\" title=\"比较匿名与箭头\"></a>比较匿名与箭头</h4><p>匿名函数与箭头函数在此处的应用基本相同, 但是在<code>this</code>的指向上有所不同:</p>\n<ul>\n<li>匿名函数与其他普通的JS函数:<code>this</code>指向调用它的对象之作用域(如果没有直接调用关系, 默认为全局对象, 且严格模式下为<code>undefined</code>);</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sayHello</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>); <span class=\"comment\">// 在非严格模式下，this 指向 window</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"title function_\">sayHello</span>();</span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li>箭头函数的<code>this</code>继承自外部作用域, 即调用该方法的对象.</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = {</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">\"ZJU\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">greet</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>); <span class=\"comment\">// this 指向 obj</span></span><br><span class=\"line\">  },</span><br><span class=\"line\">};</span><br><span class=\"line\">obj.<span class=\"title function_\">greet</span>(); <span class=\"comment\">// 输出：ZJU</span></span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li>e.g.</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = {</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">\"ZJU\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">getNameWithAnonymous</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) {</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">    };</span><br><span class=\"line\">  },</span><br><span class=\"line\">  <span class=\"attr\">getNameWithArrow</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">    };</span><br><span class=\"line\">  },</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> anonymousFn = obj.<span class=\"title function_\">getNameWithAnonymous</span>();</span><br><span class=\"line\"><span class=\"title function_\">anonymousFn</span>(); <span class=\"comment\">// 输出：undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arrowFn = obj.<span class=\"title function_\">getNameWithArrow</span>();</span><br><span class=\"line\"><span class=\"title function_\">arrowFn</span>(); <span class=\"comment\">// 输出：ZJU</span></span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p>进一步完善.</p>\n</blockquote>\n<h3 id=\"事件对象\"><a href=\"#事件对象\" class=\"headerlink\" title=\"事件对象\"></a>事件对象</h3><p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.17ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9.05ex\" height=\"2.867ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 4000 1267\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">事</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">件</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">对</text></g><g data-mml-node=\"mi\" transform=\"translate(3000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">象</text></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-665)\"><svg width=\"4000\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"1000 148 4000 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(12,1)\"></path></svg></g></g></g></g></svg></mjx-container> 在事件处理函数的内部, 以固定指定名称出现的参数, 例如<code>event</code>,<code>e</code>,<code>evt</code>. 它被自动传递给事件处理函数，以提供额外的功能和信息。</p>\n<p><code>e.target</code>始终是对 <strong>事件刚刚发生的元素</strong> 的引用</p>\n<h2 id=\"表达式和运算符\"><a href=\"#表达式和运算符\" class=\"headerlink\" title=\"表达式和运算符\"></a>表达式和运算符</h2><h3 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"new()\"></a>new()</h3><p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.742ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.032ex\" height=\"1.744ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -443 1782 771\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(600,0)\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1066,0)\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-476)\"><svg width=\"1782\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"445.5 148 1782 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(5.346,1)\"></path></svg></g></g></g></g></svg></mjx-container> 用来创建对象实例的一个关键字. </p>\n<ul>\n<li>作用: <strong>调用</strong> 一个 构造函数, 并返回一个由该构造函数创建的对象实例.</li>\n</ul>\n<h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h4><div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> constructor</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>)</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title function_\">constructor</span>(<span class=\"params\">arg1</span>)</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title function_\">constructor</span>(<span class=\"params\">arg1, arg2</span>)</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title function_\">constructor</span>(<span class=\"params\">arg1, arg2, <span class=\"comment\">/* …, */</span> argN</span>)</span><br></pre></td></tr></table></figure></div>\n<ol>\n<li>如果没有指定参数, 默认为在不带参数的情况下调用构造函数. 即<code>new foo</code> 等价于 <code>new foo()</code>;</li>\n<li>构造函数内部的<code>this</code>将被绑定到新建的对象实例上;</li>\n</ol>\n<ul>\n<li>e.g.</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Car</span>(<span class=\"params\">color, brand</span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">color</span> = color;   <span class=\"comment\">// 将 color 赋值给新对象</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">brand</span> = brand;   <span class=\"comment\">// 将 brand 赋值给新对象</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> myCar = <span class=\"keyword\">new</span> <span class=\"title class_\">Car</span>(<span class=\"string\">\"red\"</span>, <span class=\"string\">\"Toyota\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myCar.<span class=\"property\">color</span>); <span class=\"comment\">// 输出 \"red\"</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myCar.<span class=\"property\">brand</span>); <span class=\"comment\">// 输出 \"Toyota\"</span></span><br></pre></td></tr></table></figure></div>\n\n<p>使用<code>new()</code>的<strong>步骤</strong>:</p>\n<ol>\n<li>定义构造函数;</li>\n<li>使用<code>new()</code>并传入构造函数的参数;</li>\n<li>将返回的对象实例赋值给一个变量;</li>\n</ol>\n<h4 id=\"新增属性\"><a href=\"#新增属性\" class=\"headerlink\" title=\"新增属性\"></a>新增属性</h4><ul>\n<li>为已经定义的对象实例直接新增属性, 但是不会影响其他相同类型的对象和构造函数本身:</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">car1.<span class=\"property\">color</span> = <span class=\"string\">\"black\"</span> <span class=\"comment\">//为car1新增color属性</span></span><br></pre></td></tr></table></figure></div>\n<br>\n\n<ul>\n<li>添加共享属性到构造函数中的<code>prototype</code>:</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Car</span>(<span class=\"params\"></span>) {}</span><br><span class=\"line\">car1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Car</span>();</span><br><span class=\"line\">car2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Car</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(car1.<span class=\"property\">color</span>); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Car</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">color</span> = <span class=\"string\">\"原色\"</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(car1.<span class=\"property\">color</span>); <span class=\"comment\">// '原色'</span></span><br><span class=\"line\"></span><br><span class=\"line\">car1.<span class=\"property\">color</span> = <span class=\"string\">\"黑色\"</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(car1.<span class=\"property\">color</span>); <span class=\"comment\">// '黑色'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">getPrototypeOf</span>(car1).<span class=\"property\">color</span>); <span class=\"comment\">// '原色'</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">getPrototypeOf</span>(car2).<span class=\"property\">color</span>); <span class=\"comment\">// '原色'</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(car1.<span class=\"property\">color</span>); <span class=\"comment\">// '黑色'</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(car2.<span class=\"property\">color</span>); <span class=\"comment\">// '原色'</span></span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<ul>\n<li>此处的构造函数名为<code>Car</code>, 因此通过<code>Car.prototype</code>可以访问到构造函数的原型对象;</li>\n<li><code>getPrototypeOf</code> 表示获取对象的<strong>原型对象</strong>, 因此此处均为最初定义的 <strong>原色</strong>.</li>\n</ul>\n</blockquote>\n<h4 id=\"new-target\"><a href=\"#new-target\" class=\"headerlink\" title=\"new.target\"></a>new.target</h4><p>函数通过<code>new.target</code>属性可以判断是否通过<code>new</code>关键字调用, 即构造.</p>\n<ul>\n<li><p>如果函数是正常调用, 则返回<code>undefined</code>;</p>\n</li>\n<li><p>如果函数是通过<code>new</code>调用, 返回被调用的构造函数.</p>\n</li>\n<li><p>e.g.</p>\n</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Car</span>(<span class=\"params\">color</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"keyword\">new</span>.<span class=\"property\">target</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// 以函数的形式被调用。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">${color}</span>车`</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">// 通过 new 被调用。</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">color</span> = color;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"title class_\">Car</span>(<span class=\"string\">\"红\"</span>); <span class=\"comment\">// a 是“红车”</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"keyword\">new</span> <span class=\"title class_\">Car</span>(<span class=\"string\">\"红\"</span>); <span class=\"comment\">// b 是 `Car { color: \"红\" }`</span></span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"对象类型与实例\"><a href=\"#对象类型与实例\" class=\"headerlink\" title=\"对象类型与实例\"></a>对象类型与实例</h4><p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.17ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9.05ex\" height=\"2.867ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 4000 1267\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">对</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">象</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">类</text></g><g data-mml-node=\"mi\" transform=\"translate(3000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">型</text></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-665)\"><svg width=\"4000\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"1000 148 4000 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(12,1)\"></path></svg></g></g></g></g></svg></mjx-container> 通过构造函数可以创建一个对象类型:</p>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Car</span>(<span class=\"params\">make, model, year</span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">make</span> = make;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">model</span> = model;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">year</span> = year;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></div>\n\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.17ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9.05ex\" height=\"2.867ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 4000 1267\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">对</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">象</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">实</text></g><g data-mml-node=\"mi\" transform=\"translate(3000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">例</text></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-665)\"><svg width=\"4000\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"1000 148 4000 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(12,1)\"></path></svg></g></g></g></g></svg></mjx-container> 通过使用<code>new()</code>方法, 由对象类型构造一个对象实例:</p>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myCar = <span class=\"keyword\">new</span> <span class=\"title class_\">Car</span>(<span class=\"string\">\"鹰牌\"</span>, <span class=\"string\">\"Talon TSi\"</span>, <span class=\"number\">1993</span>);</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"类与new\"><a href=\"#类与new\" class=\"headerlink\" title=\"类与new\"></a>类与new</h4><p>在JS当中, 类 <strong>必须</strong> 通过<code>new</code>调用.</p>\n<blockquote>\n<p>可以优先阅读<a href=\"#%E7%B1%BB\">类相关的知识</a></p>\n</blockquote>\n<ul>\n<li>e.g.</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span> {</span><br><span class=\"line\">  <span class=\"comment\">//构造函数</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name</span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">//实例方法</span></span><br><span class=\"line\">  <span class=\"title function_\">greet</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`你好，我的名字是<span class=\"subst\">${<span class=\"variable language_\">this</span>.name}</span>`</span>);</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></div>\n<p>对于上述的类, 必须使用如下的调用方式:</p>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> animal = <span class=\"keyword\">new</span> <span class=\"title class_\">Animal</span>(<span class=\"string\">\"Dog\"</span>); <span class=\"comment\">// 正常</span></span><br></pre></td></tr></table></figure></div>\n<p>而下面这样类似于普通函数的调用方式会抛出错误:</p>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Animal</span>(<span class=\"string\">\"Cat\"</span>); <span class=\"comment\">// TypeError:  Class constructor Animal cannot be invoked without 'new'</span></span><br></pre></td></tr></table></figure></div>\n<br>\n\n<p>在使用正确方法得到类的实例对象之后, 可以用访问属性的方式来调用实例方法:</p>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animal.<span class=\"title function_\">greet</span>(); <span class=\"comment\">// 输出 \"你好，我的名字是Dog\"</span></span><br></pre></td></tr></table></figure></div>\n\n<hr>\n<p>下面给出与普通函数的区别:</p>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Car</span>(<span class=\"params\">model</span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">model</span> = model;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> car = <span class=\"keyword\">new</span> <span class=\"title class_\">Car</span>(<span class=\"string\">\"Toyota\"</span>); <span class=\"comment\">// 正常</span></span><br><span class=\"line\"><span class=\"title class_\">Car</span>(<span class=\"string\">\"Honda\"</span>); <span class=\"comment\">// 不抛出错误，但 this 会指向全局对象.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> anotherCar = <span class=\"title class_\">Car</span>(<span class=\"string\">\"cat\"</span>); <span class=\"comment\">//此时全局对象下的model值为 \"cat\", 覆盖了上一行的定义.</span></span><br></pre></td></tr></table></figure></div>\n<p>总结:</p>\n<ul>\n<li>以构造函数形式呈现的普通函数, 可以被直接调用, 但是此时内部的参数赋值给了全局对象;</li>\n<li>如果以new方法构造得到对象实例, 依旧正常.</li>\n</ul>\n<hr>\n<h1 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h1><h2 id=\"默认行为\"><a href=\"#默认行为\" class=\"headerlink\" title=\"默认行为\"></a>默认行为</h2><p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.17ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9.05ex\" height=\"2.867ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 4000 1267\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">默</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">认</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">行</text></g><g data-mml-node=\"mi\" transform=\"translate(3000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">为</text></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-665)\"><svg width=\"4000\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"1000 148 4000 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(12,1)\"></path></svg></g></g></g></g></svg></mjx-container> 是指浏览器在某些事件发生时，自动执行的内置操作, 是浏览器的“默认反应”.</p>\n<ul>\n<li>比如存在以下的默认行为:<ul>\n<li>滚动事件：触摸屏上滑动手指，页面会滚动;</li>\n<li>拖拽文件到浏览器：浏览器会尝试加载文件;</li>\n<li>点击链接 <code>(&lt;a href=\"...\"&gt;)</code>：跳转到指定的 URL;</li>\n</ul>\n</li>\n</ul>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.17ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"13.575ex\" height=\"2.867ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 6000 1267\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">阻</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">止</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">默</text></g><g data-mml-node=\"mi\" transform=\"translate(3000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">认</text></g><g data-mml-node=\"mi\" transform=\"translate(4000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">行</text></g><g data-mml-node=\"mi\" transform=\"translate(5000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">为</text></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-665)\"><svg width=\"6000\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"1500 148 6000 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(18,1)\"></path></svg></g></g></g></g></svg></mjx-container> 使用 <code>event.preventDefault()</code> 方法可以阻止事件的默认行为.</p>\n<ul>\n<li>e.g: 阻止链接跳转</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">'a'</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">'click'</span>, <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) {</span><br><span class=\"line\">    event.<span class=\"title function_\">preventDefault</span>(); <span class=\"comment\">// 阻止点击链接时的默认行为</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">'链接被点击，但没有跳转'</span>);</span><br><span class=\"line\">});</span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li>作用:<ul>\n<li>通过阻止默认行为, 可以实现自定义逻辑.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h2><ul>\n<li><code>this</code>可以视作函数的一个隐参数, 是在函数被执行时创建的绑定;</li>\n<li><code>this</code> 指向的是<strong>当前函数的调用者</strong>，而不是函数内部定义的变量.</li>\n</ul>\n<br>\n\n<ul>\n<li>e.g.</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = {</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"string\">\"a in the obj\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span>: <span class=\"string\">\"b in the obj\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">f</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">        <span class=\"keyword\">const</span> b = <span class=\"string\">\"b in the function\"</span>; <span class=\"comment\">// 函数作用域</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">b</span>); <span class=\"comment\">// 访问 this.b</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"string\">\"b outside of the func\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"title function_\">f</span>();</span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p>此处的<code>f</code></p>\n</blockquote>\n<h3 id=\"函数上下文中的this\"><a href=\"#函数上下文中的this\" class=\"headerlink\" title=\"函数上下文中的this\"></a>函数上下文中的this</h3><ul>\n<li><code>this</code>参数的值取决于函数<strong>如何</strong>被调用, 而不是函数如何被定义.</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对象可以作为第一个参数传递给 'call' 或 'apply'，</span></span><br><span class=\"line\"><span class=\"comment\">// 并且 'this' 将被绑定到它。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = { <span class=\"attr\">a</span>: <span class=\"string\">\"Custom\"</span> };</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 var 声明的变量成为 'globalThis' 的属性。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">\"Global\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">whatsThis</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">a</span>; <span class=\"comment\">// 'this' 取决于函数如何被调用</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">whatsThis</span>(); <span class=\"comment\">// 'Global'; 在非严格模式下，'this' 参数默认为 'globalThis'</span></span><br><span class=\"line\">obj.<span class=\"property\">whatsThis</span> = whatsThis;</span><br><span class=\"line\">obj.<span class=\"title function_\">whatsThis</span>(); <span class=\"comment\">// 'Custom'; 'this' 参数被绑定到 obj</span></span><br></pre></td></tr></table></figure></div>\n<ol>\n<li>同样是调用函数<code>whatsThis()</code>, 但是<code>this</code>参数被绑定到不同的对象上, 导致返回值不同;</li>\n<li>在非严格模式下, <code>this</code>参数默认指向<code>globalThis</code>, 即全局对象;</li>\n<li>对于典型函数, <code>this</code>指向函数访问的对象;</li>\n</ol>\n<ul>\n<li>e.g.</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = {</span><br><span class=\"line\">    <span class=\"attr\">b</span>: <span class=\"string\">\"b in the obj\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">f</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">        <span class=\"keyword\">const</span> b = <span class=\"string\">\"b in the function\"</span>; <span class=\"comment\">// 函数作用域</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">b</span>); <span class=\"comment\">// 访问 this.b</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"string\">\"b outside of the func\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"title function_\">f</span>();</span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p>此处<code>f</code>作为<code>obj</code>对象的方法被调用, 因此普通函数的<code>this</code>指向<code>obj</code>.</p>\n</blockquote>\n<ul>\n<li>e.g. 直接调用的普通函数<code>this</code>指向全局:</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = {</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"string\">\"a in the obj\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">f</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">        <span class=\"keyword\">const</span> funcA = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) { <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">a</span> }; <span class=\"comment\">// 普通函数，this 由调用方式决定</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">funcA</span>()); <span class=\"comment\">// 访问 this.a</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">\"a in the global\"</span>;</span><br><span class=\"line\">obj.<span class=\"title function_\">f</span>(); <span class=\"comment\">// \"a in the global\"</span></span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<ul>\n<li>此处的<code>funcA</code>并没有类似于作为对象的属性调用(<code>obj.funcA()</code>), 因此其<code>this</code>指向全局作用域(<code>window</code>), 输出<code>undefined</code>, 而是直接调用的形式, 因此其<code>this</code>指向全局作用域.</li>\n</ul>\n</blockquote>\n<h3 id=\"对this传值\"><a href=\"#对this传值\" class=\"headerlink\" title=\"对this传值\"></a>对this传值</h3><p>使用<code>call()</code>以及<code>apply()</code>方法可以将<code>this</code>绑定到其他对象上.</p>\n<h4 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call()\"></a>call()</h4><ul>\n<li>形式: <code>func.call(thisArg, arg1, arg2, ...)</code></li>\n<li>e.g:</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">c, d</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">a</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">b</span> + c + d;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> o = { <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">3</span> };</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第一个参数被绑定到隐式的 'this' 参数；</span></span><br><span class=\"line\"><span class=\"comment\">// 剩余的参数被绑定到命名参数。</span></span><br><span class=\"line\">add.<span class=\"title function_\">call</span>(o, <span class=\"number\">5</span>, <span class=\"number\">7</span>); <span class=\"comment\">// 16</span></span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply()\"></a>apply()</h4><ul>\n<li>形式: <code>func.apply(thisArg, [argsArray])</code></li>\n<li>e.g:</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">c, d</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">a</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">b</span> + c + d;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> o = { <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">3</span> };</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第一个参数被绑定到隐式的 'this' 参数；</span></span><br><span class=\"line\"><span class=\"comment\">// 第二个参数是一个数组，其成员被绑定到命名参数。</span></span><br><span class=\"line\">add.<span class=\"title function_\">apply</span>(o, [<span class=\"number\">10</span>, <span class=\"number\">20</span>]); <span class=\"comment\">// 34</span></span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind()\"></a>bind()</h4><ul>\n<li>形式: <code>f.bind(someObject)</code>;</li>\n<li><strong>作用</strong>: <ul>\n<li>创建一个新的函数(需要重新赋值), 具有与<code>f</code>相同的函数体和作用域;</li>\n<li>新函数的<code>this</code>被 <strong>永久地</strong> 绑定到<code>someObject</code>, 不随调用方式的变化而变化.</li>\n</ul>\n</li>\n<li><strong>限制</strong>: <ul>\n<li><code>bind</code>无法多次生效. 即对函数f<code>bind</code>得到的g, 无法继续用<code>bind</code>得到期望的h;</li>\n</ul>\n</li>\n<li>e.g. 多次<code>bind</code>:</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">a</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> g = f.<span class=\"title function_\">bind</span>({ <span class=\"attr\">b</span>: <span class=\"string\">\"azerty\"</span> });</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">g</span>()); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> h = g.<span class=\"title function_\">bind</span>({ <span class=\"attr\">a</span>: <span class=\"string\">\"yoo\"</span> }); <span class=\"comment\">// bind 只能生效一次！</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">h</span>()); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> o = { <span class=\"attr\">a</span>: <span class=\"number\">37</span>, f, g, h };</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(o.<span class=\"property\">a</span>, o.<span class=\"title function_\">f</span>(), o.<span class=\"title function_\">g</span>(), o.<span class=\"title function_\">h</span>()); <span class=\"comment\">// 37 37 undefined undefined</span></span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<ul>\n<li>由于<code>bind</code>只能对一个原始函数作用, 因此由f得到的g无法继续由<code>bind</code>绑定<code>this</code>得到期望的h, 此处h的<code>this</code>依旧是<code>{b: \"azerty\"}</code>, 因此在输出对象<code>a</code>时显示<code>undefined</code>;</li>\n<li><code>o.f()</code>的调用是普通函数的调用, 因此其<code>this</code>继承自对象<code>o</code>, 输出<code>37</code>;</li>\n</ul>\n</blockquote>\n<ul>\n<li>e.g. 对象</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">a</span> + <span class=\"string\">\" \"</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">c</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> g = f.<span class=\"title function_\">bind</span>({ <span class=\"attr\">b</span>: <span class=\"string\">\"azerty\"</span> , <span class=\"attr\">c</span>:<span class=\"string\">\"ccc\"</span>});</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">g</span>()); <span class=\"comment\">// \"undefined ccc\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> h = g.<span class=\"title function_\">bind</span>({ <span class=\"attr\">a</span>: <span class=\"string\">\"yoo\"</span> }); <span class=\"comment\">// bind 只能生效一次！</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">h</span>()); <span class=\"comment\">// \"undefined ccc\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> o = { <span class=\"attr\">a</span>: <span class=\"number\">37</span>, f, g, h };</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(o.<span class=\"property\">a</span>, o.<span class=\"title function_\">f</span>(), o.<span class=\"title function_\">g</span>(), o.<span class=\"title function_\">h</span>()); <span class=\"comment\">// 37 37 azerty azerty</span></span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<ul>\n<li><code>bind</code>绑定的<code>this</code>是永久覆盖, 而非简单叠加;</li>\n<li>由于<code>bind</code>绑定的<code>this</code>不随者调用方式的变化而变化, 因此即使处于对象<code>o</code>当中, <code>g</code>,<code>h</code>依旧不会输出<code>o</code>中的<code>a</code>.</li>\n</ul>\n</blockquote>\n<h3 id=\"箭头函数中的this\"><a href=\"#箭头函数中的this\" class=\"headerlink\" title=\"箭头函数中的this\"></a>箭头函数中的this</h3><p>使用 call()、apply() 或 bind() 调用箭头函数时，传入的 this 值会被忽略，但其他参数仍然会正常传递。</p>\n<p>普通函数:</p>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"string\">\"a in the global\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) {<span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">a</span>};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = {</span><br><span class=\"line\"> <span class=\"attr\">a</span>: <span class=\"string\">\"a in the obj\"</span>,</span><br><span class=\"line\"> <span class=\"attr\">f</span>: foo</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"title function_\">f</span>()); <span class=\"comment\">// \"a in the obj\"</span></span><br></pre></td></tr></table></figure></div>\n\n<p><code>call()</code>、 <code>apply()</code>、 <code>bind()</code> 无法改变箭头函数的<code>this</code>(但是call与apply的其他参数可以正常传递:</p>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">foo</span> = (<span class=\"params\"></span>)=&gt; <span class=\"variable language_\">this</span>.<span class=\"property\">a</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = {</span><br><span class=\"line\"> <span class=\"attr\">a</span>: <span class=\"string\">\"a in the obj\"</span>,</span><br><span class=\"line\"> <span class=\"attr\">f</span>: foo.<span class=\"title function_\">bind</span>({<span class=\"attr\">a</span>:<span class=\"string\">\"a in the bind\"</span>}) <span class=\"comment\">// 显式绑定 this 到 obj, 但是无法生效</span></span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"title function_\">f</span>()); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p>换成普通函数则输出<code>a in the obj</code>.</p>\n</blockquote>\n<ul>\n<li>全局作用域</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">\"a in the global\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">foo1</span> = (<span class=\"params\"></span>) =&gt; <span class=\"variable language_\">this</span>.<span class=\"property\">a</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = {</span><br><span class=\"line\">\t<span class=\"attr\">a</span>: <span class=\"string\">\"a in the obj\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">f</span>: <span class=\"function\">()=&gt;</span> a</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"title function_\">f</span>());</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.17ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"6.787ex\" height=\"2.867ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 3000 1267\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">作</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">用</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">域</text></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-665)\"><svg width=\"3000\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"750 148 3000 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(9,1)\"></path></svg></g></g></g></g></svg></mjx-container> 指当前的执行上下文, 在其中的值和表达式可以被访问. </p>\n<ul>\n<li>全局作用域: 脚本模式运行所有代码的默认作用域;</li>\n<li>模块作用域: 模块模式中运行代码的作用域;</li>\n<li>函数作用域: 由函数创建的作用域</li>\n<li>块级作用域: 由<code>let</code>或<code>const</code>声明的变量的作用域.(对于<code>var</code>无效);</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x); <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"keyword\">const</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure></div>\n\n<p>Notices:</p>\n<ul>\n<li>对象本身并不会创建作用域, 只是一个键值对的集合;</li>\n<li>箭头函数也不会创建自己的作用域, 而是 <strong>继承</strong> 外层作用域中的<code>this</code>;</li>\n</ul>\n<h3 id=\"变量与作用域\"><a href=\"#变量与作用域\" class=\"headerlink\" title=\"变量与作用域\"></a>变量与作用域</h3><ul>\n<li><code>var</code>在全局作用域中声明时会成为 <strong>全局对象</strong> (<code>window</code>或<code>global</code>)的属性;</li>\n<li><code>let</code>和<code>const</code>即使在全局作用域中声明, 也不会成为全局对象的属性;</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">\"1\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"string\">\"2\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">a</span>; <span class=\"comment\">// \"1\"</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">b</span>; <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p>因此, 建议在全局作用域中不要使用<code>var</code>声明变量, 而使用<code>let</code>或<code>const</code>声明变量. 从而避免导致意外的覆盖和冲突.</p>\n</blockquote>\n<h3 id=\"函数与作用域\"><a href=\"#函数与作用域\" class=\"headerlink\" title=\"函数与作用域\"></a>函数与作用域</h3><h4 id=\"普通函数\"><a href=\"#普通函数\" class=\"headerlink\" title=\"普通函数\"></a>普通函数</h4><p>普通函数和匿名函数的作用域继承自其定义时的作用域.</p>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = {</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"string\">\"a in the obj\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">insideObj</span>: {</span><br><span class=\"line\">        <span class=\"attr\">g</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">a</span>; <span class=\"comment\">// 普通函数，this 动态绑定到 insideObj</span></span><br><span class=\"line\">        }</span><br><span class=\"line\">    },</span><br><span class=\"line\">    <span class=\"attr\">f</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">a</span>; <span class=\"comment\">// 普通函数，this 动态绑定到 obj</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"title function_\">f</span>());        <span class=\"comment\">// \"a in the obj\"</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">insideObj</span>.<span class=\"title function_\">g</span>()); <span class=\"comment\">// undefined，因为 insideObj 中没有 a</span></span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"箭头函数-1\"><a href=\"#箭头函数-1\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h4><p>e.g. <strong>箭头函数继承外层作用域</strong>:</p>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">\"a in the global\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = {</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"string\">\"a in the obj\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">insideObj</span>: {</span><br><span class=\"line\">        <span class=\"attr\">g</span>: <span class=\"function\">() =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"property\">a</span></span><br><span class=\"line\">    },</span><br><span class=\"line\">    <span class=\"attr\">f</span>: <span class=\"function\">() =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"property\">a</span></span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"title function_\">f</span>());        <span class=\"comment\">// \"a in the global\"</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">insideObj</span>.<span class=\"title function_\">g</span>()); <span class=\"comment\">//\"a in the global\"</span></span><br></pre></td></tr></table></figure></div>\n<p>由于对象不会创建作用域, 因此此处的箭头函数的<code>this</code>继承了外层作用域(window)的<code>this</code>, 且<code>var</code>创建的变量存在于全局作用域中.</p>\n<h2 id=\"语法糖\"><a href=\"#语法糖\" class=\"headerlink\" title=\"语法糖\"></a>语法糖</h2><p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.17ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"6.787ex\" height=\"2.867ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 3000 1267\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">语</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">法</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">糖</text></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-665)\"><svg width=\"3000\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"750 148 3000 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(9,1)\"></path></svg></g></g></g></g></svg></mjx-container> 一种让代码更简洁、更易读的语法形式.</p>\n<ul>\n<li>本质上没有增加语言的功能, 而是对已有功能的 <strong>包装</strong> 或者优化;</li>\n<li><strong>可读性提升</strong>: <del>让代码更填</del> 使得代码更加容易理解和书写;</li>\n<li><strong>底层实现</strong>: 实质上依旧用基础的语法实现.</li>\n</ul>\n<h3 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h3><p>类 <code>class</code> 是 ES6 引入的语法糖, 它提供了面向对象编程的简洁语法. 本质上是对原型继承<code>prototype</code>的封装.</p>\n<p>使用<code>class</code>的写法:</p>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> {</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name</span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">greet</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Hello, my name is <span class=\"subst\">${<span class=\"variable language_\">this</span>.name}</span>`</span>);</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">\"Alice\"</span>);</span><br><span class=\"line\">person.<span class=\"title function_\">greet</span>(); <span class=\"comment\">// 输出：Hello, my name is Alice</span></span><br></pre></td></tr></table></figure></div>\n\n<p>等价的原型写法:</p>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name</span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">greet</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Hello, my name is <span class=\"subst\">${<span class=\"variable language_\">this</span>.name}</span>`</span>);</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">\"Alice\"</span>);</span><br><span class=\"line\">person.<span class=\"title function_\">greet</span>(); <span class=\"comment\">// 输出：Hello, my name is Alice</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"箭头函数-2\"><a href=\"#箭头函数-2\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3><p>箭头函数简化了函数定义的书写, 其本质上依旧是一个普通函数, 因此也是语法糖的一种.</p>\n<ul>\n<li>e.g.</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用箭头函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">add</span> = (<span class=\"params\">a, b</span>) =&gt; a + b;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等价的普通函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> add = <span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a, b</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"结构赋值\"><a href=\"#结构赋值\" class=\"headerlink\" title=\"结构赋值\"></a>结构赋值</h3><p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.17ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9.05ex\" height=\"2.867ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 4000 1267\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">结</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">构</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">赋</text></g><g data-mml-node=\"mi\" transform=\"translate(3000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">值</text></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-665)\"><svg width=\"4000\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"1000 148 4000 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(12,1)\"></path></svg></g></g></g></g></svg></mjx-container> 手动提取<strong>对象</strong>属性的语法糖.</p>\n<ul>\n<li>使用结构赋值:</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = {<span class=\"attr\">name</span>:<span class=\"string\">\"Zhuo\"</span>, <span class=\"attr\">gender</span>:<span class=\"string\">\"male\"</span>};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> {name, gender} = person;</span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li>等价的原型写法:</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = {<span class=\"attr\">name</span>:<span class=\"string\">\"Zhuo\"</span>, <span class=\"attr\">gender</span>:<span class=\"string\">\"male\"</span>};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> name = person.<span class=\"property\">name</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> gender = person.<span class=\"property\">gender</span>;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"赋值规则\"><a href=\"#赋值规则\" class=\"headerlink\" title=\"赋值规则\"></a>赋值规则</h4><p>结构赋值时, 基于 <strong>属性名匹配</strong> 而非顺序.<br>因此, 对象结构的<code>{}</code>内部属性必须和 <strong>对象的属性名</strong> 相对应.</p>\n<p><strong>错误</strong>的示例:</p>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = { <span class=\"attr\">name</span>: <span class=\"string\">\"Alice\"</span>, <span class=\"attr\">age</span>: <span class=\"number\">25</span> };</span><br><span class=\"line\"><span class=\"keyword\">const</span> { a, b } = person;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 输出：undefined</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b); <span class=\"comment\">// 输出：undefined</span></span><br></pre></td></tr></table></figure></div>\n\n<p><strong>重命名属性</strong>的写法:</p>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = { <span class=\"attr\">name</span>: <span class=\"string\">\"Alice\"</span>, <span class=\"attr\">age</span>: <span class=\"number\">25</span> };</span><br><span class=\"line\"><span class=\"keyword\">const</span> { <span class=\"attr\">name</span>: a, <span class=\"attr\">age</span>: b } = person;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 输出：Alice</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b); <span class=\"comment\">// 输出：25</span></span><br></pre></td></tr></table></figure></div>\n\n<p><strong>手动赋值</strong>: 对于结构对象中不存在的属性, 可以采取普通赋值的方式与结构赋值相结合:</p>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = { <span class=\"attr\">name</span>: <span class=\"string\">\"Alice\"</span> };</span><br><span class=\"line\"><span class=\"keyword\">const</span> { name, age = <span class=\"number\">30</span> } = person;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name); <span class=\"comment\">// 输出：Alice</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age);  <span class=\"comment\">// 输出：30 （因为 person 中没有 age 属性，所以使用了默认值）</span></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"数组的结构赋值\"><a href=\"#数组的结构赋值\" class=\"headerlink\" title=\"数组的结构赋值\"></a>数组的结构赋值</h4><p>上述讨论的结构赋值都是对 <strong>对象</strong> 的结构赋值, 对于数组同样可以结构赋值, 且赋值规则与对象相反—— <strong>基于顺序</strong>赋值:</p>\n<div class=\"code-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">\"Alice\"</span>, <span class=\"number\">25</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> [a, b] = arr;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 输出：Alice</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b); <span class=\"comment\">// 输出：25</span></span><br></pre></td></tr></table></figure></div>\n","more":"<blockquote>\n<p>JavaScript是一种轻量级、解释型、面向对象的编程语言. 作为前端三件套之一以及TS的基础, JS语言细节十分难嚼. 本文在「<strong>料理的加护</strong>」下, 尽可能将JS处理得更加<strong>可口</strong>一些)</p>\n<img lazyload=\"\" src=\"/images/loading.svg\" data-src=\"/img/料理的加护.jpg\" width=\"35%\"></blockquote>\n<h1 id=\"创建JS代码块\"><a href=\"#创建JS代码块\" class=\"headerlink\" title=\"创建JS代码块\"></a>创建JS代码块</h1><h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><h3 id=\"var-or-let\"><a href=\"#var-or-let\" class=\"headerlink\" title=\"var or let?\"></a><code>var</code> or <code>let</code>?</h3><p><code>var</code>先于<code>let</code>的产生, 后者是现代版本的JS中新的关键字.</p>\n<p>使用<code>var</code>, 可以对一个先前已被声明且初始化的变量重新声明, 这不会带来报错, 代码依旧可以工作. 但是<code>let</code>并不适用.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myName = <span class=\"string\">\"Chris\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">logName</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myName);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">logName</span>(); <span class=\"comment\">//输出\"Chris\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myName = <span class=\"string\">\"Aniya\"</span>;</span><br><span class=\"line\"><span class=\"title function_\">logName</span>(); <span class=\"comment\">//输出\"Aniya\"</span></span><br></pre></td></tr></table></figure>\n\n<p>除此之外, 可以使用<code>var</code>前后声明相同的变量, 这并不会报错:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myName = <span class=\"string\">\"Chris\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> myName = <span class=\"string\">\"Bob\"</span>;</span><br></pre></td></tr></table></figure>\n\n<p>而<code>let</code>只能声明一次:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myName = <span class=\"string\">\"Chris\"</span>;</span><br><span class=\"line\">myName = <span class=\"string\">\"Bob\"</span>;</span><br></pre></td></tr></table></figure>\n\n<p>因此, 在代码编写中应尽量<strong>多使用</strong><code>let</code>而非<code>var</code>, 这可以帮助我们排除无意中重新命名相同变量而导致的错误.</p>\n<h3 id=\"变量命名的规则\"><a href=\"#变量命名的规则\" class=\"headerlink\" title=\"变量命名的规则\"></a>变量命名的规则</h3><p>与C语言类似, 建议以 <strong>字母、数字、下划线</strong> 组成的标识符来命名变量.</p>\n<ul>\n<li>不可用<code>_</code>开头, 因为可能被JS设计为特殊的含义;</li>\n<li>不可用数字开头, 否则引发错误;</li>\n<li>大小写敏感;</li>\n<li>建议采用 <strong>小写驼峰命名法</strong> ,即小写整个命名的第一个字母然后大写剩下单词的首字符;</li>\n<li>避免使用保留字, 比如<code>var</code>,<code>let</code>,<code>for</code>等.</li>\n</ul>\n<h3 id=\"变量类型\"><a href=\"#变量类型\" class=\"headerlink\" title=\"变量类型\"></a>变量类型</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myAge = <span class=\"number\">20</span> ;<span class=\"comment\">// 数字</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dolphinGoodbye = <span class=\"string\">\"So long and thanks for all the fish\"</span>; <span class=\"comment\">// 字符串</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> test = <span class=\"number\">6</span> &lt; <span class=\"number\">3</span>; <span class=\"comment\">//boolean</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//数组类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> myNameArray = [<span class=\"string\">\"Chris\"</span>, <span class=\"string\">\"Bob\"</span>, <span class=\"string\">\"Jim\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> myNumberArray = [<span class=\"number\">10</span>, <span class=\"number\">15</span>, <span class=\"number\">40</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对象类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dog = { <span class=\"attr\">name</span>: <span class=\"string\">\"Spot\"</span>, <span class=\"attr\">breed</span>: <span class=\"string\">\"Dalmatian\"</span> };</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>对象类型的访问与结构体相似, <code>dog.name;</code></p>\n</blockquote>\n<p>在上面的几种变量类型中, 我们都采用<code>let</code>关键字声明变量, 这体现了JS是一种 <strong>动态类型语言</strong> ,即无需指定变量包含的数据类型.</p>\n<p>同时, 这也意味着我们可以像<code>python</code>一样对同一个变量先后赋值不同类型的值:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myNumber = <span class=\"string\">\"500\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">typeof</span> myNumber;</span><br><span class=\"line\"><span class=\"comment\">// 输出 'string'</span></span><br><span class=\"line\"></span><br><span class=\"line\">myNumber = <span class=\"number\">500</span>; </span><br><span class=\"line\"><span class=\"keyword\">typeof</span> myNumber;</span><br><span class=\"line\"><span class=\"comment\">//输出'number'</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><ul>\n<li><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.17ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"2.867ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 2000 1267\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">提</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">升</text></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-665)\"><svg width=\"2000\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"500 148 2000 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(6,1)\"></path></svg></g></g></g></g></svg></mjx-container> 解释器在执行代码之前，似乎将函数、变量、类或导入的声明移动到其作用域的顶部的过程.</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">exampleFunction</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">exampleFunction</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">\"函数内\"</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>由于 <strong>提升</strong> 的存在, 上述的函数调用不会出错.</p>\n</blockquote>\n<h3 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数\"></a>默认参数</h3><p>在编写函数时, 可以通过在参数名称后添加<code>=</code>, 再指定默认值, 这样当调用函数时, 如果没有传入该参数, 则使用默认值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">greeding</span>(<span class=\"params\">name = <span class=\"string\">\"my friend\"</span></span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Hello, <span class=\"subst\">${name}</span>!`</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"title function_\">hello</span>(); <span class=\"comment\">//Hello, my friend!</span></span><br><span class=\"line\"><span class=\"title function_\">hello</span>(<span class=\"string\">\"world\"</span>); <span class=\"comment\">//Hello, world!</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<p>事件处理函数的默认接受值是<code>event</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">onclick</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">nothing here</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">\"button\"</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">para = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">\"p\"</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">btn.<span class=\"property\">onclick</span> = click;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">function</span> <span class=\"title function_\">click</span>(<span class=\"params\">string</span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">\"clicked!\"</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">  para.<span class=\"property\">textContent</span> = string;</span></span><br><span class=\"line\"><span class=\"language-javascript\">}</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>上述的<code>btn</code>在点击之后调用函数<code>click</code>, 该函数需要一个参数<code>string</code>, 由于<code>btn.onclick = click;</code>的绑定方式, 我们无法指定传参的值, 因此点击之后的<code>para</code>的内容显示为: <code>[object PointerEvent]</code>;</li>\n<li><code>textContent</code>是属性而非方法, 因此采用赋值实现;</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btn.<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span> <span class=\"title function_\">click</span>(<span class=\"params\">string</span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">\"clicked!\"</span>)</span><br><span class=\"line\">  para.<span class=\"property\">textContent</span> = <span class=\"string\">\"You have clicked the button!\"</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>将上述的绑定方式如此改写, 可以在<code>btn</code>外对<code>string</code>进行赋值, 然后点击按钮可以传入指定参数供后续处理.</p>\n</blockquote>\n<h3 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3><p>在了解箭头函数的作用之前, 需要先介绍 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.17ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9.05ex\" height=\"2.867ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 4000 1267\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">匿</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">名</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">函</text></g><g data-mml-node=\"mi\" transform=\"translate(3000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">数</text></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-665)\"><svg width=\"4000\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"1000 148 4000 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(12,1)\"></path></svg></g></g></g></g></svg></mjx-container>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myFunction</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(<span class=\"string\">\"你好\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 匿名函数</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(<span class=\"string\">\"你好\"</span>);</span><br><span class=\"line\">});</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>正如其名, 匿名函数没有函数名, 不能被调用, 但可以作为参数传入其他函数中.</p>\n</blockquote>\n<p>如果我们希望在监听某个事件发生时调用简单的函数来处理, 则可以通过调用上述的匿名函数实现:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">logKey</span>(<span class=\"params\">event</span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`You pressed \"<span class=\"subst\">${event.key}</span>\".`</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">textBox.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">\"keydown\"</span>, logKey);</span><br></pre></td></tr></table></figure>\n<p>这部分代码通过监听html元素的keydown事件, 调用函数输出按下的键盘按键. 我们可以通过匿名函数来简化书写:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">textBox.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">\"keydown\"</span>, <span class=\"keyword\">function</span> (<span class=\"params\">event</span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`You pressed \"<span class=\"subst\">${event.key}</span>\".`</span>);</span><br><span class=\"line\">});</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>只需传入函数体, 而不需要函数名, 就可以实现监听事件并调用函数的功能.</p>\n</blockquote>\n<p>而<strong>箭头函数</strong>则是在此情况下更简洁的函数定义方式:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">textBox.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">\"keydown\"</span>, <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`You pressed \"<span class=\"subst\">${event.key}</span>\".`</span>);</span><br><span class=\"line\">});</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果函数只接受一个参数, 也可以省略参数周围的括号</span></span><br><span class=\"line\">textBox.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">\"keydown\"</span>, <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`You pressed \"<span class=\"subst\">${event.key}</span>\".`</span>);</span><br><span class=\"line\">});</span><br></pre></td></tr></table></figure>\n\n<p>如果只包含一行的<code>return</code>,则可以忽略<code>{}</code>和<code>return</code>关键字:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> originals = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> doubled = originals.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item * <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(doubled); <span class=\"comment\">// [2, 4, 6]</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>item =&gt; item * 2</code>等价于:</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">doubleItem</span>(<span class=\"params\">item</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item * <span class=\"number\">2</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"一个实例\"><a href=\"#一个实例\" class=\"headerlink\" title=\"一个实例\"></a>一个实例</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"textBox\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"output\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> textBox = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">\"#textBox\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> output = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">\"#output\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">textBox.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">\"keydown\"</span>, <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> {</span><br><span class=\"line\">  output.<span class=\"property\">textContent</span> = <span class=\"string\">`You pressed \"<span class=\"subst\">${event.key}</span>\".`</span>;</span><br><span class=\"line\">});</span><br></pre></td></tr></table></figure>\n<p>通过监听输入框的keydown事件, 输出按下的键盘按键.</p>\n<h3 id=\"函数作用域和冲突\"><a href=\"#函数作用域和冲突\" class=\"headerlink\" title=\"函数作用域和冲突\"></a>函数作用域和冲突</h3><p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.17ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"6.787ex\" height=\"2.867ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 3000 1267\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">作</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">用</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">域</text></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-665)\"><svg width=\"3000\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"750 148 3000 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(9,1)\"></path></svg></g></g></g></g></svg></mjx-container> 指当前的执行上下文, 在其中的值和表达式可以被访问. </p>\n<ul>\n<li>全局作用域: 脚本模式运行所有代码的默认作用域;</li>\n<li>模块作用域: 模块模式中运行代码的作用域;</li>\n<li>函数作用域: 由函数创建的作用域</li>\n</ul>\n<p>和C语言相似, 在函数外部<code>let</code>定义的变量, 以及<code>const</code>定义的常量可以在函数内部访问.</p>\n<p>如果HTML调用了多个外部JS文件, 其中具有相同的函数名, 那么只能访问的第一个函数, 第二个函数将被忽略:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Excerpt from my HTML --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"first.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"second.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  greeting();</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果两个JS文件都定义了<code>greeting</code>函数, 则只有第一个文件中的函数才会被调用.</p>\n</blockquote>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"数字和操作符\"><a href=\"#数字和操作符\" class=\"headerlink\" title=\"数字和操作符\"></a>数字和操作符</h3><p>大部分与C语言相同, 概括需要注意的差异:</p>\n<ul>\n<li>JS当中只有一种数字类型 – <code>number</code>, 对于整型或者浮点数的初始化得到的量, 由<code>typeof</code>均得到<code>number</code>;</li>\n<li>算术运算符: 求幂为<code>**</code>;</li>\n<li>常量无法使用自增或自减,<del>好像也是C语言的 忘了</del></li>\n<li><code>===</code>表示严格等于, <code>!==</code>表示不等于;<blockquote>\n<p>同时存在<code>==</code>和<code>!=</code>来判断是否相等, 但是它们只是测试 <strong>值</strong> 是否相等, 会忽略数据类型的差异; 而上述的比较会同时比较数据类型. 因此推荐使用<code>===</code>和<code>!==</code>来避免类型不一致的错误.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><p>创建字符串</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myString = <span class=\"string\">\"A string\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> constString = myString;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(constString);</span><br><span class=\"line\"><span class=\"comment\">//A string</span></span><br></pre></td></tr></table></figure>\n<p>可以使用单引号,双引号和<strong>反引号</strong>来包裹字符串, 但是必须确保字符串的开头和结尾使用相同的字符:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> single = <span class=\"string\">'单引号'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> double = <span class=\"string\">\"双引号\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> backtick = <span class=\"string\">`反引号`</span>;</span><br></pre></td></tr></table></figure>\n\n<p>反引号包裹的字符串称为<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.17ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"11.312ex\" height=\"2.867ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 5000 1267\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">模</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">板</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">字</text></g><g data-mml-node=\"mi\" transform=\"translate(3000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">符</text></g><g data-mml-node=\"mi\" transform=\"translate(4000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">串</text></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-665)\"><svg width=\"5000\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"1250 148 5000 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(15,1)\"></path></svg></g></g></g></g></svg></mjx-container>, 大多数情况下,它与其他两种字符串类似, 但是具有特殊的属性:</p>\n<ul>\n<li>可以嵌入 <strong>JavaScript</strong>;</li>\n<li>可以声明<strong>多行</strong>的模板字面量.</li>\n</ul>\n<h4 id=\"字符串的拼接\"><a href=\"#字符串的拼接\" class=\"headerlink\" title=\"字符串的拼接\"></a>字符串的拼接</h4><p>字符串的拼接有两种方法, 我们先介绍上述提到的模板字符串中的 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.17ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"6.787ex\" height=\"2.867ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 3000 1267\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">串</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">联</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">法</text></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-665)\"><svg width=\"3000\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"750 148 3000 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(9,1)\"></path></svg></g></g></g></g></svg></mjx-container>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">\"克里斯\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> greeting = <span class=\"string\">`你好，<span class=\"subst\">${name}</span>`</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(greeting); <span class=\"comment\">// \"你好，克里斯\"</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在模板字面量中用<code>${}</code>包装JS的变量或者表达式.</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> one = <span class=\"string\">\"你好，\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> two = <span class=\"string\">\"请问最近如何？\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> joined = <span class=\"string\">`<span class=\"subst\">${one}</span><span class=\"subst\">${two}</span>`</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(joined); <span class=\"comment\">// \"你好，请问最近如何？\"</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>连接2个变量.</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> song = <span class=\"string\">\"青花瓷\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> score = <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> highestScore = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> output = <span class=\"string\">`我喜欢歌曲《<span class=\"subst\">${song}</span>》。我给它打了 <span class=\"subst\">${</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">  (score / highestScore) * <span class=\"number\">100</span></span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">}</span> 分。`</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(output); <span class=\"comment\">// \"我喜欢歌曲《青花瓷》。我给它打了 90 分。\"</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在模板字面量的<code>${}</code>内部包含表达式.</p>\n</blockquote>\n<br>\n除此之外,对于普通的字符串(使用单引号或者双引号得到的字符串), 我们可以使用`+`直接连接:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> greeting = <span class=\"string\">\"你好\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">\"克里斯\"</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(greeting + <span class=\"string\">\"，\"</span> + name); <span class=\"comment\">// \"你好，克里斯\"</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"多行字符串\"><a href=\"#多行字符串\" class=\"headerlink\" title=\"多行字符串\"></a>多行字符串</h4><p>模板字符串会<strong>保留</strong>源代码中的换行符，因此可以编写跨越多行的字符串:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newline = <span class=\"string\">`终于有一天，</span></span><br><span class=\"line\"><span class=\"string\">你知道了必须做的事情，而且开始……`</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newline);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">终于有一天，</span></span><br><span class=\"line\"><span class=\"comment\">你知道了必须做的事情，而且开始……</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<p>如果希望用普通的字符串得到等效的输出, 必须在字符串中包含<code>\\n</code>,而非直接跨行:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newline = <span class=\"string\">\"终于有一天，\\n你知道了必须做的事情，而且开始……\"</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newline);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">终于有一天，</span></span><br><span class=\"line\"><span class=\"comment\">你知道了必须做的事情，而且开始……</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示引号\"><a href=\"#显示引号\" class=\"headerlink\" title=\"显示引号\"></a>显示引号</h4><ol>\n<li><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.17ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"2.867ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 2000 1267\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">转</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">义</text></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-665)\"><svg width=\"2000\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"500 148 2000 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(6,1)\"></path></svg></g></g></g></g></svg></mjx-container>  通过在符号前加上反斜杠<code>\\</code>, 可以转义字符串中的特殊字符,包括字符串中的引号:</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> bigmouth = <span class=\"string\">'I\\'ve got no right to take my place…'</span>;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>换用其他字符: 在字面量内用不同于包裹字符串的引号:</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> goodQuotes1 = <span class=\"string\">'She said \"I think so!\"'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> goodQuotes2 = <span class=\"string\">`She said \"I'm not going in there!\"`</span>;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h4><p>对于字符串对象实例,其常用的方法:</p>\n<ul>\n<li><code>.length</code>: 获取字符串的长度;</li>\n<li><code>[]</code>: 返回字符串中对应索引的字符, 索引同样从<code>0</code>开始;</li>\n<li><code>.indexOf(\"\")</code>: 查找子字符串<ul>\n<li><strong>input</strong>: 希望查找的子字符串;</li>\n<li><strong>output</strong>: 子字符串开始的下标(如果不存在则返回<code>-1</code>);</li>\n</ul>\n</li>\n<li><code>.slice(indedxStart, indexEnd)</code>: 截取字符串<ul>\n<li><strong>input</strong>: 起始下标, 结束下标(不包含该下标). 如果不存在结束下标则提取之后剩余的全部字符;</li>\n<li><strong>output</strong>: 截取的子字符串;</li>\n</ul>\n</li>\n</ul>\n<p>更多的<code>slice</code>知识:</p>\n<ol>\n<li><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.17ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"11.312ex\" height=\"2.867ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 5000 1267\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">标</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">准</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">化</text></g><g data-mml-node=\"mi\" transform=\"translate(3000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">负</text></g><g data-mml-node=\"mi\" transform=\"translate(4000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">值</text></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-665)\"><svg width=\"5000\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"1250 148 5000 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(15,1)\"></path></svg></g></g></g></g></svg></mjx-container> 如果索引是个负数, 取<code>index+str.length</code>进行标准化;</li>\n<li>如果<code>indexStart</code>大于<code>str.length</code>, 返回空字符串;</li>\n<li>如果标准化负值之后, <code>indexStart</code>大于<code>indexEnd</code>, 也返回空字符串;</li>\n</ol>\n<ul>\n<li><code>.toLowerCase()</code> &amp; <code>.toUpperCase()</code>: 转换字符串中的所有字符为小写或大写;</li>\n<li><code>.replace(original, new)</code>: 替换字符串中<code>original</code>子字符串为<code>new</code>;<blockquote>\n<p>此时不会直接改变原字符串的值, 而是返回一个修改之后的字符串. 因此, 如果想要将原来的值替换, 需要用上述方法得到的值去赋值原来的字符串.</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"Cases\"><a href=\"#Cases\" class=\"headerlink\" title=\"Cases\"></a>Cases</h4><p>利用 <strong>indexOf</strong> 和 <strong>slice</strong> 方法, 获取新字符串:</p>\n<ul>\n<li><strong>input</strong>: <code>\"str3\"</code>三位长字符串+<code>\"...\"</code>(无关字符串)+<code>\";\"</code>+<code>strLast</code>(剩余字符串);</li>\n<li><strong>output</strong>: <code>\"str3\"+\";\"+strLast</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> stations = [<span class=\"string\">'MAN675847583748sjt567654;Manchester Piccadilly'</span>,</span><br><span class=\"line\">                <span class=\"string\">'GNF576746573fhdg4737dh4;Greenfield'</span>,</span><br><span class=\"line\">                <span class=\"string\">'LIV5hg65hd737456236dch46dg4;Liverpool Lime Street'</span>,</span><br><span class=\"line\">                <span class=\"string\">'SYB4f65hf75f736463;Stalybridge'</span>,</span><br><span class=\"line\">                <span class=\"string\">'HUD5767ghtyfyr4536dh45dg45dg3;Huddersfield'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; stations.<span class=\"property\">length</span>; i++){</span><br><span class=\"line\">    <span class=\"keyword\">var</span> input = stations[i];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str3 = input.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> strLast = input.<span class=\"title function_\">slice</span>(input.<span class=\"title function_\">indexOf</span>(<span class=\"string\">\";\"</span>)+<span class=\"number\">1</span>); <span class=\"comment\">//indexOf获取;位置</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> output = str3 + <span class=\"string\">\";\"</span> + strLast;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>通过 <strong>indexOf</strong> 根据子字符串筛选字符串数组:</p>\n<ul>\n<li><strong>input</strong>: 可能包含 <em>Christmas</em> 的字符串数组;</li>\n<li><strong>output</strong>: 包含 <em>Christmas</em> 的字符串数组;</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> list = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">'.output ul'</span>);</span><br><span class=\"line\">list.<span class=\"property\">innerHTML</span> = <span class=\"string\">''</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> greetings = [<span class=\"string\">'Happy Birthday!'</span>,</span><br><span class=\"line\">                 <span class=\"string\">'Merry Christmas my love'</span>,</span><br><span class=\"line\">                 <span class=\"string\">'A happy Christmas to all the family'</span>,</span><br><span class=\"line\">                 <span class=\"string\">'You\\'re all I want for Christmas'</span>,</span><br><span class=\"line\">                 <span class=\"string\">'Get well soon'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; greetings.<span class=\"property\">length</span>; i++) {</span><br><span class=\"line\">  <span class=\"keyword\">var</span> input = greetings[i];</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(greetings[i].<span class=\"title function_\">indexOf</span>(<span class=\"string\">'Christmas'</span>) !== -<span class=\"number\">1</span>) {</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = input;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> listItem = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">'li'</span>);</span><br><span class=\"line\">    listItem.<span class=\"property\">textContent</span> = result;</span><br><span class=\"line\">    list.<span class=\"title function_\">appendChild</span>(listItem);</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数字与字符串\"><a href=\"#数字与字符串\" class=\"headerlink\" title=\"数字与字符串\"></a>数字与字符串</h3><h4 id=\"相互转换\"><a href=\"#相互转换\" class=\"headerlink\" title=\"相互转换\"></a>相互转换</h4><p>非常神奇, 在JS当中, 数字和字符串可以直接通过函数<code>Number()</code>和<code>String()</code>进行转换, 与C语言不同.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myString = <span class=\"string\">\"123\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> myNum = <span class=\"title class_\">Number</span>(myString);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> myNum);</span><br><span class=\"line\"><span class=\"comment\">// number</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myNum);</span><br><span class=\"line\"><span class=\"comment\">// 123</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myNum2 = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> myString2 = <span class=\"title class_\">String</span>(myNum2);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> myString2);</span><br><span class=\"line\"><span class=\"comment\">// string</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myString2);</span><br><span class=\"line\"><span class=\"comment\">// \"123\"</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>对于浮点数同样成立.</p>\n</blockquote>\n<h4 id=\"前后拼接\"><a href=\"#前后拼接\" class=\"headerlink\" title=\"前后拼接\"></a>前后拼接</h4><p>使用<code>+</code>将字符串类型和数字类型的变量or常量直接拼接, 得到的是以空格相隔的字符串:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">\"Front \"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> number = <span class=\"number\">242</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> combine = name + number;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(combine); <span class=\"comment\">//Front 242</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">typeof</span>(combine));  <span class=\"comment\">//string</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><ol>\n<li>存储任意类型元素–字符串，数字，对象，变量，<strong>另一个数组</strong>;</li>\n<li>可以 <strong>混合</strong> 元素类型:</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> random = [<span class=\"string\">\"tree\"</span>, <span class=\"number\">795</span>, [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]];</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>像访问字符串一样, 利用索引访问数组元素;</li>\n<li><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.17ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9.05ex\" height=\"2.867ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 4000 1267\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">多</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">维</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">数</text></g><g data-mml-node=\"mi\" transform=\"translate(3000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">组</text></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-665)\"><svg width=\"4000\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"1000 148 4000 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(12,1)\"></path></svg></g></g></g></g></svg></mjx-container> 包含数组的数组结构称为~</li>\n</ol>\n<h4 id=\"split\"><a href=\"#split\" class=\"headerlink\" title=\"split()\"></a>split()</h4><ul>\n<li>作用: 将一个字符串根据给定的字符分隔为字符串数组;</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myData = <span class=\"string\">\"Manchester,London,Liverpool,Birmingham,Leeds,Carlisle\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> myArray = myData.<span class=\"title function_\">split</span>(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myArray);</span><br><span class=\"line\"> <span class=\"comment\">// [\"Manchester\", \"London\", \"Liverpool\", \"Birmingham\", \"Leeds\", \"Carlisle\"]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join()\"></a>join()</h4><p><code>split</code>的反向操作, 给出分隔符号, 将数组的字符串拼接成一个字符串:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myNewString = myArray.<span class=\"title function_\">join</span>(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">myNewString;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"toString-NaN\"><a href=\"#toString-NaN\" class=\"headerlink\" title=\"toString()\"></a>toString()</h4><p>与<code>join</code>方法相似, 但是无法自定义分隔符, 默认为<code>,</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> dogNames = [<span class=\"string\">\"Rocket\"</span>, <span class=\"string\">\"Flash\"</span>, <span class=\"string\">\"Bella\"</span>, <span class=\"string\">\"Slugger\"</span>];</span><br><span class=\"line\">dogNames.<span class=\"title function_\">toString</span>(); <span class=\"comment\">//Rocket,Flash,Bella,Slugger</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"push-pop\"><a href=\"#push-pop\" class=\"headerlink\" title=\"push & pop\"></a>push &amp; pop</h4><p><code>push()</code>方法可以将1或多个元素添加到数组的 <strong>末尾</strong>:</p>\n<ol>\n<li>将会直接改写原来的数组,不需要重新赋值;</li>\n<li>该方法具有返回值, 且返回的是更新之后的数组长度(包含元素的个数);</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myArray = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> newLength = myArray.<span class=\"title function_\">push</span>(<span class=\"number\">4</span>, <span class=\"number\">5</span>,<span class=\"string\">\"string\"</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myArray); <span class=\"comment\">// [1, 2, 3, 4, 5, \"string\"]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newLength); <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n\n<p>使用<code>.pop()</code>从数组中删除最后一个元素:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myArray.<span class=\"title function_\">pop</span>(); <span class=\"comment\">//\"string\"</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myArray); <span class=\"comment\">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>方法调用返回值就是删除的元素本身;</li>\n<li>直接对原始数组操作并赋值, 不需要另外的赋值操作;</li>\n</ol>\n<blockquote>\n<p>shift &amp; unshift:<br>在功能上分别与<code>push</code>和<code>pop</code>相同, 但是作用于数组的开始位置.</p>\n</blockquote>\n<h2 id=\"条件语句\"><a href=\"#条件语句\" class=\"headerlink\" title=\"条件语句\"></a>条件语句</h2><p>JS的条件语句与C语言十分相似, 在此仅给出官方文档的一些例子:</p>\n<h3 id=\"天气预报\"><a href=\"#天气预报\" class=\"headerlink\" title=\"天气预报\"></a>天气预报</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"weather\"</span>&gt;</span>选择今天的天气：&lt;/label</span><br><span class=\"line\">&gt;<span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"weather\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span>&gt;</span>--作出选择--<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"sunny\"</span>&gt;</span>晴天<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"rainy\"</span>&gt;</span>雨天<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"snowing\"</span>&gt;</span>雪天<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"overcast\"</span>&gt;</span>阴天<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>lable</code>当中的<code>for</code>标签与<code>select</code>标签的<code>id</code>属性对应, 用于关联两个标签.</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> select = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">\"select\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> para = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">\"p\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">select.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">\"change\"</span>, setWeather);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">setWeather</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> choice = select.<span class=\"property\">value</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (choice) {</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"sunny\"</span>:</span><br><span class=\"line\">      para.<span class=\"property\">textContent</span> = <span class=\"string\">\"阳光明媚。穿上短裤吧！去海滩，或公园，吃个冰淇淋。\"</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"rainy\"</span>:</span><br><span class=\"line\">      para.<span class=\"property\">textContent</span> = <span class=\"string\">\"外面下着雨；带上雨衣和雨伞，不要在外面呆太久。\"</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"snowing\"</span>:</span><br><span class=\"line\">      para.<span class=\"property\">textContent</span> =</span><br><span class=\"line\">        <span class=\"string\">\"大雪纷飞，天寒地冻！最好呆在家里喝杯热巧克力，或者去堆个雪人。\"</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"overcast\"</span>:</span><br><span class=\"line\">      para.<span class=\"property\">textContent</span> =</span><br><span class=\"line\">        <span class=\"string\">\"虽然没有下雨，但天空灰蒙蒙的，随时都可能变天，所以要带一件雨衣以防万一。\"</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">      para.<span class=\"property\">textContent</span> = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li>通过<code>querySelector</code>方法获取<code>select</code>和<code>p</code>标签;</li>\n<li>然后为<code>select</code>标签添加事件监听器, 当内容改变时触发 <strong>change</strong> 事件, 同时调用<code>setWeather</code>函数;</li>\n<li>进而通过 <strong>switch</strong> 语句处理不同天气的情况, 并设置相应的文字内容;<br>在线网页示例:<a class=\"link\" href=\"https://mdn.github.io/learning-area/javascript/building-blocks/simple-switch.html\">simple-switch<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n</ol>\n</blockquote>\n<h2 id=\"事件介绍\"><a href=\"#事件介绍\" class=\"headerlink\" title=\"事件介绍\"></a>事件介绍</h2><p>什么是<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.17ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"2.867ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 2000 1267\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">事</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">件</text></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-665)\"><svg width=\"2000\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"500 148 2000 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(6,1)\"></path></svg></g></g></g></g></svg></mjx-container>? </p>\n<ul>\n<li>用户选择、点击或者光标悬停在某一元素;</li>\n<li>用户在键盘中按下某个按键;</li>\n<li>网页结束加载;</li>\n<li>…</li>\n</ul>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.17ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"11.312ex\" height=\"2.867ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 5000 1267\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">事</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">件</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">处</text></g><g data-mml-node=\"mi\" transform=\"translate(3000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">理</text></g><g data-mml-node=\"mi\" transform=\"translate(4000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">器</text></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-665)\"><svg width=\"5000\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"1250 148 5000 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(15,1)\"></path></svg></g></g></g></g></svg></mjx-container> 为了响应事件, 我们需要编写一份JS代码块用于在事件发生之后运行. 这样的代码块称之为~.</p>\n<h3 id=\"处理点击事件\"><a href=\"#处理点击事件\" class=\"headerlink\" title=\"处理点击事件\"></a>处理点击事件</h3><p>以点击事件为例, 介绍html与js如何进行事件处理的交互:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span> 改变颜色 <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">\"button\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">random</span>(<span class=\"params\">number</span>){</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>()*(number+<span class=\"number\">1</span>));</span><br><span class=\"line\">  </span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">btn.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">\"click\"</span>, <span class=\"function\">()=&gt;</span>{</span><br><span class=\"line\">  <span class=\"keyword\">const</span> rndCol = <span class=\"string\">`rgb(<span class=\"subst\">${random(<span class=\"number\">255</span>)}</span>,<span class=\"subst\">${random(<span class=\"number\">255</span>)}</span>,<span class=\"subst\">${random(<span class=\"number\">255</span>)}</span>)`</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">style</span>.<span class=\"property\">backgroundColor</span> = rndCol;</span><br><span class=\"line\">})</span><br></pre></td></tr></table></figure>\n<ol>\n<li><code>Math.random()</code>方法生成一个介于[0,1)之间的随机数;</li>\n<li><code>*(number+1)</code>之后利用向下取整的方法<code>Math.floor()</code>将其转换为整数, 范围为[0,number];<blockquote>\n<p>假如输入的number为<code>4</code>, 则<code>random(4)</code>的结果可能为<code>0</code>, <code>1</code>, <code>2</code>, <code>3</code>, <code>4</code>中的一个;<br>假设输入的number为<code>3.6</code>, 则输出的结果还是0~4中的整数.</p>\n</blockquote>\n</li>\n<li><code>rndCol = `rgb(${random(255)},${random(255)},${random(255)})</code> 采用的是在<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.17ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"11.312ex\" height=\"2.867ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 5000 1267\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">模</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">板</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">字</text></g><g data-mml-node=\"mi\" transform=\"translate(3000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">符</text></g><g data-mml-node=\"mi\" transform=\"translate(4000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">串</text></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-665)\"><svg width=\"5000\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"1250 148 5000 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(15,1)\"></path></svg></g></g></g></g></svg></mjx-container>内部使用<code>${}</code>调用函数变量的方法.</li>\n</ol>\n<h3 id=\"addEventListener\"><a href=\"#addEventListener\" class=\"headerlink\" title=\"addEventListener()\"></a>addEventListener()</h3><p><code>adEventListener</code>方法已经在之前的例子中出现过, 现在具体介绍其作用和语法.</p>\n<p>通过<code>EventTarget.adddEventListener()</code>的方法, 将指定的监听器注册到对象上, 具体的语法如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">addEventListener</span>(type, listener);</span><br><span class=\"line\"><span class=\"title function_\">addEventListener</span>(type, listener, options);</span><br><span class=\"line\"><span class=\"title function_\">addEventListener</span>(type, listener, useCapture);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>type</code>: 事件类型, 如<code>click</code>, <code>mouseover</code>, <code>mouseout</code>, <code>keydown</code>, <code>keyup</code>等;</li>\n<li><code>listener</code>: 事件处理函数, 该函数将在事件发生时被调用;<ul>\n<li>包括 <strong>回调函数</strong> 以及 实现了 <strong>EventListener 接口的对象</strong>;</li>\n</ul>\n</li>\n<li><code>options</code>: 可选参数, 用于配置事件监听器的行为;<blockquote>\n<p>可以为单个事件添加多个事件监听器.</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"listener\"><a href=\"#listener\" class=\"headerlink\" title=\"listener\"></a>listener</h4><p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.17ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9.05ex\" height=\"2.867ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 4000 1267\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">回</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">调</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">函</text></g><g data-mml-node=\"mi\" transform=\"translate(3000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">数</text></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-665)\"><svg width=\"4000\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"1000 148 4000 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(12,1)\"></path></svg></g></g></g></g></svg></mjx-container> 简单来说, ~指的是当某个事件发生时被调用的一段代码.</p>\n<ul>\n<li>是一个函数, 但是只有等到特定的事件发生时才会执行.</li>\n</ul>\n<p>实现了 EventListener 接口的对象:</p>\n<ul>\n<li><strong>特点</strong>: 以对象作为listener, 对象中具有名为<code>handleEvent()</code>的方法;</li>\n<li><strong>作用</strong>: <ul>\n<li>将事件处理封装到一个对象当中, 可以更好地组织代码;</li>\n<li>便于在对象中保存更多的状态信息;</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> listenerObject = {</span><br><span class=\"line\">    <span class=\"attr\">count</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"title function_\">handleEvent</span>(<span class=\"params\">event</span>) {</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">count</span>++;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`事件类型是：<span class=\"subst\">${event.type}</span>，已触发 <span class=\"subst\">${<span class=\"variable language_\">this</span>.count}</span> 次`</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> button = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">'button'</span>);</span><br><span class=\"line\">button.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">'click'</span>, listenerObject);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"options\"><a href=\"#options\" class=\"headerlink\" title=\"options\"></a>options</h4><p>一个指定有关 listener 属性的可选参数对象.</p>\n<h5 id=\"Capture\"><a href=\"#Capture\" class=\"headerlink\" title=\"Capture\"></a>Capture</h5><ul>\n<li><p>含义:</p>\n<ul>\n<li>一个布尔值，表示 listener 会在该类型的事件捕获阶段传播到该 EventTarget 时触发;</li>\n<li>默认为false, 表示只有在冒泡阶段才触发.</li>\n</ul>\n</li>\n<li><p>区别:</p>\n<ul>\n<li><code>capture</code>和<code>useCapture</code>实际上指的都是 <strong>监听器是否在捕获阶段触发</strong> 的布尔值.<blockquote>\n<p>捕获阶段: 从最外层的元素开始, 逐层向内捕获事件, 直到事件到达目标元素.</p>\n</blockquote>\n</li>\n<li>后来DOM的规范更新时引入了<code>options</code>参数, 此后<code>capture</code>取代了<code>useCapture</code>的作用.</li>\n<li>如果<code>addEventListener</code>的第三个参数不指定对象, 只有布尔值, 那么默认是在设置<code>useCapture</code></li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>可以先查看<a href=\"#%E4%BA%8B%E4%BB%B6%E4%BC%A0%E6%92%AD%E7%9A%84%E9%98%B6%E6%AE%B5\">事件传播的阶段</a>来辅助理解不同的阶段.</p>\n</blockquote>\n<h5 id=\"Once\"><a href=\"#Once\" class=\"headerlink\" title=\"Once\"></a>Once</h5><ul>\n<li>含义:<ul>\n<li>一个布尔值，表示 listener 在添加之后最多只调用一次;</li>\n<li>默认为false, 表示可以多次调用.</li>\n</ul>\n</li>\n<li>e.g.</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">child.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">'子元素 - 目标阶段'</span>);</span><br><span class=\"line\">},{<span class=\"attr\">once</span>: <span class=\"literal\">true</span>});</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>once</code>属性被设置为<code>true</code>, 当调用一次之后事件监听器会被自动清除. 因此只有第一次的点击才会console.</p>\n</blockquote>\n<h5 id=\"Passive\"><a href=\"#Passive\" class=\"headerlink\" title=\"Passive\"></a>Passive</h5><ul>\n<li><p>含义:</p>\n<ul>\n<li>一个布尔值，设置为 true 时，表示 listener 永远不会调用 preventDefault();</li>\n</ul>\n</li>\n<li><p>作用:</p>\n<ul>\n<li>明确不会在<code>listener</code>中不会调用<code>preventDefault()</code>方法, 即不会阻止浏览器的<a href=\"#%E9%BB%98%E8%AE%A4%E8%A1%8C%E4%B8%BA\">默认行为</a>;</li>\n<li>此时, 浏览器可以直接渲染默认行为的结果, 无需等待<code>listener</code>的执行与默认行为的检查, 从而提高了性能.</li>\n</ul>\n</li>\n<li><p>Notice:</p>\n<ul>\n<li>如果设置<code>passive</code>为<code>true</code>, 则<code>listener</code>当中不可出现<code>preventDefault()</code>方法, 否则会报错.</li>\n</ul>\n</li>\n</ul>\n<p>e.g.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">'wheel'</span>,<span class=\"function\">()=&gt;</span>{</span><br><span class=\"line\">\tevent.<span class=\"title function_\">preventDefault</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">\"scrolling\"</span>);</span><br><span class=\"line\">},{<span class=\"attr\">passive</span>: <span class=\"literal\">false</span>});</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>wheel</code>事件的默认行为是滚动页面;</li>\n<li><code>event.preventDefault();</code>表示会阻止鼠标滚动带来的页面滚动;</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">'wheel'</span>,<span class=\"function\">()=&gt;</span>{</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">\"scrolling\"</span>);</span><br><span class=\"line\">},{<span class=\"attr\">passive</span>: <span class=\"literal\">true</span>});</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>明确不会阻止默认行为, 浏览器可以直接渲染页面的滚动效果, 因此提高了显示的效果.</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">'wheel'</span>,<span class=\"function\">()=&gt;</span>{</span><br><span class=\"line\">  event.<span class=\"title function_\">preventDefault</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">\"scrolling\"</span>);</span><br><span class=\"line\">},{<span class=\"attr\">passive</span>: <span class=\"literal\">true</span>});</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>passive</code>的设置与<code>listener</code>内部矛盾, 将会报错.</p>\n</blockquote>\n<h5 id=\"Signal\"><a href=\"#Signal\" class=\"headerlink\" title=\"Signal\"></a>Signal</h5><p>用于有条件地移除事件监听器, 具体使用参见<a href=\"#%E5%8F%AF%E8%A2%AB%E7%A7%BB%E9%99%A4%E7%9A%84%E7%9B%91%E5%90%AC%E5%99%A8\">可被移除的监听器</a>.</p>\n<h3 id=\"事件传播的阶段\"><a href=\"#事件传播的阶段\" class=\"headerlink\" title=\"事件传播的阶段\"></a>事件传播的阶段</h3><ol>\n<li>捕获阶段 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.156ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"13.819ex\" height=\"2.726ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 6108 1205\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(433,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(962,0)\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1465,0)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1826,0)\"><path data-c=\"1D462\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2398,0)\"><path data-c=\"1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2849,0)\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path></g><g data-mml-node=\"mtext\" transform=\"translate(3315,0)\"><path data-c=\"A0\" d=\"\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3565,0)\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4068,0)\"><path data-c=\"210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4644,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(5173,0)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(5642,0)\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-659)\"><svg width=\"6108\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"1527 148 6108 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(18.324,1)\"></path></svg></g></g></g></g></svg></mjx-container>: 事件从根节点开始向目标节点传播;<blockquote>\n<p>e.g. 点击事件从document开始传播, 经过html,body直到目标元素.</p>\n</blockquote>\n</li>\n<li>目标阶段阶段 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.181ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"12.303ex\" height=\"2.751ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 5438 1216\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(361,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(890,0)\"><path data-c=\"1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1341,0)\"><path data-c=\"1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1818,0)\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2284,0)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g><g data-mml-node=\"mtext\" transform=\"translate(2645,0)\"><path data-c=\"A0\" d=\"\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2895,0)\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3398,0)\"><path data-c=\"210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3974,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4503,0)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4972,0)\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-670)\"><svg width=\"5438\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"1359.5 148 5438 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(16.314,1)\"></path></svg></g></g></g></g></svg></mjx-container>: 事件到达目标元素;</li>\n<li>冒泡阶段 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.156ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"12.253ex\" height=\"2.726ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 5416 1205\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(429,0)\"><path data-c=\"1D462\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1001,0)\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1430,0)\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1859,0)\"><path data-c=\"1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2157,0)\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path></g><g data-mml-node=\"mtext\" transform=\"translate(2623,0)\"><path data-c=\"A0\" d=\"\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2873,0)\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3376,0)\"><path data-c=\"210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3952,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4481,0)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4950,0)\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-659)\"><svg width=\"5416\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"1354 148 5416 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(16.248,1)\"></path></svg></g></g></g></g></svg></mjx-container>: 事件从目标元素开始沿着DOM树向上传播.</li>\n</ol>\n<h4 id=\"Case\"><a href=\"#Case\" class=\"headerlink\" title=\"Case\"></a>Case</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  parent</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"child\"</span>&gt;</span>child<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> parent = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">'#parent'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> child = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">'#child'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">parent.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">'父元素 - 冒泡阶段'</span>);</span><br><span class=\"line\">});</span><br><span class=\"line\"></span><br><span class=\"line\">parent.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">'父元素 - 捕获阶段'</span>);</span><br><span class=\"line\">}, { <span class=\"attr\">capture</span>: <span class=\"literal\">true</span> });</span><br><span class=\"line\"></span><br><span class=\"line\">child.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">'子元素 - 目标阶段'</span>);</span><br><span class=\"line\">});</span><br></pre></td></tr></table></figure>\n<p>上述的<code>child</code>被包裹在<code>parent</code>内部.</p>\n<ul>\n<li>当点击<code>parent</code>时将会显示:</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"父元素 - 捕获阶段\"</span></span><br><span class=\"line\"><span class=\"string\">\"父元素 - 冒泡阶段\"</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>由于设置了在捕获阶段就触发, 所以先触发了捕获阶段的监听器, 然后再触发冒泡阶段的监听器;</p>\n</blockquote>\n<ul>\n<li>当点击<code>child</code>时将会显示:</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"父元素 - 捕获阶段\"</span></span><br><span class=\"line\"><span class=\"string\">\"子元素 - 目标阶段\"</span></span><br><span class=\"line\"><span class=\"string\">\"父元素 - 冒泡阶段\"</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>child</code>是整个事件流的目标元素, 所以触发时机介于二者之间.</p>\n</blockquote>\n<h4 id=\"Notice\"><a href=\"#Notice\" class=\"headerlink\" title=\"Notice\"></a>Notice</h4><ol>\n<li><p>如果将<code>div</code>换成<code>button</code>, 则点击<code>child</code>时可能只会显示 <strong>目标</strong> 阶段的输出.</p>\n<blockquote>\n<p>这是因为, 不同浏览器对于<code>button</code>元素的默认行为不同, 可能默认阻止了捕获阶段和冒泡阶段</p>\n</blockquote>\n</li>\n<li><p><code>event.stopPropagation();</code>加入该<del>咒语</del>代码可以在此停止事件的传播, 比如可以在上述的捕获阶段监听器加入该代码:</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parent.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">'父元素 - 捕获阶段'</span>);</span><br><span class=\"line\">    event.<span class=\"title function_\">stopPropagation</span>();</span><br><span class=\"line\">}, { <span class=\"attr\">capture</span>: <span class=\"literal\">true</span> });</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>此时, 点击<code>parent</code>时, 只会触发捕获阶段的监听器, 不会触发冒泡阶段的监听器.</p>\n</blockquote>\n<h3 id=\"可被移除的监听器\"><a href=\"#可被移除的监听器\" class=\"headerlink\" title=\"可被移除的监听器\"></a>可被移除的监听器</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">id</span>=<span class=\"string\">\"outside\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">id</span>=<span class=\"string\">\"t1\"</span>&gt;</span>one<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">id</span>=<span class=\"string\">\"t2\"</span>&gt;</span>two<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 为 table 添加可被移除的事件监听器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> controller = <span class=\"keyword\">new</span> <span class=\"title class_\">AbortController</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> el = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">\"outside\"</span>);</span><br><span class=\"line\">el.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">\"click\"</span>, modifyText, { <span class=\"attr\">signal</span>: controller.<span class=\"property\">signal</span> });</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 改变 t2 内容的函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">modifyText</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> t2 = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">\"t2\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (t2.<span class=\"property\">firstChild</span>.<span class=\"property\">nodeValue</span> === <span class=\"string\">\"three\"</span>) {</span><br><span class=\"line\">    t2.<span class=\"property\">firstChild</span>.<span class=\"property\">nodeValue</span> = <span class=\"string\">\"two\"</span>;</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    t2.<span class=\"property\">firstChild</span>.<span class=\"property\">nodeValue</span> = <span class=\"string\">\"three\"</span>;</span><br><span class=\"line\">    controller.<span class=\"title function_\">abort</span>(); <span class=\"comment\">// 当值变为 \"three\" 后，移除监听器</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><code>AbortController</code>是一个构造函数, 用于创建一个可被移除的事件监听器的控制器;</li>\n<li><code>signal</code>属性是一个<code>AbortSignal</code>对象, 用于控制监听器的移除;</li>\n<li><code>controller.abort()</code>方法用于移除监听器;</li>\n<li>当<code>t2</code>的内容变为”three”时, 移除监听器, 使得<code>modifyText</code>函数不再执行. 此后, 点击<code>t2</code>不会触发<code>modifyText</code>函数.</li>\n</ul>\n</blockquote>\n<p>具体的<strong>构造步骤:</strong></p>\n<ol>\n<li>创建一个<code>AbortController</code>实例: <code>const controller = new AbortController();</code></li>\n<li>在事件监听器内的参数中添加<code>signal: controller.signal</code>选项;</li>\n<li>在需要移除监听器的地方调用<code>controller.abort()</code>方法;</li>\n</ol>\n<hr>\n<p>我们也可以直接使用<code>removeEventListener()</code>方法来移除事件监听器:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">removeEventListener</span>(type, listener);</span><br><span class=\"line\"><span class=\"title function_\">removeEventListener</span>(type, listener, options);</span><br><span class=\"line\"><span class=\"title function_\">removeEventListener</span>(type, listener, useCapture);</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>Notices:<ul>\n<li>如果同一个对象上存在2个事件监听器, 且仅在<code>useCapture</code>参数存在差异, 那么需要先后2次调用<code>removeEventListener()</code>方法才能完全移除其事件监听器;</li>\n<li>如果无法匹配当前注册的事件监听器, 那么该函数将不会起任何作用;</li>\n<li><code>type</code>,<code>listener</code>参数必须完全匹配才能移除事件监听器;</li>\n<li>对于<code>options</code>参数:<ul>\n<li>字段相同: 一定可以移除;</li>\n<li>字段不同: 需要与默认值false匹配才可以移除.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">element.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">\"mousedown\"</span>, handleMouseDown, { <span class=\"attr\">passive</span>: <span class=\"literal\">true</span> });</span><br><span class=\"line\"></span><br><span class=\"line\">element.<span class=\"title function_\">removeEventListener</span>(<span class=\"string\">\"mousedown\"</span>, handleMouseDown, { <span class=\"attr\">passive</span>: <span class=\"literal\">true</span> }); <span class=\"comment\">// 成功</span></span><br><span class=\"line\">element.<span class=\"title function_\">removeEventListener</span>(<span class=\"string\">\"mousedown\"</span>, handleMouseDown, { <span class=\"attr\">capture</span>: <span class=\"literal\">false</span> }); <span class=\"comment\">// 成功</span></span><br><span class=\"line\">element.<span class=\"title function_\">removeEventListener</span>(<span class=\"string\">\"mousedown\"</span>, handleMouseDown, { <span class=\"attr\">capture</span>: <span class=\"literal\">true</span> }); <span class=\"comment\">// 失败</span></span><br><span class=\"line\">element.<span class=\"title function_\">removeEventListener</span>(<span class=\"string\">\"mousedown\"</span>, handleMouseDown, { <span class=\"attr\">passive</span>: <span class=\"literal\">false</span> }); <span class=\"comment\">// 成功</span></span><br><span class=\"line\">element.<span class=\"title function_\">removeEventListener</span>(<span class=\"string\">\"mousedown\"</span>, handleMouseDown, <span class=\"literal\">false</span>); <span class=\"comment\">// 成功</span></span><br><span class=\"line\">element.<span class=\"title function_\">removeEventListener</span>(<span class=\"string\">\"mousedown\"</span>, handleMouseDown, <span class=\"literal\">true</span>); <span class=\"comment\">// 失败</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>添加与移除</strong>的结合使用:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> body = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">\"body\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> clickTarget = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">\"click-target\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> mouseOverTarget = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">\"mouse-over-target\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> toggle = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">makeBackgroundYellow</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  body.<span class=\"property\">style</span>.<span class=\"property\">backgroundColor</span> = toggle ? <span class=\"string\">\"white\"</span> : <span class=\"string\">\"yellow\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  toggle = !toggle;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">clickTarget.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">\"click\"</span>, makeBackgroundYellow, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">mouseOverTarget.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">\"mouseover\"</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  clickTarget.<span class=\"title function_\">removeEventListener</span>(<span class=\"string\">\"click\"</span>, makeBackgroundYellow, <span class=\"literal\">false</span>);</span><br><span class=\"line\">});</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"使用匿名函数\"><a href=\"#使用匿名函数\" class=\"headerlink\" title=\"使用匿名函数\"></a>使用匿名函数</h3><p>在上述<code>html</code>例子下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 改变 t2 内容的函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">modifyText</span>(<span class=\"params\">new_text</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> t2 = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">\"t2\"</span>);</span><br><span class=\"line\">  t2.<span class=\"property\">firstChild</span>.<span class=\"property\">nodeValue</span> = new_text;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用匿名函数为 table 添加事件监听器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> el = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">\"outside\"</span>);</span><br><span class=\"line\">el.<span class=\"title function_\">addEventListener</span>(</span><br><span class=\"line\">  <span class=\"string\">\"click\"</span>,</span><br><span class=\"line\">  <span class=\"keyword\">function</span> (<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"title function_\">modifyText</span>(<span class=\"string\">\"four\"</span>);</span><br><span class=\"line\">  },</span><br><span class=\"line\">  <span class=\"literal\">false</span>,</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>通过匿名函数封装代码, 将参数传入函数<code>modifyText</code>, 使得函数可以被调用.</p>\n<h3 id=\"使用箭头函数\"><a href=\"#使用箭头函数\" class=\"headerlink\" title=\"使用箭头函数\"></a>使用箭头函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 改变 t2 内容的函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">modifyText</span>(<span class=\"params\">new_text</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">var</span> t2 = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">\"t2\"</span>);</span><br><span class=\"line\">  t2.<span class=\"property\">firstChild</span>.<span class=\"property\">nodeValue</span> = new_text;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用箭头函数为 table 添加事件监听器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> el = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">\"outside\"</span>);</span><br><span class=\"line\">el.<span class=\"title function_\">addEventListener</span>(</span><br><span class=\"line\">  <span class=\"string\">\"click\"</span>,</span><br><span class=\"line\">  <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">    <span class=\"title function_\">modifyText</span>(<span class=\"string\">\"four\"</span>);</span><br><span class=\"line\">  },</span><br><span class=\"line\">  <span class=\"literal\">false</span>,</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>通过<code>=&gt;{}</code>形式的箭头函数简化代码书写.</p>\n<hr>\n<h4 id=\"比较匿名与箭头\"><a href=\"#比较匿名与箭头\" class=\"headerlink\" title=\"比较匿名与箭头\"></a>比较匿名与箭头</h4><p>匿名函数与箭头函数在此处的应用基本相同, 但是在<code>this</code>的指向上有所不同:</p>\n<ul>\n<li>匿名函数与其他普通的JS函数:<code>this</code>指向调用它的对象之作用域(如果没有直接调用关系, 默认为全局对象, 且严格模式下为<code>undefined</code>);</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sayHello</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>); <span class=\"comment\">// 在非严格模式下，this 指向 window</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"title function_\">sayHello</span>();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>箭头函数的<code>this</code>继承自外部作用域, 即调用该方法的对象.</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = {</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">\"ZJU\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">greet</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>); <span class=\"comment\">// this 指向 obj</span></span><br><span class=\"line\">  },</span><br><span class=\"line\">};</span><br><span class=\"line\">obj.<span class=\"title function_\">greet</span>(); <span class=\"comment\">// 输出：ZJU</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>e.g.</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = {</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">\"ZJU\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">getNameWithAnonymous</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) {</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">    };</span><br><span class=\"line\">  },</span><br><span class=\"line\">  <span class=\"attr\">getNameWithArrow</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">    };</span><br><span class=\"line\">  },</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> anonymousFn = obj.<span class=\"title function_\">getNameWithAnonymous</span>();</span><br><span class=\"line\"><span class=\"title function_\">anonymousFn</span>(); <span class=\"comment\">// 输出：undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arrowFn = obj.<span class=\"title function_\">getNameWithArrow</span>();</span><br><span class=\"line\"><span class=\"title function_\">arrowFn</span>(); <span class=\"comment\">// 输出：ZJU</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>进一步完善.</p>\n</blockquote>\n<h3 id=\"事件对象\"><a href=\"#事件对象\" class=\"headerlink\" title=\"事件对象\"></a>事件对象</h3><p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.17ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9.05ex\" height=\"2.867ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 4000 1267\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">事</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">件</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">对</text></g><g data-mml-node=\"mi\" transform=\"translate(3000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">象</text></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-665)\"><svg width=\"4000\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"1000 148 4000 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(12,1)\"></path></svg></g></g></g></g></svg></mjx-container> 在事件处理函数的内部, 以固定指定名称出现的参数, 例如<code>event</code>,<code>e</code>,<code>evt</code>. 它被自动传递给事件处理函数，以提供额外的功能和信息。</p>\n<p><code>e.target</code>始终是对 <strong>事件刚刚发生的元素</strong> 的引用</p>\n<h2 id=\"表达式和运算符\"><a href=\"#表达式和运算符\" class=\"headerlink\" title=\"表达式和运算符\"></a>表达式和运算符</h2><h3 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"new()\"></a>new()</h3><p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.742ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.032ex\" height=\"1.744ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -443 1782 771\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(600,0)\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1066,0)\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-476)\"><svg width=\"1782\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"445.5 148 1782 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(5.346,1)\"></path></svg></g></g></g></g></svg></mjx-container> 用来创建对象实例的一个关键字. </p>\n<ul>\n<li>作用: <strong>调用</strong> 一个 构造函数, 并返回一个由该构造函数创建的对象实例.</li>\n</ul>\n<h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> constructor</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>)</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title function_\">constructor</span>(<span class=\"params\">arg1</span>)</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title function_\">constructor</span>(<span class=\"params\">arg1, arg2</span>)</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title function_\">constructor</span>(<span class=\"params\">arg1, arg2, <span class=\"comment\">/* …, */</span> argN</span>)</span><br></pre></td></tr></table></figure>\n<ol>\n<li>如果没有指定参数, 默认为在不带参数的情况下调用构造函数. 即<code>new foo</code> 等价于 <code>new foo()</code>;</li>\n<li>构造函数内部的<code>this</code>将被绑定到新建的对象实例上;</li>\n</ol>\n<ul>\n<li>e.g.</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Car</span>(<span class=\"params\">color, brand</span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">color</span> = color;   <span class=\"comment\">// 将 color 赋值给新对象</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">brand</span> = brand;   <span class=\"comment\">// 将 brand 赋值给新对象</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> myCar = <span class=\"keyword\">new</span> <span class=\"title class_\">Car</span>(<span class=\"string\">\"red\"</span>, <span class=\"string\">\"Toyota\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myCar.<span class=\"property\">color</span>); <span class=\"comment\">// 输出 \"red\"</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myCar.<span class=\"property\">brand</span>); <span class=\"comment\">// 输出 \"Toyota\"</span></span><br></pre></td></tr></table></figure>\n\n<p>使用<code>new()</code>的<strong>步骤</strong>:</p>\n<ol>\n<li>定义构造函数;</li>\n<li>使用<code>new()</code>并传入构造函数的参数;</li>\n<li>将返回的对象实例赋值给一个变量;</li>\n</ol>\n<h4 id=\"新增属性\"><a href=\"#新增属性\" class=\"headerlink\" title=\"新增属性\"></a>新增属性</h4><ul>\n<li>为已经定义的对象实例直接新增属性, 但是不会影响其他相同类型的对象和构造函数本身:</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">car1.<span class=\"property\">color</span> = <span class=\"string\">\"black\"</span> <span class=\"comment\">//为car1新增color属性</span></span><br></pre></td></tr></table></figure>\n<br>\n\n<ul>\n<li>添加共享属性到构造函数中的<code>prototype</code>:</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Car</span>(<span class=\"params\"></span>) {}</span><br><span class=\"line\">car1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Car</span>();</span><br><span class=\"line\">car2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Car</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(car1.<span class=\"property\">color</span>); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Car</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">color</span> = <span class=\"string\">\"原色\"</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(car1.<span class=\"property\">color</span>); <span class=\"comment\">// '原色'</span></span><br><span class=\"line\"></span><br><span class=\"line\">car1.<span class=\"property\">color</span> = <span class=\"string\">\"黑色\"</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(car1.<span class=\"property\">color</span>); <span class=\"comment\">// '黑色'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">getPrototypeOf</span>(car1).<span class=\"property\">color</span>); <span class=\"comment\">// '原色'</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">getPrototypeOf</span>(car2).<span class=\"property\">color</span>); <span class=\"comment\">// '原色'</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(car1.<span class=\"property\">color</span>); <span class=\"comment\">// '黑色'</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(car2.<span class=\"property\">color</span>); <span class=\"comment\">// '原色'</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>此处的构造函数名为<code>Car</code>, 因此通过<code>Car.prototype</code>可以访问到构造函数的原型对象;</li>\n<li><code>getPrototypeOf</code> 表示获取对象的<strong>原型对象</strong>, 因此此处均为最初定义的 <strong>原色</strong>.</li>\n</ul>\n</blockquote>\n<h4 id=\"new-target\"><a href=\"#new-target\" class=\"headerlink\" title=\"new.target\"></a>new.target</h4><p>函数通过<code>new.target</code>属性可以判断是否通过<code>new</code>关键字调用, 即构造.</p>\n<ul>\n<li><p>如果函数是正常调用, 则返回<code>undefined</code>;</p>\n</li>\n<li><p>如果函数是通过<code>new</code>调用, 返回被调用的构造函数.</p>\n</li>\n<li><p>e.g.</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Car</span>(<span class=\"params\">color</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"keyword\">new</span>.<span class=\"property\">target</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// 以函数的形式被调用。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">${color}</span>车`</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">// 通过 new 被调用。</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">color</span> = color;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"title class_\">Car</span>(<span class=\"string\">\"红\"</span>); <span class=\"comment\">// a 是“红车”</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"keyword\">new</span> <span class=\"title class_\">Car</span>(<span class=\"string\">\"红\"</span>); <span class=\"comment\">// b 是 `Car { color: \"红\" }`</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"对象类型与实例\"><a href=\"#对象类型与实例\" class=\"headerlink\" title=\"对象类型与实例\"></a>对象类型与实例</h4><p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.17ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9.05ex\" height=\"2.867ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 4000 1267\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">对</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">象</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">类</text></g><g data-mml-node=\"mi\" transform=\"translate(3000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">型</text></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-665)\"><svg width=\"4000\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"1000 148 4000 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(12,1)\"></path></svg></g></g></g></g></svg></mjx-container> 通过构造函数可以创建一个对象类型:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Car</span>(<span class=\"params\">make, model, year</span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">make</span> = make;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">model</span> = model;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">year</span> = year;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.17ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9.05ex\" height=\"2.867ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 4000 1267\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">对</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">象</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">实</text></g><g data-mml-node=\"mi\" transform=\"translate(3000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">例</text></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-665)\"><svg width=\"4000\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"1000 148 4000 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(12,1)\"></path></svg></g></g></g></g></svg></mjx-container> 通过使用<code>new()</code>方法, 由对象类型构造一个对象实例:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myCar = <span class=\"keyword\">new</span> <span class=\"title class_\">Car</span>(<span class=\"string\">\"鹰牌\"</span>, <span class=\"string\">\"Talon TSi\"</span>, <span class=\"number\">1993</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"类与new\"><a href=\"#类与new\" class=\"headerlink\" title=\"类与new\"></a>类与new</h4><p>在JS当中, 类 <strong>必须</strong> 通过<code>new</code>调用.</p>\n<blockquote>\n<p>可以优先阅读<a href=\"#%E7%B1%BB\">类相关的知识</a></p>\n</blockquote>\n<ul>\n<li>e.g.</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span> {</span><br><span class=\"line\">  <span class=\"comment\">//构造函数</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name</span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">//实例方法</span></span><br><span class=\"line\">  <span class=\"title function_\">greet</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`你好，我的名字是<span class=\"subst\">${<span class=\"variable language_\">this</span>.name}</span>`</span>);</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>对于上述的类, 必须使用如下的调用方式:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> animal = <span class=\"keyword\">new</span> <span class=\"title class_\">Animal</span>(<span class=\"string\">\"Dog\"</span>); <span class=\"comment\">// 正常</span></span><br></pre></td></tr></table></figure>\n<p>而下面这样类似于普通函数的调用方式会抛出错误:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Animal</span>(<span class=\"string\">\"Cat\"</span>); <span class=\"comment\">// TypeError:  Class constructor Animal cannot be invoked without 'new'</span></span><br></pre></td></tr></table></figure>\n<br>\n\n<p>在使用正确方法得到类的实例对象之后, 可以用访问属性的方式来调用实例方法:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animal.<span class=\"title function_\">greet</span>(); <span class=\"comment\">// 输出 \"你好，我的名字是Dog\"</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>下面给出与普通函数的区别:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Car</span>(<span class=\"params\">model</span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">model</span> = model;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> car = <span class=\"keyword\">new</span> <span class=\"title class_\">Car</span>(<span class=\"string\">\"Toyota\"</span>); <span class=\"comment\">// 正常</span></span><br><span class=\"line\"><span class=\"title class_\">Car</span>(<span class=\"string\">\"Honda\"</span>); <span class=\"comment\">// 不抛出错误，但 this 会指向全局对象.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> anotherCar = <span class=\"title class_\">Car</span>(<span class=\"string\">\"cat\"</span>); <span class=\"comment\">//此时全局对象下的model值为 \"cat\", 覆盖了上一行的定义.</span></span><br></pre></td></tr></table></figure>\n<p>总结:</p>\n<ul>\n<li>以构造函数形式呈现的普通函数, 可以被直接调用, 但是此时内部的参数赋值给了全局对象;</li>\n<li>如果以new方法构造得到对象实例, 依旧正常.</li>\n</ul>\n<hr>\n<h1 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h1><h2 id=\"默认行为\"><a href=\"#默认行为\" class=\"headerlink\" title=\"默认行为\"></a>默认行为</h2><p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.17ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9.05ex\" height=\"2.867ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 4000 1267\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">默</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">认</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">行</text></g><g data-mml-node=\"mi\" transform=\"translate(3000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">为</text></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-665)\"><svg width=\"4000\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"1000 148 4000 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(12,1)\"></path></svg></g></g></g></g></svg></mjx-container> 是指浏览器在某些事件发生时，自动执行的内置操作, 是浏览器的“默认反应”.</p>\n<ul>\n<li>比如存在以下的默认行为:<ul>\n<li>滚动事件：触摸屏上滑动手指，页面会滚动;</li>\n<li>拖拽文件到浏览器：浏览器会尝试加载文件;</li>\n<li>点击链接 <code>(&lt;a href=\"...\"&gt;)</code>：跳转到指定的 URL;</li>\n</ul>\n</li>\n</ul>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.17ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"13.575ex\" height=\"2.867ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 6000 1267\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">阻</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">止</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">默</text></g><g data-mml-node=\"mi\" transform=\"translate(3000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">认</text></g><g data-mml-node=\"mi\" transform=\"translate(4000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">行</text></g><g data-mml-node=\"mi\" transform=\"translate(5000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">为</text></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-665)\"><svg width=\"6000\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"1500 148 6000 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(18,1)\"></path></svg></g></g></g></g></svg></mjx-container> 使用 <code>event.preventDefault()</code> 方法可以阻止事件的默认行为.</p>\n<ul>\n<li>e.g: 阻止链接跳转</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">'a'</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">'click'</span>, <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) {</span><br><span class=\"line\">    event.<span class=\"title function_\">preventDefault</span>(); <span class=\"comment\">// 阻止点击链接时的默认行为</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">'链接被点击，但没有跳转'</span>);</span><br><span class=\"line\">});</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>作用:<ul>\n<li>通过阻止默认行为, 可以实现自定义逻辑.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h2><ul>\n<li><code>this</code>可以视作函数的一个隐参数, 是在函数被执行时创建的绑定;</li>\n<li><code>this</code> 指向的是<strong>当前函数的调用者</strong>，而不是函数内部定义的变量.</li>\n</ul>\n<br>\n\n<ul>\n<li>e.g.</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = {</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"string\">\"a in the obj\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span>: <span class=\"string\">\"b in the obj\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">f</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">        <span class=\"keyword\">const</span> b = <span class=\"string\">\"b in the function\"</span>; <span class=\"comment\">// 函数作用域</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">b</span>); <span class=\"comment\">// 访问 this.b</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"string\">\"b outside of the func\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"title function_\">f</span>();</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>此处的<code>f</code></p>\n</blockquote>\n<h3 id=\"函数上下文中的this\"><a href=\"#函数上下文中的this\" class=\"headerlink\" title=\"函数上下文中的this\"></a>函数上下文中的this</h3><ul>\n<li><code>this</code>参数的值取决于函数<strong>如何</strong>被调用, 而不是函数如何被定义.</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对象可以作为第一个参数传递给 'call' 或 'apply'，</span></span><br><span class=\"line\"><span class=\"comment\">// 并且 'this' 将被绑定到它。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = { <span class=\"attr\">a</span>: <span class=\"string\">\"Custom\"</span> };</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 var 声明的变量成为 'globalThis' 的属性。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">\"Global\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">whatsThis</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">a</span>; <span class=\"comment\">// 'this' 取决于函数如何被调用</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">whatsThis</span>(); <span class=\"comment\">// 'Global'; 在非严格模式下，'this' 参数默认为 'globalThis'</span></span><br><span class=\"line\">obj.<span class=\"property\">whatsThis</span> = whatsThis;</span><br><span class=\"line\">obj.<span class=\"title function_\">whatsThis</span>(); <span class=\"comment\">// 'Custom'; 'this' 参数被绑定到 obj</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>同样是调用函数<code>whatsThis()</code>, 但是<code>this</code>参数被绑定到不同的对象上, 导致返回值不同;</li>\n<li>在非严格模式下, <code>this</code>参数默认指向<code>globalThis</code>, 即全局对象;</li>\n<li>对于典型函数, <code>this</code>指向函数访问的对象;</li>\n</ol>\n<ul>\n<li>e.g.</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = {</span><br><span class=\"line\">    <span class=\"attr\">b</span>: <span class=\"string\">\"b in the obj\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">f</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">        <span class=\"keyword\">const</span> b = <span class=\"string\">\"b in the function\"</span>; <span class=\"comment\">// 函数作用域</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">b</span>); <span class=\"comment\">// 访问 this.b</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"string\">\"b outside of the func\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"title function_\">f</span>();</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>此处<code>f</code>作为<code>obj</code>对象的方法被调用, 因此普通函数的<code>this</code>指向<code>obj</code>.</p>\n</blockquote>\n<ul>\n<li>e.g. 直接调用的普通函数<code>this</code>指向全局:</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = {</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"string\">\"a in the obj\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">f</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">        <span class=\"keyword\">const</span> funcA = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) { <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">a</span> }; <span class=\"comment\">// 普通函数，this 由调用方式决定</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">funcA</span>()); <span class=\"comment\">// 访问 this.a</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">\"a in the global\"</span>;</span><br><span class=\"line\">obj.<span class=\"title function_\">f</span>(); <span class=\"comment\">// \"a in the global\"</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>此处的<code>funcA</code>并没有类似于作为对象的属性调用(<code>obj.funcA()</code>), 因此其<code>this</code>指向全局作用域(<code>window</code>), 输出<code>undefined</code>, 而是直接调用的形式, 因此其<code>this</code>指向全局作用域.</li>\n</ul>\n</blockquote>\n<h3 id=\"对this传值\"><a href=\"#对this传值\" class=\"headerlink\" title=\"对this传值\"></a>对this传值</h3><p>使用<code>call()</code>以及<code>apply()</code>方法可以将<code>this</code>绑定到其他对象上.</p>\n<h4 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call()\"></a>call()</h4><ul>\n<li>形式: <code>func.call(thisArg, arg1, arg2, ...)</code></li>\n<li>e.g:</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">c, d</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">a</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">b</span> + c + d;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> o = { <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">3</span> };</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第一个参数被绑定到隐式的 'this' 参数；</span></span><br><span class=\"line\"><span class=\"comment\">// 剩余的参数被绑定到命名参数。</span></span><br><span class=\"line\">add.<span class=\"title function_\">call</span>(o, <span class=\"number\">5</span>, <span class=\"number\">7</span>); <span class=\"comment\">// 16</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply()\"></a>apply()</h4><ul>\n<li>形式: <code>func.apply(thisArg, [argsArray])</code></li>\n<li>e.g:</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">c, d</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">a</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">b</span> + c + d;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> o = { <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">3</span> };</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第一个参数被绑定到隐式的 'this' 参数；</span></span><br><span class=\"line\"><span class=\"comment\">// 第二个参数是一个数组，其成员被绑定到命名参数。</span></span><br><span class=\"line\">add.<span class=\"title function_\">apply</span>(o, [<span class=\"number\">10</span>, <span class=\"number\">20</span>]); <span class=\"comment\">// 34</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind()\"></a>bind()</h4><ul>\n<li>形式: <code>f.bind(someObject)</code>;</li>\n<li><strong>作用</strong>: <ul>\n<li>创建一个新的函数(需要重新赋值), 具有与<code>f</code>相同的函数体和作用域;</li>\n<li>新函数的<code>this</code>被 <strong>永久地</strong> 绑定到<code>someObject</code>, 不随调用方式的变化而变化.</li>\n</ul>\n</li>\n<li><strong>限制</strong>: <ul>\n<li><code>bind</code>无法多次生效. 即对函数f<code>bind</code>得到的g, 无法继续用<code>bind</code>得到期望的h;</li>\n</ul>\n</li>\n<li>e.g. 多次<code>bind</code>:</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">a</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> g = f.<span class=\"title function_\">bind</span>({ <span class=\"attr\">b</span>: <span class=\"string\">\"azerty\"</span> });</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">g</span>()); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> h = g.<span class=\"title function_\">bind</span>({ <span class=\"attr\">a</span>: <span class=\"string\">\"yoo\"</span> }); <span class=\"comment\">// bind 只能生效一次！</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">h</span>()); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> o = { <span class=\"attr\">a</span>: <span class=\"number\">37</span>, f, g, h };</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(o.<span class=\"property\">a</span>, o.<span class=\"title function_\">f</span>(), o.<span class=\"title function_\">g</span>(), o.<span class=\"title function_\">h</span>()); <span class=\"comment\">// 37 37 undefined undefined</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>由于<code>bind</code>只能对一个原始函数作用, 因此由f得到的g无法继续由<code>bind</code>绑定<code>this</code>得到期望的h, 此处h的<code>this</code>依旧是<code>{b: \"azerty\"}</code>, 因此在输出对象<code>a</code>时显示<code>undefined</code>;</li>\n<li><code>o.f()</code>的调用是普通函数的调用, 因此其<code>this</code>继承自对象<code>o</code>, 输出<code>37</code>;</li>\n</ul>\n</blockquote>\n<ul>\n<li>e.g. 对象</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">a</span> + <span class=\"string\">\" \"</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">c</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> g = f.<span class=\"title function_\">bind</span>({ <span class=\"attr\">b</span>: <span class=\"string\">\"azerty\"</span> , <span class=\"attr\">c</span>:<span class=\"string\">\"ccc\"</span>});</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">g</span>()); <span class=\"comment\">// \"undefined ccc\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> h = g.<span class=\"title function_\">bind</span>({ <span class=\"attr\">a</span>: <span class=\"string\">\"yoo\"</span> }); <span class=\"comment\">// bind 只能生效一次！</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">h</span>()); <span class=\"comment\">// \"undefined ccc\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> o = { <span class=\"attr\">a</span>: <span class=\"number\">37</span>, f, g, h };</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(o.<span class=\"property\">a</span>, o.<span class=\"title function_\">f</span>(), o.<span class=\"title function_\">g</span>(), o.<span class=\"title function_\">h</span>()); <span class=\"comment\">// 37 37 azerty azerty</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><code>bind</code>绑定的<code>this</code>是永久覆盖, 而非简单叠加;</li>\n<li>由于<code>bind</code>绑定的<code>this</code>不随者调用方式的变化而变化, 因此即使处于对象<code>o</code>当中, <code>g</code>,<code>h</code>依旧不会输出<code>o</code>中的<code>a</code>.</li>\n</ul>\n</blockquote>\n<h3 id=\"箭头函数中的this\"><a href=\"#箭头函数中的this\" class=\"headerlink\" title=\"箭头函数中的this\"></a>箭头函数中的this</h3><p>使用 call()、apply() 或 bind() 调用箭头函数时，传入的 this 值会被忽略，但其他参数仍然会正常传递。</p>\n<p>普通函数:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"string\">\"a in the global\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) {<span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">a</span>};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = {</span><br><span class=\"line\"> <span class=\"attr\">a</span>: <span class=\"string\">\"a in the obj\"</span>,</span><br><span class=\"line\"> <span class=\"attr\">f</span>: foo</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"title function_\">f</span>()); <span class=\"comment\">// \"a in the obj\"</span></span><br></pre></td></tr></table></figure>\n\n<p><code>call()</code>、 <code>apply()</code>、 <code>bind()</code> 无法改变箭头函数的<code>this</code>(但是call与apply的其他参数可以正常传递:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">foo</span> = (<span class=\"params\"></span>)=&gt; <span class=\"variable language_\">this</span>.<span class=\"property\">a</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = {</span><br><span class=\"line\"> <span class=\"attr\">a</span>: <span class=\"string\">\"a in the obj\"</span>,</span><br><span class=\"line\"> <span class=\"attr\">f</span>: foo.<span class=\"title function_\">bind</span>({<span class=\"attr\">a</span>:<span class=\"string\">\"a in the bind\"</span>}) <span class=\"comment\">// 显式绑定 this 到 obj, 但是无法生效</span></span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"title function_\">f</span>()); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>换成普通函数则输出<code>a in the obj</code>.</p>\n</blockquote>\n<ul>\n<li>全局作用域</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">\"a in the global\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">foo1</span> = (<span class=\"params\"></span>) =&gt; <span class=\"variable language_\">this</span>.<span class=\"property\">a</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = {</span><br><span class=\"line\">\t<span class=\"attr\">a</span>: <span class=\"string\">\"a in the obj\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">f</span>: <span class=\"function\">()=&gt;</span> a</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"title function_\">f</span>());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.17ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"6.787ex\" height=\"2.867ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 3000 1267\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">作</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">用</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">域</text></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-665)\"><svg width=\"3000\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"750 148 3000 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(9,1)\"></path></svg></g></g></g></g></svg></mjx-container> 指当前的执行上下文, 在其中的值和表达式可以被访问. </p>\n<ul>\n<li>全局作用域: 脚本模式运行所有代码的默认作用域;</li>\n<li>模块作用域: 模块模式中运行代码的作用域;</li>\n<li>函数作用域: 由函数创建的作用域</li>\n<li>块级作用域: 由<code>let</code>或<code>const</code>声明的变量的作用域.(对于<code>var</code>无效);</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x); <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"keyword\">const</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>Notices:</p>\n<ul>\n<li>对象本身并不会创建作用域, 只是一个键值对的集合;</li>\n<li>箭头函数也不会创建自己的作用域, 而是 <strong>继承</strong> 外层作用域中的<code>this</code>;</li>\n</ul>\n<h3 id=\"变量与作用域\"><a href=\"#变量与作用域\" class=\"headerlink\" title=\"变量与作用域\"></a>变量与作用域</h3><ul>\n<li><code>var</code>在全局作用域中声明时会成为 <strong>全局对象</strong> (<code>window</code>或<code>global</code>)的属性;</li>\n<li><code>let</code>和<code>const</code>即使在全局作用域中声明, 也不会成为全局对象的属性;</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">\"1\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"string\">\"2\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">a</span>; <span class=\"comment\">// \"1\"</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">b</span>; <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>因此, 建议在全局作用域中不要使用<code>var</code>声明变量, 而使用<code>let</code>或<code>const</code>声明变量. 从而避免导致意外的覆盖和冲突.</p>\n</blockquote>\n<h3 id=\"函数与作用域\"><a href=\"#函数与作用域\" class=\"headerlink\" title=\"函数与作用域\"></a>函数与作用域</h3><h4 id=\"普通函数\"><a href=\"#普通函数\" class=\"headerlink\" title=\"普通函数\"></a>普通函数</h4><p>普通函数和匿名函数的作用域继承自其定义时的作用域.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = {</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"string\">\"a in the obj\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">insideObj</span>: {</span><br><span class=\"line\">        <span class=\"attr\">g</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">a</span>; <span class=\"comment\">// 普通函数，this 动态绑定到 insideObj</span></span><br><span class=\"line\">        }</span><br><span class=\"line\">    },</span><br><span class=\"line\">    <span class=\"attr\">f</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">a</span>; <span class=\"comment\">// 普通函数，this 动态绑定到 obj</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"title function_\">f</span>());        <span class=\"comment\">// \"a in the obj\"</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">insideObj</span>.<span class=\"title function_\">g</span>()); <span class=\"comment\">// undefined，因为 insideObj 中没有 a</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"箭头函数-1\"><a href=\"#箭头函数-1\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h4><p>e.g. <strong>箭头函数继承外层作用域</strong>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">\"a in the global\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = {</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"string\">\"a in the obj\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">insideObj</span>: {</span><br><span class=\"line\">        <span class=\"attr\">g</span>: <span class=\"function\">() =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"property\">a</span></span><br><span class=\"line\">    },</span><br><span class=\"line\">    <span class=\"attr\">f</span>: <span class=\"function\">() =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"property\">a</span></span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"title function_\">f</span>());        <span class=\"comment\">// \"a in the global\"</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">insideObj</span>.<span class=\"title function_\">g</span>()); <span class=\"comment\">//\"a in the global\"</span></span><br></pre></td></tr></table></figure>\n<p>由于对象不会创建作用域, 因此此处的箭头函数的<code>this</code>继承了外层作用域(window)的<code>this</code>, 且<code>var</code>创建的变量存在于全局作用域中.</p>\n<h2 id=\"语法糖\"><a href=\"#语法糖\" class=\"headerlink\" title=\"语法糖\"></a>语法糖</h2><p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.17ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"6.787ex\" height=\"2.867ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 3000 1267\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">语</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">法</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">糖</text></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-665)\"><svg width=\"3000\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"750 148 3000 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(9,1)\"></path></svg></g></g></g></g></svg></mjx-container> 一种让代码更简洁、更易读的语法形式.</p>\n<ul>\n<li>本质上没有增加语言的功能, 而是对已有功能的 <strong>包装</strong> 或者优化;</li>\n<li><strong>可读性提升</strong>: <del>让代码更填</del> 使得代码更加容易理解和书写;</li>\n<li><strong>底层实现</strong>: 实质上依旧用基础的语法实现.</li>\n</ul>\n<h3 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h3><p>类 <code>class</code> 是 ES6 引入的语法糖, 它提供了面向对象编程的简洁语法. 本质上是对原型继承<code>prototype</code>的封装.</p>\n<p>使用<code>class</code>的写法:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> {</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name</span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">greet</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Hello, my name is <span class=\"subst\">${<span class=\"variable language_\">this</span>.name}</span>`</span>);</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">\"Alice\"</span>);</span><br><span class=\"line\">person.<span class=\"title function_\">greet</span>(); <span class=\"comment\">// 输出：Hello, my name is Alice</span></span><br></pre></td></tr></table></figure>\n\n<p>等价的原型写法:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name</span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">greet</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Hello, my name is <span class=\"subst\">${<span class=\"variable language_\">this</span>.name}</span>`</span>);</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">\"Alice\"</span>);</span><br><span class=\"line\">person.<span class=\"title function_\">greet</span>(); <span class=\"comment\">// 输出：Hello, my name is Alice</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"箭头函数-2\"><a href=\"#箭头函数-2\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3><p>箭头函数简化了函数定义的书写, 其本质上依旧是一个普通函数, 因此也是语法糖的一种.</p>\n<ul>\n<li>e.g.</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用箭头函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">add</span> = (<span class=\"params\">a, b</span>) =&gt; a + b;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等价的普通函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> add = <span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a, b</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"结构赋值\"><a href=\"#结构赋值\" class=\"headerlink\" title=\"结构赋值\"></a>结构赋值</h3><p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.17ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9.05ex\" height=\"2.867ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 4000 1267\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">结</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">构</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">赋</text></g><g data-mml-node=\"mi\" transform=\"translate(3000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">值</text></g></g><g data-mml-node=\"mo\" transform=\"translate(0,-665)\"><svg width=\"4000\" height=\"237\" x=\"0\" y=\"148\" viewBox=\"1000 148 4000 237\"><path data-c=\"2013\" d=\"M0 248V285H499V248H0Z\" transform=\"scale(12,1)\"></path></svg></g></g></g></g></svg></mjx-container> 手动提取<strong>对象</strong>属性的语法糖.</p>\n<ul>\n<li>使用结构赋值:</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = {<span class=\"attr\">name</span>:<span class=\"string\">\"Zhuo\"</span>, <span class=\"attr\">gender</span>:<span class=\"string\">\"male\"</span>};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> {name, gender} = person;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>等价的原型写法:</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = {<span class=\"attr\">name</span>:<span class=\"string\">\"Zhuo\"</span>, <span class=\"attr\">gender</span>:<span class=\"string\">\"male\"</span>};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> name = person.<span class=\"property\">name</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> gender = person.<span class=\"property\">gender</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"赋值规则\"><a href=\"#赋值规则\" class=\"headerlink\" title=\"赋值规则\"></a>赋值规则</h4><p>结构赋值时, 基于 <strong>属性名匹配</strong> 而非顺序.<br>因此, 对象结构的<code>{}</code>内部属性必须和 <strong>对象的属性名</strong> 相对应.</p>\n<p><strong>错误</strong>的示例:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = { <span class=\"attr\">name</span>: <span class=\"string\">\"Alice\"</span>, <span class=\"attr\">age</span>: <span class=\"number\">25</span> };</span><br><span class=\"line\"><span class=\"keyword\">const</span> { a, b } = person;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 输出：undefined</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b); <span class=\"comment\">// 输出：undefined</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>重命名属性</strong>的写法:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = { <span class=\"attr\">name</span>: <span class=\"string\">\"Alice\"</span>, <span class=\"attr\">age</span>: <span class=\"number\">25</span> };</span><br><span class=\"line\"><span class=\"keyword\">const</span> { <span class=\"attr\">name</span>: a, <span class=\"attr\">age</span>: b } = person;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 输出：Alice</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b); <span class=\"comment\">// 输出：25</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>手动赋值</strong>: 对于结构对象中不存在的属性, 可以采取普通赋值的方式与结构赋值相结合:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = { <span class=\"attr\">name</span>: <span class=\"string\">\"Alice\"</span> };</span><br><span class=\"line\"><span class=\"keyword\">const</span> { name, age = <span class=\"number\">30</span> } = person;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name); <span class=\"comment\">// 输出：Alice</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age);  <span class=\"comment\">// 输出：30 （因为 person 中没有 age 属性，所以使用了默认值）</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"数组的结构赋值\"><a href=\"#数组的结构赋值\" class=\"headerlink\" title=\"数组的结构赋值\"></a>数组的结构赋值</h4><p>上述讨论的结构赋值都是对 <strong>对象</strong> 的结构赋值, 对于数组同样可以结构赋值, 且赋值规则与对象相反—— <strong>基于顺序</strong>赋值:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">\"Alice\"</span>, <span class=\"number\">25</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> [a, b] = arr;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 输出：Alice</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b); <span class=\"comment\">// 输出：25</span></span><br></pre></td></tr></table></figure>\n","_processedHighlight":true},{"title":"css笔记","date":"2025-01-08T10:33:32.000Z","index_img":"/img/Aniya.png","excerpt":"css属性好多好复杂😶‍🌫️","_content":"> [在线编辑平台](https://jsfiddle.net/?locale=zh_CN)\n\n\n### 伪元素\n使用伪元素`before`和`after`可以为元素添加内容.\n```html\n<div class=\"author\">待抉</div>\n\n<style>\n.author:before {\n  content: \"Author: \";\n  font-weight: bold; /* 加粗字体 */\n  color: blue; /* 文本颜色为蓝色 */\n}\n.author:after {\n  content: \" ✍️\";\n  font-size: 1.2em; /* 调整图标大小 */\n  margin-left: 5px; /* 添加左边距 */\n}\n</style>\n```\n\n\n`:nth-child`可用于对序列中不同的元素进行有序的样式设计:\n```html\n<div class=\"index-card\">内容1</div>\n<div class=\"index-card\">内容2</div>\n<div class=\"index-card\">内容3</div>\n<div class=\"index-card\">内容4</div>\n\n<style>\n.index-card:nth-child(odd) {\n  flex-direction: row-reverse;\n}\n</style>\n```\n- 选择所有类名为 \"index-card\" 的元素;\n- `row-reverse` 会让 flex 容器中的项目从右到左排列;\n> 同理, `even`选择偶数位置的元素; `3n+1`等函数表达式也可以起作用.\n\n### 基本的元素属性\n#### 布局属性\n- `margin`: 控制元素的外边距;\n- `padding`: 控制元素的内边距;\n\n#### 文本属性\n- `font-size`: 控制字体大小;\n- `font-weight`: 控制字体粗细;\n- `text-align`: 控制文本的对齐方式;\n- `text-decoration`: 控制文本的装饰;\n- `line-height`: 控制行高;\n- `letter-spacing`: 控制字符间距;\n- `text-transform`: 控制文本的大小写;\n\n#### 边框属性\n- `border`: e.g. `border: 1px solid red;` 简写属性;\n- `border-radius`: 控制元素的圆角;\n- `border-style`: solid, dashed, dotted...\n\n#### 其他\n- `overflow`: visible, hidden, scroll, auto;\n- `opacity`: 控制元素的透明度;\n- `cursor`: pointer, default, move, not-allowed...\n\n### 动感魔法\n#### hover效果\n通过为class设置`:hover`伪类，可以为元素添加鼠标悬停时的效果。\n```css\n.my-element:hover {\n  background-color: green;\n  color: red;\n  transform: scale(1.1);\n  font-size:20px;\n}\n```\n> 空格将不会被忽略, 需要确保类名与`:hover`之间不存在空格;\n\n其他的一些常用的伪类:\n```css\na:hover {\n      color: red;\n    }\n    button:active {\n      background-color: green;\n    }\n    input:focus {\n      border-color: blue;\n    }\n    a:visited {\n      color: purple;\n    }\n    p:first-child {\n      font-weight: bold;\n    }\n    p:last-child {\n      font-style: italic;\n    }\n    li:nth-child(2) {\n      color: red;\n    }\n    p:only-child {\n      color: green;\n    }\n    div:empty {\n      background-color: yellow;\n    }\n```\n\n### Flex\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <style>\n    /* 定义Flex容器 */\n    .container {\n      display: flex; /* 将容器设置为Flexbox容器 */\n      \n      /* flex-direction: 定义主轴方向 */\n      /* row: 水平从左到右（默认） */\n      /* row-reverse: 水平从右到左 */\n      /* column: 垂直从上到下 */\n      /* column-reverse: 垂直从下到上 */\n      flex-direction: row; /* 可以改为row-reverse, column, column-reverse */\n\n      /* flex-wrap: 定义是否换行 */\n      /* nowrap: 不换行（默认） */\n      /* wrap: 换行 */\n      /* wrap-reverse: 反向换行 */\n      flex-wrap: wrap; /* 可以改为nowrap, wrap-reverse */\n\n      /* flex-flow: flex-direction 和 flex-wrap 的简写 */\n      /* flex-flow: <flex-direction> <flex-wrap>; */\n      flex-flow: row wrap; /* 可以改为column nowrap等组合 */\n\n      /* justify-content: 定义在主轴上的对齐方式 */\n      /* flex-start: 起始对齐（默认） */\n      /* flex-end: 末端对齐 */\n      /* center: 居中对齐 */\n      /* space-between: 两端对齐，项目之间间隔相等 */\n      /* space-around: 项目之间间隔相等，项目两边有半个间隔 */\n      /* space-evenly: 项目之间间隔相等，项目两边有完整间隔 */\n      justify-content: space-between; /* 可以改为flex-start, flex-end, center, space-around, space-evenly */\n\n      /* align-items: 定义在交叉轴上的对齐方式 */\n      /* stretch: 拉伸适应容器（默认） */\n      /* flex-start: 交叉轴起始对齐 */\n      /* flex-end: 交叉轴末端对齐 */\n      /* center: 交叉轴居中对齐 */\n      /* baseline: 项目基线对齐 */\n      align-items: center; /* 可以改为flex-start, flex-end, stretch, baseline */\n\n      /* align-content: 定义多行的内容在交叉轴上的对齐方式（适用于多行时） */\n      /* stretch: 拉伸适应容器（默认） */\n      /* flex-start: 交叉轴起始对齐 */\n      /* flex-end: 交叉轴末端对齐 */\n      /* center: 交叉轴居中对齐 */\n      /* space-between: 多行两端对齐，行之间间隔相等 */\n      /* space-around: 多行之间间隔相等，行两边有半个间隔 */\n      align-content: space-between; /* 可以改为flex-start, flex-end, center, space-around */\n      \n      height: 100vh; /* 设置容器高度 */\n      background-color: #f0f0f0; /* 设置容器背景颜色 */\n    }\n    \n    /* 定义Flex项目 */\n    .item {\n      flex: 1; /* 设置项目的flex属性，项目平分空间 */\n      padding: 20px; /* 设置项目内边距 */\n      background-color: lightblue; /* 设置项目背景颜色 */\n      margin: 10px; /* 设置项目外边距 */\n      text-align: center; /* 设置项目文本居中 */\n      flex-grow: 1;/*尝试向flex容器扩展空间*/\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <div class=\"item\">Item 1</div>\n    <div class=\"item\">Item 2</div>\n    <div class=\"item\">Item 3</div>\n  </div>\n</body>\n</html>\n```\n\n","source":"_posts/编程语言/css笔记.md","raw":"---\ntitle: css笔记\ndate: 2025-01-08 18:33:32\ntags:\n- 前端\n- CSS\nindex_img: /img/Aniya.png\ncategories: 学习笔记\nexcerpt: css属性好多好复杂😶‍🌫️\n---\n> [在线编辑平台](https://jsfiddle.net/?locale=zh_CN)\n\n\n### 伪元素\n使用伪元素`before`和`after`可以为元素添加内容.\n```html\n<div class=\"author\">待抉</div>\n\n<style>\n.author:before {\n  content: \"Author: \";\n  font-weight: bold; /* 加粗字体 */\n  color: blue; /* 文本颜色为蓝色 */\n}\n.author:after {\n  content: \" ✍️\";\n  font-size: 1.2em; /* 调整图标大小 */\n  margin-left: 5px; /* 添加左边距 */\n}\n</style>\n```\n\n\n`:nth-child`可用于对序列中不同的元素进行有序的样式设计:\n```html\n<div class=\"index-card\">内容1</div>\n<div class=\"index-card\">内容2</div>\n<div class=\"index-card\">内容3</div>\n<div class=\"index-card\">内容4</div>\n\n<style>\n.index-card:nth-child(odd) {\n  flex-direction: row-reverse;\n}\n</style>\n```\n- 选择所有类名为 \"index-card\" 的元素;\n- `row-reverse` 会让 flex 容器中的项目从右到左排列;\n> 同理, `even`选择偶数位置的元素; `3n+1`等函数表达式也可以起作用.\n\n### 基本的元素属性\n#### 布局属性\n- `margin`: 控制元素的外边距;\n- `padding`: 控制元素的内边距;\n\n#### 文本属性\n- `font-size`: 控制字体大小;\n- `font-weight`: 控制字体粗细;\n- `text-align`: 控制文本的对齐方式;\n- `text-decoration`: 控制文本的装饰;\n- `line-height`: 控制行高;\n- `letter-spacing`: 控制字符间距;\n- `text-transform`: 控制文本的大小写;\n\n#### 边框属性\n- `border`: e.g. `border: 1px solid red;` 简写属性;\n- `border-radius`: 控制元素的圆角;\n- `border-style`: solid, dashed, dotted...\n\n#### 其他\n- `overflow`: visible, hidden, scroll, auto;\n- `opacity`: 控制元素的透明度;\n- `cursor`: pointer, default, move, not-allowed...\n\n### 动感魔法\n#### hover效果\n通过为class设置`:hover`伪类，可以为元素添加鼠标悬停时的效果。\n```css\n.my-element:hover {\n  background-color: green;\n  color: red;\n  transform: scale(1.1);\n  font-size:20px;\n}\n```\n> 空格将不会被忽略, 需要确保类名与`:hover`之间不存在空格;\n\n其他的一些常用的伪类:\n```css\na:hover {\n      color: red;\n    }\n    button:active {\n      background-color: green;\n    }\n    input:focus {\n      border-color: blue;\n    }\n    a:visited {\n      color: purple;\n    }\n    p:first-child {\n      font-weight: bold;\n    }\n    p:last-child {\n      font-style: italic;\n    }\n    li:nth-child(2) {\n      color: red;\n    }\n    p:only-child {\n      color: green;\n    }\n    div:empty {\n      background-color: yellow;\n    }\n```\n\n### Flex\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <style>\n    /* 定义Flex容器 */\n    .container {\n      display: flex; /* 将容器设置为Flexbox容器 */\n      \n      /* flex-direction: 定义主轴方向 */\n      /* row: 水平从左到右（默认） */\n      /* row-reverse: 水平从右到左 */\n      /* column: 垂直从上到下 */\n      /* column-reverse: 垂直从下到上 */\n      flex-direction: row; /* 可以改为row-reverse, column, column-reverse */\n\n      /* flex-wrap: 定义是否换行 */\n      /* nowrap: 不换行（默认） */\n      /* wrap: 换行 */\n      /* wrap-reverse: 反向换行 */\n      flex-wrap: wrap; /* 可以改为nowrap, wrap-reverse */\n\n      /* flex-flow: flex-direction 和 flex-wrap 的简写 */\n      /* flex-flow: <flex-direction> <flex-wrap>; */\n      flex-flow: row wrap; /* 可以改为column nowrap等组合 */\n\n      /* justify-content: 定义在主轴上的对齐方式 */\n      /* flex-start: 起始对齐（默认） */\n      /* flex-end: 末端对齐 */\n      /* center: 居中对齐 */\n      /* space-between: 两端对齐，项目之间间隔相等 */\n      /* space-around: 项目之间间隔相等，项目两边有半个间隔 */\n      /* space-evenly: 项目之间间隔相等，项目两边有完整间隔 */\n      justify-content: space-between; /* 可以改为flex-start, flex-end, center, space-around, space-evenly */\n\n      /* align-items: 定义在交叉轴上的对齐方式 */\n      /* stretch: 拉伸适应容器（默认） */\n      /* flex-start: 交叉轴起始对齐 */\n      /* flex-end: 交叉轴末端对齐 */\n      /* center: 交叉轴居中对齐 */\n      /* baseline: 项目基线对齐 */\n      align-items: center; /* 可以改为flex-start, flex-end, stretch, baseline */\n\n      /* align-content: 定义多行的内容在交叉轴上的对齐方式（适用于多行时） */\n      /* stretch: 拉伸适应容器（默认） */\n      /* flex-start: 交叉轴起始对齐 */\n      /* flex-end: 交叉轴末端对齐 */\n      /* center: 交叉轴居中对齐 */\n      /* space-between: 多行两端对齐，行之间间隔相等 */\n      /* space-around: 多行之间间隔相等，行两边有半个间隔 */\n      align-content: space-between; /* 可以改为flex-start, flex-end, center, space-around */\n      \n      height: 100vh; /* 设置容器高度 */\n      background-color: #f0f0f0; /* 设置容器背景颜色 */\n    }\n    \n    /* 定义Flex项目 */\n    .item {\n      flex: 1; /* 设置项目的flex属性，项目平分空间 */\n      padding: 20px; /* 设置项目内边距 */\n      background-color: lightblue; /* 设置项目背景颜色 */\n      margin: 10px; /* 设置项目外边距 */\n      text-align: center; /* 设置项目文本居中 */\n      flex-grow: 1;/*尝试向flex容器扩展空间*/\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <div class=\"item\">Item 1</div>\n    <div class=\"item\">Item 2</div>\n    <div class=\"item\">Item 3</div>\n  </div>\n</body>\n</html>\n```\n\n","slug":"编程语言/css笔记","published":1,"updated":"2025-05-08T11:51:39.655Z","comments":1,"layout":"post","photos":[],"_id":"cmcbm7pqd000ye2qg17lsgqt4","content":"<blockquote>\n<p><a class=\"link\"   href=\"https://jsfiddle.net/?locale=zh_CN\" >在线编辑平台<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></p>\n</blockquote>\n<h3 id=\"伪元素\"><a href=\"#伪元素\" class=\"headerlink\" title=\"伪元素\"></a>伪元素</h3><p>使用伪元素<code>before</code>和<code>after</code>可以为元素添加内容.</p>\n<div class=\"code-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;author&quot;</span>&gt;</span>待抉<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-class\">.author</span><span class=\"selector-pseudo\">:before</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">content</span>: <span class=\"string\">&quot;Author: &quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">font-weight</span>: bold; <span class=\"comment\">/* 加粗字体 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">color</span>: blue; <span class=\"comment\">/* 文本颜色为蓝色 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-class\">.author</span><span class=\"selector-pseudo\">:after</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">content</span>: <span class=\"string\">&quot; ✍️&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2em</span>; <span class=\"comment\">/* 调整图标大小 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">margin-left</span>: <span class=\"number\">5px</span>; <span class=\"comment\">/* 添加左边距 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n\n<p><code>:nth-child</code>可用于对序列中不同的元素进行有序的样式设计:</p>\n<div class=\"code-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;index-card&quot;</span>&gt;</span>内容1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;index-card&quot;</span>&gt;</span>内容2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;index-card&quot;</span>&gt;</span>内容3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;index-card&quot;</span>&gt;</span>内容4<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-class\">.index-card</span><span class=\"selector-pseudo\">:nth-child</span>(odd) &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">flex-direction</span>: row-reverse;</span></span><br><span class=\"line\"><span class=\"language-css\">&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>选择所有类名为 “index-card” 的元素;</li>\n<li><code>row-reverse</code> 会让 flex 容器中的项目从右到左排列;<blockquote>\n<p>同理, <code>even</code>选择偶数位置的元素; <code>3n+1</code>等函数表达式也可以起作用.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"基本的元素属性\"><a href=\"#基本的元素属性\" class=\"headerlink\" title=\"基本的元素属性\"></a>基本的元素属性</h3><h4 id=\"布局属性\"><a href=\"#布局属性\" class=\"headerlink\" title=\"布局属性\"></a>布局属性</h4><ul>\n<li><code>margin</code>: 控制元素的外边距;</li>\n<li><code>padding</code>: 控制元素的内边距;</li>\n</ul>\n<h4 id=\"文本属性\"><a href=\"#文本属性\" class=\"headerlink\" title=\"文本属性\"></a>文本属性</h4><ul>\n<li><code>font-size</code>: 控制字体大小;</li>\n<li><code>font-weight</code>: 控制字体粗细;</li>\n<li><code>text-align</code>: 控制文本的对齐方式;</li>\n<li><code>text-decoration</code>: 控制文本的装饰;</li>\n<li><code>line-height</code>: 控制行高;</li>\n<li><code>letter-spacing</code>: 控制字符间距;</li>\n<li><code>text-transform</code>: 控制文本的大小写;</li>\n</ul>\n<h4 id=\"边框属性\"><a href=\"#边框属性\" class=\"headerlink\" title=\"边框属性\"></a>边框属性</h4><ul>\n<li><code>border</code>: e.g. <code>border: 1px solid red;</code> 简写属性;</li>\n<li><code>border-radius</code>: 控制元素的圆角;</li>\n<li><code>border-style</code>: solid, dashed, dotted…</li>\n</ul>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><ul>\n<li><code>overflow</code>: visible, hidden, scroll, auto;</li>\n<li><code>opacity</code>: 控制元素的透明度;</li>\n<li><code>cursor</code>: pointer, default, move, not-allowed…</li>\n</ul>\n<h3 id=\"动感魔法\"><a href=\"#动感魔法\" class=\"headerlink\" title=\"动感魔法\"></a>动感魔法</h3><h4 id=\"hover效果\"><a href=\"#hover效果\" class=\"headerlink\" title=\"hover效果\"></a>hover效果</h4><p>通过为class设置<code>:hover</code>伪类，可以为元素添加鼠标悬停时的效果。</p>\n<div class=\"code-container\" data-rel=\"Css\"><figure class=\"iseeu highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.my-element</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: green;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(<span class=\"number\">1.1</span>);</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>:<span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p>空格将不会被忽略, 需要确保类名与<code>:hover</code>之间不存在空格;</p>\n</blockquote>\n<p>其他的一些常用的伪类:</p>\n<div class=\"code-container\" data-rel=\"Css\"><figure class=\"iseeu highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">button</span><span class=\"selector-pseudo\">:active</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">background-color</span>: green;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:focus</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">border-color</span>: blue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:visited</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">color</span>: purple;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:first-child</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:last-child</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">font-style</span>: italic;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:nth-child</span>(<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">      <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:only-child</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">color</span>: green;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">:empty</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">background-color</span>: yellow;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"Flex\"><a href=\"#Flex\" class=\"headerlink\" title=\"Flex\"></a>Flex</h3><div class=\"code-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"comment\">/* 定义Flex容器 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">display</span>: flex; <span class=\"comment\">/* 将容器设置为Flexbox容器 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      </span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* flex-direction: 定义主轴方向 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* row: 水平从左到右（默认） */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* row-reverse: 水平从右到左 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* column: 垂直从上到下 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* column-reverse: 垂直从下到上 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">flex-direction</span>: row; <span class=\"comment\">/* 可以改为row-reverse, column, column-reverse */</span></span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* flex-wrap: 定义是否换行 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* nowrap: 不换行（默认） */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* wrap: 换行 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* wrap-reverse: 反向换行 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">flex-wrap</span>: wrap; <span class=\"comment\">/* 可以改为nowrap, wrap-reverse */</span></span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* flex-flow: flex-direction 和 flex-wrap 的简写 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* flex-flow: &lt;flex-direction&gt; &lt;flex-wrap&gt;; */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">flex-flow</span>: row wrap; <span class=\"comment\">/* 可以改为column nowrap等组合 */</span></span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* justify-content: 定义在主轴上的对齐方式 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* flex-start: 起始对齐（默认） */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* flex-end: 末端对齐 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* center: 居中对齐 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* space-between: 两端对齐，项目之间间隔相等 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* space-around: 项目之间间隔相等，项目两边有半个间隔 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* space-evenly: 项目之间间隔相等，项目两边有完整间隔 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">justify-content</span>: space-between; <span class=\"comment\">/* 可以改为flex-start, flex-end, center, space-around, space-evenly */</span></span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* align-items: 定义在交叉轴上的对齐方式 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* stretch: 拉伸适应容器（默认） */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* flex-start: 交叉轴起始对齐 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* flex-end: 交叉轴末端对齐 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* center: 交叉轴居中对齐 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* baseline: 项目基线对齐 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">align-items</span>: center; <span class=\"comment\">/* 可以改为flex-start, flex-end, stretch, baseline */</span></span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* align-content: 定义多行的内容在交叉轴上的对齐方式（适用于多行时） */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* stretch: 拉伸适应容器（默认） */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* flex-start: 交叉轴起始对齐 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* flex-end: 交叉轴末端对齐 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* center: 交叉轴居中对齐 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* space-between: 多行两端对齐，行之间间隔相等 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* space-around: 多行之间间隔相等，行两边有半个间隔 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">align-content</span>: space-between; <span class=\"comment\">/* 可以改为flex-start, flex-end, center, space-around */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      </span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">height</span>: <span class=\"number\">100vh</span>; <span class=\"comment\">/* 设置容器高度 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">background-color</span>: <span class=\"number\">#f0f0f0</span>; <span class=\"comment\">/* 设置容器背景颜色 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"comment\">/* 定义Flex项目 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.item</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">flex</span>: <span class=\"number\">1</span>; <span class=\"comment\">/* 设置项目的flex属性，项目平分空间 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span>; <span class=\"comment\">/* 设置项目内边距 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">background-color</span>: lightblue; <span class=\"comment\">/* 设置项目背景颜色 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span>; <span class=\"comment\">/* 设置项目外边距 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">text-align</span>: center; <span class=\"comment\">/* 设置项目文本居中 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">flex-grow</span>: <span class=\"number\">1</span>;<span class=\"comment\">/*尝试向flex容器扩展空间*/</span></span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">  </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n","more":"<blockquote>\n<p><a class=\"link\"   href=\"https://jsfiddle.net/?locale=zh_CN\" >在线编辑平台<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></p>\n</blockquote>\n<h3 id=\"伪元素\"><a href=\"#伪元素\" class=\"headerlink\" title=\"伪元素\"></a>伪元素</h3><p>使用伪元素<code>before</code>和<code>after</code>可以为元素添加内容.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;author&quot;</span>&gt;</span>待抉<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-class\">.author</span><span class=\"selector-pseudo\">:before</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">content</span>: <span class=\"string\">&quot;Author: &quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">font-weight</span>: bold; <span class=\"comment\">/* 加粗字体 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">color</span>: blue; <span class=\"comment\">/* 文本颜色为蓝色 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-class\">.author</span><span class=\"selector-pseudo\">:after</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">content</span>: <span class=\"string\">&quot; ✍️&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2em</span>; <span class=\"comment\">/* 调整图标大小 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">margin-left</span>: <span class=\"number\">5px</span>; <span class=\"comment\">/* 添加左边距 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<p><code>:nth-child</code>可用于对序列中不同的元素进行有序的样式设计:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;index-card&quot;</span>&gt;</span>内容1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;index-card&quot;</span>&gt;</span>内容2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;index-card&quot;</span>&gt;</span>内容3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;index-card&quot;</span>&gt;</span>内容4<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-class\">.index-card</span><span class=\"selector-pseudo\">:nth-child</span>(odd) &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">flex-direction</span>: row-reverse;</span></span><br><span class=\"line\"><span class=\"language-css\">&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>选择所有类名为 “index-card” 的元素;</li>\n<li><code>row-reverse</code> 会让 flex 容器中的项目从右到左排列;<blockquote>\n<p>同理, <code>even</code>选择偶数位置的元素; <code>3n+1</code>等函数表达式也可以起作用.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"基本的元素属性\"><a href=\"#基本的元素属性\" class=\"headerlink\" title=\"基本的元素属性\"></a>基本的元素属性</h3><h4 id=\"布局属性\"><a href=\"#布局属性\" class=\"headerlink\" title=\"布局属性\"></a>布局属性</h4><ul>\n<li><code>margin</code>: 控制元素的外边距;</li>\n<li><code>padding</code>: 控制元素的内边距;</li>\n</ul>\n<h4 id=\"文本属性\"><a href=\"#文本属性\" class=\"headerlink\" title=\"文本属性\"></a>文本属性</h4><ul>\n<li><code>font-size</code>: 控制字体大小;</li>\n<li><code>font-weight</code>: 控制字体粗细;</li>\n<li><code>text-align</code>: 控制文本的对齐方式;</li>\n<li><code>text-decoration</code>: 控制文本的装饰;</li>\n<li><code>line-height</code>: 控制行高;</li>\n<li><code>letter-spacing</code>: 控制字符间距;</li>\n<li><code>text-transform</code>: 控制文本的大小写;</li>\n</ul>\n<h4 id=\"边框属性\"><a href=\"#边框属性\" class=\"headerlink\" title=\"边框属性\"></a>边框属性</h4><ul>\n<li><code>border</code>: e.g. <code>border: 1px solid red;</code> 简写属性;</li>\n<li><code>border-radius</code>: 控制元素的圆角;</li>\n<li><code>border-style</code>: solid, dashed, dotted…</li>\n</ul>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><ul>\n<li><code>overflow</code>: visible, hidden, scroll, auto;</li>\n<li><code>opacity</code>: 控制元素的透明度;</li>\n<li><code>cursor</code>: pointer, default, move, not-allowed…</li>\n</ul>\n<h3 id=\"动感魔法\"><a href=\"#动感魔法\" class=\"headerlink\" title=\"动感魔法\"></a>动感魔法</h3><h4 id=\"hover效果\"><a href=\"#hover效果\" class=\"headerlink\" title=\"hover效果\"></a>hover效果</h4><p>通过为class设置<code>:hover</code>伪类，可以为元素添加鼠标悬停时的效果。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.my-element</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: green;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(<span class=\"number\">1.1</span>);</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>:<span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>空格将不会被忽略, 需要确保类名与<code>:hover</code>之间不存在空格;</p>\n</blockquote>\n<p>其他的一些常用的伪类:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">button</span><span class=\"selector-pseudo\">:active</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">background-color</span>: green;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:focus</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">border-color</span>: blue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:visited</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">color</span>: purple;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:first-child</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:last-child</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">font-style</span>: italic;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:nth-child</span>(<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">      <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:only-child</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">color</span>: green;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">:empty</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">background-color</span>: yellow;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Flex\"><a href=\"#Flex\" class=\"headerlink\" title=\"Flex\"></a>Flex</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"comment\">/* 定义Flex容器 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">display</span>: flex; <span class=\"comment\">/* 将容器设置为Flexbox容器 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      </span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* flex-direction: 定义主轴方向 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* row: 水平从左到右（默认） */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* row-reverse: 水平从右到左 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* column: 垂直从上到下 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* column-reverse: 垂直从下到上 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">flex-direction</span>: row; <span class=\"comment\">/* 可以改为row-reverse, column, column-reverse */</span></span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* flex-wrap: 定义是否换行 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* nowrap: 不换行（默认） */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* wrap: 换行 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* wrap-reverse: 反向换行 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">flex-wrap</span>: wrap; <span class=\"comment\">/* 可以改为nowrap, wrap-reverse */</span></span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* flex-flow: flex-direction 和 flex-wrap 的简写 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* flex-flow: &lt;flex-direction&gt; &lt;flex-wrap&gt;; */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">flex-flow</span>: row wrap; <span class=\"comment\">/* 可以改为column nowrap等组合 */</span></span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* justify-content: 定义在主轴上的对齐方式 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* flex-start: 起始对齐（默认） */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* flex-end: 末端对齐 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* center: 居中对齐 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* space-between: 两端对齐，项目之间间隔相等 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* space-around: 项目之间间隔相等，项目两边有半个间隔 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* space-evenly: 项目之间间隔相等，项目两边有完整间隔 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">justify-content</span>: space-between; <span class=\"comment\">/* 可以改为flex-start, flex-end, center, space-around, space-evenly */</span></span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* align-items: 定义在交叉轴上的对齐方式 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* stretch: 拉伸适应容器（默认） */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* flex-start: 交叉轴起始对齐 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* flex-end: 交叉轴末端对齐 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* center: 交叉轴居中对齐 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* baseline: 项目基线对齐 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">align-items</span>: center; <span class=\"comment\">/* 可以改为flex-start, flex-end, stretch, baseline */</span></span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* align-content: 定义多行的内容在交叉轴上的对齐方式（适用于多行时） */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* stretch: 拉伸适应容器（默认） */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* flex-start: 交叉轴起始对齐 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* flex-end: 交叉轴末端对齐 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* center: 交叉轴居中对齐 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* space-between: 多行两端对齐，行之间间隔相等 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"comment\">/* space-around: 多行之间间隔相等，行两边有半个间隔 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">align-content</span>: space-between; <span class=\"comment\">/* 可以改为flex-start, flex-end, center, space-around */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      </span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">height</span>: <span class=\"number\">100vh</span>; <span class=\"comment\">/* 设置容器高度 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">background-color</span>: <span class=\"number\">#f0f0f0</span>; <span class=\"comment\">/* 设置容器背景颜色 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"comment\">/* 定义Flex项目 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.item</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">flex</span>: <span class=\"number\">1</span>; <span class=\"comment\">/* 设置项目的flex属性，项目平分空间 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span>; <span class=\"comment\">/* 设置项目内边距 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">background-color</span>: lightblue; <span class=\"comment\">/* 设置项目背景颜色 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span>; <span class=\"comment\">/* 设置项目外边距 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">text-align</span>: center; <span class=\"comment\">/* 设置项目文本居中 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">flex-grow</span>: <span class=\"number\">1</span>;<span class=\"comment\">/*尝试向flex容器扩展空间*/</span></span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">  </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n","_processedHighlight":true},{"title":"倦鸟","date":"2025-01-08T08:10:10.000Z","thumbnail":"/img/倦鸟.png","excerpt":"false","_content":"<br>\n<p style = \" \n    font-size: 1.3em;\n    text-align: center;\n    line-height: 2em;\"\n>\n我盘旋的目光是漂泊不息的倦鸟\n<br>\n越过人海 坠入你乌黑瞳仁中的夜\n</p>\n\n\n> 下附最初的三节诗, 以及灵感来源.\n\n\n<details>\n<summary> 完整三节诗</summary>\n<p style = \" \n    font-size: 1em;\n    text-align: center;\n    line-height: 1.5em;\"\n>\n我盘旋的目光是漂泊不息的倦鸟 <br>\n越过人海终于落入你乌黑瞳仁中的夜<br>\n<br>\n你澄澈的眼眸映照着闪烁明灭的晨星<br>\n你泛着红晕的脸颊 留着朝霞热切亲吻的印记<br>\n<br>\n我们的目光还是悄然相遇了<br>\n你温和的凝视又让我想起黎明的微光<br>\n我漆黑的羽翼微微颤动 随后灼灼燃烧<br>\n于是 我的目光载着余烬 再度飞远了<br>\n</p>\n</details>\n\n<details>\n<summary> 「灵感」Tagore's</summary>\n\n<p style = \" \n    font-size: 1.1em;\n    text-align: center;\n    line-height: 2em;\"\n>\nMy heart, the bird of the wilderness, <br>\nhas found its sky in your eyes.<br>\n\n<p style = \" \n    font-size: 1em;\n    text-align: center;\n    color: grey;\n    line-height: 2em;\"\n>(出自泰戈尔的园丁集)\n</p>\n\n</p>\n</details>","source":"_posts/poets/bird.md","raw":"---\ntitle: 倦鸟\ndate: 2025-01-08 16:10:10\ntags: \n- 短诗\ncategories: 随机掉落的文字碎片\nthumbnail: /img/倦鸟.png\nexcerpt: false\n---\n<br>\n<p style = \" \n    font-size: 1.3em;\n    text-align: center;\n    line-height: 2em;\"\n>\n我盘旋的目光是漂泊不息的倦鸟\n<br>\n越过人海 坠入你乌黑瞳仁中的夜\n</p>\n\n\n> 下附最初的三节诗, 以及灵感来源.\n\n\n<details>\n<summary> 完整三节诗</summary>\n<p style = \" \n    font-size: 1em;\n    text-align: center;\n    line-height: 1.5em;\"\n>\n我盘旋的目光是漂泊不息的倦鸟 <br>\n越过人海终于落入你乌黑瞳仁中的夜<br>\n<br>\n你澄澈的眼眸映照着闪烁明灭的晨星<br>\n你泛着红晕的脸颊 留着朝霞热切亲吻的印记<br>\n<br>\n我们的目光还是悄然相遇了<br>\n你温和的凝视又让我想起黎明的微光<br>\n我漆黑的羽翼微微颤动 随后灼灼燃烧<br>\n于是 我的目光载着余烬 再度飞远了<br>\n</p>\n</details>\n\n<details>\n<summary> 「灵感」Tagore's</summary>\n\n<p style = \" \n    font-size: 1.1em;\n    text-align: center;\n    line-height: 2em;\"\n>\nMy heart, the bird of the wilderness, <br>\nhas found its sky in your eyes.<br>\n\n<p style = \" \n    font-size: 1em;\n    text-align: center;\n    color: grey;\n    line-height: 2em;\"\n>(出自泰戈尔的园丁集)\n</p>\n\n</p>\n</details>","slug":"poets/bird","published":1,"updated":"2025-05-09T09:39:16.930Z","comments":1,"layout":"post","photos":[],"_id":"cmcbm7pqd000ze2qg4qarhtvd","content":"<br>\n<p style = \" \n    font-size: 1.3em;\n    text-align: center;\n    line-height: 2em;\"\n>\n我盘旋的目光是漂泊不息的倦鸟\n<br>\n越过人海 坠入你乌黑瞳仁中的夜\n</p>\n\n\n<blockquote>\n<p>下附最初的三节诗, 以及灵感来源.</p>\n</blockquote>\n<details>\n<summary> 完整三节诗</summary>\n<p style = \" \n    font-size: 1em;\n    text-align: center;\n    line-height: 1.5em;\"\n>\n我盘旋的目光是漂泊不息的倦鸟 <br>\n越过人海终于落入你乌黑瞳仁中的夜<br>\n<br>\n你澄澈的眼眸映照着闪烁明灭的晨星<br>\n你泛着红晕的脸颊 留着朝霞热切亲吻的印记<br>\n<br>\n我们的目光还是悄然相遇了<br>\n你温和的凝视又让我想起黎明的微光<br>\n我漆黑的羽翼微微颤动 随后灼灼燃烧<br>\n于是 我的目光载着余烬 再度飞远了<br>\n</p>\n</details>\n\n<details>\n<summary> 「灵感」Tagore's</summary>\n\n<p style = \" \n    font-size: 1.1em;\n    text-align: center;\n    line-height: 2em;\"\n>\nMy heart, the bird of the wilderness, <br>\nhas found its sky in your eyes.<br>\n\n<p style = \" \n    font-size: 1em;\n    text-align: center;\n    color: grey;\n    line-height: 2em;\"\n>(出自泰戈尔的园丁集)\n</p>\n\n</p>\n</details>","more":"<br>\n<p style = \" \n    font-size: 1.3em;\n    text-align: center;\n    line-height: 2em;\"\n>\n我盘旋的目光是漂泊不息的倦鸟\n<br>\n越过人海 坠入你乌黑瞳仁中的夜\n</p>\n\n\n<blockquote>\n<p>下附最初的三节诗, 以及灵感来源.</p>\n</blockquote>\n<details>\n<summary> 完整三节诗</summary>\n<p style = \" \n    font-size: 1em;\n    text-align: center;\n    line-height: 1.5em;\"\n>\n我盘旋的目光是漂泊不息的倦鸟 <br>\n越过人海终于落入你乌黑瞳仁中的夜<br>\n<br>\n你澄澈的眼眸映照着闪烁明灭的晨星<br>\n你泛着红晕的脸颊 留着朝霞热切亲吻的印记<br>\n<br>\n我们的目光还是悄然相遇了<br>\n你温和的凝视又让我想起黎明的微光<br>\n我漆黑的羽翼微微颤动 随后灼灼燃烧<br>\n于是 我的目光载着余烬 再度飞远了<br>\n</p>\n</details>\n\n<details>\n<summary> 「灵感」Tagore's</summary>\n\n<p style = \" \n    font-size: 1.1em;\n    text-align: center;\n    line-height: 2em;\"\n>\nMy heart, the bird of the wilderness, <br>\nhas found its sky in your eyes.<br>\n\n<p style = \" \n    font-size: 1em;\n    text-align: center;\n    color: grey;\n    line-height: 2em;\"\n>(出自泰戈尔的园丁集)\n</p>\n\n</p>\n</details>","_processedHighlight":true},{"title":"晚霞","date":"2025-01-09T12:59:02.000Z","excerpt":"记紫金港的世纪晚霞","thumbnail":"/img/晚霞.jpg","_content":"<br>\n<p style = \" \n    font-size: 1.3em;\n    text-align: center;\n    line-height: 2em;\"\n>\n白昼飞红了她的<span style = \"color: #fe4017\">脸颊</span> <br>\n以隐匿于远山之后的凝望<br>  \n默默期待着  <br>\n月色的降临  <br>\n</p>\n","source":"_posts/poets/晚霞.md","raw":"---\ntitle: 晚霞\ndate: 2025-01-09 20:59:02\ntags: \n- 短诗\n- 自然\ncategories: 随机掉落的文字碎片\nexcerpt: 记紫金港的世纪晚霞\nthumbnail: /img/晚霞.jpg\n---\n<br>\n<p style = \" \n    font-size: 1.3em;\n    text-align: center;\n    line-height: 2em;\"\n>\n白昼飞红了她的<span style = \"color: #fe4017\">脸颊</span> <br>\n以隐匿于远山之后的凝望<br>  \n默默期待着  <br>\n月色的降临  <br>\n</p>\n","slug":"poets/晚霞","published":1,"updated":"2025-05-09T01:44:33.079Z","comments":1,"layout":"post","photos":[],"_id":"cmcbm7pqh0025e2qgdqsggs8f","content":"<br>\n<p style = \" \n    font-size: 1.3em;\n    text-align: center;\n    line-height: 2em;\"\n>\n白昼飞红了她的<span style = \"color: #fe4017\">脸颊</span> <br>\n以隐匿于远山之后的凝望<br>  \n默默期待着  <br>\n月色的降临  <br>\n</p>\n","more":"<br>\n<p style = \" \n    font-size: 1.3em;\n    text-align: center;\n    line-height: 2em;\"\n>\n白昼飞红了她的<span style = \"color: #fe4017\">脸颊</span> <br>\n以隐匿于远山之后的凝望<br>  \n默默期待着  <br>\n月色的降临  <br>\n</p>\n","_processedHighlight":true},{"title":"Swift学习摘记","date":"2025-04-17T12:21:21.000Z","excerpt":"学习swift中的基本语法和Swift-UI等框架知识.","thumbnail":"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250509094625386.png?imageSlim","_content":"# 初见\n\n默认情况下，函数使用它们的参数名称作为它们参数的标签，在参数名称前可以自定义参数标签，或者使用 `_` 表示不使用参数标签:\n\n```swift\nfunc greet(_ person: String, on day: String) -> String {\n    return \"Hello \\(person), today is \\(day).\"\n}\ngreet(\"John\", on: \"Wednesday\")\n```\n\n> 参数标签指的是调用时候的名称, 参数名指的是函数内部.\n\n函数是第一等类型，这意味着函数可以作为另一个函数的返回值。\n\n```swift\nfunc makeIncrementer() -> ((Int) -> Int) {\n    func addOne(number: Int) -> Int {\n        return 1 + number\n    }\n    return addOne\n}\nvar increment = makeIncrementer()\nincrement(7)\n```\n\n函数也可以作为另一个函数的输入参数:\n\n```swift\nfunc hasAnyMatches(list: [Int], condition: (Int) -> Bool) -> Bool {\n    for item in list {\n        if condition(item) {\n            return true\n        }\n    }\n    return false\n}\nfunc lessThanTen(number: Int) -> Bool {\n    return number < 10\n}\nvar numbers = [20, 19, 7, 12]\nhasAnyMatches(list: numbers, condition: lessThanTen)\n```\n\n可以通过参数位置而不是参数名字来引用参数——这个方法在非常短的闭包中非常有用。\n\n```swift\nlet sortedNumbers = numbers.sorted { $0 > $1 }\nprint(sortedNumbers)\n```\n\n`actor`与 `class`类似, 但是可以序列化访问, 保护共享、可变的数据.\n\n### 对象和类\n\n#### 构造与析构\n\n使用 `self.`替代 `this->`, 使用  `init` 和  `deinit`分别声明构造和析构函数:\n\n```swift\nclass NamedShape {\n    var numberOfSides: Int = 0\n    var name: String\n\n    init(name: String) {\n        self.name = name\n    }\n\n    func simpleDescription() -> String {\n        return \"A shape with \\(numberOfSides) sides.\"\n    }\n}\n```\n\n子类如果要重写父类的方法的话，需要用 `override` 标记:\n\n```swift\nclass Square: NamedShape {\n    var sideLength: Double\n\n    init(sideLength: Double, name: String) {\n        self.sideLength = sideLength\n        super.init(name: name)\n        numberOfSides = 4\n    }\n\n    func area() ->  Double {\n        return sideLength * sideLength\n    }\n\n    override func simpleDescription() -> String {\n        return \"A square with sides of length \\(sideLength).\"\n    }\n}\nlet test = Square(sideLength: 5.2, name: \"my test square\")\ntest.area()\ntest.simpleDescription()\n```\n\n> - 使用 `:className`的方法声明父类.\n> - `super.init` 是用来调用父类（超类）的初始化方法的。当创建一个子类的实例时，子类可能需要初始化一些自己的属性，同时还需要确保父类的属性也被正确初始化。这时就需要使用 `super.init` 来调用父类的初始化方法，完成父类的初始化过程\n> - 严格的顺序要求: 子类必须先初始化自己的属性，然后调用 `super.init`，最后才能访问或修改继承来的属性。\n\n### 计算属性\n\n#### 普通的计算属性\n\n在属性内部使用 `{}`并加上 `return`, 可以让访问这个属性的时候, 返回值由结构体的其他属性计算得到.\n\n```swift\nstruct Temperature {\n  var celsius: Double\n  var fahrenheit: Double{\n    return celsius *1.8 + 32\n  }\n  \n  init(celsius: Double){\n    self.celsius = celsius\n  }\n}\n```\n\n> 1. 此时实例化一个结构体就只需要给出一个属性的值.\n> 2. `self`在上述的Swift代码中是不可或缺的, 因为形参和内部属性的名称相同.\n\n#### 使用 getter 和 setter 的计算属性:\n\n```swift\nclass EquilateralTriangle: NamedShape {\n    var sideLength: Double = 0.0\n\n    init(sideLength: Double, name: String) {\n        self.sideLength = sideLength\n        super.init(name: name)\n        numberOfSides = 3\n    }\n\n    var perimeter: Double {\n      // 根据存储属性进行计算\n        get {\n            return 3.0 * sideLength\n        }\n      // 设置属性\n        set {\n            sideLength = newValue / 3.0\n        }\n    }\n\n    override func simpleDescription() -> String {\n        return \"An equilateral triangle with sides of length \\(sideLength).\"\n    }\n}\nvar triangle = EquilateralTriangle(sideLength: 3.1, name: \"a triangle\")\nprint(triangle.perimeter)\ntriangle.perimeter = 9.9\nprint(triangle.sideLength)\n```\n\n计算属性同样是一个属性, 但是根据调用方式的不同, 有返回和设置两种方式.\n\n```swift\ntriangle.perimeter = 9.9\nprint(triangle.perimeter)\n```\n\n### Mutating\n\n默认情况下, 结构体中的方法不能直接修改结构体的属性. 需要显式声明为 `mutating`:\n\n```swift\nstruct User{\n  let username:String\n  var isVisible:Bool = true\n  var friends: [string] = []\n  \n  mutating func addFriend(username: String){\n    friends.append(username)\n  }\n}\n```\n\n### 属性监视器\n\n使用 `willSet` 和 `didSet`。写入的代码会在属性值发生改变时调用，但不包含构造器中发生值改变的情况:\n\n- 分别可以使用 `newValue`与 `oldValue`来表示属性将要改变的值以及改变之前的值.\n\ne.g. 确保三角形的边长总是和正方形的边长相同。\n\n```swift\nclass TriangleAndSquare {\n    var triangle: EquilateralTriangle {\n        willSet {\n            square.sideLength = newValue.sideLength\n        }\n    }\n    var square: Square {\n        willSet {\n            triangle.sideLength = newValue.sideLength\n        }\n    }\n    init(size: Double, name: String) {\n        square = Square(sideLength: size, name: name)\n        triangle = EquilateralTriangle(sideLength: size, name: name)\n    }\n}\nvar triangleAndSquare = TriangleAndSquare(size: 10, name: \"another test shape\")\nprint(triangleAndSquare.square.sideLength)\nprint(triangleAndSquare.triangle.sideLength)\ntriangleAndSquare.square = Square(sideLength: 50, name: \"larger square\")\nprint(triangleAndSquare.triangle.sideLength)\n```\n\n### 枚举\n\n```swift\nenum Rank: Int {\n    case ace = 1\n    case two, three, four, five, six, seven, eight, nine, ten\n    case jack, queen, king\n    func simpleDescription() -> String {\n        switch self {\n        case .ace:\n            return \"ace\"\n        case .jack:\n            return \"jack\"\n        case .queen:\n            return \"queen\"\n        case .king:\n            return \"king\"\n        default:\n            return String(self.rawValue)\n        }\n    }\n}\nlet ace = Rank.ace\nlet aceRawValue = ace.rawValue\n```\n\n- 如果没有设置第一个成员的初始值, 默认从 `0` 开始;\n- 缺省值按照递增处理;\n- `case`之外可以设置方法.\n\n使用 `init?(rawValue:)` 初始化构造器来从原始值创建一个枚举实例:\n\n```swift\nif let convertedRank = Rank（rawValue:3）｛\n\tlet threeDescription = convertedRank.simpleDescription（）\n｝\n```\n\n> - `if let`表示可选绑定, 安全地解包可选值\n\n#### 解包\n\n1. `if let`解包\n\n```swift\nif let A = B {\n  ...\n}\n```\n\n如果 `B`不是 nil, 就将其赋值给A, 然后执行 `{}`内部的语句.\n\n2. `??`\n\n```swift\nvar score : Int ?  = nil\n\nprint(score ?? default_score)\n// 成绩score不是nil, 就将其打印, 否则输出默认的成绩\n```\n\n对字典进行索引:\n\n```swift\n// scores是一个Int数组\nfor ( major, scores) in all_scores {\n  for score in scores{\n    ...\n  }\n}\n\n// 如果key没有使用, 可以直接忽略\nfor( _, socres) in all_scores{\n  ...\n}\n```\n\nswift支持对字典进行更新或者移除的时候, 返回并使用就值:\n\n```swift\nif let oldValue = scores.updateValue(100, forKey:\"fad\"){\n  print(..)\n}else{\n  ...\n}\n\nif let oldValue = scores.removeValue(forKey: \"fad\"){\n  print(\"fad's old value was \\(oldValue)\")\n}\n```\n\n- `@IBAction`表示组件交互和代码相绑定(允许在交互的时候执行外部定义的函数);\n- `@IBOutlet`表示允许代码的响应改变组件本身的状态(字体、大小等).\n\n<img src=\"swift.assets/image-20250412115454400.png\" alt=\"image-20250412115454400\" style=\"zoom:57%;\" />\n\n### 概念\n\n#### 闭包\n\n闭包指的是可以在特定位置运行的、不需要名称的函数.\n\n```swift\nscene.setOnStartHandler｛ \n// 闭包的主体\n｝\n```\n\n- `toggle()`可以自动切换变量的布尔值.\n\n  ```swift\n  Button(\"Press Me\") {\n      isOn.toggle()\n  }\n  ```\n\n#### 状态属性\n\n- 使用 `@State`在视图之外定义;\n- 当状态属性的值发生改变时, 会自动更新视图中相关的部分.\n- 对于状态对象, 使用 `@StateObject`来声明.\n\n#### 绑定\n\n由 `@Binding`声明将属性连接到其他地方, 允许子视图对属性的修改并同步.\n\n在属性的前面增加 `$`，表明会同步修改可信源.\n\n#### 字符串插值\n\n在较长字符串中使用常量、变量或代码表达式，使它们替换为其当前值以求出字符串的值。\n\n例如，在字符串\"Katy ate a \\（fruit）.\"中，如果fruit 是带有值 \"peach\"的变量，那么在求字符串的值时，\\（fruit）由\"peach\"替换，变为 \"Katy ate a peach.\"。\n\n### 其他\n\n#### 自动的动画效果\n\n当状态属性发生改变时, 我们希望对应控制的视图元素的变化具有动画效果, 那么可以指定: e.g.\n\n```swift\nCircle()\n    .frame(maxHeight: 200)\n    .foregroundColor( isOn ? .purple : .mint \n    .shadow(color:isOn ? .indigo : .orange , radius: 20)\n    .scaleEffect(isOn ? 1: 0.75)\n    .animation( .default, value: isOn)\n```\n\n> 其中的 `value： isOn`表示追踪的状态属性.\n\n在一个视图中创建状态对象,  然后在 `app`中声明为环境变量并在子视图中使用.\n\n# 设计原则\n\nprinciple\n\n- 需要长按进行交互的组件, 在轻触时ICON放大或者缩小\n\n# 官方手册学习记录\n\n## 基础知识\n\n- Swift 使用*字符串插值*将常量或变量的名称作为占位符包含在较长的字符串中，并提示 Swift 将其替换为该常量或变量的当前值。将名称包在括号中，并在左括号前用反斜杠进行转义：\n\n  ```swift\n  print(\"The current value of friendlyWelcome is \\(friendlyWelcome)\")\n  // 打印 \"The current value of friendlyWelcome is Bonjour！\"\n  ```\n- 不必使用 `;`, 但是如果想在一行中编写多个独立语句，则*必须*使用分号：\n\n  ```swift\n  let cat = \"🐱\"; print(cat)\n  // 打印 \"🐱\"\n  ```\n- 整数边界: 使用 min, max进行访问\n\n  ```swift\n  let minValue = UInt8.min  // minValue 等于 0，类型为 UInt8\n  let maxValue = UInt8.max  // maxValue 等于 255，类型为 UInt8\n  ```\n- 类型别名: `typealias`\n\n  ```swift\n  typealias AudioSample = UInt16\n\n  var maxAmplitudeFound = AudioSample.min\n  // maxAmplitudeFound 现在为 0\n\n  ```\n\n### 元组\n\n- 作用: 多个值组合成一个复合值\n\n```swift\nlet http404Error = (404, \"Not Found\")\n// http404Error 的类型为（Int，String），且等于（404，\"Not Found\"）\n```\n\n如果只需要元组的部分值，则在分解元组时使用下划线 (`_`) 忽略不需要的部分\n\n- 分解元组\n\n  ```swift\n  let (statusCode, statusMessage) = http404Error\n  print(\"The status code is \\(statusCode)\")\n  // 打印 \"The status code is 404\"\n  print(\"The status message is \\(statusMessage)\")\n  // 打印 \"The status message is Not Found\"\n  ```\n- 可以在定义元组时为元组中的各个元素命名：\n\n  ```swift\n  let http200Status = (statusCode: 200, description: \"OK\")\n  ```\n\n  然后可以使用元素名访问:\n\n  ```swift\n  print(\"The status code is \\(http200Status.statusCode)\")\n  // 打印 \"The status code is 200\"\n  print(\"The status message is \\(http200Status.description)\")\n  // 打印 \"The status message is OK\"\n  ```\n- 也可以直接使用从零开始的索引来访问, e.g. `http200Status.0`\n\n---\n\n- `<u>`可选`</u>`: 存储这种类型的值或者 `nil`.\n- 提供后备值: `??`\n\n  ```swift\n  let name: String? = nil\n  let greeting = \"Hello, \" + (name ?? \"friend\") + \"!\"\n  print(greeting)\n  // 打印 \"Hello, friend!\"\n  ```\n\n  - 如果 `??` 之前的值不是 `nil`, 就会正常解包, 否则选择后备值;\n  - 使用 `()` 包裹.\n- `<u>`隐式解包可选`</u>`: 安全假定一直都有值时使用\n\n  ```swift\n  let possibleString: String? = \"An optional string.\"\n  let forcedString: String = possibleString! // 需要显式解包\n\n  let assumedString: String! = \"An implicitly unwrapped optional string.\"\n  let implicitString: String = assumedString // 隐式解包\n  ```\n\n---\n\n### 错误处理\n\n函数在声明中包含 `throws` 关键字，表示它可以抛出错误。调用可以抛出错误的函数时，要在表达式前加上 `try` 关键字.\n\nSwift 会自动将错误传播到当前作用域之外，直到它们被 `catch` 子句处理为止。\n\n```swift\ndo {\n    try canThrowAnError()\n    // 无错误的情况\n} catch {\n    // 抛出错误的情况\n}\n```\n\n> 细节部分在后面补充\n\n### 断言和先决条件\n\n#### 使用断言进行调试\n\n```swift\nlet age = -3\nassert(age >= 0, \"A person's age can't be less than zero.\")\n// 该断言失败的原因是 -3 并不 >= 0。\n```\n\n断言的第一个参数是预期的、正确的结果, 如果不满足条件就会显示报错. 但是不会阻止程序继续运行.\n\n#### 强制执行先决条件\n\n当条件有可能为假，但*必须*为真才能继续执行代码时，请使用先决条件.\n\n向该函数传递一个计算结果为 `true` 或 `false` 的表达式，以及一条在条件结果为 `false` 时显示的信息:\n\n```swift\n// 在下标的实现中...\nprecondition(index > 0, \"Index must be greater than zero.\")\n```\n\n---\n\n## 运算符\n\n### 基本运算符\n\n- 与 C 和 Objective-C 中的赋值运算符不同，Swift 中的赋值运算符本身不返回值。以下语句无效：\n\n  ```swift\n  if x = y { // 这是无效的，因为 x = y 不返回值。\n  }\n  ```\n\n  - 可以防止不小心使用赋值运算符（=） 而非等于运算符（==）.\n- 基本的四则运算不允许值的溢出.\n\n> [!NOTE]\n>\n> 在 Swift 中对负数的处理与模运算符有所不同:\n>\n> 为了确定 `a % b` 的答案，`%` 运算符计算以下等式并返回 `余数` 作为输出：\n>\n> ```\n> a` = (`b` x `某个乘数`) + `余数\n> ```\n>\n> 其中 `某个乘数` 是 `b` 在 `a` 中能容纳的最大倍数。\n>\n> ```swift\n> 9 % 4    // 等于 1\n>\n> -9 % 4   // 等于 -1\n> ```\n\n- 数值的正负号可以使用前缀 `-` 切换，称为`<u>`一元负号运算符`</u>`.\n\n  - 中间没有任何空格.\n\n    ```swift\n    let three = 3\n    let minusThree = -three       // minusThree 等于 -3\n    ```\n\n#### 元组的计算\n\n- 前提: 如果两个元组具有相同的类型和相同数量的值，则可以比较它们.\n- 规则:\n  - 元组是从左到右逐个值进行比较的，直到比较发现两个不相等的值为止。\n  - 这两个值将进行比较，并且该比较的结果决定了整个元组比较的结果。\n  - 如果所有元素都相等，那么这两个元组本身就相等。\n\n> [!NOTE]\n>\n> 只有当给定的运算符可以应用于各自元组中的每个值时，元组才能与该运算符进行比较.\n\n```swift\n(\"blue\", false) < (\"purple\", true)  // 错误，因为 < 不能比较布尔值\n```\n\n#### 空合并运算符\n\n`a ?? b`的结果与下面的运算相同:\n\n```swift\na != nil ? a! : b\n```\n\n#### 区间运算\n\n- *闭区间运算符*（`a...b`）定义了一个从 `a` 到 `b` 的范围，包括 `a` 和 `b` 的值。`a` 的值不能大于 `b`;\n\n  - 在需要使用所有值的情况下很有用\n  - e.g.\n\n    ```swift\n    for index in 1...5 {\n        print(\"\\(index) 乘以 5 等于 \\(index * 5)\") \n    }\n    ```\n- *半开区间运算符*（`a..<b`）定义了一个从 `a` 到 `b` 但不包括 `b` 的范围.\n\n  - 对于处理从基数 0 开始的列表（如数组）时特别有用，因为它可以计数到列表长度（但不包括列表长度）.\n  - e.g.\n\n    ```swift\n    let names = [\"Anna\", \"Alex\", \"Brian\", \"Jack\"] \n    let count = names.count\n    for i in 0..<count {\n        print(\"第 \\(i + 1) 个人叫 \\(names[i])\")\n    }\n    ```\n- 闭区间运算符有一种替代形式，用于一直延伸到尽可能远的区间 —— 例如，一个包含从索引 2 到数组末尾所有元素的区间。\n\n  ```swift\n  for name in names[2...] { print(name) }\n  // Brian\n  // Jack\n  ```\n- 半开区间运算符也有一种只写最后一个值的单侧形式\n\n  ```swift\n  for name in names[..<2] { print(name) }\n  // Anna\n  // Alex\n  ```\n\n#### 逻辑运算\n\n> [!NOTE]\n>\n> Swift 逻辑运算符 `&&` 和 `||` 遵循`<u>`从左到右`</u>`的结合顺序，这意味着带有多个逻辑运算符的复合表达式会首先评估最左边的子表达式.\n\n## 控制流\n\n## 协议\n\n- 如果类需要继承, 需要将父类写在所有的协议之前\n- 不能在协议定义中为方法参数指定默认值。\n- 协议也可以要求遵循协议的类型 `<u>`实现指定的构造器`</u>`, 和协议内部的方法一样, 不需要写花括号和构造期的实体\n  - 如果是类, 必须在构造函数的开头加上 `required`修饰符. 这是为了确保所有继承的子类也提供这个构造函数的实现, 从而确保遵守协议;\n  - 但是如果一个类被声明为了 `final`, 也就是无法被继承, 那么就不需要 `required`的声明\n\n### 协议的基本用法\n\n协议可以规定属性类型以及属性被操作的权限, 通常和类、结构体和枚举进行绑定, 作为一种强制的约束.\n\n```swift\nprotocol Tax{\n  var national: Double { get } \n  var individual: Double{ set get}\n}\n```\n\n同样可以在协议中使用 `mutating` 来声明一个改变自身属性的方法:\n\n```swift\nprotocol Tax{\n  var national: Double { get } \n  var individual: Double{ set get}\n  \n  mutating func changeTax(newValue: Double)\n}\n```\n\n- 需要注意的是, 结构体内部的方法如果要修改自身属性, 也需要声明 `mutating`, 但是类则不需要额外的声明.\n\n  ```swift\n  struct Taxas: Tax{\n     var national: Double\n    var individual: Double\n\n    mutating func changeTax(newValue: Double){\n      national = newValue\n    }\n  }\n  ```\n\n### 补充协议\n\n- 使用 `,` 连接不同的协议\n- `extension`可以为协议的函数设置默认方法, 就不需要继续在每一个类、结构体或枚举中重新定义\n\n  - 同样可以补充数据类型\n\n    ```swift\n    extension Int {\n      var abs: Int {\n        get {\n          if self >= 0 {\n            return self\n          }else{\n            return -self\n          }\n        }\n      }\n    }\n\n    print((-3).abs);\n    // 3\n    ```\n\n#### 有条件地遵循协议\n\n让 `Array` 类型只要在存储遵循 `TextRepresentable` 协议的元素时，就遵循 `TextRepresentable` 协议:\n\n```swift\nextension Array: TextRepresentable where Element: TextRepresentable {\n    var textualDescription: String {\n        let itemsAsText = self.map { $0.textualDescription }\n        return \"[\" + itemsAsText.joined(separator: \", \") + \"]\"\n    }\n}\nlet myDice = [d6, d12]\nprint(myDice.textualDescription)\n// 打印 \"[A 6-sided dice, A 12-sided dice]\"\n```\n\n#### 扩展里声明协议遵循\n\n当一个类型已经遵循了某个协议中的所有要求，却还没有声明遵循该协议时，可以通过空的扩展来让它遵循该协议:\n\n```swift\nstruct Hamster {\n    var name: String\n    var textualDescription: String {\n        return \"A hamster named \\(name)\"\n    }\n}\nextension Hamster: TextRepresentable {}\n```\n\n### Error handling\n\n系统提供了 `Error`协议用于错误处理, 主动给予错误的捕捉情况.\n\n使用方法:\n\n1. 定义遵循相关协议的枚举类型, 作为错误的类型;\n2. 定义可能抛出错误的函数;\n3. 使用 `do...catch`块来结构化地处理错误.\n\ne.g.\n\n```swift\n// 定义一个错误类型，遵循 Error 协议\nenum PasswordError: Error {\n    case tooShort\n    case tooWeak\n}\n\n// 一个函数，可能抛出错误\nfunc validate(password: String) throws {\n    if password.count < 6 {\n        throw PasswordError.tooShort\n    }\n    if password == \"123456\" {\n        throw PasswordError.tooWeak\n    }\n}\n\n// 使用 do-catch 捕捉错误\ndo {\n    try validate(password: \"123456\")\n    print(\"密码验证通过 ✅\")\n} catch PasswordError.tooShort {\n    print(\"❌ 密码太短，请至少使用 6 个字符\")\n} catch PasswordError.tooWeak {\n    print(\"❌ 密码太弱，不能使用简单的序列\")\n} catch {\n    print(\"❌ 发生未知错误：\\(error)\")\n}\n\n```\n\n> - throws：在函数声明中标注该函数会抛出错误;\n> - try：在调用可能抛出错误的函数时使用.\n\n### 其他的协议\n\n#### CaseIterable\n\n用于获取枚举的属性个数, 从而进行遍历.\n\n```swift\nenum Status:CaseIterable{\n    case low,middle,high\n  \n  \n    mutating func change(){\n        switch self{\n        case .high:\n            self = .low\n        case .low:\n            self = .middle\n        case .middle:\n            self = .high\n        }\n    }\n  \n    func ptr(){\n        print(\"Current Status is \\(self)\")\n    }\n}\n\nvar status = Status.low\nfor _ in 0..<Status.allCases.count{\n    status.ptr()\n    status.change()\n}\n```\n\n> `for _ in 0..<` 当中的 `_`表示忽略遍历时候的循环变量的值.\n\n## 闭包\n\n#### 闭包的简化推导\n\n相当于匿名函数与 `lambda`.  接下来从普通函数的写法开始简化:\n\n- 普通函数:\n\n  ```swift\n  func changeSign(op: Double) -> Double {\n      return -op\n  }\n\n  var operation: (Double) -> Double\n  operation = changeSign\n\n  let result = operation(4.0) // result = -4.0\n  ```\n- 将函数的定义下移:\n\n  ```swift\n  var operation: (Double) -> Double\n  operation = (op:Double) -> Double { return -op}\n\n  let result  = operation(4.0)\n  ```\n- 将 `｛` 提前，并在原来的位置添加 `in`\n\n  ```swift\n  var operation:(Double) -> Double\n  operation = {(op: Double) -> Double  in return -op}\n  ...\n  ```\n- 系统可以推断类型, 所以根据输入的类型简化返回值的类型定义\n\n  ```swift\n  var operation:(Double) -> Double\n  operation = {(op: Double)   in return -op}\n  ...\n  ```\n- 可以进一步省略传入的类型\n\n  ```swift\n  var operation:(Double) -> Double\n  operation = { (op) in return -op}\n  ...\n  ```\n- 省略返回的标记 `return`:\n\n  ```swift\n  var operation:(Double) -> Double\n  operation = { (op) in  -op}\n  ...\n  ```\n\n最后, 我们可以直接用 `$0`等替代传入的参数, 也就是省略了参数的名称!\n\n```swift\nvar operation:(Double) -> Double\noperation = { -$0 }\n...\n```\n\n#### 闭包的常见使用\n\ne.g.\n\n![image-20250412170605776](swift.assets/image-20250412170605776.png)\n\n#### Trailing Closure\n\n当闭包是函数的**最后一个参数**时，\n\n```swift\nlet result = applyTwice(3, operation: { $0 * 2 })\n```\n\n可以改写成:\n\n```swift\nlet result = applyTwice(3) { $0 * 2 } // result = 12\n```\n\n# 慕课学习杂记\n\n#### something\n\n- 去官网学习新出现的技术\n\n  - codeML\n- 函数也可以赋值给变量\n\n#### 省略外部参数名\n\n- 外部参数名: 在函数调用的时候使用, 提高可读性;\n- 内部参数名: 在函数体的内部使用\n\n如果如此定义:\n\n```swift\nfunc greet(person name: String){\n  print(\"Hello , \\(name)\")\n}\n```\n\n那么在调用的时候必须显示声明外部参数名:\n\n```swift\ngreet( person: \"Alice\")\n```\n\n如果我们希望省略外部参数名, 就可以在定义函数的时候用 `_`来代替:\n\n```swift\nfunc greet(_ name: String){\n  ...\n}\n```\n\n#### 高阶函数\n\n我们可以让函数作为另一个函数的输入参数:\n\n```swift\nfunc addTwoInts( _ a: Int, _ b: Int) -> Int{\n  return a+b\n}\n\nvar mathFunction = addTwoInts\n\n// 高阶函数\nfunc printMathResults（_ mathFunction: (Int, Int）-> Int, _ a: Int, _ b: Int){\n  var result = mathFunction(a,b)\n  print(result)\n}\n\n// 调用\nprintMathResults（addTwoInts， 3,5）\n\n```\n\n> 注意函数作为参数的时候, 类型的定义就是输入类型和返回类型, 也是用 `,` 来分隔不同的参数.\n\n---\n\n#### 内置的库\n\n`AVFoudation`: 音频播放\n\n---\n\n- 枚举内部也可以设置方法;\n- 结构体本身不需要构造函数(因为swift存在对于结构体的默认构造) , 但是如果结构体内部的属性存在这样的属性:\n\n  - 它可能是枚举内部的方法, 跟枚举的属性有关, 可能使用了 `switch`来根据枚举属性赋值.\n\n  ```swift\n  enum Type{\n    case Cike\n    case ...\n\n    func blood()-> Double{\n      switch self{\n        case .Cike: return 10\n        case .Fashi: return ...\n        ...\n      }\n    }\n\n  }\n\n  struct Card {\n    var country: Country\n    vat type: Type\n    var blood: Double\n\n    init (country: Country, type: Type){\n      self.country = country\n      self.type = type;\n      blood = type.blood\n    }\n  }\n  ```\n- 结构体和枚举属于 `<u>`值类型`</u>`, 如果赋值的时候进行拷贝操作;\n\n  - 如果结构体声明为 `let`, 即使属性是变量, 那么也无法修改内部的属性,\n- 类是引用类型, 赋值的时候使得左值指向了同样的内存区域, 也就是信息保持一致, 更改同步\n\n  - 如果我们将类声明为常量, 相当于cpp的指针常量, 也就是说类内部的属性可以更改, 但是无法修改这个量指向的内存区域.\n\n#### 计算属性\n\n访问的时候动态计算得到.\n\n下面通过一个矩形的例子来说明:\n\n```swift\nstruct Point {\n  var x = 0.0\n  var y = 0.0\n}\n\nstruct Size{\n  var width = 0.0\n  var height = 0.0\n}\n\nstruct Rect{\n  var origin = Point()\n  var size = Size()\n  var center: Point{\n    get{\n      let centerX = origin.x + (size.width / 2)\n      let centerY = orgin.y + (size.height /2 )\n      return Point(x: centerX, y: centerY)\n    }\n    set(newCenter){\n      origin.x = newCenter.x - (size.width / 2)\n      origin.y = newCenter.y - (size.height / 2)\n    }\n  }\n}\n```\n\n上述完成了结构体的计算属性的定义, 其中 `get`部分也可以优化为:\n\n```swift\nget{\n\tPoint(x: origin.x + (size.width / 2),\n        y: orgin.y + (size.height /2 ) )\n}\n```\n\n> 这是因为, 如果 `get` 部分只存在一个表达式,  就会自动将其返回, 不需要显式声明 `return`关键字.\n\n然后可以如此应用:\n\n```swift\nvar currCenter = rectElement.center\n\nrectElement.center = Point(x:20, y:50)\n```\n\n`set`提供了语法糖, 也就是可以直接访问oldValue 和  newValue, 因此我们可以如此改写:\n\n```swift\nset{\n  origin.x = newValue.x - (size.width / 2)\n  origin.y = newValue.y - (size.height / 2)\n}\n```\n\n> [!NOTE]\n>\n> 对于只读的计算属性, 由于不存在 `set`, 我们可以直接在花括号内定义返回内容.\n\n---\n\n- 声明 `static` , 表示这个属性或者方法属于整个类型而非某个实例. 此时相应的, 我们使用 `<tyepName>.<strtic attribute>`的方式来访问.\n- 子面量本身是不可修改的, 下面的拓展中, 如果写作  `var someInt = 3.square()`就会报错\n\n```swift\nextension Int{\n    mutating func square(){\n        self = self * self\n    }\n}\n\nvar someInt = 3\nsomeInt.square()\n```\n\n---\n\n控制器存在5种状态:\n\n- 未加载\n- 将要出现\n- 出现\n- 将要消失\n- 已经消失\n\nAPP的状态:\n\n<img src=\"swift.assets/image-20250413182851979.png\" alt=\"image-20250413182851979\" style=\"zoom:33%;\" />\n\n`UiSceneDelegate`用于响应基于 `scene` 的生命周期事件.\n\n可以使用属性的 `didset`来便捷地检测变化并快速修改:\n\n```swift\nvar score = 0{\n  didSet{\n    self.gameScoreLabel.text = \"Score: \\(score)\"\n  }\n}\n```\n\n- `viewController`是新的页面;\n- `view`是视图, 可以叠加在页面上.\n- `UIAlertController`组件相当于警示的弹窗组件\n\n### 作图和绘画\n\n#### CG\n\n- `CGFloat`用于二维坐标系中的坐标数据:\n\n  - `let coor_x = CGFloat(10.5)`\n- `CGPoint(x: .. , y:...)`\n- `CGSize` 包含width和height属性的结构体;\n- `CGRect`包含点和尺寸的矩形\n\n  ```swift\n  struct CGRect{\n    var origin: CGPoint\n    var size: CGSize\n  }\n  ```\n\n  - 其他属性\n  - e.g.\n\n    ```swift\n    var minX: CGPoint\n    var midY: CGPoint\n    intersects(CGRect) -> Bool // 判断是否存在交集\n    contains(CGPoint) -> Bool // 是否包含点.\n    ```\n\n最小单元是 `Point`而非像素点.\n\nbound表示视图内部允许绘制的区域:\n\n```swift\nvar bounds: CGRect // 也就是一个矩形\n```\n\nframe\t视图在父视图中的位置:\n\n```swift\nvar frame: CGRect\n```\n\n#### 自定义视图\n\n绘制自定义视图通常通过创建一个自定义的 UIView 子类，并重写 draw(_:) 方法来实现.\n\nplayGround中的实例:\n\n```swift\nimport UIKit\nimport PlaygroundSupport\n\nclass CustomView: UIView {\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        self.backgroundColor = .white // 设置背景颜色\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    override func draw(_ rect: CGRect) {\n        guard let context = UIGraphicsGetCurrentContext() else { return }\n\n        // 绘制一个圆形\n        context.setFillColor(UIColor.blue.cgColor) // 设置填充颜色\n        context.fillEllipse(in: rect) // 绘制填充的圆\n\n        // 绘制一个矩形\n        context.setStrokeColor(UIColor.black.withAlphaComponent(0.6).cgColor) // 设置能见度\n        context.setLineWidth(5)\n        context.stroke(rect.insetBy(dx: 10, dy: 10)) // 绘制矩形边框，留出间距\n    }\n}\n\n// 创建自定义视图实例\nlet customView = CustomView(frame: CGRect(x: 0, y: 0, width: 200, height: 200))\n\n// 显示在 Playground 的 live view\nPlaygroundPage.current.liveView = customView\n\n```\n\n- `touchesBegan`--WWDC\n- `SCNVector3`是三维向量\n- `DispathchQueue`表示创建一个异步的进程\n\n### 传感器\n\n- 加速度的方向伴随手机的头部旋转保持不变;\n  - 以 `g` 为描述单位;\n  - 面向使用者的方向是 `z` 轴.\n- 陀螺仪\n  - 记录对应用三个轴\n  - roll, pitch, yaw\n\n### 动画\n\n## 结绳记事\n\n- [操作演示](https://www.icourse163.org/learn/ZJU-1450024180?tid=1474143513#/learn/content?type=detail&id=1262245274&cid=1299836384&contentid=1217938866).\n- 按住 `ctrl`将视图中的组件拖放到代码中.\n- 右下角的几个功能:\n\n  - 约束;\n  - 选择视图\n- `ctrl + option + cmd + enter` 快速显示代码区域\n- [组件使用](https://www.icourse163.org/learn/ZJU-1450024180?tid=1474143513#/learn/content?type=detail&id=1262245274&cid=1299836386&contentid=1217092922)\n\n  - 50:00 左右介绍了两种类型和交互\n- 按住 `optional`然后 hover 在类上, 可以显示对应的基础操作.\n- 可选值的本质是枚举类型!\n\n  ```swift\n  enum Optional<T>{\n    case none\n    case some(<T>)\n  }\n  ```\n- [画图和动画](https://www.icourse163.org/learn/ZJU-1450024180?tid=1474143513#/learn/content?type=detail&id=1262245305&sm=1)\n- [coreML](https://www.icourse163.org/learn/ZJU-1450024180?tid=1474143513#/learn/content?type=detail&id=1262245309&sm=1)\n- 在项目中显示Md格式:\n\n  ```swift\n  /*:\n  ...\n  */\n  ```\n- 选择在运行时隐藏实际存在的代码:\n\n  ```swift\n  //#-hidden-code\n  import PlaygroundSupport\n  ...\n  //#-end-hidden-code\n\n  ```\n\n# Swift UI\n\n- [慕课的链接](https://www.icourse163.org/learn/ZJU-1450024180?tid=1474143513#/learn/content?type=detail&id=1262245315&cid=1299836440&contentid=1218091551)\n- [by now](https://www.hackingwithswift.com/100/swiftui/16)\n- SixD: 开箱即用的UI设计等.\n- [术语表](https://www.hackingwithswift.com/glossary)\n\n## AR\n\n- [helpful links](https://www.createwithswift.com/creating-an-augmented-reality-app-in-swiftui-using-realitykit-and-arkit/)\n- [官方文档](https://developer.apple.com/documentation/realitykit/?ref=createwithswift.com)\n\n## 动画\n\n#### 缩放变换\n\n```swift\nNavigationLink{\n  BraceletEditor(bracelet)\n  .navigationTransitionStyle(\n  .zoom(\n  \tsourceID:bracelet.id,\n  \tin:braceletList\n  \t)\n  )\n}label:{\n  BraceletPreview(bracelet)\n}\n.matchedTansitionSource(\n\tid:bracelet.id,\n  in:braceletList\n)\n```\n\n## Symbol 6\n\n### 动画\n\n- 使用 `晃动` 在复杂的UI中提示可交互性.\n- `旋转`动画来表示正在进行的进程\n\n## 基本语法\n\n#### 磨砂效果\n\n```swift\nVStack {\n}\n.frame(width: 200, height: 200)\n.background(.ultraThinMaterial, in: RoundedRectangle(cornerRadius: 20, style: .continuous))\n```\n\n#### 搜索栏\n\n- 状态管理:\n\n  ```swift\n  // 存储搜索文本\n  @State private var searchText = \"\"\n\n  // 可选：跟踪搜索是否处于活动状态\n  @State private var isSearching = false\n  ```\n- 数据过滤模式\n\n  ```swift\n  // 基本过滤计算属性模板\n  var filteredItems: [ItemType] {\n      if searchText.isEmpty {\n          return originalItems\n      } else {\n          return originalItems.filter { item in\n              // 根据需要自定义过滤条件\n              item.name.localizedCaseInsensitiveContains(searchText) ||\n              item.description.localizedCaseInsensitiveContains(searchText)\n          }\n      }\n  }\n\n  // 处理嵌套数据结构的过滤模板\n  var filteredNestedItems: [ParentType] {\n      if searchText.isEmpty {\n          return originalParentItems\n      } else {\n          return originalParentItems.compactMap { parent in\n              let matchedChildren = parent.children.filter { child in\n                  child.name.localizedCaseInsensitiveContains(searchText)\n              }\n\n              if matchedChildren.isEmpty {\n                  return nil\n              } else {\n                  // 创建包含匹配子项的新父项\n                  return ParentType(id: parent.id, name: parent.name, children: matchedChildren)\n              }\n          }\n      }\n  }\n  ```\n- 搜索UI中的实现:\n\n  ```swift\n  NavigationStack {\n      List {\n          // 使用过滤后的数据源\n          ForEach(filteredItems) { item in\n              // 列表项视图\n          }\n      }\n      .navigationTitle(\"标题\")\n      .searchable(text: $searchText, prompt: \"搜索提示文字\")\n      // 可选：添加搜索建议\n      .searchSuggestions {\n          ForEach(suggestions, id: \\.self) { suggestion in\n              Text(suggestion).searchCompletion(suggestion)\n          }\n      }\n  }\n  ```\n\n#### 左右适应的外边距\n\n通过 `HStack`与  `space`实现卡片的自适应扩展, 同时利用 `.frame(maxwidth:...)`来设置一个最大的卡片宽度\n\n```swift\nHStack{\n    Spacer(minLength: 10)\n  \n    Text(item.description)\n        .padding()\n        .background(Color(.systemGray6))\n        .overlay(\n            RoundedRectangle(cornerRadius: 10) // 10为圆角半径，可调整\n                .stroke(Color.gray, lineWidth: 1) // 边框颜色和宽度\n        )\n        .clipShape(RoundedRectangle(cornerRadius: 10))\n    // 保证背景和边框都圆角\n    .frame(maxWidth: 400) // 最大宽度限制\n\n    Spacer(minLength: 10)\n}\n```\n\n`Spacer(minLength: 10)` 表示**保证自己不会小于 minLength**.\n\n上述的 `Spacer`会压缩卡片的内容, 如果希望直接设置卡片在父容器中的左右外边距, 应该在卡片的内部使用 `padding`:\n\n```swift\nText(item.description)\n    .padding(.horizontal, 24) // 卡片内容内边距\n    .padding(.vertical, 12)\n    .background(Color(.systemGray6))\n    .overlay(\n        RoundedRectangle(cornerRadius: 10)\n            .stroke(Color.gray, lineWidth: 2)\n    )\n    .clipShape(RoundedRectangle(cornerRadius: 10))\n    .padding(.horizontal, 20) // 整个卡片距离父视图左右20pt\n```\n\n#### 全局统一样式\n\n```swift\n@main\nstruct MyApp: App {\n    var body: some Scene {\n        WindowGroup {\n            ContentView()\n                .buttonStyle(ShadowButtonStyle(radius: 10))\n        }\n    }\n}\n```\n\n#### 参数标签和参数名\n\n- 参数标签用于函数调用时;\n- 参数名用于函数内部的参数名称.\n\ne.g.:\n\n```swift\nfunc greet(person atName: String) {\n    print(\"Hello, \\(atName)!\")\n}\ngreet(person: \"Alice\") // 输出：Hello, Alice!\n```\n\n也可以使用 `_`来省略调用时的参数标签:\n\n```swift\nfunc greet(_ name: String) {\n    print(\"Hello, \\(name)!\")\n}\ngreet(\"Alice\") // 输出：Hello, Alice!\n```\n\n#### Alert\n\nswift UI中的弹窗提示同样通过本地的 `@State`变量来实现:\n\n```swift\n@State private var showingPaymentAlert = false\n...\n.alert(\"Order confirmed\", isPresented: $showingPaymentAlert) {\n    // add buttons here\n} message: {\n    Text(\"Your total was \\(totalPrice) – thank you!\")\n}\n```\n\n设置按钮来改变可见的状态:\n\n```swift\nButton(\"Confirm order\") {\n    showingPaymentAlert.toggle()\n}\n```\n\n#### 自定义绑定\n\n我们也可以使用 `Binding` 类型手动创建绑定，该类型可以提供自定义 `get` 和 `set` 闭包，以便在读取或写入值时运行。\n\n#### Foreach\n\n```swift\nForEach(item.restrictions) { restriction in\n    Text(restriction)\n}\n```\n\n此时, 要求 `item.restrictions` 具有可唯一标识的 `id` 字段.\n\n- 如果内容本身就是唯一标识, 比如说遍历的内容是字符串数组, 那么可以如此声明:\n\n  ```swift\n  ForEach(item.restrictions, id: \\.self) { restriction in\n      Text(restriction)\n  }\n  ```\n\n#### Spacer()\n\n用于填充剩余的空间\n\n- 使用 `offset(x:.., y:...)`来调节位置, 左上角是原点.\n\n#### 环境变量\n\n- 作用: 用于存储独立于视图的、长期存在的数据;\n- e.g.\n\n  ```swift\n  // App.swift\n  @StateObject var order = Order()\n  ```\n- `@StateObject` 属性包装器负责在`<u>`应用程序的整个生命周期中`</u>`保持对象处于活动状态。\n- 需要在创建视图结构体的时候传递:\n\n  ```swift\n  WindowGroup {\n      ContentView()\n          .environmentObject(order)\n  }\n  ```\n- 为了让swift知道什么时候更新视图, 常用的是声明 `@Published`属性包装器——足以让它更新任何正在监视更改的 SwiftUI 视图.\n- 同时声明对应的对象遵循可观测协议: **ObservableObject**.\n\n我们可以使用 `@EnvironmentObject`来访问环境中的共享数据, 也就是传递上一步已经在父视图中创建和管理的对象.\n\ne.g.\n\n```swift\nclass UserData: ObservableObject {\n    @Published var name: String = \"John\"\n}\n\nstruct ContentView: View {\n    @StateObject private var userData = UserData()\n\n    var body: some View {\n        ChildView().environmentObject(userData)\n    }\n}\n\nstruct ChildView: View {\n    @EnvironmentObject var userData: UserData\n\n    var body: some View {\n        Text(userData.name)\n    }\n}\n```\n\n使用 `@State`来声明简单的本地值——比如整数和字符串.\n\n- 建议将其声明为 `private`, e.g.\n\n  ```swift\n  @State private var paymentType = \"Cash\"\n  ```\n\n#### 菜单视图\n\n为了将菜单视图存放在一个选项卡当中, 我们需要新建一个视图, 用来作为容器:\n\n```swift\nstruct MainView: View {\n    var body: some View {\n        TabView {\n            ContentView()\n                .tabItem {\n                    Label(\"Menu\", systemImage: \"list.dash\")\n                }\n\n            OrderView()\n                .tabItem {\n                    Label(\"Order\", systemImage: \"square.and.pencil\")\n                }\n        }\n    }\n}\n```\n\n> 页面级别的切换.\n\n使用枚举与子页面的内容分区:\n\n```swift\nimport SwiftUI\n\nstruct ContentView: View {\n    enum Section {\n        case cats\n        case dogs\n    }\n\n    @State private var selectedTab = Section.cats\n\n    var body: some View {\n        TabView(selection: $selectedTab) {\n            Tab(\"Cats\", systemImage: \"cat\", value: .cats) {\n                Button(\"Go to Dogs\") {\n                    selectedTab = .dogs\n                }\n            }\n          \n            Tab(\"Dogs\", systemImage: \"dog\", value: .dogs) {\n                Button(\"Go to Cats\") {\n                    selectedTab = .cats\n                }\n            }\n        }\n    }\n}\n```\n\n## 合适的修饰符\n\n- 图像自动调节尺寸:\n\n  ```swift\n  Image(item.mainImage)\n      .resizable()\n      .scaledToFit()\n  ```\n\n#### 设置阴影\n\n```swift\n.shadow(color: .black.opacity(0.2), \n        radius: 15, x: 0, y: 10)\n```\n\n#### 为按钮设置动画\n\n```swift\nstruct ContentView: View {\n    @State private var showingWelcome = false\n\n    var body: some View {\n        VStack {\n            Toggle(\"Toggle label\", isOn: $showingWelcome.animation())\n\n            if showingWelcome {\n                Text(\"Hello World\")\n            }\n        }\n    }\n}\n```\n\n可以进一步设置, 比如弹簧的渐入渐出:\n\n```swift\nToggle(\"Toggle label\", isOn: $showingWelcome.animation(.spring()))\n```\n\n## 基本操作\n\n#### 快捷键\n\n- `ctrl`按住后点击  `VStack`可以快速地将其添加到 `ZStack`当中\n  - 颜色的设置需要通过 `ZStack`来实现.\n- `option`可以显示当前类的介绍\n- \n\n**推荐资源：**\n\n- **Raywenderlich 的 SwiftUI 教程：** [Raywenderlich - SwiftUI Apprentice](https://www.raywenderlich.com/books/swiftui-apprentice)\n- **Big Mountain Studio 的免费电子书：** [SwiftUI Views Quick Start](https://www.bigmountainstudio.com/free-swiftui-book)\n","source":"_posts/编程语言/swift.md","raw":"---\ntitle: Swift学习摘记\ndate: 2025-04-17 20:21:21\ntags:\n- swift\n- 编程语言\ncategories: \n- 学习笔记\nexcerpt: 学习swift中的基本语法和Swift-UI等框架知识.\nthumbnail: https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250509094625386.png?imageSlim\n---\n# 初见\n\n默认情况下，函数使用它们的参数名称作为它们参数的标签，在参数名称前可以自定义参数标签，或者使用 `_` 表示不使用参数标签:\n\n```swift\nfunc greet(_ person: String, on day: String) -> String {\n    return \"Hello \\(person), today is \\(day).\"\n}\ngreet(\"John\", on: \"Wednesday\")\n```\n\n> 参数标签指的是调用时候的名称, 参数名指的是函数内部.\n\n函数是第一等类型，这意味着函数可以作为另一个函数的返回值。\n\n```swift\nfunc makeIncrementer() -> ((Int) -> Int) {\n    func addOne(number: Int) -> Int {\n        return 1 + number\n    }\n    return addOne\n}\nvar increment = makeIncrementer()\nincrement(7)\n```\n\n函数也可以作为另一个函数的输入参数:\n\n```swift\nfunc hasAnyMatches(list: [Int], condition: (Int) -> Bool) -> Bool {\n    for item in list {\n        if condition(item) {\n            return true\n        }\n    }\n    return false\n}\nfunc lessThanTen(number: Int) -> Bool {\n    return number < 10\n}\nvar numbers = [20, 19, 7, 12]\nhasAnyMatches(list: numbers, condition: lessThanTen)\n```\n\n可以通过参数位置而不是参数名字来引用参数——这个方法在非常短的闭包中非常有用。\n\n```swift\nlet sortedNumbers = numbers.sorted { $0 > $1 }\nprint(sortedNumbers)\n```\n\n`actor`与 `class`类似, 但是可以序列化访问, 保护共享、可变的数据.\n\n### 对象和类\n\n#### 构造与析构\n\n使用 `self.`替代 `this->`, 使用  `init` 和  `deinit`分别声明构造和析构函数:\n\n```swift\nclass NamedShape {\n    var numberOfSides: Int = 0\n    var name: String\n\n    init(name: String) {\n        self.name = name\n    }\n\n    func simpleDescription() -> String {\n        return \"A shape with \\(numberOfSides) sides.\"\n    }\n}\n```\n\n子类如果要重写父类的方法的话，需要用 `override` 标记:\n\n```swift\nclass Square: NamedShape {\n    var sideLength: Double\n\n    init(sideLength: Double, name: String) {\n        self.sideLength = sideLength\n        super.init(name: name)\n        numberOfSides = 4\n    }\n\n    func area() ->  Double {\n        return sideLength * sideLength\n    }\n\n    override func simpleDescription() -> String {\n        return \"A square with sides of length \\(sideLength).\"\n    }\n}\nlet test = Square(sideLength: 5.2, name: \"my test square\")\ntest.area()\ntest.simpleDescription()\n```\n\n> - 使用 `:className`的方法声明父类.\n> - `super.init` 是用来调用父类（超类）的初始化方法的。当创建一个子类的实例时，子类可能需要初始化一些自己的属性，同时还需要确保父类的属性也被正确初始化。这时就需要使用 `super.init` 来调用父类的初始化方法，完成父类的初始化过程\n> - 严格的顺序要求: 子类必须先初始化自己的属性，然后调用 `super.init`，最后才能访问或修改继承来的属性。\n\n### 计算属性\n\n#### 普通的计算属性\n\n在属性内部使用 `{}`并加上 `return`, 可以让访问这个属性的时候, 返回值由结构体的其他属性计算得到.\n\n```swift\nstruct Temperature {\n  var celsius: Double\n  var fahrenheit: Double{\n    return celsius *1.8 + 32\n  }\n  \n  init(celsius: Double){\n    self.celsius = celsius\n  }\n}\n```\n\n> 1. 此时实例化一个结构体就只需要给出一个属性的值.\n> 2. `self`在上述的Swift代码中是不可或缺的, 因为形参和内部属性的名称相同.\n\n#### 使用 getter 和 setter 的计算属性:\n\n```swift\nclass EquilateralTriangle: NamedShape {\n    var sideLength: Double = 0.0\n\n    init(sideLength: Double, name: String) {\n        self.sideLength = sideLength\n        super.init(name: name)\n        numberOfSides = 3\n    }\n\n    var perimeter: Double {\n      // 根据存储属性进行计算\n        get {\n            return 3.0 * sideLength\n        }\n      // 设置属性\n        set {\n            sideLength = newValue / 3.0\n        }\n    }\n\n    override func simpleDescription() -> String {\n        return \"An equilateral triangle with sides of length \\(sideLength).\"\n    }\n}\nvar triangle = EquilateralTriangle(sideLength: 3.1, name: \"a triangle\")\nprint(triangle.perimeter)\ntriangle.perimeter = 9.9\nprint(triangle.sideLength)\n```\n\n计算属性同样是一个属性, 但是根据调用方式的不同, 有返回和设置两种方式.\n\n```swift\ntriangle.perimeter = 9.9\nprint(triangle.perimeter)\n```\n\n### Mutating\n\n默认情况下, 结构体中的方法不能直接修改结构体的属性. 需要显式声明为 `mutating`:\n\n```swift\nstruct User{\n  let username:String\n  var isVisible:Bool = true\n  var friends: [string] = []\n  \n  mutating func addFriend(username: String){\n    friends.append(username)\n  }\n}\n```\n\n### 属性监视器\n\n使用 `willSet` 和 `didSet`。写入的代码会在属性值发生改变时调用，但不包含构造器中发生值改变的情况:\n\n- 分别可以使用 `newValue`与 `oldValue`来表示属性将要改变的值以及改变之前的值.\n\ne.g. 确保三角形的边长总是和正方形的边长相同。\n\n```swift\nclass TriangleAndSquare {\n    var triangle: EquilateralTriangle {\n        willSet {\n            square.sideLength = newValue.sideLength\n        }\n    }\n    var square: Square {\n        willSet {\n            triangle.sideLength = newValue.sideLength\n        }\n    }\n    init(size: Double, name: String) {\n        square = Square(sideLength: size, name: name)\n        triangle = EquilateralTriangle(sideLength: size, name: name)\n    }\n}\nvar triangleAndSquare = TriangleAndSquare(size: 10, name: \"another test shape\")\nprint(triangleAndSquare.square.sideLength)\nprint(triangleAndSquare.triangle.sideLength)\ntriangleAndSquare.square = Square(sideLength: 50, name: \"larger square\")\nprint(triangleAndSquare.triangle.sideLength)\n```\n\n### 枚举\n\n```swift\nenum Rank: Int {\n    case ace = 1\n    case two, three, four, five, six, seven, eight, nine, ten\n    case jack, queen, king\n    func simpleDescription() -> String {\n        switch self {\n        case .ace:\n            return \"ace\"\n        case .jack:\n            return \"jack\"\n        case .queen:\n            return \"queen\"\n        case .king:\n            return \"king\"\n        default:\n            return String(self.rawValue)\n        }\n    }\n}\nlet ace = Rank.ace\nlet aceRawValue = ace.rawValue\n```\n\n- 如果没有设置第一个成员的初始值, 默认从 `0` 开始;\n- 缺省值按照递增处理;\n- `case`之外可以设置方法.\n\n使用 `init?(rawValue:)` 初始化构造器来从原始值创建一个枚举实例:\n\n```swift\nif let convertedRank = Rank（rawValue:3）｛\n\tlet threeDescription = convertedRank.simpleDescription（）\n｝\n```\n\n> - `if let`表示可选绑定, 安全地解包可选值\n\n#### 解包\n\n1. `if let`解包\n\n```swift\nif let A = B {\n  ...\n}\n```\n\n如果 `B`不是 nil, 就将其赋值给A, 然后执行 `{}`内部的语句.\n\n2. `??`\n\n```swift\nvar score : Int ?  = nil\n\nprint(score ?? default_score)\n// 成绩score不是nil, 就将其打印, 否则输出默认的成绩\n```\n\n对字典进行索引:\n\n```swift\n// scores是一个Int数组\nfor ( major, scores) in all_scores {\n  for score in scores{\n    ...\n  }\n}\n\n// 如果key没有使用, 可以直接忽略\nfor( _, socres) in all_scores{\n  ...\n}\n```\n\nswift支持对字典进行更新或者移除的时候, 返回并使用就值:\n\n```swift\nif let oldValue = scores.updateValue(100, forKey:\"fad\"){\n  print(..)\n}else{\n  ...\n}\n\nif let oldValue = scores.removeValue(forKey: \"fad\"){\n  print(\"fad's old value was \\(oldValue)\")\n}\n```\n\n- `@IBAction`表示组件交互和代码相绑定(允许在交互的时候执行外部定义的函数);\n- `@IBOutlet`表示允许代码的响应改变组件本身的状态(字体、大小等).\n\n<img src=\"swift.assets/image-20250412115454400.png\" alt=\"image-20250412115454400\" style=\"zoom:57%;\" />\n\n### 概念\n\n#### 闭包\n\n闭包指的是可以在特定位置运行的、不需要名称的函数.\n\n```swift\nscene.setOnStartHandler｛ \n// 闭包的主体\n｝\n```\n\n- `toggle()`可以自动切换变量的布尔值.\n\n  ```swift\n  Button(\"Press Me\") {\n      isOn.toggle()\n  }\n  ```\n\n#### 状态属性\n\n- 使用 `@State`在视图之外定义;\n- 当状态属性的值发生改变时, 会自动更新视图中相关的部分.\n- 对于状态对象, 使用 `@StateObject`来声明.\n\n#### 绑定\n\n由 `@Binding`声明将属性连接到其他地方, 允许子视图对属性的修改并同步.\n\n在属性的前面增加 `$`，表明会同步修改可信源.\n\n#### 字符串插值\n\n在较长字符串中使用常量、变量或代码表达式，使它们替换为其当前值以求出字符串的值。\n\n例如，在字符串\"Katy ate a \\（fruit）.\"中，如果fruit 是带有值 \"peach\"的变量，那么在求字符串的值时，\\（fruit）由\"peach\"替换，变为 \"Katy ate a peach.\"。\n\n### 其他\n\n#### 自动的动画效果\n\n当状态属性发生改变时, 我们希望对应控制的视图元素的变化具有动画效果, 那么可以指定: e.g.\n\n```swift\nCircle()\n    .frame(maxHeight: 200)\n    .foregroundColor( isOn ? .purple : .mint \n    .shadow(color:isOn ? .indigo : .orange , radius: 20)\n    .scaleEffect(isOn ? 1: 0.75)\n    .animation( .default, value: isOn)\n```\n\n> 其中的 `value： isOn`表示追踪的状态属性.\n\n在一个视图中创建状态对象,  然后在 `app`中声明为环境变量并在子视图中使用.\n\n# 设计原则\n\nprinciple\n\n- 需要长按进行交互的组件, 在轻触时ICON放大或者缩小\n\n# 官方手册学习记录\n\n## 基础知识\n\n- Swift 使用*字符串插值*将常量或变量的名称作为占位符包含在较长的字符串中，并提示 Swift 将其替换为该常量或变量的当前值。将名称包在括号中，并在左括号前用反斜杠进行转义：\n\n  ```swift\n  print(\"The current value of friendlyWelcome is \\(friendlyWelcome)\")\n  // 打印 \"The current value of friendlyWelcome is Bonjour！\"\n  ```\n- 不必使用 `;`, 但是如果想在一行中编写多个独立语句，则*必须*使用分号：\n\n  ```swift\n  let cat = \"🐱\"; print(cat)\n  // 打印 \"🐱\"\n  ```\n- 整数边界: 使用 min, max进行访问\n\n  ```swift\n  let minValue = UInt8.min  // minValue 等于 0，类型为 UInt8\n  let maxValue = UInt8.max  // maxValue 等于 255，类型为 UInt8\n  ```\n- 类型别名: `typealias`\n\n  ```swift\n  typealias AudioSample = UInt16\n\n  var maxAmplitudeFound = AudioSample.min\n  // maxAmplitudeFound 现在为 0\n\n  ```\n\n### 元组\n\n- 作用: 多个值组合成一个复合值\n\n```swift\nlet http404Error = (404, \"Not Found\")\n// http404Error 的类型为（Int，String），且等于（404，\"Not Found\"）\n```\n\n如果只需要元组的部分值，则在分解元组时使用下划线 (`_`) 忽略不需要的部分\n\n- 分解元组\n\n  ```swift\n  let (statusCode, statusMessage) = http404Error\n  print(\"The status code is \\(statusCode)\")\n  // 打印 \"The status code is 404\"\n  print(\"The status message is \\(statusMessage)\")\n  // 打印 \"The status message is Not Found\"\n  ```\n- 可以在定义元组时为元组中的各个元素命名：\n\n  ```swift\n  let http200Status = (statusCode: 200, description: \"OK\")\n  ```\n\n  然后可以使用元素名访问:\n\n  ```swift\n  print(\"The status code is \\(http200Status.statusCode)\")\n  // 打印 \"The status code is 200\"\n  print(\"The status message is \\(http200Status.description)\")\n  // 打印 \"The status message is OK\"\n  ```\n- 也可以直接使用从零开始的索引来访问, e.g. `http200Status.0`\n\n---\n\n- `<u>`可选`</u>`: 存储这种类型的值或者 `nil`.\n- 提供后备值: `??`\n\n  ```swift\n  let name: String? = nil\n  let greeting = \"Hello, \" + (name ?? \"friend\") + \"!\"\n  print(greeting)\n  // 打印 \"Hello, friend!\"\n  ```\n\n  - 如果 `??` 之前的值不是 `nil`, 就会正常解包, 否则选择后备值;\n  - 使用 `()` 包裹.\n- `<u>`隐式解包可选`</u>`: 安全假定一直都有值时使用\n\n  ```swift\n  let possibleString: String? = \"An optional string.\"\n  let forcedString: String = possibleString! // 需要显式解包\n\n  let assumedString: String! = \"An implicitly unwrapped optional string.\"\n  let implicitString: String = assumedString // 隐式解包\n  ```\n\n---\n\n### 错误处理\n\n函数在声明中包含 `throws` 关键字，表示它可以抛出错误。调用可以抛出错误的函数时，要在表达式前加上 `try` 关键字.\n\nSwift 会自动将错误传播到当前作用域之外，直到它们被 `catch` 子句处理为止。\n\n```swift\ndo {\n    try canThrowAnError()\n    // 无错误的情况\n} catch {\n    // 抛出错误的情况\n}\n```\n\n> 细节部分在后面补充\n\n### 断言和先决条件\n\n#### 使用断言进行调试\n\n```swift\nlet age = -3\nassert(age >= 0, \"A person's age can't be less than zero.\")\n// 该断言失败的原因是 -3 并不 >= 0。\n```\n\n断言的第一个参数是预期的、正确的结果, 如果不满足条件就会显示报错. 但是不会阻止程序继续运行.\n\n#### 强制执行先决条件\n\n当条件有可能为假，但*必须*为真才能继续执行代码时，请使用先决条件.\n\n向该函数传递一个计算结果为 `true` 或 `false` 的表达式，以及一条在条件结果为 `false` 时显示的信息:\n\n```swift\n// 在下标的实现中...\nprecondition(index > 0, \"Index must be greater than zero.\")\n```\n\n---\n\n## 运算符\n\n### 基本运算符\n\n- 与 C 和 Objective-C 中的赋值运算符不同，Swift 中的赋值运算符本身不返回值。以下语句无效：\n\n  ```swift\n  if x = y { // 这是无效的，因为 x = y 不返回值。\n  }\n  ```\n\n  - 可以防止不小心使用赋值运算符（=） 而非等于运算符（==）.\n- 基本的四则运算不允许值的溢出.\n\n> [!NOTE]\n>\n> 在 Swift 中对负数的处理与模运算符有所不同:\n>\n> 为了确定 `a % b` 的答案，`%` 运算符计算以下等式并返回 `余数` 作为输出：\n>\n> ```\n> a` = (`b` x `某个乘数`) + `余数\n> ```\n>\n> 其中 `某个乘数` 是 `b` 在 `a` 中能容纳的最大倍数。\n>\n> ```swift\n> 9 % 4    // 等于 1\n>\n> -9 % 4   // 等于 -1\n> ```\n\n- 数值的正负号可以使用前缀 `-` 切换，称为`<u>`一元负号运算符`</u>`.\n\n  - 中间没有任何空格.\n\n    ```swift\n    let three = 3\n    let minusThree = -three       // minusThree 等于 -3\n    ```\n\n#### 元组的计算\n\n- 前提: 如果两个元组具有相同的类型和相同数量的值，则可以比较它们.\n- 规则:\n  - 元组是从左到右逐个值进行比较的，直到比较发现两个不相等的值为止。\n  - 这两个值将进行比较，并且该比较的结果决定了整个元组比较的结果。\n  - 如果所有元素都相等，那么这两个元组本身就相等。\n\n> [!NOTE]\n>\n> 只有当给定的运算符可以应用于各自元组中的每个值时，元组才能与该运算符进行比较.\n\n```swift\n(\"blue\", false) < (\"purple\", true)  // 错误，因为 < 不能比较布尔值\n```\n\n#### 空合并运算符\n\n`a ?? b`的结果与下面的运算相同:\n\n```swift\na != nil ? a! : b\n```\n\n#### 区间运算\n\n- *闭区间运算符*（`a...b`）定义了一个从 `a` 到 `b` 的范围，包括 `a` 和 `b` 的值。`a` 的值不能大于 `b`;\n\n  - 在需要使用所有值的情况下很有用\n  - e.g.\n\n    ```swift\n    for index in 1...5 {\n        print(\"\\(index) 乘以 5 等于 \\(index * 5)\") \n    }\n    ```\n- *半开区间运算符*（`a..<b`）定义了一个从 `a` 到 `b` 但不包括 `b` 的范围.\n\n  - 对于处理从基数 0 开始的列表（如数组）时特别有用，因为它可以计数到列表长度（但不包括列表长度）.\n  - e.g.\n\n    ```swift\n    let names = [\"Anna\", \"Alex\", \"Brian\", \"Jack\"] \n    let count = names.count\n    for i in 0..<count {\n        print(\"第 \\(i + 1) 个人叫 \\(names[i])\")\n    }\n    ```\n- 闭区间运算符有一种替代形式，用于一直延伸到尽可能远的区间 —— 例如，一个包含从索引 2 到数组末尾所有元素的区间。\n\n  ```swift\n  for name in names[2...] { print(name) }\n  // Brian\n  // Jack\n  ```\n- 半开区间运算符也有一种只写最后一个值的单侧形式\n\n  ```swift\n  for name in names[..<2] { print(name) }\n  // Anna\n  // Alex\n  ```\n\n#### 逻辑运算\n\n> [!NOTE]\n>\n> Swift 逻辑运算符 `&&` 和 `||` 遵循`<u>`从左到右`</u>`的结合顺序，这意味着带有多个逻辑运算符的复合表达式会首先评估最左边的子表达式.\n\n## 控制流\n\n## 协议\n\n- 如果类需要继承, 需要将父类写在所有的协议之前\n- 不能在协议定义中为方法参数指定默认值。\n- 协议也可以要求遵循协议的类型 `<u>`实现指定的构造器`</u>`, 和协议内部的方法一样, 不需要写花括号和构造期的实体\n  - 如果是类, 必须在构造函数的开头加上 `required`修饰符. 这是为了确保所有继承的子类也提供这个构造函数的实现, 从而确保遵守协议;\n  - 但是如果一个类被声明为了 `final`, 也就是无法被继承, 那么就不需要 `required`的声明\n\n### 协议的基本用法\n\n协议可以规定属性类型以及属性被操作的权限, 通常和类、结构体和枚举进行绑定, 作为一种强制的约束.\n\n```swift\nprotocol Tax{\n  var national: Double { get } \n  var individual: Double{ set get}\n}\n```\n\n同样可以在协议中使用 `mutating` 来声明一个改变自身属性的方法:\n\n```swift\nprotocol Tax{\n  var national: Double { get } \n  var individual: Double{ set get}\n  \n  mutating func changeTax(newValue: Double)\n}\n```\n\n- 需要注意的是, 结构体内部的方法如果要修改自身属性, 也需要声明 `mutating`, 但是类则不需要额外的声明.\n\n  ```swift\n  struct Taxas: Tax{\n     var national: Double\n    var individual: Double\n\n    mutating func changeTax(newValue: Double){\n      national = newValue\n    }\n  }\n  ```\n\n### 补充协议\n\n- 使用 `,` 连接不同的协议\n- `extension`可以为协议的函数设置默认方法, 就不需要继续在每一个类、结构体或枚举中重新定义\n\n  - 同样可以补充数据类型\n\n    ```swift\n    extension Int {\n      var abs: Int {\n        get {\n          if self >= 0 {\n            return self\n          }else{\n            return -self\n          }\n        }\n      }\n    }\n\n    print((-3).abs);\n    // 3\n    ```\n\n#### 有条件地遵循协议\n\n让 `Array` 类型只要在存储遵循 `TextRepresentable` 协议的元素时，就遵循 `TextRepresentable` 协议:\n\n```swift\nextension Array: TextRepresentable where Element: TextRepresentable {\n    var textualDescription: String {\n        let itemsAsText = self.map { $0.textualDescription }\n        return \"[\" + itemsAsText.joined(separator: \", \") + \"]\"\n    }\n}\nlet myDice = [d6, d12]\nprint(myDice.textualDescription)\n// 打印 \"[A 6-sided dice, A 12-sided dice]\"\n```\n\n#### 扩展里声明协议遵循\n\n当一个类型已经遵循了某个协议中的所有要求，却还没有声明遵循该协议时，可以通过空的扩展来让它遵循该协议:\n\n```swift\nstruct Hamster {\n    var name: String\n    var textualDescription: String {\n        return \"A hamster named \\(name)\"\n    }\n}\nextension Hamster: TextRepresentable {}\n```\n\n### Error handling\n\n系统提供了 `Error`协议用于错误处理, 主动给予错误的捕捉情况.\n\n使用方法:\n\n1. 定义遵循相关协议的枚举类型, 作为错误的类型;\n2. 定义可能抛出错误的函数;\n3. 使用 `do...catch`块来结构化地处理错误.\n\ne.g.\n\n```swift\n// 定义一个错误类型，遵循 Error 协议\nenum PasswordError: Error {\n    case tooShort\n    case tooWeak\n}\n\n// 一个函数，可能抛出错误\nfunc validate(password: String) throws {\n    if password.count < 6 {\n        throw PasswordError.tooShort\n    }\n    if password == \"123456\" {\n        throw PasswordError.tooWeak\n    }\n}\n\n// 使用 do-catch 捕捉错误\ndo {\n    try validate(password: \"123456\")\n    print(\"密码验证通过 ✅\")\n} catch PasswordError.tooShort {\n    print(\"❌ 密码太短，请至少使用 6 个字符\")\n} catch PasswordError.tooWeak {\n    print(\"❌ 密码太弱，不能使用简单的序列\")\n} catch {\n    print(\"❌ 发生未知错误：\\(error)\")\n}\n\n```\n\n> - throws：在函数声明中标注该函数会抛出错误;\n> - try：在调用可能抛出错误的函数时使用.\n\n### 其他的协议\n\n#### CaseIterable\n\n用于获取枚举的属性个数, 从而进行遍历.\n\n```swift\nenum Status:CaseIterable{\n    case low,middle,high\n  \n  \n    mutating func change(){\n        switch self{\n        case .high:\n            self = .low\n        case .low:\n            self = .middle\n        case .middle:\n            self = .high\n        }\n    }\n  \n    func ptr(){\n        print(\"Current Status is \\(self)\")\n    }\n}\n\nvar status = Status.low\nfor _ in 0..<Status.allCases.count{\n    status.ptr()\n    status.change()\n}\n```\n\n> `for _ in 0..<` 当中的 `_`表示忽略遍历时候的循环变量的值.\n\n## 闭包\n\n#### 闭包的简化推导\n\n相当于匿名函数与 `lambda`.  接下来从普通函数的写法开始简化:\n\n- 普通函数:\n\n  ```swift\n  func changeSign(op: Double) -> Double {\n      return -op\n  }\n\n  var operation: (Double) -> Double\n  operation = changeSign\n\n  let result = operation(4.0) // result = -4.0\n  ```\n- 将函数的定义下移:\n\n  ```swift\n  var operation: (Double) -> Double\n  operation = (op:Double) -> Double { return -op}\n\n  let result  = operation(4.0)\n  ```\n- 将 `｛` 提前，并在原来的位置添加 `in`\n\n  ```swift\n  var operation:(Double) -> Double\n  operation = {(op: Double) -> Double  in return -op}\n  ...\n  ```\n- 系统可以推断类型, 所以根据输入的类型简化返回值的类型定义\n\n  ```swift\n  var operation:(Double) -> Double\n  operation = {(op: Double)   in return -op}\n  ...\n  ```\n- 可以进一步省略传入的类型\n\n  ```swift\n  var operation:(Double) -> Double\n  operation = { (op) in return -op}\n  ...\n  ```\n- 省略返回的标记 `return`:\n\n  ```swift\n  var operation:(Double) -> Double\n  operation = { (op) in  -op}\n  ...\n  ```\n\n最后, 我们可以直接用 `$0`等替代传入的参数, 也就是省略了参数的名称!\n\n```swift\nvar operation:(Double) -> Double\noperation = { -$0 }\n...\n```\n\n#### 闭包的常见使用\n\ne.g.\n\n![image-20250412170605776](swift.assets/image-20250412170605776.png)\n\n#### Trailing Closure\n\n当闭包是函数的**最后一个参数**时，\n\n```swift\nlet result = applyTwice(3, operation: { $0 * 2 })\n```\n\n可以改写成:\n\n```swift\nlet result = applyTwice(3) { $0 * 2 } // result = 12\n```\n\n# 慕课学习杂记\n\n#### something\n\n- 去官网学习新出现的技术\n\n  - codeML\n- 函数也可以赋值给变量\n\n#### 省略外部参数名\n\n- 外部参数名: 在函数调用的时候使用, 提高可读性;\n- 内部参数名: 在函数体的内部使用\n\n如果如此定义:\n\n```swift\nfunc greet(person name: String){\n  print(\"Hello , \\(name)\")\n}\n```\n\n那么在调用的时候必须显示声明外部参数名:\n\n```swift\ngreet( person: \"Alice\")\n```\n\n如果我们希望省略外部参数名, 就可以在定义函数的时候用 `_`来代替:\n\n```swift\nfunc greet(_ name: String){\n  ...\n}\n```\n\n#### 高阶函数\n\n我们可以让函数作为另一个函数的输入参数:\n\n```swift\nfunc addTwoInts( _ a: Int, _ b: Int) -> Int{\n  return a+b\n}\n\nvar mathFunction = addTwoInts\n\n// 高阶函数\nfunc printMathResults（_ mathFunction: (Int, Int）-> Int, _ a: Int, _ b: Int){\n  var result = mathFunction(a,b)\n  print(result)\n}\n\n// 调用\nprintMathResults（addTwoInts， 3,5）\n\n```\n\n> 注意函数作为参数的时候, 类型的定义就是输入类型和返回类型, 也是用 `,` 来分隔不同的参数.\n\n---\n\n#### 内置的库\n\n`AVFoudation`: 音频播放\n\n---\n\n- 枚举内部也可以设置方法;\n- 结构体本身不需要构造函数(因为swift存在对于结构体的默认构造) , 但是如果结构体内部的属性存在这样的属性:\n\n  - 它可能是枚举内部的方法, 跟枚举的属性有关, 可能使用了 `switch`来根据枚举属性赋值.\n\n  ```swift\n  enum Type{\n    case Cike\n    case ...\n\n    func blood()-> Double{\n      switch self{\n        case .Cike: return 10\n        case .Fashi: return ...\n        ...\n      }\n    }\n\n  }\n\n  struct Card {\n    var country: Country\n    vat type: Type\n    var blood: Double\n\n    init (country: Country, type: Type){\n      self.country = country\n      self.type = type;\n      blood = type.blood\n    }\n  }\n  ```\n- 结构体和枚举属于 `<u>`值类型`</u>`, 如果赋值的时候进行拷贝操作;\n\n  - 如果结构体声明为 `let`, 即使属性是变量, 那么也无法修改内部的属性,\n- 类是引用类型, 赋值的时候使得左值指向了同样的内存区域, 也就是信息保持一致, 更改同步\n\n  - 如果我们将类声明为常量, 相当于cpp的指针常量, 也就是说类内部的属性可以更改, 但是无法修改这个量指向的内存区域.\n\n#### 计算属性\n\n访问的时候动态计算得到.\n\n下面通过一个矩形的例子来说明:\n\n```swift\nstruct Point {\n  var x = 0.0\n  var y = 0.0\n}\n\nstruct Size{\n  var width = 0.0\n  var height = 0.0\n}\n\nstruct Rect{\n  var origin = Point()\n  var size = Size()\n  var center: Point{\n    get{\n      let centerX = origin.x + (size.width / 2)\n      let centerY = orgin.y + (size.height /2 )\n      return Point(x: centerX, y: centerY)\n    }\n    set(newCenter){\n      origin.x = newCenter.x - (size.width / 2)\n      origin.y = newCenter.y - (size.height / 2)\n    }\n  }\n}\n```\n\n上述完成了结构体的计算属性的定义, 其中 `get`部分也可以优化为:\n\n```swift\nget{\n\tPoint(x: origin.x + (size.width / 2),\n        y: orgin.y + (size.height /2 ) )\n}\n```\n\n> 这是因为, 如果 `get` 部分只存在一个表达式,  就会自动将其返回, 不需要显式声明 `return`关键字.\n\n然后可以如此应用:\n\n```swift\nvar currCenter = rectElement.center\n\nrectElement.center = Point(x:20, y:50)\n```\n\n`set`提供了语法糖, 也就是可以直接访问oldValue 和  newValue, 因此我们可以如此改写:\n\n```swift\nset{\n  origin.x = newValue.x - (size.width / 2)\n  origin.y = newValue.y - (size.height / 2)\n}\n```\n\n> [!NOTE]\n>\n> 对于只读的计算属性, 由于不存在 `set`, 我们可以直接在花括号内定义返回内容.\n\n---\n\n- 声明 `static` , 表示这个属性或者方法属于整个类型而非某个实例. 此时相应的, 我们使用 `<tyepName>.<strtic attribute>`的方式来访问.\n- 子面量本身是不可修改的, 下面的拓展中, 如果写作  `var someInt = 3.square()`就会报错\n\n```swift\nextension Int{\n    mutating func square(){\n        self = self * self\n    }\n}\n\nvar someInt = 3\nsomeInt.square()\n```\n\n---\n\n控制器存在5种状态:\n\n- 未加载\n- 将要出现\n- 出现\n- 将要消失\n- 已经消失\n\nAPP的状态:\n\n<img src=\"swift.assets/image-20250413182851979.png\" alt=\"image-20250413182851979\" style=\"zoom:33%;\" />\n\n`UiSceneDelegate`用于响应基于 `scene` 的生命周期事件.\n\n可以使用属性的 `didset`来便捷地检测变化并快速修改:\n\n```swift\nvar score = 0{\n  didSet{\n    self.gameScoreLabel.text = \"Score: \\(score)\"\n  }\n}\n```\n\n- `viewController`是新的页面;\n- `view`是视图, 可以叠加在页面上.\n- `UIAlertController`组件相当于警示的弹窗组件\n\n### 作图和绘画\n\n#### CG\n\n- `CGFloat`用于二维坐标系中的坐标数据:\n\n  - `let coor_x = CGFloat(10.5)`\n- `CGPoint(x: .. , y:...)`\n- `CGSize` 包含width和height属性的结构体;\n- `CGRect`包含点和尺寸的矩形\n\n  ```swift\n  struct CGRect{\n    var origin: CGPoint\n    var size: CGSize\n  }\n  ```\n\n  - 其他属性\n  - e.g.\n\n    ```swift\n    var minX: CGPoint\n    var midY: CGPoint\n    intersects(CGRect) -> Bool // 判断是否存在交集\n    contains(CGPoint) -> Bool // 是否包含点.\n    ```\n\n最小单元是 `Point`而非像素点.\n\nbound表示视图内部允许绘制的区域:\n\n```swift\nvar bounds: CGRect // 也就是一个矩形\n```\n\nframe\t视图在父视图中的位置:\n\n```swift\nvar frame: CGRect\n```\n\n#### 自定义视图\n\n绘制自定义视图通常通过创建一个自定义的 UIView 子类，并重写 draw(_:) 方法来实现.\n\nplayGround中的实例:\n\n```swift\nimport UIKit\nimport PlaygroundSupport\n\nclass CustomView: UIView {\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        self.backgroundColor = .white // 设置背景颜色\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    override func draw(_ rect: CGRect) {\n        guard let context = UIGraphicsGetCurrentContext() else { return }\n\n        // 绘制一个圆形\n        context.setFillColor(UIColor.blue.cgColor) // 设置填充颜色\n        context.fillEllipse(in: rect) // 绘制填充的圆\n\n        // 绘制一个矩形\n        context.setStrokeColor(UIColor.black.withAlphaComponent(0.6).cgColor) // 设置能见度\n        context.setLineWidth(5)\n        context.stroke(rect.insetBy(dx: 10, dy: 10)) // 绘制矩形边框，留出间距\n    }\n}\n\n// 创建自定义视图实例\nlet customView = CustomView(frame: CGRect(x: 0, y: 0, width: 200, height: 200))\n\n// 显示在 Playground 的 live view\nPlaygroundPage.current.liveView = customView\n\n```\n\n- `touchesBegan`--WWDC\n- `SCNVector3`是三维向量\n- `DispathchQueue`表示创建一个异步的进程\n\n### 传感器\n\n- 加速度的方向伴随手机的头部旋转保持不变;\n  - 以 `g` 为描述单位;\n  - 面向使用者的方向是 `z` 轴.\n- 陀螺仪\n  - 记录对应用三个轴\n  - roll, pitch, yaw\n\n### 动画\n\n## 结绳记事\n\n- [操作演示](https://www.icourse163.org/learn/ZJU-1450024180?tid=1474143513#/learn/content?type=detail&id=1262245274&cid=1299836384&contentid=1217938866).\n- 按住 `ctrl`将视图中的组件拖放到代码中.\n- 右下角的几个功能:\n\n  - 约束;\n  - 选择视图\n- `ctrl + option + cmd + enter` 快速显示代码区域\n- [组件使用](https://www.icourse163.org/learn/ZJU-1450024180?tid=1474143513#/learn/content?type=detail&id=1262245274&cid=1299836386&contentid=1217092922)\n\n  - 50:00 左右介绍了两种类型和交互\n- 按住 `optional`然后 hover 在类上, 可以显示对应的基础操作.\n- 可选值的本质是枚举类型!\n\n  ```swift\n  enum Optional<T>{\n    case none\n    case some(<T>)\n  }\n  ```\n- [画图和动画](https://www.icourse163.org/learn/ZJU-1450024180?tid=1474143513#/learn/content?type=detail&id=1262245305&sm=1)\n- [coreML](https://www.icourse163.org/learn/ZJU-1450024180?tid=1474143513#/learn/content?type=detail&id=1262245309&sm=1)\n- 在项目中显示Md格式:\n\n  ```swift\n  /*:\n  ...\n  */\n  ```\n- 选择在运行时隐藏实际存在的代码:\n\n  ```swift\n  //#-hidden-code\n  import PlaygroundSupport\n  ...\n  //#-end-hidden-code\n\n  ```\n\n# Swift UI\n\n- [慕课的链接](https://www.icourse163.org/learn/ZJU-1450024180?tid=1474143513#/learn/content?type=detail&id=1262245315&cid=1299836440&contentid=1218091551)\n- [by now](https://www.hackingwithswift.com/100/swiftui/16)\n- SixD: 开箱即用的UI设计等.\n- [术语表](https://www.hackingwithswift.com/glossary)\n\n## AR\n\n- [helpful links](https://www.createwithswift.com/creating-an-augmented-reality-app-in-swiftui-using-realitykit-and-arkit/)\n- [官方文档](https://developer.apple.com/documentation/realitykit/?ref=createwithswift.com)\n\n## 动画\n\n#### 缩放变换\n\n```swift\nNavigationLink{\n  BraceletEditor(bracelet)\n  .navigationTransitionStyle(\n  .zoom(\n  \tsourceID:bracelet.id,\n  \tin:braceletList\n  \t)\n  )\n}label:{\n  BraceletPreview(bracelet)\n}\n.matchedTansitionSource(\n\tid:bracelet.id,\n  in:braceletList\n)\n```\n\n## Symbol 6\n\n### 动画\n\n- 使用 `晃动` 在复杂的UI中提示可交互性.\n- `旋转`动画来表示正在进行的进程\n\n## 基本语法\n\n#### 磨砂效果\n\n```swift\nVStack {\n}\n.frame(width: 200, height: 200)\n.background(.ultraThinMaterial, in: RoundedRectangle(cornerRadius: 20, style: .continuous))\n```\n\n#### 搜索栏\n\n- 状态管理:\n\n  ```swift\n  // 存储搜索文本\n  @State private var searchText = \"\"\n\n  // 可选：跟踪搜索是否处于活动状态\n  @State private var isSearching = false\n  ```\n- 数据过滤模式\n\n  ```swift\n  // 基本过滤计算属性模板\n  var filteredItems: [ItemType] {\n      if searchText.isEmpty {\n          return originalItems\n      } else {\n          return originalItems.filter { item in\n              // 根据需要自定义过滤条件\n              item.name.localizedCaseInsensitiveContains(searchText) ||\n              item.description.localizedCaseInsensitiveContains(searchText)\n          }\n      }\n  }\n\n  // 处理嵌套数据结构的过滤模板\n  var filteredNestedItems: [ParentType] {\n      if searchText.isEmpty {\n          return originalParentItems\n      } else {\n          return originalParentItems.compactMap { parent in\n              let matchedChildren = parent.children.filter { child in\n                  child.name.localizedCaseInsensitiveContains(searchText)\n              }\n\n              if matchedChildren.isEmpty {\n                  return nil\n              } else {\n                  // 创建包含匹配子项的新父项\n                  return ParentType(id: parent.id, name: parent.name, children: matchedChildren)\n              }\n          }\n      }\n  }\n  ```\n- 搜索UI中的实现:\n\n  ```swift\n  NavigationStack {\n      List {\n          // 使用过滤后的数据源\n          ForEach(filteredItems) { item in\n              // 列表项视图\n          }\n      }\n      .navigationTitle(\"标题\")\n      .searchable(text: $searchText, prompt: \"搜索提示文字\")\n      // 可选：添加搜索建议\n      .searchSuggestions {\n          ForEach(suggestions, id: \\.self) { suggestion in\n              Text(suggestion).searchCompletion(suggestion)\n          }\n      }\n  }\n  ```\n\n#### 左右适应的外边距\n\n通过 `HStack`与  `space`实现卡片的自适应扩展, 同时利用 `.frame(maxwidth:...)`来设置一个最大的卡片宽度\n\n```swift\nHStack{\n    Spacer(minLength: 10)\n  \n    Text(item.description)\n        .padding()\n        .background(Color(.systemGray6))\n        .overlay(\n            RoundedRectangle(cornerRadius: 10) // 10为圆角半径，可调整\n                .stroke(Color.gray, lineWidth: 1) // 边框颜色和宽度\n        )\n        .clipShape(RoundedRectangle(cornerRadius: 10))\n    // 保证背景和边框都圆角\n    .frame(maxWidth: 400) // 最大宽度限制\n\n    Spacer(minLength: 10)\n}\n```\n\n`Spacer(minLength: 10)` 表示**保证自己不会小于 minLength**.\n\n上述的 `Spacer`会压缩卡片的内容, 如果希望直接设置卡片在父容器中的左右外边距, 应该在卡片的内部使用 `padding`:\n\n```swift\nText(item.description)\n    .padding(.horizontal, 24) // 卡片内容内边距\n    .padding(.vertical, 12)\n    .background(Color(.systemGray6))\n    .overlay(\n        RoundedRectangle(cornerRadius: 10)\n            .stroke(Color.gray, lineWidth: 2)\n    )\n    .clipShape(RoundedRectangle(cornerRadius: 10))\n    .padding(.horizontal, 20) // 整个卡片距离父视图左右20pt\n```\n\n#### 全局统一样式\n\n```swift\n@main\nstruct MyApp: App {\n    var body: some Scene {\n        WindowGroup {\n            ContentView()\n                .buttonStyle(ShadowButtonStyle(radius: 10))\n        }\n    }\n}\n```\n\n#### 参数标签和参数名\n\n- 参数标签用于函数调用时;\n- 参数名用于函数内部的参数名称.\n\ne.g.:\n\n```swift\nfunc greet(person atName: String) {\n    print(\"Hello, \\(atName)!\")\n}\ngreet(person: \"Alice\") // 输出：Hello, Alice!\n```\n\n也可以使用 `_`来省略调用时的参数标签:\n\n```swift\nfunc greet(_ name: String) {\n    print(\"Hello, \\(name)!\")\n}\ngreet(\"Alice\") // 输出：Hello, Alice!\n```\n\n#### Alert\n\nswift UI中的弹窗提示同样通过本地的 `@State`变量来实现:\n\n```swift\n@State private var showingPaymentAlert = false\n...\n.alert(\"Order confirmed\", isPresented: $showingPaymentAlert) {\n    // add buttons here\n} message: {\n    Text(\"Your total was \\(totalPrice) – thank you!\")\n}\n```\n\n设置按钮来改变可见的状态:\n\n```swift\nButton(\"Confirm order\") {\n    showingPaymentAlert.toggle()\n}\n```\n\n#### 自定义绑定\n\n我们也可以使用 `Binding` 类型手动创建绑定，该类型可以提供自定义 `get` 和 `set` 闭包，以便在读取或写入值时运行。\n\n#### Foreach\n\n```swift\nForEach(item.restrictions) { restriction in\n    Text(restriction)\n}\n```\n\n此时, 要求 `item.restrictions` 具有可唯一标识的 `id` 字段.\n\n- 如果内容本身就是唯一标识, 比如说遍历的内容是字符串数组, 那么可以如此声明:\n\n  ```swift\n  ForEach(item.restrictions, id: \\.self) { restriction in\n      Text(restriction)\n  }\n  ```\n\n#### Spacer()\n\n用于填充剩余的空间\n\n- 使用 `offset(x:.., y:...)`来调节位置, 左上角是原点.\n\n#### 环境变量\n\n- 作用: 用于存储独立于视图的、长期存在的数据;\n- e.g.\n\n  ```swift\n  // App.swift\n  @StateObject var order = Order()\n  ```\n- `@StateObject` 属性包装器负责在`<u>`应用程序的整个生命周期中`</u>`保持对象处于活动状态。\n- 需要在创建视图结构体的时候传递:\n\n  ```swift\n  WindowGroup {\n      ContentView()\n          .environmentObject(order)\n  }\n  ```\n- 为了让swift知道什么时候更新视图, 常用的是声明 `@Published`属性包装器——足以让它更新任何正在监视更改的 SwiftUI 视图.\n- 同时声明对应的对象遵循可观测协议: **ObservableObject**.\n\n我们可以使用 `@EnvironmentObject`来访问环境中的共享数据, 也就是传递上一步已经在父视图中创建和管理的对象.\n\ne.g.\n\n```swift\nclass UserData: ObservableObject {\n    @Published var name: String = \"John\"\n}\n\nstruct ContentView: View {\n    @StateObject private var userData = UserData()\n\n    var body: some View {\n        ChildView().environmentObject(userData)\n    }\n}\n\nstruct ChildView: View {\n    @EnvironmentObject var userData: UserData\n\n    var body: some View {\n        Text(userData.name)\n    }\n}\n```\n\n使用 `@State`来声明简单的本地值——比如整数和字符串.\n\n- 建议将其声明为 `private`, e.g.\n\n  ```swift\n  @State private var paymentType = \"Cash\"\n  ```\n\n#### 菜单视图\n\n为了将菜单视图存放在一个选项卡当中, 我们需要新建一个视图, 用来作为容器:\n\n```swift\nstruct MainView: View {\n    var body: some View {\n        TabView {\n            ContentView()\n                .tabItem {\n                    Label(\"Menu\", systemImage: \"list.dash\")\n                }\n\n            OrderView()\n                .tabItem {\n                    Label(\"Order\", systemImage: \"square.and.pencil\")\n                }\n        }\n    }\n}\n```\n\n> 页面级别的切换.\n\n使用枚举与子页面的内容分区:\n\n```swift\nimport SwiftUI\n\nstruct ContentView: View {\n    enum Section {\n        case cats\n        case dogs\n    }\n\n    @State private var selectedTab = Section.cats\n\n    var body: some View {\n        TabView(selection: $selectedTab) {\n            Tab(\"Cats\", systemImage: \"cat\", value: .cats) {\n                Button(\"Go to Dogs\") {\n                    selectedTab = .dogs\n                }\n            }\n          \n            Tab(\"Dogs\", systemImage: \"dog\", value: .dogs) {\n                Button(\"Go to Cats\") {\n                    selectedTab = .cats\n                }\n            }\n        }\n    }\n}\n```\n\n## 合适的修饰符\n\n- 图像自动调节尺寸:\n\n  ```swift\n  Image(item.mainImage)\n      .resizable()\n      .scaledToFit()\n  ```\n\n#### 设置阴影\n\n```swift\n.shadow(color: .black.opacity(0.2), \n        radius: 15, x: 0, y: 10)\n```\n\n#### 为按钮设置动画\n\n```swift\nstruct ContentView: View {\n    @State private var showingWelcome = false\n\n    var body: some View {\n        VStack {\n            Toggle(\"Toggle label\", isOn: $showingWelcome.animation())\n\n            if showingWelcome {\n                Text(\"Hello World\")\n            }\n        }\n    }\n}\n```\n\n可以进一步设置, 比如弹簧的渐入渐出:\n\n```swift\nToggle(\"Toggle label\", isOn: $showingWelcome.animation(.spring()))\n```\n\n## 基本操作\n\n#### 快捷键\n\n- `ctrl`按住后点击  `VStack`可以快速地将其添加到 `ZStack`当中\n  - 颜色的设置需要通过 `ZStack`来实现.\n- `option`可以显示当前类的介绍\n- \n\n**推荐资源：**\n\n- **Raywenderlich 的 SwiftUI 教程：** [Raywenderlich - SwiftUI Apprentice](https://www.raywenderlich.com/books/swiftui-apprentice)\n- **Big Mountain Studio 的免费电子书：** [SwiftUI Views Quick Start](https://www.bigmountainstudio.com/free-swiftui-book)\n","slug":"编程语言/swift","published":1,"updated":"2025-06-25T07:07:19.667Z","comments":1,"layout":"post","photos":[],"_id":"cmcbm7pqh0026e2qg135z8nha","content":"<h1 id=\"初见\"><a href=\"#初见\" class=\"headerlink\" title=\"初见\"></a>初见</h1><p>默认情况下，函数使用它们的参数名称作为它们参数的标签，在参数名称前可以自定义参数标签，或者使用 <code>_</code> 表示不使用参数标签:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">greet</span>(<span class=\"keyword\">_</span> <span class=\"params\">person</span>: <span class=\"type\">String</span>, <span class=\"params\">on</span> <span class=\"params\">day</span>: <span class=\"type\">String</span>) -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello <span class=\"subst\">\\(person)</span>, today is <span class=\"subst\">\\(day)</span>.&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">greet(<span class=\"string\">&quot;John&quot;</span>, on: <span class=\"string\">&quot;Wednesday&quot;</span>)</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>参数标签指的是调用时候的名称, 参数名指的是函数内部.</p>\n</blockquote>\n<p>函数是第一等类型，这意味着函数可以作为另一个函数的返回值。</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">makeIncrementer</span>() -&gt; ((<span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">addOne</span>(<span class=\"params\">number</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span> <span class=\"operator\">+</span> number</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> addOne</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> increment <span class=\"operator\">=</span> makeIncrementer()</span><br><span class=\"line\">increment(<span class=\"number\">7</span>)</span><br></pre></td></tr></table></figure></div>\n\n<p>函数也可以作为另一个函数的输入参数:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">hasAnyMatches</span>(<span class=\"params\">list</span>: [<span class=\"type\">Int</span>], <span class=\"params\">condition</span>: (<span class=\"type\">Int</span>) -&gt; <span class=\"type\">Bool</span>) -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> list &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> condition(item) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">lessThanTen</span>(<span class=\"params\">number</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> number <span class=\"operator\">&lt;</span> <span class=\"number\">10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> numbers <span class=\"operator\">=</span> [<span class=\"number\">20</span>, <span class=\"number\">19</span>, <span class=\"number\">7</span>, <span class=\"number\">12</span>]</span><br><span class=\"line\">hasAnyMatches(list: numbers, condition: lessThanTen)</span><br></pre></td></tr></table></figure></div>\n\n<p>可以通过参数位置而不是参数名字来引用参数——这个方法在非常短的闭包中非常有用。</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sortedNumbers <span class=\"operator\">=</span> numbers.sorted &#123; <span class=\"variable\">$0</span> <span class=\"operator\">&gt;</span> <span class=\"variable\">$1</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(sortedNumbers)</span><br></pre></td></tr></table></figure></div>\n\n<p><code>actor</code>与 <code>class</code>类似, 但是可以序列化访问, 保护共享、可变的数据.</p>\n<h3 id=\"对象和类\"><a href=\"#对象和类\" class=\"headerlink\" title=\"对象和类\"></a>对象和类</h3><h4 id=\"构造与析构\"><a href=\"#构造与析构\" class=\"headerlink\" title=\"构造与析构\"></a>构造与析构</h4><p>使用 <code>self.</code>替代 <code>this-&gt;</code>, 使用  <code>init</code> 和  <code>deinit</code>分别声明构造和析构函数:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">NamedShape</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> numberOfSides: <span class=\"type\">Int</span> <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">name</span>: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name <span class=\"operator\">=</span> name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">simpleDescription</span>() -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;A shape with <span class=\"subst\">\\(numberOfSides)</span> sides.&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>子类如果要重写父类的方法的话，需要用 <code>override</code> 标记:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Square</span>: <span class=\"title class_ inherited__\">NamedShape</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sideLength: <span class=\"type\">Double</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">sideLength</span>: <span class=\"type\">Double</span>, <span class=\"params\">name</span>: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.sideLength <span class=\"operator\">=</span> sideLength</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(name: name)</span><br><span class=\"line\">        numberOfSides <span class=\"operator\">=</span> <span class=\"number\">4</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">area</span>() -&gt;  <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sideLength <span class=\"operator\">*</span> sideLength</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">simpleDescription</span>() -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;A square with sides of length <span class=\"subst\">\\(sideLength)</span>.&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> test <span class=\"operator\">=</span> <span class=\"type\">Square</span>(sideLength: <span class=\"number\">5.2</span>, name: <span class=\"string\">&quot;my test square&quot;</span>)</span><br><span class=\"line\">test.area()</span><br><span class=\"line\">test.simpleDescription()</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<ul>\n<li>使用 <code>:className</code>的方法声明父类.</li>\n<li><code>super.init</code> 是用来调用父类（超类）的初始化方法的。当创建一个子类的实例时，子类可能需要初始化一些自己的属性，同时还需要确保父类的属性也被正确初始化。这时就需要使用 <code>super.init</code> 来调用父类的初始化方法，完成父类的初始化过程</li>\n<li>严格的顺序要求: 子类必须先初始化自己的属性，然后调用 <code>super.init</code>，最后才能访问或修改继承来的属性。</li>\n</ul>\n</blockquote>\n<h3 id=\"计算属性\"><a href=\"#计算属性\" class=\"headerlink\" title=\"计算属性\"></a>计算属性</h3><h4 id=\"普通的计算属性\"><a href=\"#普通的计算属性\" class=\"headerlink\" title=\"普通的计算属性\"></a>普通的计算属性</h4><p>在属性内部使用 <code>&#123;&#125;</code>并加上 <code>return</code>, 可以让访问这个属性的时候, 返回值由结构体的其他属性计算得到.</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Temperature</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> celsius: <span class=\"type\">Double</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> fahrenheit: <span class=\"type\">Double</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> celsius <span class=\"operator\">*</span><span class=\"number\">1.8</span> <span class=\"operator\">+</span> <span class=\"number\">32</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">init</span>(<span class=\"params\">celsius</span>: <span class=\"type\">Double</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.celsius <span class=\"operator\">=</span> celsius</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<ol>\n<li>此时实例化一个结构体就只需要给出一个属性的值.</li>\n<li><code>self</code>在上述的Swift代码中是不可或缺的, 因为形参和内部属性的名称相同.</li>\n</ol>\n</blockquote>\n<h4 id=\"使用-getter-和-setter-的计算属性\"><a href=\"#使用-getter-和-setter-的计算属性\" class=\"headerlink\" title=\"使用 getter 和 setter 的计算属性:\"></a>使用 getter 和 setter 的计算属性:</h4><div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EquilateralTriangle</span>: <span class=\"title class_ inherited__\">NamedShape</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sideLength: <span class=\"type\">Double</span> <span class=\"operator\">=</span> <span class=\"number\">0.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">sideLength</span>: <span class=\"type\">Double</span>, <span class=\"params\">name</span>: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.sideLength <span class=\"operator\">=</span> sideLength</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(name: name)</span><br><span class=\"line\">        numberOfSides <span class=\"operator\">=</span> <span class=\"number\">3</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> perimeter: <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 根据存储属性进行计算</span></span><br><span class=\"line\">        <span class=\"keyword\">get</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">3.0</span> <span class=\"operator\">*</span> sideLength</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 设置属性</span></span><br><span class=\"line\">        <span class=\"keyword\">set</span> &#123;</span><br><span class=\"line\">            sideLength <span class=\"operator\">=</span> newValue <span class=\"operator\">/</span> <span class=\"number\">3.0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">simpleDescription</span>() -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;An equilateral triangle with sides of length <span class=\"subst\">\\(sideLength)</span>.&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> triangle <span class=\"operator\">=</span> <span class=\"type\">EquilateralTriangle</span>(sideLength: <span class=\"number\">3.1</span>, name: <span class=\"string\">&quot;a triangle&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(triangle.perimeter)</span><br><span class=\"line\">triangle.perimeter <span class=\"operator\">=</span> <span class=\"number\">9.9</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(triangle.sideLength)</span><br></pre></td></tr></table></figure></div>\n\n<p>计算属性同样是一个属性, 但是根据调用方式的不同, 有返回和设置两种方式.</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">triangle.perimeter <span class=\"operator\">=</span> <span class=\"number\">9.9</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(triangle.perimeter)</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"Mutating\"><a href=\"#Mutating\" class=\"headerlink\" title=\"Mutating\"></a>Mutating</h3><p>默认情况下, 结构体中的方法不能直接修改结构体的属性. 需要显式声明为 <code>mutating</code>:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">User</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> username:<span class=\"type\">String</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> isVisible:<span class=\"type\">Bool</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> friends: [string] <span class=\"operator\">=</span> []</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">addFriend</span>(<span class=\"params\">username</span>: <span class=\"type\">String</span>)&#123;</span><br><span class=\"line\">    friends.append(username)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"属性监视器\"><a href=\"#属性监视器\" class=\"headerlink\" title=\"属性监视器\"></a>属性监视器</h3><p>使用 <code>willSet</code> 和 <code>didSet</code>。写入的代码会在属性值发生改变时调用，但不包含构造器中发生值改变的情况:</p>\n<ul>\n<li>分别可以使用 <code>newValue</code>与 <code>oldValue</code>来表示属性将要改变的值以及改变之前的值.</li>\n</ul>\n<p>e.g. 确保三角形的边长总是和正方形的边长相同。</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TriangleAndSquare</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> triangle: <span class=\"type\">EquilateralTriangle</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">willSet</span> &#123;</span><br><span class=\"line\">            square.sideLength <span class=\"operator\">=</span> newValue.sideLength</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> square: <span class=\"type\">Square</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">willSet</span> &#123;</span><br><span class=\"line\">            triangle.sideLength <span class=\"operator\">=</span> newValue.sideLength</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">size</span>: <span class=\"type\">Double</span>, <span class=\"params\">name</span>: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        square <span class=\"operator\">=</span> <span class=\"type\">Square</span>(sideLength: size, name: name)</span><br><span class=\"line\">        triangle <span class=\"operator\">=</span> <span class=\"type\">EquilateralTriangle</span>(sideLength: size, name: name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> triangleAndSquare <span class=\"operator\">=</span> <span class=\"type\">TriangleAndSquare</span>(size: <span class=\"number\">10</span>, name: <span class=\"string\">&quot;another test shape&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(triangleAndSquare.square.sideLength)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(triangleAndSquare.triangle.sideLength)</span><br><span class=\"line\">triangleAndSquare.square <span class=\"operator\">=</span> <span class=\"type\">Square</span>(sideLength: <span class=\"number\">50</span>, name: <span class=\"string\">&quot;larger square&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(triangleAndSquare.triangle.sideLength)</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h3><div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Rank</span>: <span class=\"title class_ inherited__\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> ace <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> two, three, four, five, six, seven, eight, nine, ten</span><br><span class=\"line\">    <span class=\"keyword\">case</span> jack, queen, king</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">simpleDescription</span>() -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> <span class=\"keyword\">self</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> .ace:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;ace&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> .jack:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;jack&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> .queen:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;queen&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> .king:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;king&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"type\">String</span>(<span class=\"keyword\">self</span>.rawValue)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> ace <span class=\"operator\">=</span> <span class=\"type\">Rank</span>.ace</span><br><span class=\"line\"><span class=\"keyword\">let</span> aceRawValue <span class=\"operator\">=</span> ace.rawValue</span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li>如果没有设置第一个成员的初始值, 默认从 <code>0</code> 开始;</li>\n<li>缺省值按照递增处理;</li>\n<li><code>case</code>之外可以设置方法.</li>\n</ul>\n<p>使用 <code>init?(rawValue:)</code> 初始化构造器来从原始值创建一个枚举实例:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> convertedRank <span class=\"operator\">=</span> <span class=\"type\">Rank（rawValue</span>:<span class=\"number\">3</span>）｛</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> threeDescription <span class=\"operator\">=</span> convertedRank.simpleDescription（）</span><br><span class=\"line\">｝</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<ul>\n<li><code>if let</code>表示可选绑定, 安全地解包可选值</li>\n</ul>\n</blockquote>\n<h4 id=\"解包\"><a href=\"#解包\" class=\"headerlink\" title=\"解包\"></a>解包</h4><ol>\n<li><code>if let</code>解包</li>\n</ol>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> <span class=\"type\">A</span> <span class=\"operator\">=</span> <span class=\"type\">B</span> &#123;</span><br><span class=\"line\">  <span class=\"operator\">...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>如果 <code>B</code>不是 nil, 就将其赋值给A, 然后执行 <code>&#123;&#125;</code>内部的语句.</p>\n<ol start=\"2\">\n<li><code>??</code></li>\n</ol>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> score : <span class=\"type\">Int</span> <span class=\"operator\">?</span>  <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(score <span class=\"operator\">??</span> default_score)</span><br><span class=\"line\"><span class=\"comment\">// 成绩score不是nil, 就将其打印, 否则输出默认的成绩</span></span><br></pre></td></tr></table></figure></div>\n\n<p>对字典进行索引:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// scores是一个Int数组</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( major, scores) <span class=\"keyword\">in</span> all_scores &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> score <span class=\"keyword\">in</span> scores&#123;</span><br><span class=\"line\">    <span class=\"operator\">...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果key没有使用, 可以直接忽略</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>( <span class=\"keyword\">_</span>, socres) <span class=\"keyword\">in</span> all_scores&#123;</span><br><span class=\"line\">  <span class=\"operator\">...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>swift支持对字典进行更新或者移除的时候, 返回并使用就值:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> oldValue <span class=\"operator\">=</span> scores.updateValue(<span class=\"number\">100</span>, forKey:<span class=\"string\">&quot;fad&quot;</span>)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"operator\">..</span>)</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">  <span class=\"operator\">...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> oldValue <span class=\"operator\">=</span> scores.removeValue(forKey: <span class=\"string\">&quot;fad&quot;</span>)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;fad&#x27;s old value was <span class=\"subst\">\\(oldValue)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li><code>@IBAction</code>表示组件交互和代码相绑定(允许在交互的时候执行外部定义的函数);</li>\n<li><code>@IBOutlet</code>表示允许代码的响应改变组件本身的状态(字体、大小等).</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"swift.assets/image-20250412115454400.png\"\n                      alt=\"image-20250412115454400\" style=\"zoom:57%;\" \n                >\n\n<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><h4 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h4><p>闭包指的是可以在特定位置运行的、不需要名称的函数.</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scene.setOnStartHandler｛ </span><br><span class=\"line\"><span class=\"comment\">// 闭包的主体</span></span><br><span class=\"line\">｝</span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li><p><code>toggle()</code>可以自动切换变量的布尔值.</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Button</span>(<span class=\"string\">&quot;Press Me&quot;</span>) &#123;</span><br><span class=\"line\">    isOn.toggle()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<h4 id=\"状态属性\"><a href=\"#状态属性\" class=\"headerlink\" title=\"状态属性\"></a>状态属性</h4><ul>\n<li>使用 <code>@State</code>在视图之外定义;</li>\n<li>当状态属性的值发生改变时, 会自动更新视图中相关的部分.</li>\n<li>对于状态对象, 使用 <code>@StateObject</code>来声明.</li>\n</ul>\n<h4 id=\"绑定\"><a href=\"#绑定\" class=\"headerlink\" title=\"绑定\"></a>绑定</h4><p>由 <code>@Binding</code>声明将属性连接到其他地方, 允许子视图对属性的修改并同步.</p>\n<p>在属性的前面增加 <code>$</code>，表明会同步修改可信源.</p>\n<h4 id=\"字符串插值\"><a href=\"#字符串插值\" class=\"headerlink\" title=\"字符串插值\"></a>字符串插值</h4><p>在较长字符串中使用常量、变量或代码表达式，使它们替换为其当前值以求出字符串的值。</p>\n<p>例如，在字符串”Katy ate a \\（fruit）.”中，如果fruit 是带有值 “peach”的变量，那么在求字符串的值时，\\（fruit）由”peach”替换，变为 “Katy ate a peach.”。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><h4 id=\"自动的动画效果\"><a href=\"#自动的动画效果\" class=\"headerlink\" title=\"自动的动画效果\"></a>自动的动画效果</h4><p>当状态属性发生改变时, 我们希望对应控制的视图元素的变化具有动画效果, 那么可以指定: e.g.</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Circle</span>()</span><br><span class=\"line\">    .frame(maxHeight: <span class=\"number\">200</span>)</span><br><span class=\"line\">    .foregroundColor( isOn <span class=\"operator\">?</span> .purple : .mint </span><br><span class=\"line\">    .shadow(color:isOn <span class=\"operator\">?</span> .indigo : .orange , radius: <span class=\"number\">20</span>)</span><br><span class=\"line\">    .scaleEffect(isOn <span class=\"operator\">?</span> <span class=\"number\">1</span>: <span class=\"number\">0.75</span>)</span><br><span class=\"line\">    .animation( .default, value: isOn)</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>其中的 <code>value： isOn</code>表示追踪的状态属性.</p>\n</blockquote>\n<p>在一个视图中创建状态对象,  然后在 <code>app</code>中声明为环境变量并在子视图中使用.</p>\n<h1 id=\"设计原则\"><a href=\"#设计原则\" class=\"headerlink\" title=\"设计原则\"></a>设计原则</h1><p>principle</p>\n<ul>\n<li>需要长按进行交互的组件, 在轻触时ICON放大或者缩小</li>\n</ul>\n<h1 id=\"官方手册学习记录\"><a href=\"#官方手册学习记录\" class=\"headerlink\" title=\"官方手册学习记录\"></a>官方手册学习记录</h1><h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><ul>\n<li><p>Swift 使用<em>字符串插值</em>将常量或变量的名称作为占位符包含在较长的字符串中，并提示 Swift 将其替换为该常量或变量的当前值。将名称包在括号中，并在左括号前用反斜杠进行转义：</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;The current value of friendlyWelcome is <span class=\"subst\">\\(friendlyWelcome)</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 打印 &quot;The current value of friendlyWelcome is Bonjour！&quot;</span></span><br></pre></td></tr></table></figure></div></li>\n<li><p>不必使用 <code>;</code>, 但是如果想在一行中编写多个独立语句，则<em>必须</em>使用分号：</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> cat <span class=\"operator\">=</span> <span class=\"string\">&quot;🐱&quot;</span>; <span class=\"built_in\">print</span>(cat)</span><br><span class=\"line\"><span class=\"comment\">// 打印 &quot;🐱&quot;</span></span><br></pre></td></tr></table></figure></div></li>\n<li><p>整数边界: 使用 min, max进行访问</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> minValue <span class=\"operator\">=</span> <span class=\"type\">UInt8</span>.min  <span class=\"comment\">// minValue 等于 0，类型为 UInt8</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> maxValue <span class=\"operator\">=</span> <span class=\"type\">UInt8</span>.max  <span class=\"comment\">// maxValue 等于 255，类型为 UInt8</span></span><br></pre></td></tr></table></figure></div></li>\n<li><p>类型别名: <code>typealias</code></p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typealias</span> <span class=\"type\">AudioSample</span> <span class=\"operator\">=</span> <span class=\"type\">UInt16</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxAmplitudeFound <span class=\"operator\">=</span> <span class=\"type\">AudioSample</span>.min</span><br><span class=\"line\"><span class=\"comment\">// maxAmplitudeFound 现在为 0</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<h3 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h3><ul>\n<li>作用: 多个值组合成一个复合值</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> http404Error <span class=\"operator\">=</span> (<span class=\"number\">404</span>, <span class=\"string\">&quot;Not Found&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// http404Error 的类型为（Int，String），且等于（404，&quot;Not Found&quot;）</span></span><br></pre></td></tr></table></figure></div>\n\n<p>如果只需要元组的部分值，则在分解元组时使用下划线 (<code>_</code>) 忽略不需要的部分</p>\n<ul>\n<li><p>分解元组</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> (statusCode, statusMessage) <span class=\"operator\">=</span> http404Error</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;The status code is <span class=\"subst\">\\(statusCode)</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 打印 &quot;The status code is 404&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;The status message is <span class=\"subst\">\\(statusMessage)</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 打印 &quot;The status message is Not Found&quot;</span></span><br></pre></td></tr></table></figure></div></li>\n<li><p>可以在定义元组时为元组中的各个元素命名：</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> http200Status <span class=\"operator\">=</span> (statusCode: <span class=\"number\">200</span>, description: <span class=\"string\">&quot;OK&quot;</span>)</span><br></pre></td></tr></table></figure></div>\n\n<p>然后可以使用元素名访问:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;The status code is <span class=\"subst\">\\(http200Status.statusCode)</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 打印 &quot;The status code is 200&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;The status message is <span class=\"subst\">\\(http200Status.description)</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 打印 &quot;The status message is OK&quot;</span></span><br></pre></td></tr></table></figure></div></li>\n<li><p>也可以直接使用从零开始的索引来访问, e.g. <code>http200Status.0</code></p>\n</li>\n</ul>\n<hr>\n<ul>\n<li><p><code>&lt;u&gt;</code>可选<code>&lt;/u&gt;</code>: 存储这种类型的值或者 <code>nil</code>.</p>\n</li>\n<li><p>提供后备值: <code>??</code></p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name: <span class=\"type\">String</span>? <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> greeting <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello, &quot;</span> <span class=\"operator\">+</span> (name <span class=\"operator\">??</span> <span class=\"string\">&quot;friend&quot;</span>) <span class=\"operator\">+</span> <span class=\"string\">&quot;!&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(greeting)</span><br><span class=\"line\"><span class=\"comment\">// 打印 &quot;Hello, friend!&quot;</span></span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li>如果 <code>??</code> 之前的值不是 <code>nil</code>, 就会正常解包, 否则选择后备值;</li>\n<li>使用 <code>()</code> 包裹.</li>\n</ul>\n</li>\n<li><p><code>&lt;u&gt;</code>隐式解包可选<code>&lt;/u&gt;</code>: 安全假定一直都有值时使用</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> possibleString: <span class=\"type\">String</span>? <span class=\"operator\">=</span> <span class=\"string\">&quot;An optional string.&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> forcedString: <span class=\"type\">String</span> <span class=\"operator\">=</span> possibleString<span class=\"operator\">!</span> <span class=\"comment\">// 需要显式解包</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> assumedString: <span class=\"type\">String</span>! <span class=\"operator\">=</span> <span class=\"string\">&quot;An implicitly unwrapped optional string.&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> implicitString: <span class=\"type\">String</span> <span class=\"operator\">=</span> assumedString <span class=\"comment\">// 隐式解包</span></span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<hr>\n<h3 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h3><p>函数在声明中包含 <code>throws</code> 关键字，表示它可以抛出错误。调用可以抛出错误的函数时，要在表达式前加上 <code>try</code> 关键字.</p>\n<p>Swift 会自动将错误传播到当前作用域之外，直到它们被 <code>catch</code> 子句处理为止。</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> canThrowAnError()</span><br><span class=\"line\">    <span class=\"comment\">// 无错误的情况</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 抛出错误的情况</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>细节部分在后面补充</p>\n</blockquote>\n<h3 id=\"断言和先决条件\"><a href=\"#断言和先决条件\" class=\"headerlink\" title=\"断言和先决条件\"></a>断言和先决条件</h3><h4 id=\"使用断言进行调试\"><a href=\"#使用断言进行调试\" class=\"headerlink\" title=\"使用断言进行调试\"></a>使用断言进行调试</h4><div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> age <span class=\"operator\">=</span> <span class=\"operator\">-</span><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"built_in\">assert</span>(age <span class=\"operator\">&gt;=</span> <span class=\"number\">0</span>, <span class=\"string\">&quot;A person&#x27;s age can&#x27;t be less than zero.&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 该断言失败的原因是 -3 并不 &gt;= 0。</span></span><br></pre></td></tr></table></figure></div>\n\n<p>断言的第一个参数是预期的、正确的结果, 如果不满足条件就会显示报错. 但是不会阻止程序继续运行.</p>\n<h4 id=\"强制执行先决条件\"><a href=\"#强制执行先决条件\" class=\"headerlink\" title=\"强制执行先决条件\"></a>强制执行先决条件</h4><p>当条件有可能为假，但<em>必须</em>为真才能继续执行代码时，请使用先决条件.</p>\n<p>向该函数传递一个计算结果为 <code>true</code> 或 <code>false</code> 的表达式，以及一条在条件结果为 <code>false</code> 时显示的信息:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在下标的实现中...</span></span><br><span class=\"line\"><span class=\"built_in\">precondition</span>(index <span class=\"operator\">&gt;</span> <span class=\"number\">0</span>, <span class=\"string\">&quot;Index must be greater than zero.&quot;</span>)</span><br></pre></td></tr></table></figure></div>\n\n<hr>\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><h3 id=\"基本运算符\"><a href=\"#基本运算符\" class=\"headerlink\" title=\"基本运算符\"></a>基本运算符</h3><ul>\n<li><p>与 C 和 Objective-C 中的赋值运算符不同，Swift 中的赋值运算符本身不返回值。以下语句无效：</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> x <span class=\"operator\">=</span> y &#123; <span class=\"comment\">// 这是无效的，因为 x = y 不返回值。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li>可以防止不小心使用赋值运算符（&#x3D;） 而非等于运算符（&#x3D;&#x3D;）.</li>\n</ul>\n</li>\n<li><p>基本的四则运算不允许值的溢出.</p>\n</li>\n</ul>\n<blockquote>\n<p>[!NOTE]</p>\n<p>在 Swift 中对负数的处理与模运算符有所不同:</p>\n<p>为了确定 <code>a % b</code> 的答案，<code>%</code> 运算符计算以下等式并返回 <code>余数</code> 作为输出：</p>\n<div class=\"code-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a` = (`b` x `某个乘数`) + `余数</span><br></pre></td></tr></table></figure></div>\n\n<p>其中 <code>某个乘数</code> 是 <code>b</code> 在 <code>a</code> 中能容纳的最大倍数。</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">9</span> <span class=\"operator\">%</span> <span class=\"number\">4</span>    <span class=\"comment\">// 等于 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">-</span><span class=\"number\">9</span> <span class=\"operator\">%</span> <span class=\"number\">4</span>   <span class=\"comment\">// 等于 -1</span></span><br></pre></td></tr></table></figure></div></blockquote>\n<ul>\n<li><p>数值的正负号可以使用前缀 <code>-</code> 切换，称为<code>&lt;u&gt;</code>一元负号运算符<code>&lt;/u&gt;</code>.</p>\n<ul>\n<li><p>中间没有任何空格.</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> three <span class=\"operator\">=</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> minusThree <span class=\"operator\">=</span> <span class=\"operator\">-</span>three       <span class=\"comment\">// minusThree 等于 -3</span></span><br></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"元组的计算\"><a href=\"#元组的计算\" class=\"headerlink\" title=\"元组的计算\"></a>元组的计算</h4><ul>\n<li>前提: 如果两个元组具有相同的类型和相同数量的值，则可以比较它们.</li>\n<li>规则:<ul>\n<li>元组是从左到右逐个值进行比较的，直到比较发现两个不相等的值为止。</li>\n<li>这两个值将进行比较，并且该比较的结果决定了整个元组比较的结果。</li>\n<li>如果所有元素都相等，那么这两个元组本身就相等。</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>[!NOTE]</p>\n<p>只有当给定的运算符可以应用于各自元组中的每个值时，元组才能与该运算符进行比较.</p>\n</blockquote>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"string\">&quot;blue&quot;</span>, <span class=\"literal\">false</span>) <span class=\"operator\">&lt;</span> (<span class=\"string\">&quot;purple&quot;</span>, <span class=\"literal\">true</span>)  <span class=\"comment\">// 错误，因为 &lt; 不能比较布尔值</span></span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"空合并运算符\"><a href=\"#空合并运算符\" class=\"headerlink\" title=\"空合并运算符\"></a>空合并运算符</h4><p><code>a ?? b</code>的结果与下面的运算相同:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a <span class=\"operator\">!=</span> <span class=\"literal\">nil</span> <span class=\"operator\">?</span> a<span class=\"operator\">!</span> : b</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"区间运算\"><a href=\"#区间运算\" class=\"headerlink\" title=\"区间运算\"></a>区间运算</h4><ul>\n<li><p><em>闭区间运算符</em>（<code>a...b</code>）定义了一个从 <code>a</code> 到 <code>b</code> 的范围，包括 <code>a</code> 和 <code>b</code> 的值。<code>a</code> 的值不能大于 <code>b</code>;</p>\n<ul>\n<li><p>在需要使用所有值的情况下很有用</p>\n</li>\n<li><p>e.g.</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> <span class=\"number\">1</span><span class=\"operator\">...</span><span class=\"number\">5</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(index)</span> 乘以 5 等于 <span class=\"subst\">\\(index <span class=\"operator\">*</span> <span class=\"number\">5</span>)</span>&quot;</span>) </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li><p><em>半开区间运算符</em>（<code>a..&lt;b</code>）定义了一个从 <code>a</code> 到 <code>b</code> 但不包括 <code>b</code> 的范围.</p>\n<ul>\n<li><p>对于处理从基数 0 开始的列表（如数组）时特别有用，因为它可以计数到列表长度（但不包括列表长度）.</p>\n</li>\n<li><p>e.g.</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> names <span class=\"operator\">=</span> [<span class=\"string\">&quot;Anna&quot;</span>, <span class=\"string\">&quot;Alex&quot;</span>, <span class=\"string\">&quot;Brian&quot;</span>, <span class=\"string\">&quot;Jack&quot;</span>] </span><br><span class=\"line\"><span class=\"keyword\">let</span> count <span class=\"operator\">=</span> names.count</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">0</span><span class=\"operator\">..&lt;</span>count &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;第 <span class=\"subst\">\\(i <span class=\"operator\">+</span> <span class=\"number\">1</span>)</span> 个人叫 <span class=\"subst\">\\(names[i])</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li><p>闭区间运算符有一种替代形式，用于一直延伸到尽可能远的区间 —— 例如，一个包含从索引 2 到数组末尾所有元素的区间。</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> names[<span class=\"number\">2</span><span class=\"operator\">...</span>] &#123; <span class=\"built_in\">print</span>(name) &#125;</span><br><span class=\"line\"><span class=\"comment\">// Brian</span></span><br><span class=\"line\"><span class=\"comment\">// Jack</span></span><br></pre></td></tr></table></figure></div></li>\n<li><p>半开区间运算符也有一种只写最后一个值的单侧形式</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> names[<span class=\"operator\">..&lt;</span><span class=\"number\">2</span>] &#123; <span class=\"built_in\">print</span>(name) &#125;</span><br><span class=\"line\"><span class=\"comment\">// Anna</span></span><br><span class=\"line\"><span class=\"comment\">// Alex</span></span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<h4 id=\"逻辑运算\"><a href=\"#逻辑运算\" class=\"headerlink\" title=\"逻辑运算\"></a>逻辑运算</h4><blockquote>\n<p>[!NOTE]</p>\n<p>Swift 逻辑运算符 <code>&amp;&amp;</code> 和 <code>||</code> 遵循<code>&lt;u&gt;</code>从左到右<code>&lt;/u&gt;</code>的结合顺序，这意味着带有多个逻辑运算符的复合表达式会首先评估最左边的子表达式.</p>\n</blockquote>\n<h2 id=\"控制流\"><a href=\"#控制流\" class=\"headerlink\" title=\"控制流\"></a>控制流</h2><h2 id=\"协议\"><a href=\"#协议\" class=\"headerlink\" title=\"协议\"></a>协议</h2><ul>\n<li>如果类需要继承, 需要将父类写在所有的协议之前</li>\n<li>不能在协议定义中为方法参数指定默认值。</li>\n<li>协议也可以要求遵循协议的类型 <code>&lt;u&gt;</code>实现指定的构造器<code>&lt;/u&gt;</code>, 和协议内部的方法一样, 不需要写花括号和构造期的实体<ul>\n<li>如果是类, 必须在构造函数的开头加上 <code>required</code>修饰符. 这是为了确保所有继承的子类也提供这个构造函数的实现, 从而确保遵守协议;</li>\n<li>但是如果一个类被声明为了 <code>final</code>, 也就是无法被继承, 那么就不需要 <code>required</code>的声明</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"协议的基本用法\"><a href=\"#协议的基本用法\" class=\"headerlink\" title=\"协议的基本用法\"></a>协议的基本用法</h3><p>协议可以规定属性类型以及属性被操作的权限, 通常和类、结构体和枚举进行绑定, 作为一种强制的约束.</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">Tax</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> national: <span class=\"type\">Double</span> &#123; <span class=\"keyword\">get</span> &#125; </span><br><span class=\"line\">  <span class=\"keyword\">var</span> individual: <span class=\"type\">Double</span>&#123; <span class=\"keyword\">set</span> <span class=\"keyword\">get</span>&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>同样可以在协议中使用 <code>mutating</code> 来声明一个改变自身属性的方法:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">Tax</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> national: <span class=\"type\">Double</span> &#123; <span class=\"keyword\">get</span> &#125; </span><br><span class=\"line\">  <span class=\"keyword\">var</span> individual: <span class=\"type\">Double</span>&#123; <span class=\"keyword\">set</span> <span class=\"keyword\">get</span>&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">changeTax</span>(<span class=\"params\">newValue</span>: <span class=\"type\">Double</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li><p>需要注意的是, 结构体内部的方法如果要修改自身属性, 也需要声明 <code>mutating</code>, 但是类则不需要额外的声明.</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Taxas</span>: <span class=\"title class_ inherited__\">Tax</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> national: <span class=\"type\">Double</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> individual: <span class=\"type\">Double</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">changeTax</span>(<span class=\"params\">newValue</span>: <span class=\"type\">Double</span>)&#123;</span><br><span class=\"line\">    national <span class=\"operator\">=</span> newValue</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<h3 id=\"补充协议\"><a href=\"#补充协议\" class=\"headerlink\" title=\"补充协议\"></a>补充协议</h3><ul>\n<li><p>使用 <code>,</code> 连接不同的协议</p>\n</li>\n<li><p><code>extension</code>可以为协议的函数设置默认方法, 就不需要继续在每一个类、结构体或枚举中重新定义</p>\n<ul>\n<li><p>同样可以补充数据类型</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">Int</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> abs: <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> <span class=\"keyword\">self</span> <span class=\"operator\">&gt;=</span> <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span></span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"operator\">-</span><span class=\"keyword\">self</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>((<span class=\"operator\">-</span><span class=\"number\">3</span>).abs);</span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"有条件地遵循协议\"><a href=\"#有条件地遵循协议\" class=\"headerlink\" title=\"有条件地遵循协议\"></a>有条件地遵循协议</h4><p>让 <code>Array</code> 类型只要在存储遵循 <code>TextRepresentable</code> 协议的元素时，就遵循 <code>TextRepresentable</code> 协议:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">Array</span>: <span class=\"title class_ inherited__\">TextRepresentable</span> <span class=\"keyword\">where</span> <span class=\"title class_ inherited__\">Element</span>: <span class=\"title class_ inherited__\">TextRepresentable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> textualDescription: <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> itemsAsText <span class=\"operator\">=</span> <span class=\"keyword\">self</span>.map &#123; <span class=\"variable\">$0</span>.textualDescription &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;[&quot;</span> <span class=\"operator\">+</span> itemsAsText.joined(separator: <span class=\"string\">&quot;, &quot;</span>) <span class=\"operator\">+</span> <span class=\"string\">&quot;]&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> myDice <span class=\"operator\">=</span> [d6, d12]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(myDice.textualDescription)</span><br><span class=\"line\"><span class=\"comment\">// 打印 &quot;[A 6-sided dice, A 12-sided dice]&quot;</span></span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"扩展里声明协议遵循\"><a href=\"#扩展里声明协议遵循\" class=\"headerlink\" title=\"扩展里声明协议遵循\"></a>扩展里声明协议遵循</h4><p>当一个类型已经遵循了某个协议中的所有要求，却还没有声明遵循该协议时，可以通过空的扩展来让它遵循该协议:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Hamster</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> textualDescription: <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;A hamster named <span class=\"subst\">\\(name)</span>&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">Hamster</span>: <span class=\"title class_ inherited__\">TextRepresentable</span> &#123;&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"Error-handling\"><a href=\"#Error-handling\" class=\"headerlink\" title=\"Error handling\"></a>Error handling</h3><p>系统提供了 <code>Error</code>协议用于错误处理, 主动给予错误的捕捉情况.</p>\n<p>使用方法:</p>\n<ol>\n<li>定义遵循相关协议的枚举类型, 作为错误的类型;</li>\n<li>定义可能抛出错误的函数;</li>\n<li>使用 <code>do...catch</code>块来结构化地处理错误.</li>\n</ol>\n<p>e.g.</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个错误类型，遵循 Error 协议</span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">PasswordError</span>: <span class=\"title class_ inherited__\">Error</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> tooShort</span><br><span class=\"line\">    <span class=\"keyword\">case</span> tooWeak</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 一个函数，可能抛出错误</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">validate</span>(<span class=\"params\">password</span>: <span class=\"type\">String</span>) <span class=\"keyword\">throws</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> password.count <span class=\"operator\">&lt;</span> <span class=\"number\">6</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">PasswordError</span>.tooShort</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> password <span class=\"operator\">==</span> <span class=\"string\">&quot;123456&quot;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">PasswordError</span>.tooWeak</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 do-catch 捕捉错误</span></span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> validate(password: <span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;密码验证通过 ✅&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">PasswordError</span>.tooShort &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;❌ 密码太短，请至少使用 6 个字符&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">PasswordError</span>.tooWeak &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;❌ 密码太弱，不能使用简单的序列&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;❌ 发生未知错误：<span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<ul>\n<li>throws：在函数声明中标注该函数会抛出错误;</li>\n<li>try：在调用可能抛出错误的函数时使用.</li>\n</ul>\n</blockquote>\n<h3 id=\"其他的协议\"><a href=\"#其他的协议\" class=\"headerlink\" title=\"其他的协议\"></a>其他的协议</h3><h4 id=\"CaseIterable\"><a href=\"#CaseIterable\" class=\"headerlink\" title=\"CaseIterable\"></a>CaseIterable</h4><p>用于获取枚举的属性个数, 从而进行遍历.</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Status</span>:<span class=\"title class_ inherited__\">CaseIterable</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> low,middle,high</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">change</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> <span class=\"keyword\">self</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> .high:</span><br><span class=\"line\">            <span class=\"keyword\">self</span> <span class=\"operator\">=</span> .low</span><br><span class=\"line\">        <span class=\"keyword\">case</span> .low:</span><br><span class=\"line\">            <span class=\"keyword\">self</span> <span class=\"operator\">=</span> .middle</span><br><span class=\"line\">        <span class=\"keyword\">case</span> .middle:</span><br><span class=\"line\">            <span class=\"keyword\">self</span> <span class=\"operator\">=</span> .high</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">ptr</span>()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Current Status is <span class=\"subst\">\\(<span class=\"keyword\">self</span>)</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> status <span class=\"operator\">=</span> <span class=\"type\">Status</span>.low</span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"keyword\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">0</span><span class=\"operator\">..&lt;</span><span class=\"type\">Status</span>.allCases.count&#123;</span><br><span class=\"line\">    status.ptr()</span><br><span class=\"line\">    status.change()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p><code>for _ in 0..&lt;</code> 当中的 <code>_</code>表示忽略遍历时候的循环变量的值.</p>\n</blockquote>\n<h2 id=\"闭包-1\"><a href=\"#闭包-1\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><h4 id=\"闭包的简化推导\"><a href=\"#闭包的简化推导\" class=\"headerlink\" title=\"闭包的简化推导\"></a>闭包的简化推导</h4><p>相当于匿名函数与 <code>lambda</code>.  接下来从普通函数的写法开始简化:</p>\n<ul>\n<li><p>普通函数:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">changeSign</span>(<span class=\"params\">op</span>: <span class=\"type\">Double</span>) -&gt; <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"operator\">-</span>op</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> operation: (<span class=\"type\">Double</span>) -&gt; <span class=\"type\">Double</span></span><br><span class=\"line\">operation <span class=\"operator\">=</span> changeSign</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> result <span class=\"operator\">=</span> operation(<span class=\"number\">4.0</span>) <span class=\"comment\">// result = -4.0</span></span><br></pre></td></tr></table></figure></div></li>\n<li><p>将函数的定义下移:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> operation: (<span class=\"type\">Double</span>) -&gt; <span class=\"type\">Double</span></span><br><span class=\"line\">operation <span class=\"operator\">=</span> (op:<span class=\"type\">Double</span>) -&gt; <span class=\"type\">Double</span> &#123; <span class=\"keyword\">return</span> <span class=\"operator\">-</span>op&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> result  <span class=\"operator\">=</span> operation(<span class=\"number\">4.0</span>)</span><br></pre></td></tr></table></figure></div></li>\n<li><p>将 <code>｛</code> 提前，并在原来的位置添加 <code>in</code></p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> operation:(<span class=\"type\">Double</span>) -&gt; <span class=\"type\">Double</span></span><br><span class=\"line\">operation <span class=\"operator\">=</span> &#123;(op: <span class=\"type\">Double</span>) -&gt; <span class=\"type\">Double</span>  <span class=\"keyword\">in</span> <span class=\"keyword\">return</span> <span class=\"operator\">-</span>op&#125;</span><br><span class=\"line\"><span class=\"operator\">...</span></span><br></pre></td></tr></table></figure></div></li>\n<li><p>系统可以推断类型, 所以根据输入的类型简化返回值的类型定义</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> operation:(<span class=\"type\">Double</span>) -&gt; <span class=\"type\">Double</span></span><br><span class=\"line\">operation <span class=\"operator\">=</span> &#123;(op: <span class=\"type\">Double</span>)   <span class=\"keyword\">in</span> <span class=\"keyword\">return</span> <span class=\"operator\">-</span>op&#125;</span><br><span class=\"line\"><span class=\"operator\">...</span></span><br></pre></td></tr></table></figure></div></li>\n<li><p>可以进一步省略传入的类型</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> operation:(<span class=\"type\">Double</span>) -&gt; <span class=\"type\">Double</span></span><br><span class=\"line\">operation <span class=\"operator\">=</span> &#123; (op) <span class=\"keyword\">in</span> <span class=\"keyword\">return</span> <span class=\"operator\">-</span>op&#125;</span><br><span class=\"line\"><span class=\"operator\">...</span></span><br></pre></td></tr></table></figure></div></li>\n<li><p>省略返回的标记 <code>return</code>:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> operation:(<span class=\"type\">Double</span>) -&gt; <span class=\"type\">Double</span></span><br><span class=\"line\">operation <span class=\"operator\">=</span> &#123; (op) <span class=\"keyword\">in</span>  <span class=\"operator\">-</span>op&#125;</span><br><span class=\"line\"><span class=\"operator\">...</span></span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<p>最后, 我们可以直接用 <code>$0</code>等替代传入的参数, 也就是省略了参数的名称!</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> operation:(<span class=\"type\">Double</span>) -&gt; <span class=\"type\">Double</span></span><br><span class=\"line\">operation <span class=\"operator\">=</span> &#123; <span class=\"operator\">-</span><span class=\"variable\">$0</span> &#125;</span><br><span class=\"line\"><span class=\"operator\">...</span></span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"闭包的常见使用\"><a href=\"#闭包的常见使用\" class=\"headerlink\" title=\"闭包的常见使用\"></a>闭包的常见使用</h4><p>e.g.</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/swift.assets/image-20250412170605776.png\"\n                      alt=\"image-20250412170605776\"\n                ></p>\n<h4 id=\"Trailing-Closure\"><a href=\"#Trailing-Closure\" class=\"headerlink\" title=\"Trailing Closure\"></a>Trailing Closure</h4><p>当闭包是函数的<strong>最后一个参数</strong>时，</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> result <span class=\"operator\">=</span> applyTwice(<span class=\"number\">3</span>, operation: &#123; <span class=\"variable\">$0</span> <span class=\"operator\">*</span> <span class=\"number\">2</span> &#125;)</span><br></pre></td></tr></table></figure></div>\n\n<p>可以改写成:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> result <span class=\"operator\">=</span> applyTwice(<span class=\"number\">3</span>) &#123; <span class=\"variable\">$0</span> <span class=\"operator\">*</span> <span class=\"number\">2</span> &#125; <span class=\"comment\">// result = 12</span></span><br></pre></td></tr></table></figure></div>\n\n<h1 id=\"慕课学习杂记\"><a href=\"#慕课学习杂记\" class=\"headerlink\" title=\"慕课学习杂记\"></a>慕课学习杂记</h1><h4 id=\"something\"><a href=\"#something\" class=\"headerlink\" title=\"something\"></a>something</h4><ul>\n<li><p>去官网学习新出现的技术</p>\n<ul>\n<li>codeML</li>\n</ul>\n</li>\n<li><p>函数也可以赋值给变量</p>\n</li>\n</ul>\n<h4 id=\"省略外部参数名\"><a href=\"#省略外部参数名\" class=\"headerlink\" title=\"省略外部参数名\"></a>省略外部参数名</h4><ul>\n<li>外部参数名: 在函数调用的时候使用, 提高可读性;</li>\n<li>内部参数名: 在函数体的内部使用</li>\n</ul>\n<p>如果如此定义:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">greet</span>(<span class=\"params\">person</span> <span class=\"params\">name</span>: <span class=\"type\">String</span>)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello , <span class=\"subst\">\\(name)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>那么在调用的时候必须显示声明外部参数名:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">greet( person: <span class=\"string\">&quot;Alice&quot;</span>)</span><br></pre></td></tr></table></figure></div>\n\n<p>如果我们希望省略外部参数名, 就可以在定义函数的时候用 <code>_</code>来代替:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">greet</span>(<span class=\"keyword\">_</span> <span class=\"params\">name</span>: <span class=\"type\">String</span>)&#123;</span><br><span class=\"line\">  <span class=\"operator\">...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h4><p>我们可以让函数作为另一个函数的输入参数:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">addTwoInts</span>( <span class=\"keyword\">_</span> <span class=\"params\">a</span>: <span class=\"type\">Int</span>, <span class=\"keyword\">_</span> <span class=\"params\">b</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a<span class=\"operator\">+</span>b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> mathFunction <span class=\"operator\">=</span> addTwoInts</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 高阶函数</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">printMathResults（_</span> mathFunction: (<span class=\"type\">Int</span>, <span class=\"type\">Int）</span>-&gt; <span class=\"type\">Int</span>, <span class=\"keyword\">_</span> a: <span class=\"type\">Int</span>, <span class=\"keyword\">_</span> b: <span class=\"type\">Int</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result <span class=\"operator\">=</span> mathFunction(a,b)</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用</span></span><br><span class=\"line\">printMathResults（addTwoInts， <span class=\"number\">3</span>,<span class=\"number\">5</span>）</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>注意函数作为参数的时候, 类型的定义就是输入类型和返回类型, 也是用 <code>,</code> 来分隔不同的参数.</p>\n</blockquote>\n<hr>\n<h4 id=\"内置的库\"><a href=\"#内置的库\" class=\"headerlink\" title=\"内置的库\"></a>内置的库</h4><p><code>AVFoudation</code>: 音频播放</p>\n<hr>\n<ul>\n<li><p>枚举内部也可以设置方法;</p>\n</li>\n<li><p>结构体本身不需要构造函数(因为swift存在对于结构体的默认构造) , 但是如果结构体内部的属性存在这样的属性:</p>\n<ul>\n<li>它可能是枚举内部的方法, 跟枚举的属性有关, 可能使用了 <code>switch</code>来根据枚举属性赋值.</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Type</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Cike</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"operator\">...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">func</span> <span class=\"title function_\">blood</span>()-&gt; <span class=\"type\">Double</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> <span class=\"keyword\">self</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> .<span class=\"type\">Cike</span>: <span class=\"keyword\">return</span> <span class=\"number\">10</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> .<span class=\"type\">Fashi</span>: <span class=\"keyword\">return</span> <span class=\"operator\">...</span></span><br><span class=\"line\">      <span class=\"operator\">...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Card</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> country: <span class=\"type\">Country</span></span><br><span class=\"line\">  vat type: <span class=\"type\">Type</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> blood: <span class=\"type\">Double</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">init</span> (<span class=\"params\">country</span>: <span class=\"type\">Country</span>, <span class=\"params\">type</span>: <span class=\"type\">Type</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.country <span class=\"operator\">=</span> country</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.type <span class=\"operator\">=</span> type;</span><br><span class=\"line\">    blood <span class=\"operator\">=</span> type.blood</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div></li>\n<li><p>结构体和枚举属于 <code>&lt;u&gt;</code>值类型<code>&lt;/u&gt;</code>, 如果赋值的时候进行拷贝操作;</p>\n<ul>\n<li>如果结构体声明为 <code>let</code>, 即使属性是变量, 那么也无法修改内部的属性,</li>\n</ul>\n</li>\n<li><p>类是引用类型, 赋值的时候使得左值指向了同样的内存区域, 也就是信息保持一致, 更改同步</p>\n<ul>\n<li>如果我们将类声明为常量, 相当于cpp的指针常量, 也就是说类内部的属性可以更改, 但是无法修改这个量指向的内存区域.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"计算属性-1\"><a href=\"#计算属性-1\" class=\"headerlink\" title=\"计算属性\"></a>计算属性</h4><p>访问的时候动态计算得到.</p>\n<p>下面通过一个矩形的例子来说明:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Point</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> x <span class=\"operator\">=</span> <span class=\"number\">0.0</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> y <span class=\"operator\">=</span> <span class=\"number\">0.0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Size</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> width <span class=\"operator\">=</span> <span class=\"number\">0.0</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> height <span class=\"operator\">=</span> <span class=\"number\">0.0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Rect</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> origin <span class=\"operator\">=</span> <span class=\"type\">Point</span>()</span><br><span class=\"line\">  <span class=\"keyword\">var</span> size <span class=\"operator\">=</span> <span class=\"type\">Size</span>()</span><br><span class=\"line\">  <span class=\"keyword\">var</span> center: <span class=\"type\">Point</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> centerX <span class=\"operator\">=</span> origin.x <span class=\"operator\">+</span> (size.width <span class=\"operator\">/</span> <span class=\"number\">2</span>)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> centerY <span class=\"operator\">=</span> orgin.y <span class=\"operator\">+</span> (size.height <span class=\"operator\">/</span><span class=\"number\">2</span> )</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"type\">Point</span>(x: centerX, y: centerY)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">set</span>(newCenter)&#123;</span><br><span class=\"line\">      origin.x <span class=\"operator\">=</span> newCenter.x <span class=\"operator\">-</span> (size.width <span class=\"operator\">/</span> <span class=\"number\">2</span>)</span><br><span class=\"line\">      origin.y <span class=\"operator\">=</span> newCenter.y <span class=\"operator\">-</span> (size.height <span class=\"operator\">/</span> <span class=\"number\">2</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>上述完成了结构体的计算属性的定义, 其中 <code>get</code>部分也可以优化为:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">get</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">Point</span>(x: origin.x <span class=\"operator\">+</span> (size.width <span class=\"operator\">/</span> <span class=\"number\">2</span>),</span><br><span class=\"line\">        y: orgin.y <span class=\"operator\">+</span> (size.height <span class=\"operator\">/</span><span class=\"number\">2</span> ) )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>这是因为, 如果 <code>get</code> 部分只存在一个表达式,  就会自动将其返回, 不需要显式声明 <code>return</code>关键字.</p>\n</blockquote>\n<p>然后可以如此应用:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> currCenter <span class=\"operator\">=</span> rectElement.center</span><br><span class=\"line\"></span><br><span class=\"line\">rectElement.center <span class=\"operator\">=</span> <span class=\"type\">Point</span>(x:<span class=\"number\">20</span>, y:<span class=\"number\">50</span>)</span><br></pre></td></tr></table></figure></div>\n\n<p><code>set</code>提供了语法糖, 也就是可以直接访问oldValue 和  newValue, 因此我们可以如此改写:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span>&#123;</span><br><span class=\"line\">  origin.x <span class=\"operator\">=</span> newValue.x <span class=\"operator\">-</span> (size.width <span class=\"operator\">/</span> <span class=\"number\">2</span>)</span><br><span class=\"line\">  origin.y <span class=\"operator\">=</span> newValue.y <span class=\"operator\">-</span> (size.height <span class=\"operator\">/</span> <span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>[!NOTE]</p>\n<p>对于只读的计算属性, 由于不存在 <code>set</code>, 我们可以直接在花括号内定义返回内容.</p>\n</blockquote>\n<hr>\n<ul>\n<li>声明 <code>static</code> , 表示这个属性或者方法属于整个类型而非某个实例. 此时相应的, 我们使用 <code>&lt;tyepName&gt;.&lt;strtic attribute&gt;</code>的方式来访问.</li>\n<li>子面量本身是不可修改的, 下面的拓展中, 如果写作  <code>var someInt = 3.square()</code>就会报错</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">Int</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">square</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span> <span class=\"operator\">=</span> <span class=\"keyword\">self</span> <span class=\"operator\">*</span> <span class=\"keyword\">self</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> someInt <span class=\"operator\">=</span> <span class=\"number\">3</span></span><br><span class=\"line\">someInt.square()</span><br></pre></td></tr></table></figure></div>\n\n<hr>\n<p>控制器存在5种状态:</p>\n<ul>\n<li>未加载</li>\n<li>将要出现</li>\n<li>出现</li>\n<li>将要消失</li>\n<li>已经消失</li>\n</ul>\n<p>APP的状态:</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"swift.assets/image-20250413182851979.png\"\n                      alt=\"image-20250413182851979\" style=\"zoom:33%;\" \n                >\n\n<p><code>UiSceneDelegate</code>用于响应基于 <code>scene</code> 的生命周期事件.</p>\n<p>可以使用属性的 <code>didset</code>来便捷地检测变化并快速修改:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> score <span class=\"operator\">=</span> <span class=\"number\">0</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">didSet</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.gameScoreLabel.text <span class=\"operator\">=</span> <span class=\"string\">&quot;Score: <span class=\"subst\">\\(score)</span>&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li><code>viewController</code>是新的页面;</li>\n<li><code>view</code>是视图, 可以叠加在页面上.</li>\n<li><code>UIAlertController</code>组件相当于警示的弹窗组件</li>\n</ul>\n<h3 id=\"作图和绘画\"><a href=\"#作图和绘画\" class=\"headerlink\" title=\"作图和绘画\"></a>作图和绘画</h3><h4 id=\"CG\"><a href=\"#CG\" class=\"headerlink\" title=\"CG\"></a>CG</h4><ul>\n<li><p><code>CGFloat</code>用于二维坐标系中的坐标数据:</p>\n<ul>\n<li><code>let coor_x = CGFloat(10.5)</code></li>\n</ul>\n</li>\n<li><p><code>CGPoint(x: .. , y:...)</code></p>\n</li>\n<li><p><code>CGSize</code> 包含width和height属性的结构体;</p>\n</li>\n<li><p><code>CGRect</code>包含点和尺寸的矩形</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">CGRect</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> origin: <span class=\"type\">CGPoint</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> size: <span class=\"type\">CGSize</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li><p>其他属性</p>\n</li>\n<li><p>e.g.</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> minX: <span class=\"type\">CGPoint</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> midY: <span class=\"type\">CGPoint</span></span><br><span class=\"line\">intersects(<span class=\"type\">CGRect</span>) -&gt; <span class=\"type\">Bool</span> <span class=\"comment\">// 判断是否存在交集</span></span><br><span class=\"line\">contains(<span class=\"type\">CGPoint</span>) -&gt; <span class=\"type\">Bool</span> <span class=\"comment\">// 是否包含点.</span></span><br></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<p>最小单元是 <code>Point</code>而非像素点.</p>\n<p>bound表示视图内部允许绘制的区域:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bounds: <span class=\"type\">CGRect</span> <span class=\"comment\">// 也就是一个矩形</span></span><br></pre></td></tr></table></figure></div>\n\n<p>frame\t视图在父视图中的位置:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> frame: <span class=\"type\">CGRect</span></span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"自定义视图\"><a href=\"#自定义视图\" class=\"headerlink\" title=\"自定义视图\"></a>自定义视图</h4><p>绘制自定义视图通常通过创建一个自定义的 UIView 子类，并重写 draw(_:) 方法来实现.</p>\n<p>playGround中的实例:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"><span class=\"keyword\">import</span> PlaygroundSupport</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CustomView</span>: <span class=\"title class_ inherited__\">UIView</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">init</span>(<span class=\"params\">frame</span>: <span class=\"type\">CGRect</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(frame: frame)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.backgroundColor <span class=\"operator\">=</span> .white <span class=\"comment\">// 设置背景颜色</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">required</span> <span class=\"keyword\">init?</span>(<span class=\"params\">coder</span>: <span class=\"type\">NSCoder</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fatalError</span>(<span class=\"string\">&quot;init(coder:) has not been implemented&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">draw</span>(<span class=\"keyword\">_</span> <span class=\"params\">rect</span>: <span class=\"type\">CGRect</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> context <span class=\"operator\">=</span> <span class=\"type\">UIGraphicsGetCurrentContext</span>() <span class=\"keyword\">else</span> &#123; <span class=\"keyword\">return</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 绘制一个圆形</span></span><br><span class=\"line\">        context.setFillColor(<span class=\"type\">UIColor</span>.blue.cgColor) <span class=\"comment\">// 设置填充颜色</span></span><br><span class=\"line\">        context.fillEllipse(in: rect) <span class=\"comment\">// 绘制填充的圆</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 绘制一个矩形</span></span><br><span class=\"line\">        context.setStrokeColor(<span class=\"type\">UIColor</span>.black.withAlphaComponent(<span class=\"number\">0.6</span>).cgColor) <span class=\"comment\">// 设置能见度</span></span><br><span class=\"line\">        context.setLineWidth(<span class=\"number\">5</span>)</span><br><span class=\"line\">        context.stroke(rect.insetBy(dx: <span class=\"number\">10</span>, dy: <span class=\"number\">10</span>)) <span class=\"comment\">// 绘制矩形边框，留出间距</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建自定义视图实例</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> customView <span class=\"operator\">=</span> <span class=\"type\">CustomView</span>(frame: <span class=\"type\">CGRect</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>, width: <span class=\"number\">200</span>, height: <span class=\"number\">200</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 显示在 Playground 的 live view</span></span><br><span class=\"line\"><span class=\"type\">PlaygroundPage</span>.current.liveView <span class=\"operator\">=</span> customView</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li><code>touchesBegan</code>–WWDC</li>\n<li><code>SCNVector3</code>是三维向量</li>\n<li><code>DispathchQueue</code>表示创建一个异步的进程</li>\n</ul>\n<h3 id=\"传感器\"><a href=\"#传感器\" class=\"headerlink\" title=\"传感器\"></a>传感器</h3><ul>\n<li>加速度的方向伴随手机的头部旋转保持不变;<ul>\n<li>以 <code>g</code> 为描述单位;</li>\n<li>面向使用者的方向是 <code>z</code> 轴.</li>\n</ul>\n</li>\n<li>陀螺仪<ul>\n<li>记录对应用三个轴</li>\n<li>roll, pitch, yaw</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a>动画</h3><h2 id=\"结绳记事\"><a href=\"#结绳记事\" class=\"headerlink\" title=\"结绳记事\"></a>结绳记事</h2><ul>\n<li><p><a class=\"link\"   href=\"https://www.icourse163.org/learn/ZJU-1450024180?tid=1474143513#/learn/content?type=detail&id=1262245274&cid=1299836384&contentid=1217938866\" >操作演示<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a>.</p>\n</li>\n<li><p>按住 <code>ctrl</code>将视图中的组件拖放到代码中.</p>\n</li>\n<li><p>右下角的几个功能:</p>\n<ul>\n<li>约束;</li>\n<li>选择视图</li>\n</ul>\n</li>\n<li><p><code>ctrl + option + cmd + enter</code> 快速显示代码区域</p>\n</li>\n<li><p><a class=\"link\"   href=\"https://www.icourse163.org/learn/ZJU-1450024180?tid=1474143513#/learn/content?type=detail&id=1262245274&cid=1299836386&contentid=1217092922\" >组件使用<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></p>\n<ul>\n<li>50:00 左右介绍了两种类型和交互</li>\n</ul>\n</li>\n<li><p>按住 <code>optional</code>然后 hover 在类上, 可以显示对应的基础操作.</p>\n</li>\n<li><p>可选值的本质是枚举类型!</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Optional</span>&lt;<span class=\"type\">T</span>&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> none</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"keyword\">some</span>(<span class=\"operator\">&lt;</span><span class=\"type\">T</span><span class=\"operator\">&gt;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div></li>\n<li><p><a class=\"link\"   href=\"https://www.icourse163.org/learn/ZJU-1450024180?tid=1474143513#/learn/content?type=detail&id=1262245305&sm=1\" >画图和动画<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></p>\n</li>\n<li><p><a class=\"link\"   href=\"https://www.icourse163.org/learn/ZJU-1450024180?tid=1474143513#/learn/content?type=detail&id=1262245309&sm=1\" >coreML<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></p>\n</li>\n<li><p>在项目中显示Md格式:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*:</span></span><br><span class=\"line\"><span class=\"comment\">...</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure></div></li>\n<li><p>选择在运行时隐藏实际存在的代码:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//#-hidden-code</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> PlaygroundSupport</span><br><span class=\"line\"><span class=\"operator\">...</span></span><br><span class=\"line\"><span class=\"comment\">//#-end-hidden-code</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<h1 id=\"Swift-UI\"><a href=\"#Swift-UI\" class=\"headerlink\" title=\"Swift UI\"></a>Swift UI</h1><ul>\n<li><a class=\"link\"   href=\"https://www.icourse163.org/learn/ZJU-1450024180?tid=1474143513#/learn/content?type=detail&id=1262245315&cid=1299836440&contentid=1218091551\" >慕课的链接<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n<li><a class=\"link\"   href=\"https://www.hackingwithswift.com/100/swiftui/16\" >by now<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n<li>SixD: 开箱即用的UI设计等.</li>\n<li><a class=\"link\"   href=\"https://www.hackingwithswift.com/glossary\" >术语表<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n</ul>\n<h2 id=\"AR\"><a href=\"#AR\" class=\"headerlink\" title=\"AR\"></a>AR</h2><ul>\n<li><a class=\"link\"   href=\"https://www.createwithswift.com/creating-an-augmented-reality-app-in-swiftui-using-realitykit-and-arkit/\" >helpful links<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n<li><a class=\"link\"   href=\"https://developer.apple.com/documentation/realitykit/?ref=createwithswift.com\" >官方文档<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n</ul>\n<h2 id=\"动画-1\"><a href=\"#动画-1\" class=\"headerlink\" title=\"动画\"></a>动画</h2><h4 id=\"缩放变换\"><a href=\"#缩放变换\" class=\"headerlink\" title=\"缩放变换\"></a>缩放变换</h4><div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">NavigationLink</span>&#123;</span><br><span class=\"line\">  <span class=\"type\">BraceletEditor</span>(bracelet)</span><br><span class=\"line\">  .navigationTransitionStyle(</span><br><span class=\"line\">  .zoom(</span><br><span class=\"line\">  \tsourceID:bracelet.id,</span><br><span class=\"line\">  \tin:braceletList</span><br><span class=\"line\">  \t)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;label:&#123;</span><br><span class=\"line\">  <span class=\"type\">BraceletPreview</span>(bracelet)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.matchedTansitionSource(</span><br><span class=\"line\">\tid:bracelet.id,</span><br><span class=\"line\">  in:braceletList</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"Symbol-6\"><a href=\"#Symbol-6\" class=\"headerlink\" title=\"Symbol 6\"></a>Symbol 6</h2><h3 id=\"动画-2\"><a href=\"#动画-2\" class=\"headerlink\" title=\"动画\"></a>动画</h3><ul>\n<li>使用 <code>晃动</code> 在复杂的UI中提示可交互性.</li>\n<li><code>旋转</code>动画来表示正在进行的进程</li>\n</ul>\n<h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2><h4 id=\"磨砂效果\"><a href=\"#磨砂效果\" class=\"headerlink\" title=\"磨砂效果\"></a>磨砂效果</h4><div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.frame(width: <span class=\"number\">200</span>, height: <span class=\"number\">200</span>)</span><br><span class=\"line\">.background(.ultraThinMaterial, in: <span class=\"type\">RoundedRectangle</span>(cornerRadius: <span class=\"number\">20</span>, style: .continuous))</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"搜索栏\"><a href=\"#搜索栏\" class=\"headerlink\" title=\"搜索栏\"></a>搜索栏</h4><ul>\n<li><p>状态管理:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 存储搜索文本</span></span><br><span class=\"line\"><span class=\"meta\">@State</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> searchText <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可选：跟踪搜索是否处于活动状态</span></span><br><span class=\"line\"><span class=\"meta\">@State</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> isSearching <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure></div></li>\n<li><p>数据过滤模式</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基本过滤计算属性模板</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> filteredItems: [<span class=\"type\">ItemType</span>] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> searchText.isEmpty &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> originalItems</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> originalItems.filter &#123; item <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"comment\">// 根据需要自定义过滤条件</span></span><br><span class=\"line\">            item.name.localizedCaseInsensitiveContains(searchText) <span class=\"operator\">||</span></span><br><span class=\"line\">            item.description.localizedCaseInsensitiveContains(searchText)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 处理嵌套数据结构的过滤模板</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> filteredNestedItems: [<span class=\"type\">ParentType</span>] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> searchText.isEmpty &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> originalParentItems</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> originalParentItems.compactMap &#123; parent <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> matchedChildren <span class=\"operator\">=</span> parent.children.filter &#123; child <span class=\"keyword\">in</span></span><br><span class=\"line\">                child.name.localizedCaseInsensitiveContains(searchText)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> matchedChildren.isEmpty &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 创建包含匹配子项的新父项</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"type\">ParentType</span>(id: parent.id, name: parent.name, children: matchedChildren)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div></li>\n<li><p>搜索UI中的实现:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">NavigationStack</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">List</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用过滤后的数据源</span></span><br><span class=\"line\">        <span class=\"type\">ForEach</span>(filteredItems) &#123; item <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"comment\">// 列表项视图</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .navigationTitle(<span class=\"string\">&quot;标题&quot;</span>)</span><br><span class=\"line\">    .searchable(text: <span class=\"variable\">$searchText</span>, prompt: <span class=\"string\">&quot;搜索提示文字&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 可选：添加搜索建议</span></span><br><span class=\"line\">    .searchSuggestions &#123;</span><br><span class=\"line\">        <span class=\"type\">ForEach</span>(suggestions, id: \\.<span class=\"keyword\">self</span>) &#123; suggestion <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"type\">Text</span>(suggestion).searchCompletion(suggestion)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<h4 id=\"左右适应的外边距\"><a href=\"#左右适应的外边距\" class=\"headerlink\" title=\"左右适应的外边距\"></a>左右适应的外边距</h4><p>通过 <code>HStack</code>与  <code>space</code>实现卡片的自适应扩展, 同时利用 <code>.frame(maxwidth:...)</code>来设置一个最大的卡片宽度</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">HStack</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">Spacer</span>(minLength: <span class=\"number\">10</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"type\">Text</span>(item.description)</span><br><span class=\"line\">        .padding()</span><br><span class=\"line\">        .background(<span class=\"type\">Color</span>(.systemGray6))</span><br><span class=\"line\">        .overlay(</span><br><span class=\"line\">            <span class=\"type\">RoundedRectangle</span>(cornerRadius: <span class=\"number\">10</span>) <span class=\"comment\">// 10为圆角半径，可调整</span></span><br><span class=\"line\">                .stroke(<span class=\"type\">Color</span>.gray, lineWidth: <span class=\"number\">1</span>) <span class=\"comment\">// 边框颜色和宽度</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        .clipShape(<span class=\"type\">RoundedRectangle</span>(cornerRadius: <span class=\"number\">10</span>))</span><br><span class=\"line\">    <span class=\"comment\">// 保证背景和边框都圆角</span></span><br><span class=\"line\">    .frame(maxWidth: <span class=\"number\">400</span>) <span class=\"comment\">// 最大宽度限制</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Spacer</span>(minLength: <span class=\"number\">10</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p><code>Spacer(minLength: 10)</code> 表示<strong>保证自己不会小于 minLength</strong>.</p>\n<p>上述的 <code>Spacer</code>会压缩卡片的内容, 如果希望直接设置卡片在父容器中的左右外边距, 应该在卡片的内部使用 <code>padding</code>:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Text</span>(item.description)</span><br><span class=\"line\">    .padding(.horizontal, <span class=\"number\">24</span>) <span class=\"comment\">// 卡片内容内边距</span></span><br><span class=\"line\">    .padding(.vertical, <span class=\"number\">12</span>)</span><br><span class=\"line\">    .background(<span class=\"type\">Color</span>(.systemGray6))</span><br><span class=\"line\">    .overlay(</span><br><span class=\"line\">        <span class=\"type\">RoundedRectangle</span>(cornerRadius: <span class=\"number\">10</span>)</span><br><span class=\"line\">            .stroke(<span class=\"type\">Color</span>.gray, lineWidth: <span class=\"number\">2</span>)</span><br><span class=\"line\">    )</span><br><span class=\"line\">    .clipShape(<span class=\"type\">RoundedRectangle</span>(cornerRadius: <span class=\"number\">10</span>))</span><br><span class=\"line\">    .padding(.horizontal, <span class=\"number\">20</span>) <span class=\"comment\">// 整个卡片距离父视图左右20pt</span></span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"全局统一样式\"><a href=\"#全局统一样式\" class=\"headerlink\" title=\"全局统一样式\"></a>全局统一样式</h4><div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@main</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">MyApp</span>: <span class=\"title class_ inherited__\">App</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">Scene</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">WindowGroup</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">ContentView</span>()</span><br><span class=\"line\">                .buttonStyle(<span class=\"type\">ShadowButtonStyle</span>(radius: <span class=\"number\">10</span>))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"参数标签和参数名\"><a href=\"#参数标签和参数名\" class=\"headerlink\" title=\"参数标签和参数名\"></a>参数标签和参数名</h4><ul>\n<li>参数标签用于函数调用时;</li>\n<li>参数名用于函数内部的参数名称.</li>\n</ul>\n<p>e.g.:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">greet</span>(<span class=\"params\">person</span> <span class=\"params\">atName</span>: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello, <span class=\"subst\">\\(atName)</span>!&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">greet(person: <span class=\"string\">&quot;Alice&quot;</span>) <span class=\"comment\">// 输出：Hello, Alice!</span></span><br></pre></td></tr></table></figure></div>\n\n<p>也可以使用 <code>_</code>来省略调用时的参数标签:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">greet</span>(<span class=\"keyword\">_</span> <span class=\"params\">name</span>: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello, <span class=\"subst\">\\(name)</span>!&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">greet(<span class=\"string\">&quot;Alice&quot;</span>) <span class=\"comment\">// 输出：Hello, Alice!</span></span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"Alert\"><a href=\"#Alert\" class=\"headerlink\" title=\"Alert\"></a>Alert</h4><p>swift UI中的弹窗提示同样通过本地的 <code>@State</code>变量来实现:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@State</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> showingPaymentAlert <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"operator\">...</span></span><br><span class=\"line\">.alert(<span class=\"string\">&quot;Order confirmed&quot;</span>, isPresented: <span class=\"variable\">$showingPaymentAlert</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// add buttons here</span></span><br><span class=\"line\">&#125; message: &#123;</span><br><span class=\"line\">    <span class=\"type\">Text</span>(<span class=\"string\">&quot;Your total was <span class=\"subst\">\\(totalPrice)</span> – thank you!&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>设置按钮来改变可见的状态:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Button</span>(<span class=\"string\">&quot;Confirm order&quot;</span>) &#123;</span><br><span class=\"line\">    showingPaymentAlert.toggle()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"自定义绑定\"><a href=\"#自定义绑定\" class=\"headerlink\" title=\"自定义绑定\"></a>自定义绑定</h4><p>我们也可以使用 <code>Binding</code> 类型手动创建绑定，该类型可以提供自定义 <code>get</code> 和 <code>set</code> 闭包，以便在读取或写入值时运行。</p>\n<h4 id=\"Foreach\"><a href=\"#Foreach\" class=\"headerlink\" title=\"Foreach\"></a>Foreach</h4><div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ForEach</span>(item.restrictions) &#123; restriction <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"type\">Text</span>(restriction)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>此时, 要求 <code>item.restrictions</code> 具有可唯一标识的 <code>id</code> 字段.</p>\n<ul>\n<li><p>如果内容本身就是唯一标识, 比如说遍历的内容是字符串数组, 那么可以如此声明:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ForEach</span>(item.restrictions, id: \\.<span class=\"keyword\">self</span>) &#123; restriction <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"type\">Text</span>(restriction)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<h4 id=\"Spacer\"><a href=\"#Spacer\" class=\"headerlink\" title=\"Spacer()\"></a>Spacer()</h4><p>用于填充剩余的空间</p>\n<ul>\n<li>使用 <code>offset(x:.., y:...)</code>来调节位置, 左上角是原点.</li>\n</ul>\n<h4 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h4><ul>\n<li><p>作用: 用于存储独立于视图的、长期存在的数据;</p>\n</li>\n<li><p>e.g.</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// App.swift</span></span><br><span class=\"line\"><span class=\"meta\">@StateObject</span> <span class=\"keyword\">var</span> order <span class=\"operator\">=</span> <span class=\"type\">Order</span>()</span><br></pre></td></tr></table></figure></div></li>\n<li><p><code>@StateObject</code> 属性包装器负责在<code>&lt;u&gt;</code>应用程序的整个生命周期中<code>&lt;/u&gt;</code>保持对象处于活动状态。</p>\n</li>\n<li><p>需要在创建视图结构体的时候传递:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">WindowGroup</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">ContentView</span>()</span><br><span class=\"line\">        .environmentObject(order)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div></li>\n<li><p>为了让swift知道什么时候更新视图, 常用的是声明 <code>@Published</code>属性包装器——足以让它更新任何正在监视更改的 SwiftUI 视图.</p>\n</li>\n<li><p>同时声明对应的对象遵循可观测协议: <strong>ObservableObject</strong>.</p>\n</li>\n</ul>\n<p>我们可以使用 <code>@EnvironmentObject</code>来访问环境中的共享数据, 也就是传递上一步已经在父视图中创建和管理的对象.</p>\n<p>e.g.</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UserData</span>: <span class=\"title class_ inherited__\">ObservableObject</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Published</span> <span class=\"keyword\">var</span> name: <span class=\"type\">String</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;John&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_ inherited__\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@StateObject</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> userData <span class=\"operator\">=</span> <span class=\"type\">UserData</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ChildView</span>().environmentObject(userData)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ChildView</span>: <span class=\"title class_ inherited__\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@EnvironmentObject</span> <span class=\"keyword\">var</span> userData: <span class=\"type\">UserData</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Text</span>(userData.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>使用 <code>@State</code>来声明简单的本地值——比如整数和字符串.</p>\n<ul>\n<li><p>建议将其声明为 <code>private</code>, e.g.</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@State</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> paymentType <span class=\"operator\">=</span> <span class=\"string\">&quot;Cash&quot;</span></span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<h4 id=\"菜单视图\"><a href=\"#菜单视图\" class=\"headerlink\" title=\"菜单视图\"></a>菜单视图</h4><p>为了将菜单视图存放在一个选项卡当中, 我们需要新建一个视图, 用来作为容器:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">MainView</span>: <span class=\"title class_ inherited__\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">TabView</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">ContentView</span>()</span><br><span class=\"line\">                .tabItem &#123;</span><br><span class=\"line\">                    <span class=\"type\">Label</span>(<span class=\"string\">&quot;Menu&quot;</span>, systemImage: <span class=\"string\">&quot;list.dash&quot;</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">OrderView</span>()</span><br><span class=\"line\">                .tabItem &#123;</span><br><span class=\"line\">                    <span class=\"type\">Label</span>(<span class=\"string\">&quot;Order&quot;</span>, systemImage: <span class=\"string\">&quot;square.and.pencil&quot;</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>页面级别的切换.</p>\n</blockquote>\n<p>使用枚举与子页面的内容分区:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SwiftUI</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_ inherited__\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">enum</span> <span class=\"title class_\">Section</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> cats</span><br><span class=\"line\">        <span class=\"keyword\">case</span> dogs</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@State</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> selectedTab <span class=\"operator\">=</span> <span class=\"type\">Section</span>.cats</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">TabView</span>(selection: <span class=\"variable\">$selectedTab</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">Tab</span>(<span class=\"string\">&quot;Cats&quot;</span>, systemImage: <span class=\"string\">&quot;cat&quot;</span>, value: .cats) &#123;</span><br><span class=\"line\">                <span class=\"type\">Button</span>(<span class=\"string\">&quot;Go to Dogs&quot;</span>) &#123;</span><br><span class=\"line\">                    selectedTab <span class=\"operator\">=</span> .dogs</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          </span><br><span class=\"line\">            <span class=\"type\">Tab</span>(<span class=\"string\">&quot;Dogs&quot;</span>, systemImage: <span class=\"string\">&quot;dog&quot;</span>, value: .dogs) &#123;</span><br><span class=\"line\">                <span class=\"type\">Button</span>(<span class=\"string\">&quot;Go to Cats&quot;</span>) &#123;</span><br><span class=\"line\">                    selectedTab <span class=\"operator\">=</span> .cats</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"合适的修饰符\"><a href=\"#合适的修饰符\" class=\"headerlink\" title=\"合适的修饰符\"></a>合适的修饰符</h2><ul>\n<li><p>图像自动调节尺寸:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Image</span>(item.mainImage)</span><br><span class=\"line\">    .resizable()</span><br><span class=\"line\">    .scaledToFit()</span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<h4 id=\"设置阴影\"><a href=\"#设置阴影\" class=\"headerlink\" title=\"设置阴影\"></a>设置阴影</h4><div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.shadow(color: .black.opacity(<span class=\"number\">0.2</span>), </span><br><span class=\"line\">        radius: <span class=\"number\">15</span>, x: <span class=\"number\">0</span>, y: <span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"为按钮设置动画\"><a href=\"#为按钮设置动画\" class=\"headerlink\" title=\"为按钮设置动画\"></a>为按钮设置动画</h4><div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_ inherited__\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@State</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> showingWelcome <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Toggle</span>(<span class=\"string\">&quot;Toggle label&quot;</span>, isOn: <span class=\"variable\">$showingWelcome</span>.animation())</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> showingWelcome &#123;</span><br><span class=\"line\">                <span class=\"type\">Text</span>(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>可以进一步设置, 比如弹簧的渐入渐出:</p>\n<div class=\"code-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Toggle</span>(<span class=\"string\">&quot;Toggle label&quot;</span>, isOn: <span class=\"variable\">$showingWelcome</span>.animation(.spring()))</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h2><h4 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h4><ul>\n<li><code>ctrl</code>按住后点击  <code>VStack</code>可以快速地将其添加到 <code>ZStack</code>当中<ul>\n<li>颜色的设置需要通过 <code>ZStack</code>来实现.</li>\n</ul>\n</li>\n<li><code>option</code>可以显示当前类的介绍</li>\n<li></li>\n</ul>\n<p><strong>推荐资源：</strong></p>\n<ul>\n<li><strong>Raywenderlich 的 SwiftUI 教程：</strong> <a class=\"link\"   href=\"https://www.raywenderlich.com/books/swiftui-apprentice\" >Raywenderlich - SwiftUI Apprentice<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n<li><strong>Big Mountain Studio 的免费电子书：</strong> <a class=\"link\"   href=\"https://www.bigmountainstudio.com/free-swiftui-book\" >SwiftUI Views Quick Start<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n</ul>\n","more":"<h1 id=\"初见\"><a href=\"#初见\" class=\"headerlink\" title=\"初见\"></a>初见</h1><p>默认情况下，函数使用它们的参数名称作为它们参数的标签，在参数名称前可以自定义参数标签，或者使用 <code>_</code> 表示不使用参数标签:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">greet</span>(<span class=\"keyword\">_</span> <span class=\"params\">person</span>: <span class=\"type\">String</span>, <span class=\"params\">on</span> <span class=\"params\">day</span>: <span class=\"type\">String</span>) -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello <span class=\"subst\">\\(person)</span>, today is <span class=\"subst\">\\(day)</span>.&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">greet(<span class=\"string\">&quot;John&quot;</span>, on: <span class=\"string\">&quot;Wednesday&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>参数标签指的是调用时候的名称, 参数名指的是函数内部.</p>\n</blockquote>\n<p>函数是第一等类型，这意味着函数可以作为另一个函数的返回值。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">makeIncrementer</span>() -&gt; ((<span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">addOne</span>(<span class=\"params\">number</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span> <span class=\"operator\">+</span> number</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> addOne</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> increment <span class=\"operator\">=</span> makeIncrementer()</span><br><span class=\"line\">increment(<span class=\"number\">7</span>)</span><br></pre></td></tr></table></figure>\n\n<p>函数也可以作为另一个函数的输入参数:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">hasAnyMatches</span>(<span class=\"params\">list</span>: [<span class=\"type\">Int</span>], <span class=\"params\">condition</span>: (<span class=\"type\">Int</span>) -&gt; <span class=\"type\">Bool</span>) -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> list &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> condition(item) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">lessThanTen</span>(<span class=\"params\">number</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> number <span class=\"operator\">&lt;</span> <span class=\"number\">10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> numbers <span class=\"operator\">=</span> [<span class=\"number\">20</span>, <span class=\"number\">19</span>, <span class=\"number\">7</span>, <span class=\"number\">12</span>]</span><br><span class=\"line\">hasAnyMatches(list: numbers, condition: lessThanTen)</span><br></pre></td></tr></table></figure>\n\n<p>可以通过参数位置而不是参数名字来引用参数——这个方法在非常短的闭包中非常有用。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sortedNumbers <span class=\"operator\">=</span> numbers.sorted &#123; <span class=\"variable\">$0</span> <span class=\"operator\">&gt;</span> <span class=\"variable\">$1</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(sortedNumbers)</span><br></pre></td></tr></table></figure>\n\n<p><code>actor</code>与 <code>class</code>类似, 但是可以序列化访问, 保护共享、可变的数据.</p>\n<h3 id=\"对象和类\"><a href=\"#对象和类\" class=\"headerlink\" title=\"对象和类\"></a>对象和类</h3><h4 id=\"构造与析构\"><a href=\"#构造与析构\" class=\"headerlink\" title=\"构造与析构\"></a>构造与析构</h4><p>使用 <code>self.</code>替代 <code>this-&gt;</code>, 使用  <code>init</code> 和  <code>deinit</code>分别声明构造和析构函数:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">NamedShape</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> numberOfSides: <span class=\"type\">Int</span> <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">name</span>: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name <span class=\"operator\">=</span> name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">simpleDescription</span>() -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;A shape with <span class=\"subst\">\\(numberOfSides)</span> sides.&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>子类如果要重写父类的方法的话，需要用 <code>override</code> 标记:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Square</span>: <span class=\"title class_ inherited__\">NamedShape</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sideLength: <span class=\"type\">Double</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">sideLength</span>: <span class=\"type\">Double</span>, <span class=\"params\">name</span>: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.sideLength <span class=\"operator\">=</span> sideLength</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(name: name)</span><br><span class=\"line\">        numberOfSides <span class=\"operator\">=</span> <span class=\"number\">4</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">area</span>() -&gt;  <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sideLength <span class=\"operator\">*</span> sideLength</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">simpleDescription</span>() -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;A square with sides of length <span class=\"subst\">\\(sideLength)</span>.&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> test <span class=\"operator\">=</span> <span class=\"type\">Square</span>(sideLength: <span class=\"number\">5.2</span>, name: <span class=\"string\">&quot;my test square&quot;</span>)</span><br><span class=\"line\">test.area()</span><br><span class=\"line\">test.simpleDescription()</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ul>\n<li>使用 <code>:className</code>的方法声明父类.</li>\n<li><code>super.init</code> 是用来调用父类（超类）的初始化方法的。当创建一个子类的实例时，子类可能需要初始化一些自己的属性，同时还需要确保父类的属性也被正确初始化。这时就需要使用 <code>super.init</code> 来调用父类的初始化方法，完成父类的初始化过程</li>\n<li>严格的顺序要求: 子类必须先初始化自己的属性，然后调用 <code>super.init</code>，最后才能访问或修改继承来的属性。</li>\n</ul>\n</blockquote>\n<h3 id=\"计算属性\"><a href=\"#计算属性\" class=\"headerlink\" title=\"计算属性\"></a>计算属性</h3><h4 id=\"普通的计算属性\"><a href=\"#普通的计算属性\" class=\"headerlink\" title=\"普通的计算属性\"></a>普通的计算属性</h4><p>在属性内部使用 <code>&#123;&#125;</code>并加上 <code>return</code>, 可以让访问这个属性的时候, 返回值由结构体的其他属性计算得到.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Temperature</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> celsius: <span class=\"type\">Double</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> fahrenheit: <span class=\"type\">Double</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> celsius <span class=\"operator\">*</span><span class=\"number\">1.8</span> <span class=\"operator\">+</span> <span class=\"number\">32</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">init</span>(<span class=\"params\">celsius</span>: <span class=\"type\">Double</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.celsius <span class=\"operator\">=</span> celsius</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ol>\n<li>此时实例化一个结构体就只需要给出一个属性的值.</li>\n<li><code>self</code>在上述的Swift代码中是不可或缺的, 因为形参和内部属性的名称相同.</li>\n</ol>\n</blockquote>\n<h4 id=\"使用-getter-和-setter-的计算属性\"><a href=\"#使用-getter-和-setter-的计算属性\" class=\"headerlink\" title=\"使用 getter 和 setter 的计算属性:\"></a>使用 getter 和 setter 的计算属性:</h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EquilateralTriangle</span>: <span class=\"title class_ inherited__\">NamedShape</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sideLength: <span class=\"type\">Double</span> <span class=\"operator\">=</span> <span class=\"number\">0.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">sideLength</span>: <span class=\"type\">Double</span>, <span class=\"params\">name</span>: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.sideLength <span class=\"operator\">=</span> sideLength</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(name: name)</span><br><span class=\"line\">        numberOfSides <span class=\"operator\">=</span> <span class=\"number\">3</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> perimeter: <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 根据存储属性进行计算</span></span><br><span class=\"line\">        <span class=\"keyword\">get</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">3.0</span> <span class=\"operator\">*</span> sideLength</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 设置属性</span></span><br><span class=\"line\">        <span class=\"keyword\">set</span> &#123;</span><br><span class=\"line\">            sideLength <span class=\"operator\">=</span> newValue <span class=\"operator\">/</span> <span class=\"number\">3.0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">simpleDescription</span>() -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;An equilateral triangle with sides of length <span class=\"subst\">\\(sideLength)</span>.&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> triangle <span class=\"operator\">=</span> <span class=\"type\">EquilateralTriangle</span>(sideLength: <span class=\"number\">3.1</span>, name: <span class=\"string\">&quot;a triangle&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(triangle.perimeter)</span><br><span class=\"line\">triangle.perimeter <span class=\"operator\">=</span> <span class=\"number\">9.9</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(triangle.sideLength)</span><br></pre></td></tr></table></figure>\n\n<p>计算属性同样是一个属性, 但是根据调用方式的不同, 有返回和设置两种方式.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">triangle.perimeter <span class=\"operator\">=</span> <span class=\"number\">9.9</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(triangle.perimeter)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Mutating\"><a href=\"#Mutating\" class=\"headerlink\" title=\"Mutating\"></a>Mutating</h3><p>默认情况下, 结构体中的方法不能直接修改结构体的属性. 需要显式声明为 <code>mutating</code>:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">User</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> username:<span class=\"type\">String</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> isVisible:<span class=\"type\">Bool</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> friends: [string] <span class=\"operator\">=</span> []</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">addFriend</span>(<span class=\"params\">username</span>: <span class=\"type\">String</span>)&#123;</span><br><span class=\"line\">    friends.append(username)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"属性监视器\"><a href=\"#属性监视器\" class=\"headerlink\" title=\"属性监视器\"></a>属性监视器</h3><p>使用 <code>willSet</code> 和 <code>didSet</code>。写入的代码会在属性值发生改变时调用，但不包含构造器中发生值改变的情况:</p>\n<ul>\n<li>分别可以使用 <code>newValue</code>与 <code>oldValue</code>来表示属性将要改变的值以及改变之前的值.</li>\n</ul>\n<p>e.g. 确保三角形的边长总是和正方形的边长相同。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TriangleAndSquare</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> triangle: <span class=\"type\">EquilateralTriangle</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">willSet</span> &#123;</span><br><span class=\"line\">            square.sideLength <span class=\"operator\">=</span> newValue.sideLength</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> square: <span class=\"type\">Square</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">willSet</span> &#123;</span><br><span class=\"line\">            triangle.sideLength <span class=\"operator\">=</span> newValue.sideLength</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">size</span>: <span class=\"type\">Double</span>, <span class=\"params\">name</span>: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        square <span class=\"operator\">=</span> <span class=\"type\">Square</span>(sideLength: size, name: name)</span><br><span class=\"line\">        triangle <span class=\"operator\">=</span> <span class=\"type\">EquilateralTriangle</span>(sideLength: size, name: name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> triangleAndSquare <span class=\"operator\">=</span> <span class=\"type\">TriangleAndSquare</span>(size: <span class=\"number\">10</span>, name: <span class=\"string\">&quot;another test shape&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(triangleAndSquare.square.sideLength)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(triangleAndSquare.triangle.sideLength)</span><br><span class=\"line\">triangleAndSquare.square <span class=\"operator\">=</span> <span class=\"type\">Square</span>(sideLength: <span class=\"number\">50</span>, name: <span class=\"string\">&quot;larger square&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(triangleAndSquare.triangle.sideLength)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Rank</span>: <span class=\"title class_ inherited__\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> ace <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> two, three, four, five, six, seven, eight, nine, ten</span><br><span class=\"line\">    <span class=\"keyword\">case</span> jack, queen, king</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">simpleDescription</span>() -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> <span class=\"keyword\">self</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> .ace:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;ace&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> .jack:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;jack&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> .queen:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;queen&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> .king:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;king&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"type\">String</span>(<span class=\"keyword\">self</span>.rawValue)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> ace <span class=\"operator\">=</span> <span class=\"type\">Rank</span>.ace</span><br><span class=\"line\"><span class=\"keyword\">let</span> aceRawValue <span class=\"operator\">=</span> ace.rawValue</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果没有设置第一个成员的初始值, 默认从 <code>0</code> 开始;</li>\n<li>缺省值按照递增处理;</li>\n<li><code>case</code>之外可以设置方法.</li>\n</ul>\n<p>使用 <code>init?(rawValue:)</code> 初始化构造器来从原始值创建一个枚举实例:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> convertedRank <span class=\"operator\">=</span> <span class=\"type\">Rank（rawValue</span>:<span class=\"number\">3</span>）｛</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> threeDescription <span class=\"operator\">=</span> convertedRank.simpleDescription（）</span><br><span class=\"line\">｝</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ul>\n<li><code>if let</code>表示可选绑定, 安全地解包可选值</li>\n</ul>\n</blockquote>\n<h4 id=\"解包\"><a href=\"#解包\" class=\"headerlink\" title=\"解包\"></a>解包</h4><ol>\n<li><code>if let</code>解包</li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> <span class=\"type\">A</span> <span class=\"operator\">=</span> <span class=\"type\">B</span> &#123;</span><br><span class=\"line\">  <span class=\"operator\">...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果 <code>B</code>不是 nil, 就将其赋值给A, 然后执行 <code>&#123;&#125;</code>内部的语句.</p>\n<ol start=\"2\">\n<li><code>??</code></li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> score : <span class=\"type\">Int</span> <span class=\"operator\">?</span>  <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(score <span class=\"operator\">??</span> default_score)</span><br><span class=\"line\"><span class=\"comment\">// 成绩score不是nil, 就将其打印, 否则输出默认的成绩</span></span><br></pre></td></tr></table></figure>\n\n<p>对字典进行索引:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// scores是一个Int数组</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( major, scores) <span class=\"keyword\">in</span> all_scores &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> score <span class=\"keyword\">in</span> scores&#123;</span><br><span class=\"line\">    <span class=\"operator\">...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果key没有使用, 可以直接忽略</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>( <span class=\"keyword\">_</span>, socres) <span class=\"keyword\">in</span> all_scores&#123;</span><br><span class=\"line\">  <span class=\"operator\">...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>swift支持对字典进行更新或者移除的时候, 返回并使用就值:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> oldValue <span class=\"operator\">=</span> scores.updateValue(<span class=\"number\">100</span>, forKey:<span class=\"string\">&quot;fad&quot;</span>)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"operator\">..</span>)</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">  <span class=\"operator\">...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> oldValue <span class=\"operator\">=</span> scores.removeValue(forKey: <span class=\"string\">&quot;fad&quot;</span>)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;fad&#x27;s old value was <span class=\"subst\">\\(oldValue)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>@IBAction</code>表示组件交互和代码相绑定(允许在交互的时候执行外部定义的函数);</li>\n<li><code>@IBOutlet</code>表示允许代码的响应改变组件本身的状态(字体、大小等).</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"swift.assets/image-20250412115454400.png\"\n                      alt=\"image-20250412115454400\" style=\"zoom:57%;\" \n                >\n\n<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><h4 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h4><p>闭包指的是可以在特定位置运行的、不需要名称的函数.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scene.setOnStartHandler｛ </span><br><span class=\"line\"><span class=\"comment\">// 闭包的主体</span></span><br><span class=\"line\">｝</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>toggle()</code>可以自动切换变量的布尔值.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Button</span>(<span class=\"string\">&quot;Press Me&quot;</span>) &#123;</span><br><span class=\"line\">    isOn.toggle()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"状态属性\"><a href=\"#状态属性\" class=\"headerlink\" title=\"状态属性\"></a>状态属性</h4><ul>\n<li>使用 <code>@State</code>在视图之外定义;</li>\n<li>当状态属性的值发生改变时, 会自动更新视图中相关的部分.</li>\n<li>对于状态对象, 使用 <code>@StateObject</code>来声明.</li>\n</ul>\n<h4 id=\"绑定\"><a href=\"#绑定\" class=\"headerlink\" title=\"绑定\"></a>绑定</h4><p>由 <code>@Binding</code>声明将属性连接到其他地方, 允许子视图对属性的修改并同步.</p>\n<p>在属性的前面增加 <code>$</code>，表明会同步修改可信源.</p>\n<h4 id=\"字符串插值\"><a href=\"#字符串插值\" class=\"headerlink\" title=\"字符串插值\"></a>字符串插值</h4><p>在较长字符串中使用常量、变量或代码表达式，使它们替换为其当前值以求出字符串的值。</p>\n<p>例如，在字符串”Katy ate a \\（fruit）.”中，如果fruit 是带有值 “peach”的变量，那么在求字符串的值时，\\（fruit）由”peach”替换，变为 “Katy ate a peach.”。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><h4 id=\"自动的动画效果\"><a href=\"#自动的动画效果\" class=\"headerlink\" title=\"自动的动画效果\"></a>自动的动画效果</h4><p>当状态属性发生改变时, 我们希望对应控制的视图元素的变化具有动画效果, 那么可以指定: e.g.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Circle</span>()</span><br><span class=\"line\">    .frame(maxHeight: <span class=\"number\">200</span>)</span><br><span class=\"line\">    .foregroundColor( isOn <span class=\"operator\">?</span> .purple : .mint </span><br><span class=\"line\">    .shadow(color:isOn <span class=\"operator\">?</span> .indigo : .orange , radius: <span class=\"number\">20</span>)</span><br><span class=\"line\">    .scaleEffect(isOn <span class=\"operator\">?</span> <span class=\"number\">1</span>: <span class=\"number\">0.75</span>)</span><br><span class=\"line\">    .animation( .default, value: isOn)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>其中的 <code>value： isOn</code>表示追踪的状态属性.</p>\n</blockquote>\n<p>在一个视图中创建状态对象,  然后在 <code>app</code>中声明为环境变量并在子视图中使用.</p>\n<h1 id=\"设计原则\"><a href=\"#设计原则\" class=\"headerlink\" title=\"设计原则\"></a>设计原则</h1><p>principle</p>\n<ul>\n<li>需要长按进行交互的组件, 在轻触时ICON放大或者缩小</li>\n</ul>\n<h1 id=\"官方手册学习记录\"><a href=\"#官方手册学习记录\" class=\"headerlink\" title=\"官方手册学习记录\"></a>官方手册学习记录</h1><h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><ul>\n<li><p>Swift 使用<em>字符串插值</em>将常量或变量的名称作为占位符包含在较长的字符串中，并提示 Swift 将其替换为该常量或变量的当前值。将名称包在括号中，并在左括号前用反斜杠进行转义：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;The current value of friendlyWelcome is <span class=\"subst\">\\(friendlyWelcome)</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 打印 &quot;The current value of friendlyWelcome is Bonjour！&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>不必使用 <code>;</code>, 但是如果想在一行中编写多个独立语句，则<em>必须</em>使用分号：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> cat <span class=\"operator\">=</span> <span class=\"string\">&quot;🐱&quot;</span>; <span class=\"built_in\">print</span>(cat)</span><br><span class=\"line\"><span class=\"comment\">// 打印 &quot;🐱&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>整数边界: 使用 min, max进行访问</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> minValue <span class=\"operator\">=</span> <span class=\"type\">UInt8</span>.min  <span class=\"comment\">// minValue 等于 0，类型为 UInt8</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> maxValue <span class=\"operator\">=</span> <span class=\"type\">UInt8</span>.max  <span class=\"comment\">// maxValue 等于 255，类型为 UInt8</span></span><br></pre></td></tr></table></figure></li>\n<li><p>类型别名: <code>typealias</code></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typealias</span> <span class=\"type\">AudioSample</span> <span class=\"operator\">=</span> <span class=\"type\">UInt16</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxAmplitudeFound <span class=\"operator\">=</span> <span class=\"type\">AudioSample</span>.min</span><br><span class=\"line\"><span class=\"comment\">// maxAmplitudeFound 现在为 0</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h3><ul>\n<li>作用: 多个值组合成一个复合值</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> http404Error <span class=\"operator\">=</span> (<span class=\"number\">404</span>, <span class=\"string\">&quot;Not Found&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// http404Error 的类型为（Int，String），且等于（404，&quot;Not Found&quot;）</span></span><br></pre></td></tr></table></figure>\n\n<p>如果只需要元组的部分值，则在分解元组时使用下划线 (<code>_</code>) 忽略不需要的部分</p>\n<ul>\n<li><p>分解元组</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> (statusCode, statusMessage) <span class=\"operator\">=</span> http404Error</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;The status code is <span class=\"subst\">\\(statusCode)</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 打印 &quot;The status code is 404&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;The status message is <span class=\"subst\">\\(statusMessage)</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 打印 &quot;The status message is Not Found&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>可以在定义元组时为元组中的各个元素命名：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> http200Status <span class=\"operator\">=</span> (statusCode: <span class=\"number\">200</span>, description: <span class=\"string\">&quot;OK&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>然后可以使用元素名访问:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;The status code is <span class=\"subst\">\\(http200Status.statusCode)</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 打印 &quot;The status code is 200&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;The status message is <span class=\"subst\">\\(http200Status.description)</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 打印 &quot;The status message is OK&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>也可以直接使用从零开始的索引来访问, e.g. <code>http200Status.0</code></p>\n</li>\n</ul>\n<hr>\n<ul>\n<li><p><code>&lt;u&gt;</code>可选<code>&lt;/u&gt;</code>: 存储这种类型的值或者 <code>nil</code>.</p>\n</li>\n<li><p>提供后备值: <code>??</code></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name: <span class=\"type\">String</span>? <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> greeting <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello, &quot;</span> <span class=\"operator\">+</span> (name <span class=\"operator\">??</span> <span class=\"string\">&quot;friend&quot;</span>) <span class=\"operator\">+</span> <span class=\"string\">&quot;!&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(greeting)</span><br><span class=\"line\"><span class=\"comment\">// 打印 &quot;Hello, friend!&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果 <code>??</code> 之前的值不是 <code>nil</code>, 就会正常解包, 否则选择后备值;</li>\n<li>使用 <code>()</code> 包裹.</li>\n</ul>\n</li>\n<li><p><code>&lt;u&gt;</code>隐式解包可选<code>&lt;/u&gt;</code>: 安全假定一直都有值时使用</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> possibleString: <span class=\"type\">String</span>? <span class=\"operator\">=</span> <span class=\"string\">&quot;An optional string.&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> forcedString: <span class=\"type\">String</span> <span class=\"operator\">=</span> possibleString<span class=\"operator\">!</span> <span class=\"comment\">// 需要显式解包</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> assumedString: <span class=\"type\">String</span>! <span class=\"operator\">=</span> <span class=\"string\">&quot;An implicitly unwrapped optional string.&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> implicitString: <span class=\"type\">String</span> <span class=\"operator\">=</span> assumedString <span class=\"comment\">// 隐式解包</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h3 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h3><p>函数在声明中包含 <code>throws</code> 关键字，表示它可以抛出错误。调用可以抛出错误的函数时，要在表达式前加上 <code>try</code> 关键字.</p>\n<p>Swift 会自动将错误传播到当前作用域之外，直到它们被 <code>catch</code> 子句处理为止。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> canThrowAnError()</span><br><span class=\"line\">    <span class=\"comment\">// 无错误的情况</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 抛出错误的情况</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>细节部分在后面补充</p>\n</blockquote>\n<h3 id=\"断言和先决条件\"><a href=\"#断言和先决条件\" class=\"headerlink\" title=\"断言和先决条件\"></a>断言和先决条件</h3><h4 id=\"使用断言进行调试\"><a href=\"#使用断言进行调试\" class=\"headerlink\" title=\"使用断言进行调试\"></a>使用断言进行调试</h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> age <span class=\"operator\">=</span> <span class=\"operator\">-</span><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"built_in\">assert</span>(age <span class=\"operator\">&gt;=</span> <span class=\"number\">0</span>, <span class=\"string\">&quot;A person&#x27;s age can&#x27;t be less than zero.&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 该断言失败的原因是 -3 并不 &gt;= 0。</span></span><br></pre></td></tr></table></figure>\n\n<p>断言的第一个参数是预期的、正确的结果, 如果不满足条件就会显示报错. 但是不会阻止程序继续运行.</p>\n<h4 id=\"强制执行先决条件\"><a href=\"#强制执行先决条件\" class=\"headerlink\" title=\"强制执行先决条件\"></a>强制执行先决条件</h4><p>当条件有可能为假，但<em>必须</em>为真才能继续执行代码时，请使用先决条件.</p>\n<p>向该函数传递一个计算结果为 <code>true</code> 或 <code>false</code> 的表达式，以及一条在条件结果为 <code>false</code> 时显示的信息:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在下标的实现中...</span></span><br><span class=\"line\"><span class=\"built_in\">precondition</span>(index <span class=\"operator\">&gt;</span> <span class=\"number\">0</span>, <span class=\"string\">&quot;Index must be greater than zero.&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><h3 id=\"基本运算符\"><a href=\"#基本运算符\" class=\"headerlink\" title=\"基本运算符\"></a>基本运算符</h3><ul>\n<li><p>与 C 和 Objective-C 中的赋值运算符不同，Swift 中的赋值运算符本身不返回值。以下语句无效：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> x <span class=\"operator\">=</span> y &#123; <span class=\"comment\">// 这是无效的，因为 x = y 不返回值。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>可以防止不小心使用赋值运算符（&#x3D;） 而非等于运算符（&#x3D;&#x3D;）.</li>\n</ul>\n</li>\n<li><p>基本的四则运算不允许值的溢出.</p>\n</li>\n</ul>\n<blockquote>\n<p>[!NOTE]</p>\n<p>在 Swift 中对负数的处理与模运算符有所不同:</p>\n<p>为了确定 <code>a % b</code> 的答案，<code>%</code> 运算符计算以下等式并返回 <code>余数</code> 作为输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a` = (`b` x `某个乘数`) + `余数</span><br></pre></td></tr></table></figure>\n\n<p>其中 <code>某个乘数</code> 是 <code>b</code> 在 <code>a</code> 中能容纳的最大倍数。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">9</span> <span class=\"operator\">%</span> <span class=\"number\">4</span>    <span class=\"comment\">// 等于 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">-</span><span class=\"number\">9</span> <span class=\"operator\">%</span> <span class=\"number\">4</span>   <span class=\"comment\">// 等于 -1</span></span><br></pre></td></tr></table></figure></blockquote>\n<ul>\n<li><p>数值的正负号可以使用前缀 <code>-</code> 切换，称为<code>&lt;u&gt;</code>一元负号运算符<code>&lt;/u&gt;</code>.</p>\n<ul>\n<li><p>中间没有任何空格.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> three <span class=\"operator\">=</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> minusThree <span class=\"operator\">=</span> <span class=\"operator\">-</span>three       <span class=\"comment\">// minusThree 等于 -3</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"元组的计算\"><a href=\"#元组的计算\" class=\"headerlink\" title=\"元组的计算\"></a>元组的计算</h4><ul>\n<li>前提: 如果两个元组具有相同的类型和相同数量的值，则可以比较它们.</li>\n<li>规则:<ul>\n<li>元组是从左到右逐个值进行比较的，直到比较发现两个不相等的值为止。</li>\n<li>这两个值将进行比较，并且该比较的结果决定了整个元组比较的结果。</li>\n<li>如果所有元素都相等，那么这两个元组本身就相等。</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>[!NOTE]</p>\n<p>只有当给定的运算符可以应用于各自元组中的每个值时，元组才能与该运算符进行比较.</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"string\">&quot;blue&quot;</span>, <span class=\"literal\">false</span>) <span class=\"operator\">&lt;</span> (<span class=\"string\">&quot;purple&quot;</span>, <span class=\"literal\">true</span>)  <span class=\"comment\">// 错误，因为 &lt; 不能比较布尔值</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"空合并运算符\"><a href=\"#空合并运算符\" class=\"headerlink\" title=\"空合并运算符\"></a>空合并运算符</h4><p><code>a ?? b</code>的结果与下面的运算相同:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a <span class=\"operator\">!=</span> <span class=\"literal\">nil</span> <span class=\"operator\">?</span> a<span class=\"operator\">!</span> : b</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"区间运算\"><a href=\"#区间运算\" class=\"headerlink\" title=\"区间运算\"></a>区间运算</h4><ul>\n<li><p><em>闭区间运算符</em>（<code>a...b</code>）定义了一个从 <code>a</code> 到 <code>b</code> 的范围，包括 <code>a</code> 和 <code>b</code> 的值。<code>a</code> 的值不能大于 <code>b</code>;</p>\n<ul>\n<li><p>在需要使用所有值的情况下很有用</p>\n</li>\n<li><p>e.g.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> <span class=\"number\">1</span><span class=\"operator\">...</span><span class=\"number\">5</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(index)</span> 乘以 5 等于 <span class=\"subst\">\\(index <span class=\"operator\">*</span> <span class=\"number\">5</span>)</span>&quot;</span>) </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><em>半开区间运算符</em>（<code>a..&lt;b</code>）定义了一个从 <code>a</code> 到 <code>b</code> 但不包括 <code>b</code> 的范围.</p>\n<ul>\n<li><p>对于处理从基数 0 开始的列表（如数组）时特别有用，因为它可以计数到列表长度（但不包括列表长度）.</p>\n</li>\n<li><p>e.g.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> names <span class=\"operator\">=</span> [<span class=\"string\">&quot;Anna&quot;</span>, <span class=\"string\">&quot;Alex&quot;</span>, <span class=\"string\">&quot;Brian&quot;</span>, <span class=\"string\">&quot;Jack&quot;</span>] </span><br><span class=\"line\"><span class=\"keyword\">let</span> count <span class=\"operator\">=</span> names.count</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">0</span><span class=\"operator\">..&lt;</span>count &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;第 <span class=\"subst\">\\(i <span class=\"operator\">+</span> <span class=\"number\">1</span>)</span> 个人叫 <span class=\"subst\">\\(names[i])</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>闭区间运算符有一种替代形式，用于一直延伸到尽可能远的区间 —— 例如，一个包含从索引 2 到数组末尾所有元素的区间。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> names[<span class=\"number\">2</span><span class=\"operator\">...</span>] &#123; <span class=\"built_in\">print</span>(name) &#125;</span><br><span class=\"line\"><span class=\"comment\">// Brian</span></span><br><span class=\"line\"><span class=\"comment\">// Jack</span></span><br></pre></td></tr></table></figure></li>\n<li><p>半开区间运算符也有一种只写最后一个值的单侧形式</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> names[<span class=\"operator\">..&lt;</span><span class=\"number\">2</span>] &#123; <span class=\"built_in\">print</span>(name) &#125;</span><br><span class=\"line\"><span class=\"comment\">// Anna</span></span><br><span class=\"line\"><span class=\"comment\">// Alex</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"逻辑运算\"><a href=\"#逻辑运算\" class=\"headerlink\" title=\"逻辑运算\"></a>逻辑运算</h4><blockquote>\n<p>[!NOTE]</p>\n<p>Swift 逻辑运算符 <code>&amp;&amp;</code> 和 <code>||</code> 遵循<code>&lt;u&gt;</code>从左到右<code>&lt;/u&gt;</code>的结合顺序，这意味着带有多个逻辑运算符的复合表达式会首先评估最左边的子表达式.</p>\n</blockquote>\n<h2 id=\"控制流\"><a href=\"#控制流\" class=\"headerlink\" title=\"控制流\"></a>控制流</h2><h2 id=\"协议\"><a href=\"#协议\" class=\"headerlink\" title=\"协议\"></a>协议</h2><ul>\n<li>如果类需要继承, 需要将父类写在所有的协议之前</li>\n<li>不能在协议定义中为方法参数指定默认值。</li>\n<li>协议也可以要求遵循协议的类型 <code>&lt;u&gt;</code>实现指定的构造器<code>&lt;/u&gt;</code>, 和协议内部的方法一样, 不需要写花括号和构造期的实体<ul>\n<li>如果是类, 必须在构造函数的开头加上 <code>required</code>修饰符. 这是为了确保所有继承的子类也提供这个构造函数的实现, 从而确保遵守协议;</li>\n<li>但是如果一个类被声明为了 <code>final</code>, 也就是无法被继承, 那么就不需要 <code>required</code>的声明</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"协议的基本用法\"><a href=\"#协议的基本用法\" class=\"headerlink\" title=\"协议的基本用法\"></a>协议的基本用法</h3><p>协议可以规定属性类型以及属性被操作的权限, 通常和类、结构体和枚举进行绑定, 作为一种强制的约束.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">Tax</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> national: <span class=\"type\">Double</span> &#123; <span class=\"keyword\">get</span> &#125; </span><br><span class=\"line\">  <span class=\"keyword\">var</span> individual: <span class=\"type\">Double</span>&#123; <span class=\"keyword\">set</span> <span class=\"keyword\">get</span>&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同样可以在协议中使用 <code>mutating</code> 来声明一个改变自身属性的方法:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">Tax</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> national: <span class=\"type\">Double</span> &#123; <span class=\"keyword\">get</span> &#125; </span><br><span class=\"line\">  <span class=\"keyword\">var</span> individual: <span class=\"type\">Double</span>&#123; <span class=\"keyword\">set</span> <span class=\"keyword\">get</span>&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">changeTax</span>(<span class=\"params\">newValue</span>: <span class=\"type\">Double</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>需要注意的是, 结构体内部的方法如果要修改自身属性, 也需要声明 <code>mutating</code>, 但是类则不需要额外的声明.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Taxas</span>: <span class=\"title class_ inherited__\">Tax</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> national: <span class=\"type\">Double</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> individual: <span class=\"type\">Double</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">changeTax</span>(<span class=\"params\">newValue</span>: <span class=\"type\">Double</span>)&#123;</span><br><span class=\"line\">    national <span class=\"operator\">=</span> newValue</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"补充协议\"><a href=\"#补充协议\" class=\"headerlink\" title=\"补充协议\"></a>补充协议</h3><ul>\n<li><p>使用 <code>,</code> 连接不同的协议</p>\n</li>\n<li><p><code>extension</code>可以为协议的函数设置默认方法, 就不需要继续在每一个类、结构体或枚举中重新定义</p>\n<ul>\n<li><p>同样可以补充数据类型</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">Int</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> abs: <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> <span class=\"keyword\">self</span> <span class=\"operator\">&gt;=</span> <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span></span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"operator\">-</span><span class=\"keyword\">self</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>((<span class=\"operator\">-</span><span class=\"number\">3</span>).abs);</span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"有条件地遵循协议\"><a href=\"#有条件地遵循协议\" class=\"headerlink\" title=\"有条件地遵循协议\"></a>有条件地遵循协议</h4><p>让 <code>Array</code> 类型只要在存储遵循 <code>TextRepresentable</code> 协议的元素时，就遵循 <code>TextRepresentable</code> 协议:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">Array</span>: <span class=\"title class_ inherited__\">TextRepresentable</span> <span class=\"keyword\">where</span> <span class=\"title class_ inherited__\">Element</span>: <span class=\"title class_ inherited__\">TextRepresentable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> textualDescription: <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> itemsAsText <span class=\"operator\">=</span> <span class=\"keyword\">self</span>.map &#123; <span class=\"variable\">$0</span>.textualDescription &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;[&quot;</span> <span class=\"operator\">+</span> itemsAsText.joined(separator: <span class=\"string\">&quot;, &quot;</span>) <span class=\"operator\">+</span> <span class=\"string\">&quot;]&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> myDice <span class=\"operator\">=</span> [d6, d12]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(myDice.textualDescription)</span><br><span class=\"line\"><span class=\"comment\">// 打印 &quot;[A 6-sided dice, A 12-sided dice]&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"扩展里声明协议遵循\"><a href=\"#扩展里声明协议遵循\" class=\"headerlink\" title=\"扩展里声明协议遵循\"></a>扩展里声明协议遵循</h4><p>当一个类型已经遵循了某个协议中的所有要求，却还没有声明遵循该协议时，可以通过空的扩展来让它遵循该协议:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Hamster</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> textualDescription: <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;A hamster named <span class=\"subst\">\\(name)</span>&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">Hamster</span>: <span class=\"title class_ inherited__\">TextRepresentable</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Error-handling\"><a href=\"#Error-handling\" class=\"headerlink\" title=\"Error handling\"></a>Error handling</h3><p>系统提供了 <code>Error</code>协议用于错误处理, 主动给予错误的捕捉情况.</p>\n<p>使用方法:</p>\n<ol>\n<li>定义遵循相关协议的枚举类型, 作为错误的类型;</li>\n<li>定义可能抛出错误的函数;</li>\n<li>使用 <code>do...catch</code>块来结构化地处理错误.</li>\n</ol>\n<p>e.g.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个错误类型，遵循 Error 协议</span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">PasswordError</span>: <span class=\"title class_ inherited__\">Error</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> tooShort</span><br><span class=\"line\">    <span class=\"keyword\">case</span> tooWeak</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 一个函数，可能抛出错误</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">validate</span>(<span class=\"params\">password</span>: <span class=\"type\">String</span>) <span class=\"keyword\">throws</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> password.count <span class=\"operator\">&lt;</span> <span class=\"number\">6</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">PasswordError</span>.tooShort</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> password <span class=\"operator\">==</span> <span class=\"string\">&quot;123456&quot;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">PasswordError</span>.tooWeak</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 do-catch 捕捉错误</span></span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> validate(password: <span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;密码验证通过 ✅&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">PasswordError</span>.tooShort &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;❌ 密码太短，请至少使用 6 个字符&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">PasswordError</span>.tooWeak &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;❌ 密码太弱，不能使用简单的序列&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;❌ 发生未知错误：<span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ul>\n<li>throws：在函数声明中标注该函数会抛出错误;</li>\n<li>try：在调用可能抛出错误的函数时使用.</li>\n</ul>\n</blockquote>\n<h3 id=\"其他的协议\"><a href=\"#其他的协议\" class=\"headerlink\" title=\"其他的协议\"></a>其他的协议</h3><h4 id=\"CaseIterable\"><a href=\"#CaseIterable\" class=\"headerlink\" title=\"CaseIterable\"></a>CaseIterable</h4><p>用于获取枚举的属性个数, 从而进行遍历.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Status</span>:<span class=\"title class_ inherited__\">CaseIterable</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> low,middle,high</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">change</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> <span class=\"keyword\">self</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> .high:</span><br><span class=\"line\">            <span class=\"keyword\">self</span> <span class=\"operator\">=</span> .low</span><br><span class=\"line\">        <span class=\"keyword\">case</span> .low:</span><br><span class=\"line\">            <span class=\"keyword\">self</span> <span class=\"operator\">=</span> .middle</span><br><span class=\"line\">        <span class=\"keyword\">case</span> .middle:</span><br><span class=\"line\">            <span class=\"keyword\">self</span> <span class=\"operator\">=</span> .high</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">ptr</span>()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Current Status is <span class=\"subst\">\\(<span class=\"keyword\">self</span>)</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> status <span class=\"operator\">=</span> <span class=\"type\">Status</span>.low</span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"keyword\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">0</span><span class=\"operator\">..&lt;</span><span class=\"type\">Status</span>.allCases.count&#123;</span><br><span class=\"line\">    status.ptr()</span><br><span class=\"line\">    status.change()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>for _ in 0..&lt;</code> 当中的 <code>_</code>表示忽略遍历时候的循环变量的值.</p>\n</blockquote>\n<h2 id=\"闭包-1\"><a href=\"#闭包-1\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><h4 id=\"闭包的简化推导\"><a href=\"#闭包的简化推导\" class=\"headerlink\" title=\"闭包的简化推导\"></a>闭包的简化推导</h4><p>相当于匿名函数与 <code>lambda</code>.  接下来从普通函数的写法开始简化:</p>\n<ul>\n<li><p>普通函数:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">changeSign</span>(<span class=\"params\">op</span>: <span class=\"type\">Double</span>) -&gt; <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"operator\">-</span>op</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> operation: (<span class=\"type\">Double</span>) -&gt; <span class=\"type\">Double</span></span><br><span class=\"line\">operation <span class=\"operator\">=</span> changeSign</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> result <span class=\"operator\">=</span> operation(<span class=\"number\">4.0</span>) <span class=\"comment\">// result = -4.0</span></span><br></pre></td></tr></table></figure></li>\n<li><p>将函数的定义下移:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> operation: (<span class=\"type\">Double</span>) -&gt; <span class=\"type\">Double</span></span><br><span class=\"line\">operation <span class=\"operator\">=</span> (op:<span class=\"type\">Double</span>) -&gt; <span class=\"type\">Double</span> &#123; <span class=\"keyword\">return</span> <span class=\"operator\">-</span>op&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> result  <span class=\"operator\">=</span> operation(<span class=\"number\">4.0</span>)</span><br></pre></td></tr></table></figure></li>\n<li><p>将 <code>｛</code> 提前，并在原来的位置添加 <code>in</code></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> operation:(<span class=\"type\">Double</span>) -&gt; <span class=\"type\">Double</span></span><br><span class=\"line\">operation <span class=\"operator\">=</span> &#123;(op: <span class=\"type\">Double</span>) -&gt; <span class=\"type\">Double</span>  <span class=\"keyword\">in</span> <span class=\"keyword\">return</span> <span class=\"operator\">-</span>op&#125;</span><br><span class=\"line\"><span class=\"operator\">...</span></span><br></pre></td></tr></table></figure></li>\n<li><p>系统可以推断类型, 所以根据输入的类型简化返回值的类型定义</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> operation:(<span class=\"type\">Double</span>) -&gt; <span class=\"type\">Double</span></span><br><span class=\"line\">operation <span class=\"operator\">=</span> &#123;(op: <span class=\"type\">Double</span>)   <span class=\"keyword\">in</span> <span class=\"keyword\">return</span> <span class=\"operator\">-</span>op&#125;</span><br><span class=\"line\"><span class=\"operator\">...</span></span><br></pre></td></tr></table></figure></li>\n<li><p>可以进一步省略传入的类型</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> operation:(<span class=\"type\">Double</span>) -&gt; <span class=\"type\">Double</span></span><br><span class=\"line\">operation <span class=\"operator\">=</span> &#123; (op) <span class=\"keyword\">in</span> <span class=\"keyword\">return</span> <span class=\"operator\">-</span>op&#125;</span><br><span class=\"line\"><span class=\"operator\">...</span></span><br></pre></td></tr></table></figure></li>\n<li><p>省略返回的标记 <code>return</code>:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> operation:(<span class=\"type\">Double</span>) -&gt; <span class=\"type\">Double</span></span><br><span class=\"line\">operation <span class=\"operator\">=</span> &#123; (op) <span class=\"keyword\">in</span>  <span class=\"operator\">-</span>op&#125;</span><br><span class=\"line\"><span class=\"operator\">...</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>最后, 我们可以直接用 <code>$0</code>等替代传入的参数, 也就是省略了参数的名称!</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> operation:(<span class=\"type\">Double</span>) -&gt; <span class=\"type\">Double</span></span><br><span class=\"line\">operation <span class=\"operator\">=</span> &#123; <span class=\"operator\">-</span><span class=\"variable\">$0</span> &#125;</span><br><span class=\"line\"><span class=\"operator\">...</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"闭包的常见使用\"><a href=\"#闭包的常见使用\" class=\"headerlink\" title=\"闭包的常见使用\"></a>闭包的常见使用</h4><p>e.g.</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/swift.assets/image-20250412170605776.png\"\n                      alt=\"image-20250412170605776\"\n                ></p>\n<h4 id=\"Trailing-Closure\"><a href=\"#Trailing-Closure\" class=\"headerlink\" title=\"Trailing Closure\"></a>Trailing Closure</h4><p>当闭包是函数的<strong>最后一个参数</strong>时，</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> result <span class=\"operator\">=</span> applyTwice(<span class=\"number\">3</span>, operation: &#123; <span class=\"variable\">$0</span> <span class=\"operator\">*</span> <span class=\"number\">2</span> &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>可以改写成:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> result <span class=\"operator\">=</span> applyTwice(<span class=\"number\">3</span>) &#123; <span class=\"variable\">$0</span> <span class=\"operator\">*</span> <span class=\"number\">2</span> &#125; <span class=\"comment\">// result = 12</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"慕课学习杂记\"><a href=\"#慕课学习杂记\" class=\"headerlink\" title=\"慕课学习杂记\"></a>慕课学习杂记</h1><h4 id=\"something\"><a href=\"#something\" class=\"headerlink\" title=\"something\"></a>something</h4><ul>\n<li><p>去官网学习新出现的技术</p>\n<ul>\n<li>codeML</li>\n</ul>\n</li>\n<li><p>函数也可以赋值给变量</p>\n</li>\n</ul>\n<h4 id=\"省略外部参数名\"><a href=\"#省略外部参数名\" class=\"headerlink\" title=\"省略外部参数名\"></a>省略外部参数名</h4><ul>\n<li>外部参数名: 在函数调用的时候使用, 提高可读性;</li>\n<li>内部参数名: 在函数体的内部使用</li>\n</ul>\n<p>如果如此定义:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">greet</span>(<span class=\"params\">person</span> <span class=\"params\">name</span>: <span class=\"type\">String</span>)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello , <span class=\"subst\">\\(name)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那么在调用的时候必须显示声明外部参数名:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">greet( person: <span class=\"string\">&quot;Alice&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>如果我们希望省略外部参数名, 就可以在定义函数的时候用 <code>_</code>来代替:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">greet</span>(<span class=\"keyword\">_</span> <span class=\"params\">name</span>: <span class=\"type\">String</span>)&#123;</span><br><span class=\"line\">  <span class=\"operator\">...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h4><p>我们可以让函数作为另一个函数的输入参数:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">addTwoInts</span>( <span class=\"keyword\">_</span> <span class=\"params\">a</span>: <span class=\"type\">Int</span>, <span class=\"keyword\">_</span> <span class=\"params\">b</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a<span class=\"operator\">+</span>b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> mathFunction <span class=\"operator\">=</span> addTwoInts</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 高阶函数</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">printMathResults（_</span> mathFunction: (<span class=\"type\">Int</span>, <span class=\"type\">Int）</span>-&gt; <span class=\"type\">Int</span>, <span class=\"keyword\">_</span> a: <span class=\"type\">Int</span>, <span class=\"keyword\">_</span> b: <span class=\"type\">Int</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result <span class=\"operator\">=</span> mathFunction(a,b)</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用</span></span><br><span class=\"line\">printMathResults（addTwoInts， <span class=\"number\">3</span>,<span class=\"number\">5</span>）</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意函数作为参数的时候, 类型的定义就是输入类型和返回类型, 也是用 <code>,</code> 来分隔不同的参数.</p>\n</blockquote>\n<hr>\n<h4 id=\"内置的库\"><a href=\"#内置的库\" class=\"headerlink\" title=\"内置的库\"></a>内置的库</h4><p><code>AVFoudation</code>: 音频播放</p>\n<hr>\n<ul>\n<li><p>枚举内部也可以设置方法;</p>\n</li>\n<li><p>结构体本身不需要构造函数(因为swift存在对于结构体的默认构造) , 但是如果结构体内部的属性存在这样的属性:</p>\n<ul>\n<li>它可能是枚举内部的方法, 跟枚举的属性有关, 可能使用了 <code>switch</code>来根据枚举属性赋值.</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Type</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Cike</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"operator\">...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">func</span> <span class=\"title function_\">blood</span>()-&gt; <span class=\"type\">Double</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> <span class=\"keyword\">self</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> .<span class=\"type\">Cike</span>: <span class=\"keyword\">return</span> <span class=\"number\">10</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> .<span class=\"type\">Fashi</span>: <span class=\"keyword\">return</span> <span class=\"operator\">...</span></span><br><span class=\"line\">      <span class=\"operator\">...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Card</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> country: <span class=\"type\">Country</span></span><br><span class=\"line\">  vat type: <span class=\"type\">Type</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> blood: <span class=\"type\">Double</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">init</span> (<span class=\"params\">country</span>: <span class=\"type\">Country</span>, <span class=\"params\">type</span>: <span class=\"type\">Type</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.country <span class=\"operator\">=</span> country</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.type <span class=\"operator\">=</span> type;</span><br><span class=\"line\">    blood <span class=\"operator\">=</span> type.blood</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>结构体和枚举属于 <code>&lt;u&gt;</code>值类型<code>&lt;/u&gt;</code>, 如果赋值的时候进行拷贝操作;</p>\n<ul>\n<li>如果结构体声明为 <code>let</code>, 即使属性是变量, 那么也无法修改内部的属性,</li>\n</ul>\n</li>\n<li><p>类是引用类型, 赋值的时候使得左值指向了同样的内存区域, 也就是信息保持一致, 更改同步</p>\n<ul>\n<li>如果我们将类声明为常量, 相当于cpp的指针常量, 也就是说类内部的属性可以更改, 但是无法修改这个量指向的内存区域.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"计算属性-1\"><a href=\"#计算属性-1\" class=\"headerlink\" title=\"计算属性\"></a>计算属性</h4><p>访问的时候动态计算得到.</p>\n<p>下面通过一个矩形的例子来说明:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Point</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> x <span class=\"operator\">=</span> <span class=\"number\">0.0</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> y <span class=\"operator\">=</span> <span class=\"number\">0.0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Size</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> width <span class=\"operator\">=</span> <span class=\"number\">0.0</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> height <span class=\"operator\">=</span> <span class=\"number\">0.0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Rect</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> origin <span class=\"operator\">=</span> <span class=\"type\">Point</span>()</span><br><span class=\"line\">  <span class=\"keyword\">var</span> size <span class=\"operator\">=</span> <span class=\"type\">Size</span>()</span><br><span class=\"line\">  <span class=\"keyword\">var</span> center: <span class=\"type\">Point</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> centerX <span class=\"operator\">=</span> origin.x <span class=\"operator\">+</span> (size.width <span class=\"operator\">/</span> <span class=\"number\">2</span>)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> centerY <span class=\"operator\">=</span> orgin.y <span class=\"operator\">+</span> (size.height <span class=\"operator\">/</span><span class=\"number\">2</span> )</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"type\">Point</span>(x: centerX, y: centerY)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">set</span>(newCenter)&#123;</span><br><span class=\"line\">      origin.x <span class=\"operator\">=</span> newCenter.x <span class=\"operator\">-</span> (size.width <span class=\"operator\">/</span> <span class=\"number\">2</span>)</span><br><span class=\"line\">      origin.y <span class=\"operator\">=</span> newCenter.y <span class=\"operator\">-</span> (size.height <span class=\"operator\">/</span> <span class=\"number\">2</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述完成了结构体的计算属性的定义, 其中 <code>get</code>部分也可以优化为:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">get</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">Point</span>(x: origin.x <span class=\"operator\">+</span> (size.width <span class=\"operator\">/</span> <span class=\"number\">2</span>),</span><br><span class=\"line\">        y: orgin.y <span class=\"operator\">+</span> (size.height <span class=\"operator\">/</span><span class=\"number\">2</span> ) )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这是因为, 如果 <code>get</code> 部分只存在一个表达式,  就会自动将其返回, 不需要显式声明 <code>return</code>关键字.</p>\n</blockquote>\n<p>然后可以如此应用:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> currCenter <span class=\"operator\">=</span> rectElement.center</span><br><span class=\"line\"></span><br><span class=\"line\">rectElement.center <span class=\"operator\">=</span> <span class=\"type\">Point</span>(x:<span class=\"number\">20</span>, y:<span class=\"number\">50</span>)</span><br></pre></td></tr></table></figure>\n\n<p><code>set</code>提供了语法糖, 也就是可以直接访问oldValue 和  newValue, 因此我们可以如此改写:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span>&#123;</span><br><span class=\"line\">  origin.x <span class=\"operator\">=</span> newValue.x <span class=\"operator\">-</span> (size.width <span class=\"operator\">/</span> <span class=\"number\">2</span>)</span><br><span class=\"line\">  origin.y <span class=\"operator\">=</span> newValue.y <span class=\"operator\">-</span> (size.height <span class=\"operator\">/</span> <span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>[!NOTE]</p>\n<p>对于只读的计算属性, 由于不存在 <code>set</code>, 我们可以直接在花括号内定义返回内容.</p>\n</blockquote>\n<hr>\n<ul>\n<li>声明 <code>static</code> , 表示这个属性或者方法属于整个类型而非某个实例. 此时相应的, 我们使用 <code>&lt;tyepName&gt;.&lt;strtic attribute&gt;</code>的方式来访问.</li>\n<li>子面量本身是不可修改的, 下面的拓展中, 如果写作  <code>var someInt = 3.square()</code>就会报错</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">Int</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">square</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span> <span class=\"operator\">=</span> <span class=\"keyword\">self</span> <span class=\"operator\">*</span> <span class=\"keyword\">self</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> someInt <span class=\"operator\">=</span> <span class=\"number\">3</span></span><br><span class=\"line\">someInt.square()</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>控制器存在5种状态:</p>\n<ul>\n<li>未加载</li>\n<li>将要出现</li>\n<li>出现</li>\n<li>将要消失</li>\n<li>已经消失</li>\n</ul>\n<p>APP的状态:</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"swift.assets/image-20250413182851979.png\"\n                      alt=\"image-20250413182851979\" style=\"zoom:33%;\" \n                >\n\n<p><code>UiSceneDelegate</code>用于响应基于 <code>scene</code> 的生命周期事件.</p>\n<p>可以使用属性的 <code>didset</code>来便捷地检测变化并快速修改:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> score <span class=\"operator\">=</span> <span class=\"number\">0</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">didSet</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.gameScoreLabel.text <span class=\"operator\">=</span> <span class=\"string\">&quot;Score: <span class=\"subst\">\\(score)</span>&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>viewController</code>是新的页面;</li>\n<li><code>view</code>是视图, 可以叠加在页面上.</li>\n<li><code>UIAlertController</code>组件相当于警示的弹窗组件</li>\n</ul>\n<h3 id=\"作图和绘画\"><a href=\"#作图和绘画\" class=\"headerlink\" title=\"作图和绘画\"></a>作图和绘画</h3><h4 id=\"CG\"><a href=\"#CG\" class=\"headerlink\" title=\"CG\"></a>CG</h4><ul>\n<li><p><code>CGFloat</code>用于二维坐标系中的坐标数据:</p>\n<ul>\n<li><code>let coor_x = CGFloat(10.5)</code></li>\n</ul>\n</li>\n<li><p><code>CGPoint(x: .. , y:...)</code></p>\n</li>\n<li><p><code>CGSize</code> 包含width和height属性的结构体;</p>\n</li>\n<li><p><code>CGRect</code>包含点和尺寸的矩形</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">CGRect</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> origin: <span class=\"type\">CGPoint</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> size: <span class=\"type\">CGSize</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>其他属性</p>\n</li>\n<li><p>e.g.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> minX: <span class=\"type\">CGPoint</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> midY: <span class=\"type\">CGPoint</span></span><br><span class=\"line\">intersects(<span class=\"type\">CGRect</span>) -&gt; <span class=\"type\">Bool</span> <span class=\"comment\">// 判断是否存在交集</span></span><br><span class=\"line\">contains(<span class=\"type\">CGPoint</span>) -&gt; <span class=\"type\">Bool</span> <span class=\"comment\">// 是否包含点.</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<p>最小单元是 <code>Point</code>而非像素点.</p>\n<p>bound表示视图内部允许绘制的区域:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bounds: <span class=\"type\">CGRect</span> <span class=\"comment\">// 也就是一个矩形</span></span><br></pre></td></tr></table></figure>\n\n<p>frame\t视图在父视图中的位置:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> frame: <span class=\"type\">CGRect</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"自定义视图\"><a href=\"#自定义视图\" class=\"headerlink\" title=\"自定义视图\"></a>自定义视图</h4><p>绘制自定义视图通常通过创建一个自定义的 UIView 子类，并重写 draw(_:) 方法来实现.</p>\n<p>playGround中的实例:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"><span class=\"keyword\">import</span> PlaygroundSupport</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CustomView</span>: <span class=\"title class_ inherited__\">UIView</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">init</span>(<span class=\"params\">frame</span>: <span class=\"type\">CGRect</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(frame: frame)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.backgroundColor <span class=\"operator\">=</span> .white <span class=\"comment\">// 设置背景颜色</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">required</span> <span class=\"keyword\">init?</span>(<span class=\"params\">coder</span>: <span class=\"type\">NSCoder</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fatalError</span>(<span class=\"string\">&quot;init(coder:) has not been implemented&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">draw</span>(<span class=\"keyword\">_</span> <span class=\"params\">rect</span>: <span class=\"type\">CGRect</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> context <span class=\"operator\">=</span> <span class=\"type\">UIGraphicsGetCurrentContext</span>() <span class=\"keyword\">else</span> &#123; <span class=\"keyword\">return</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 绘制一个圆形</span></span><br><span class=\"line\">        context.setFillColor(<span class=\"type\">UIColor</span>.blue.cgColor) <span class=\"comment\">// 设置填充颜色</span></span><br><span class=\"line\">        context.fillEllipse(in: rect) <span class=\"comment\">// 绘制填充的圆</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 绘制一个矩形</span></span><br><span class=\"line\">        context.setStrokeColor(<span class=\"type\">UIColor</span>.black.withAlphaComponent(<span class=\"number\">0.6</span>).cgColor) <span class=\"comment\">// 设置能见度</span></span><br><span class=\"line\">        context.setLineWidth(<span class=\"number\">5</span>)</span><br><span class=\"line\">        context.stroke(rect.insetBy(dx: <span class=\"number\">10</span>, dy: <span class=\"number\">10</span>)) <span class=\"comment\">// 绘制矩形边框，留出间距</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建自定义视图实例</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> customView <span class=\"operator\">=</span> <span class=\"type\">CustomView</span>(frame: <span class=\"type\">CGRect</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>, width: <span class=\"number\">200</span>, height: <span class=\"number\">200</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 显示在 Playground 的 live view</span></span><br><span class=\"line\"><span class=\"type\">PlaygroundPage</span>.current.liveView <span class=\"operator\">=</span> customView</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>touchesBegan</code>–WWDC</li>\n<li><code>SCNVector3</code>是三维向量</li>\n<li><code>DispathchQueue</code>表示创建一个异步的进程</li>\n</ul>\n<h3 id=\"传感器\"><a href=\"#传感器\" class=\"headerlink\" title=\"传感器\"></a>传感器</h3><ul>\n<li>加速度的方向伴随手机的头部旋转保持不变;<ul>\n<li>以 <code>g</code> 为描述单位;</li>\n<li>面向使用者的方向是 <code>z</code> 轴.</li>\n</ul>\n</li>\n<li>陀螺仪<ul>\n<li>记录对应用三个轴</li>\n<li>roll, pitch, yaw</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a>动画</h3><h2 id=\"结绳记事\"><a href=\"#结绳记事\" class=\"headerlink\" title=\"结绳记事\"></a>结绳记事</h2><ul>\n<li><p><a class=\"link\"   href=\"https://www.icourse163.org/learn/ZJU-1450024180?tid=1474143513#/learn/content?type=detail&id=1262245274&cid=1299836384&contentid=1217938866\" >操作演示<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a>.</p>\n</li>\n<li><p>按住 <code>ctrl</code>将视图中的组件拖放到代码中.</p>\n</li>\n<li><p>右下角的几个功能:</p>\n<ul>\n<li>约束;</li>\n<li>选择视图</li>\n</ul>\n</li>\n<li><p><code>ctrl + option + cmd + enter</code> 快速显示代码区域</p>\n</li>\n<li><p><a class=\"link\"   href=\"https://www.icourse163.org/learn/ZJU-1450024180?tid=1474143513#/learn/content?type=detail&id=1262245274&cid=1299836386&contentid=1217092922\" >组件使用<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></p>\n<ul>\n<li>50:00 左右介绍了两种类型和交互</li>\n</ul>\n</li>\n<li><p>按住 <code>optional</code>然后 hover 在类上, 可以显示对应的基础操作.</p>\n</li>\n<li><p>可选值的本质是枚举类型!</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Optional</span>&lt;<span class=\"type\">T</span>&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> none</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"keyword\">some</span>(<span class=\"operator\">&lt;</span><span class=\"type\">T</span><span class=\"operator\">&gt;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p><a class=\"link\"   href=\"https://www.icourse163.org/learn/ZJU-1450024180?tid=1474143513#/learn/content?type=detail&id=1262245305&sm=1\" >画图和动画<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></p>\n</li>\n<li><p><a class=\"link\"   href=\"https://www.icourse163.org/learn/ZJU-1450024180?tid=1474143513#/learn/content?type=detail&id=1262245309&sm=1\" >coreML<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></p>\n</li>\n<li><p>在项目中显示Md格式:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*:</span></span><br><span class=\"line\"><span class=\"comment\">...</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure></li>\n<li><p>选择在运行时隐藏实际存在的代码:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//#-hidden-code</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> PlaygroundSupport</span><br><span class=\"line\"><span class=\"operator\">...</span></span><br><span class=\"line\"><span class=\"comment\">//#-end-hidden-code</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"Swift-UI\"><a href=\"#Swift-UI\" class=\"headerlink\" title=\"Swift UI\"></a>Swift UI</h1><ul>\n<li><a class=\"link\"   href=\"https://www.icourse163.org/learn/ZJU-1450024180?tid=1474143513#/learn/content?type=detail&id=1262245315&cid=1299836440&contentid=1218091551\" >慕课的链接<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n<li><a class=\"link\"   href=\"https://www.hackingwithswift.com/100/swiftui/16\" >by now<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n<li>SixD: 开箱即用的UI设计等.</li>\n<li><a class=\"link\"   href=\"https://www.hackingwithswift.com/glossary\" >术语表<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n</ul>\n<h2 id=\"AR\"><a href=\"#AR\" class=\"headerlink\" title=\"AR\"></a>AR</h2><ul>\n<li><a class=\"link\"   href=\"https://www.createwithswift.com/creating-an-augmented-reality-app-in-swiftui-using-realitykit-and-arkit/\" >helpful links<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n<li><a class=\"link\"   href=\"https://developer.apple.com/documentation/realitykit/?ref=createwithswift.com\" >官方文档<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n</ul>\n<h2 id=\"动画-1\"><a href=\"#动画-1\" class=\"headerlink\" title=\"动画\"></a>动画</h2><h4 id=\"缩放变换\"><a href=\"#缩放变换\" class=\"headerlink\" title=\"缩放变换\"></a>缩放变换</h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">NavigationLink</span>&#123;</span><br><span class=\"line\">  <span class=\"type\">BraceletEditor</span>(bracelet)</span><br><span class=\"line\">  .navigationTransitionStyle(</span><br><span class=\"line\">  .zoom(</span><br><span class=\"line\">  \tsourceID:bracelet.id,</span><br><span class=\"line\">  \tin:braceletList</span><br><span class=\"line\">  \t)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;label:&#123;</span><br><span class=\"line\">  <span class=\"type\">BraceletPreview</span>(bracelet)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.matchedTansitionSource(</span><br><span class=\"line\">\tid:bracelet.id,</span><br><span class=\"line\">  in:braceletList</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Symbol-6\"><a href=\"#Symbol-6\" class=\"headerlink\" title=\"Symbol 6\"></a>Symbol 6</h2><h3 id=\"动画-2\"><a href=\"#动画-2\" class=\"headerlink\" title=\"动画\"></a>动画</h3><ul>\n<li>使用 <code>晃动</code> 在复杂的UI中提示可交互性.</li>\n<li><code>旋转</code>动画来表示正在进行的进程</li>\n</ul>\n<h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2><h4 id=\"磨砂效果\"><a href=\"#磨砂效果\" class=\"headerlink\" title=\"磨砂效果\"></a>磨砂效果</h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.frame(width: <span class=\"number\">200</span>, height: <span class=\"number\">200</span>)</span><br><span class=\"line\">.background(.ultraThinMaterial, in: <span class=\"type\">RoundedRectangle</span>(cornerRadius: <span class=\"number\">20</span>, style: .continuous))</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"搜索栏\"><a href=\"#搜索栏\" class=\"headerlink\" title=\"搜索栏\"></a>搜索栏</h4><ul>\n<li><p>状态管理:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 存储搜索文本</span></span><br><span class=\"line\"><span class=\"meta\">@State</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> searchText <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可选：跟踪搜索是否处于活动状态</span></span><br><span class=\"line\"><span class=\"meta\">@State</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> isSearching <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure></li>\n<li><p>数据过滤模式</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基本过滤计算属性模板</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> filteredItems: [<span class=\"type\">ItemType</span>] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> searchText.isEmpty &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> originalItems</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> originalItems.filter &#123; item <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"comment\">// 根据需要自定义过滤条件</span></span><br><span class=\"line\">            item.name.localizedCaseInsensitiveContains(searchText) <span class=\"operator\">||</span></span><br><span class=\"line\">            item.description.localizedCaseInsensitiveContains(searchText)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 处理嵌套数据结构的过滤模板</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> filteredNestedItems: [<span class=\"type\">ParentType</span>] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> searchText.isEmpty &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> originalParentItems</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> originalParentItems.compactMap &#123; parent <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> matchedChildren <span class=\"operator\">=</span> parent.children.filter &#123; child <span class=\"keyword\">in</span></span><br><span class=\"line\">                child.name.localizedCaseInsensitiveContains(searchText)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> matchedChildren.isEmpty &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 创建包含匹配子项的新父项</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"type\">ParentType</span>(id: parent.id, name: parent.name, children: matchedChildren)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>搜索UI中的实现:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">NavigationStack</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">List</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用过滤后的数据源</span></span><br><span class=\"line\">        <span class=\"type\">ForEach</span>(filteredItems) &#123; item <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"comment\">// 列表项视图</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .navigationTitle(<span class=\"string\">&quot;标题&quot;</span>)</span><br><span class=\"line\">    .searchable(text: <span class=\"variable\">$searchText</span>, prompt: <span class=\"string\">&quot;搜索提示文字&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 可选：添加搜索建议</span></span><br><span class=\"line\">    .searchSuggestions &#123;</span><br><span class=\"line\">        <span class=\"type\">ForEach</span>(suggestions, id: \\.<span class=\"keyword\">self</span>) &#123; suggestion <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"type\">Text</span>(suggestion).searchCompletion(suggestion)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"左右适应的外边距\"><a href=\"#左右适应的外边距\" class=\"headerlink\" title=\"左右适应的外边距\"></a>左右适应的外边距</h4><p>通过 <code>HStack</code>与  <code>space</code>实现卡片的自适应扩展, 同时利用 <code>.frame(maxwidth:...)</code>来设置一个最大的卡片宽度</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">HStack</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">Spacer</span>(minLength: <span class=\"number\">10</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"type\">Text</span>(item.description)</span><br><span class=\"line\">        .padding()</span><br><span class=\"line\">        .background(<span class=\"type\">Color</span>(.systemGray6))</span><br><span class=\"line\">        .overlay(</span><br><span class=\"line\">            <span class=\"type\">RoundedRectangle</span>(cornerRadius: <span class=\"number\">10</span>) <span class=\"comment\">// 10为圆角半径，可调整</span></span><br><span class=\"line\">                .stroke(<span class=\"type\">Color</span>.gray, lineWidth: <span class=\"number\">1</span>) <span class=\"comment\">// 边框颜色和宽度</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        .clipShape(<span class=\"type\">RoundedRectangle</span>(cornerRadius: <span class=\"number\">10</span>))</span><br><span class=\"line\">    <span class=\"comment\">// 保证背景和边框都圆角</span></span><br><span class=\"line\">    .frame(maxWidth: <span class=\"number\">400</span>) <span class=\"comment\">// 最大宽度限制</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Spacer</span>(minLength: <span class=\"number\">10</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>Spacer(minLength: 10)</code> 表示<strong>保证自己不会小于 minLength</strong>.</p>\n<p>上述的 <code>Spacer</code>会压缩卡片的内容, 如果希望直接设置卡片在父容器中的左右外边距, 应该在卡片的内部使用 <code>padding</code>:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Text</span>(item.description)</span><br><span class=\"line\">    .padding(.horizontal, <span class=\"number\">24</span>) <span class=\"comment\">// 卡片内容内边距</span></span><br><span class=\"line\">    .padding(.vertical, <span class=\"number\">12</span>)</span><br><span class=\"line\">    .background(<span class=\"type\">Color</span>(.systemGray6))</span><br><span class=\"line\">    .overlay(</span><br><span class=\"line\">        <span class=\"type\">RoundedRectangle</span>(cornerRadius: <span class=\"number\">10</span>)</span><br><span class=\"line\">            .stroke(<span class=\"type\">Color</span>.gray, lineWidth: <span class=\"number\">2</span>)</span><br><span class=\"line\">    )</span><br><span class=\"line\">    .clipShape(<span class=\"type\">RoundedRectangle</span>(cornerRadius: <span class=\"number\">10</span>))</span><br><span class=\"line\">    .padding(.horizontal, <span class=\"number\">20</span>) <span class=\"comment\">// 整个卡片距离父视图左右20pt</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"全局统一样式\"><a href=\"#全局统一样式\" class=\"headerlink\" title=\"全局统一样式\"></a>全局统一样式</h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@main</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">MyApp</span>: <span class=\"title class_ inherited__\">App</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">Scene</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">WindowGroup</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">ContentView</span>()</span><br><span class=\"line\">                .buttonStyle(<span class=\"type\">ShadowButtonStyle</span>(radius: <span class=\"number\">10</span>))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参数标签和参数名\"><a href=\"#参数标签和参数名\" class=\"headerlink\" title=\"参数标签和参数名\"></a>参数标签和参数名</h4><ul>\n<li>参数标签用于函数调用时;</li>\n<li>参数名用于函数内部的参数名称.</li>\n</ul>\n<p>e.g.:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">greet</span>(<span class=\"params\">person</span> <span class=\"params\">atName</span>: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello, <span class=\"subst\">\\(atName)</span>!&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">greet(person: <span class=\"string\">&quot;Alice&quot;</span>) <span class=\"comment\">// 输出：Hello, Alice!</span></span><br></pre></td></tr></table></figure>\n\n<p>也可以使用 <code>_</code>来省略调用时的参数标签:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">greet</span>(<span class=\"keyword\">_</span> <span class=\"params\">name</span>: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello, <span class=\"subst\">\\(name)</span>!&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">greet(<span class=\"string\">&quot;Alice&quot;</span>) <span class=\"comment\">// 输出：Hello, Alice!</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Alert\"><a href=\"#Alert\" class=\"headerlink\" title=\"Alert\"></a>Alert</h4><p>swift UI中的弹窗提示同样通过本地的 <code>@State</code>变量来实现:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@State</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> showingPaymentAlert <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"operator\">...</span></span><br><span class=\"line\">.alert(<span class=\"string\">&quot;Order confirmed&quot;</span>, isPresented: <span class=\"variable\">$showingPaymentAlert</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// add buttons here</span></span><br><span class=\"line\">&#125; message: &#123;</span><br><span class=\"line\">    <span class=\"type\">Text</span>(<span class=\"string\">&quot;Your total was <span class=\"subst\">\\(totalPrice)</span> – thank you!&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>设置按钮来改变可见的状态:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Button</span>(<span class=\"string\">&quot;Confirm order&quot;</span>) &#123;</span><br><span class=\"line\">    showingPaymentAlert.toggle()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"自定义绑定\"><a href=\"#自定义绑定\" class=\"headerlink\" title=\"自定义绑定\"></a>自定义绑定</h4><p>我们也可以使用 <code>Binding</code> 类型手动创建绑定，该类型可以提供自定义 <code>get</code> 和 <code>set</code> 闭包，以便在读取或写入值时运行。</p>\n<h4 id=\"Foreach\"><a href=\"#Foreach\" class=\"headerlink\" title=\"Foreach\"></a>Foreach</h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ForEach</span>(item.restrictions) &#123; restriction <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"type\">Text</span>(restriction)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时, 要求 <code>item.restrictions</code> 具有可唯一标识的 <code>id</code> 字段.</p>\n<ul>\n<li><p>如果内容本身就是唯一标识, 比如说遍历的内容是字符串数组, 那么可以如此声明:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ForEach</span>(item.restrictions, id: \\.<span class=\"keyword\">self</span>) &#123; restriction <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"type\">Text</span>(restriction)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"Spacer\"><a href=\"#Spacer\" class=\"headerlink\" title=\"Spacer()\"></a>Spacer()</h4><p>用于填充剩余的空间</p>\n<ul>\n<li>使用 <code>offset(x:.., y:...)</code>来调节位置, 左上角是原点.</li>\n</ul>\n<h4 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h4><ul>\n<li><p>作用: 用于存储独立于视图的、长期存在的数据;</p>\n</li>\n<li><p>e.g.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// App.swift</span></span><br><span class=\"line\"><span class=\"meta\">@StateObject</span> <span class=\"keyword\">var</span> order <span class=\"operator\">=</span> <span class=\"type\">Order</span>()</span><br></pre></td></tr></table></figure></li>\n<li><p><code>@StateObject</code> 属性包装器负责在<code>&lt;u&gt;</code>应用程序的整个生命周期中<code>&lt;/u&gt;</code>保持对象处于活动状态。</p>\n</li>\n<li><p>需要在创建视图结构体的时候传递:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">WindowGroup</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">ContentView</span>()</span><br><span class=\"line\">        .environmentObject(order)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>为了让swift知道什么时候更新视图, 常用的是声明 <code>@Published</code>属性包装器——足以让它更新任何正在监视更改的 SwiftUI 视图.</p>\n</li>\n<li><p>同时声明对应的对象遵循可观测协议: <strong>ObservableObject</strong>.</p>\n</li>\n</ul>\n<p>我们可以使用 <code>@EnvironmentObject</code>来访问环境中的共享数据, 也就是传递上一步已经在父视图中创建和管理的对象.</p>\n<p>e.g.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UserData</span>: <span class=\"title class_ inherited__\">ObservableObject</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Published</span> <span class=\"keyword\">var</span> name: <span class=\"type\">String</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;John&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_ inherited__\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@StateObject</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> userData <span class=\"operator\">=</span> <span class=\"type\">UserData</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ChildView</span>().environmentObject(userData)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ChildView</span>: <span class=\"title class_ inherited__\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@EnvironmentObject</span> <span class=\"keyword\">var</span> userData: <span class=\"type\">UserData</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Text</span>(userData.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用 <code>@State</code>来声明简单的本地值——比如整数和字符串.</p>\n<ul>\n<li><p>建议将其声明为 <code>private</code>, e.g.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@State</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> paymentType <span class=\"operator\">=</span> <span class=\"string\">&quot;Cash&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"菜单视图\"><a href=\"#菜单视图\" class=\"headerlink\" title=\"菜单视图\"></a>菜单视图</h4><p>为了将菜单视图存放在一个选项卡当中, 我们需要新建一个视图, 用来作为容器:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">MainView</span>: <span class=\"title class_ inherited__\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">TabView</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">ContentView</span>()</span><br><span class=\"line\">                .tabItem &#123;</span><br><span class=\"line\">                    <span class=\"type\">Label</span>(<span class=\"string\">&quot;Menu&quot;</span>, systemImage: <span class=\"string\">&quot;list.dash&quot;</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">OrderView</span>()</span><br><span class=\"line\">                .tabItem &#123;</span><br><span class=\"line\">                    <span class=\"type\">Label</span>(<span class=\"string\">&quot;Order&quot;</span>, systemImage: <span class=\"string\">&quot;square.and.pencil&quot;</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>页面级别的切换.</p>\n</blockquote>\n<p>使用枚举与子页面的内容分区:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SwiftUI</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_ inherited__\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">enum</span> <span class=\"title class_\">Section</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> cats</span><br><span class=\"line\">        <span class=\"keyword\">case</span> dogs</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@State</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> selectedTab <span class=\"operator\">=</span> <span class=\"type\">Section</span>.cats</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">TabView</span>(selection: <span class=\"variable\">$selectedTab</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">Tab</span>(<span class=\"string\">&quot;Cats&quot;</span>, systemImage: <span class=\"string\">&quot;cat&quot;</span>, value: .cats) &#123;</span><br><span class=\"line\">                <span class=\"type\">Button</span>(<span class=\"string\">&quot;Go to Dogs&quot;</span>) &#123;</span><br><span class=\"line\">                    selectedTab <span class=\"operator\">=</span> .dogs</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          </span><br><span class=\"line\">            <span class=\"type\">Tab</span>(<span class=\"string\">&quot;Dogs&quot;</span>, systemImage: <span class=\"string\">&quot;dog&quot;</span>, value: .dogs) &#123;</span><br><span class=\"line\">                <span class=\"type\">Button</span>(<span class=\"string\">&quot;Go to Cats&quot;</span>) &#123;</span><br><span class=\"line\">                    selectedTab <span class=\"operator\">=</span> .cats</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"合适的修饰符\"><a href=\"#合适的修饰符\" class=\"headerlink\" title=\"合适的修饰符\"></a>合适的修饰符</h2><ul>\n<li><p>图像自动调节尺寸:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Image</span>(item.mainImage)</span><br><span class=\"line\">    .resizable()</span><br><span class=\"line\">    .scaledToFit()</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"设置阴影\"><a href=\"#设置阴影\" class=\"headerlink\" title=\"设置阴影\"></a>设置阴影</h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.shadow(color: .black.opacity(<span class=\"number\">0.2</span>), </span><br><span class=\"line\">        radius: <span class=\"number\">15</span>, x: <span class=\"number\">0</span>, y: <span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"为按钮设置动画\"><a href=\"#为按钮设置动画\" class=\"headerlink\" title=\"为按钮设置动画\"></a>为按钮设置动画</h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_ inherited__\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@State</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> showingWelcome <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Toggle</span>(<span class=\"string\">&quot;Toggle label&quot;</span>, isOn: <span class=\"variable\">$showingWelcome</span>.animation())</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> showingWelcome &#123;</span><br><span class=\"line\">                <span class=\"type\">Text</span>(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以进一步设置, 比如弹簧的渐入渐出:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Toggle</span>(<span class=\"string\">&quot;Toggle label&quot;</span>, isOn: <span class=\"variable\">$showingWelcome</span>.animation(.spring()))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h2><h4 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h4><ul>\n<li><code>ctrl</code>按住后点击  <code>VStack</code>可以快速地将其添加到 <code>ZStack</code>当中<ul>\n<li>颜色的设置需要通过 <code>ZStack</code>来实现.</li>\n</ul>\n</li>\n<li><code>option</code>可以显示当前类的介绍</li>\n<li></li>\n</ul>\n<p><strong>推荐资源：</strong></p>\n<ul>\n<li><strong>Raywenderlich 的 SwiftUI 教程：</strong> <a class=\"link\"   href=\"https://www.raywenderlich.com/books/swiftui-apprentice\" >Raywenderlich - SwiftUI Apprentice<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n<li><strong>Big Mountain Studio 的免费电子书：</strong> <a class=\"link\"   href=\"https://www.bigmountainstudio.com/free-swiftui-book\" >SwiftUI Views Quick Start<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n</ul>\n","_processedHighlight":true},{"title":"响应式设计","date":"2025-01-20T13:38:45.000Z","excerpt":"通过在freecodeCamp上的入门项目“响应式设计”来复习html等基础知识.","index_img":null,"math":true,"_content":"\n所有的 img 元素都应该有一个 alt 属性。 alt 属性的文本（值）有两个作用:\n- 第一个作用是让屏幕阅读器可以知晓图片的内容，这会对网页的可访问性有很大提升；\n- 另一个作用是当图片无法加载时，页面需要显示的替代文本。\n\n<br>\n\n注意嵌套的形式.\ne.g\n```html\n <p>See more <a href=\"https://freecatphotoapp.com\">cat photos</a> in our gallery.</p>\n```\n\n<br>\n\n\n要在新标签页中打开链接，可以在锚元素（a）中使用 target 属性。\n```html\n<p>See more <a href=\"https://freecatphotoapp.com\" target = \"_blank\">cat photos</a> in our gallery.</p>\n```\n\n<br>\n\n锚元素除了能将文本转化为链接, 还可以将 **图片** 转换为链接:\n```html\n<a hreg = \"https://freecatphotoapp.com\">\n    <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\">\n</a>\n```\n\n<br>\n\n\n**section** 元素用于在文档中定义各部分，如章节、标题、页脚或文档的任何其他部分。 它是一个对 SEO 和无障碍特性有帮助的语义元素。\n\n<br>\n\n\n列表:\n- 无序列表: `ul`;\n- 有序列表:`ol`;\n- 列表项: `li`;\n\n<br>\n\n\n**figure** 元素代表自包含的内容，允许将图像与标题相关联;\n**figcaption** 元素用于添加标题以描述 figure 元素中包含的图像。\n```html\n<figure>\n  <img src=\"image.jpg\" alt=\"A description of the image\">\n  <figcaption>A cute cat</figcaption>\n</figure>\n```\n\n<br>\n\n\n- 使用 **em** 使得文字为斜体;\n- `strong` 加深文字;\n\n<br>\n\n\nform 元素用于从用户获取信息，如姓名、电子邮件和其他详细信息。\n- `action`属性指定表单数据发送的位置;\n``` html\n<form action=\"/submit-url\"></form>\n```\n\n---\ninput 允许通过多种方式从Web表单中收集数据:\n- 与`img`一样为空元素——不需要结束标签;\n- 使用 `type` 属性创建多种输入;\n  - `text` : 文本;\n  - `radio`: 可以使用单选按钮;\n  - `checkbox`: 表单使用 **复选框**;\n- 使用`name`属性使得区分提交的数据;\n  - 令多个单选按钮具有 **相同** 的`name`, 使得在选中其中一个按钮时自动取消另外的单选按钮;\n  - 形成`name = value`形式的属性对进行提交;\n```html\n<label><input id=\"indoor\" type=\"radio\" name = \"indoor-outdoor\"> Indoor</label>\n<label><input id=\"outdoor\" type=\"radio\" name = 'indoor-outdoor'> Outdoor</label>\n```\n- `placeholder` 中为 **占位符** 文本, 用于提示输入框中输入的信息;\n- `required`属性可以避免缺少所需信息时的提交, 无需赋值, 确保空格即可;\n\n```html\n    <input type=\"text\" name = \"catphotourl\">\n```\n\n<br>\n\n\n`button` 用于创建可点击的按钮:\n- 单击**没有任何属性**的表单按钮的默认行为会将表单提交到**表单**的 `action `属性中指定的位置;\n- 由于`input`和`button`为 **内联** 元素, 即使相隔书写也会显示在同行:\n- `type`的`submit`明确了为 可提交按钮;\n```html\n<button type = \"submit\">Submit</button>\n```\n\n<br>\n\nlabel 元素用于帮助将 input 元素的文本与 input 元素本身关联起来\n```html\n<label><input type=\"radio\"> cat</label>\n<!-- 点击单词 \"cat\" 也将选择 radio 按钮。 -->\n```\n\n<br>\n\n`id`用于标识特定的HTML元素\n\n<br>\n\n`fieldset` 元素用于在 Web 表单中将相关的输入和标签组合在一起:\n  - 块级元素，这意味着它们出现在新的一行上。\n  - `legend` 元素充当 fieldset 元素中内容的标题。\n```html\n<fieldset>\n        <legend> Is your cat an indoor or outdoor cat?</legend>\n          <label><input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"indoor\"> Indoor</label>\n          <label><input id=\"outdoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"outdoor\"> Outdoor</label>\n</fieldset>\n```\n![](/img/legend-2025-01-21-21-19-51.png)\n\n<br>\n\n还可以使用`for`属性将文本直接嵌套在`label`当中, 同时设置`input`的`id`与上述的`for`属性相同, 从而实现文本与元素相关联的效果:\n```html\n<input id=\"loving\" type=\"checkbox\"> \n<label for = \"loving\"> Loving </label>\n```\n\n<br>\n\n默认选中的按钮: `checked`\n```html\n<input checked type=\"radio\" name=\"meal\" value=\"breakfast\"> Breakfast\n```\n> checked属性无需额外赋值.\n\n<br>\n\n`footer`素用于定义文档或章节的页脚:\n- 脚通常包含文档作者信息、版权数据、使用条款链接、联系信息等.\n\n<br>\n\nhead 相关\n- 存放 $\\underline{元数据}$ 不会实际显示在html中的数据;\n- `title `元素决定了浏览器在页面的标题栏或选项卡中显示的内容;\n- `<link rel = \"stylesheet\" href = \"styles.css\">` 将CSS文件链接到当前的HTML\n\nelse:\n- `<!DOCTYPE html`: 声明满足最新版本html相关设置的要求;\n- `meta`是空元素; `<meta charset = \"utf-8\">`;\n- \n\n\n---\n\n选择器:\n- **id**选择器\n```css\n#cat {\n  width: 250px;\n}\n```\n- **class**选择器\n```css\n.class-name, .other-class {\n  styles\n}\n```\n- class类中元素的选择\n```css\n.item p{\n  /* 设置为样式近似于内联--排列在同一行, 同时可以设置宽高、边距 */\n  display: inline-block; \n}\n```\n- **伪元素**\n```css\n/* 已访问链接后设置为灰色 */\na:visited{\n  color: grey;\n}\n\n/* 悬浮时的变色 */\na:hover {\n  color: brown;\n}\n\n/* 点击时的状态设置 */\na:active{\n  color: white;\n}\n```\n<br>\n\n```css\n  margin-left : auto;\n  margin-right: auto;\n```\n> 使得**普通**元素在父级元素的空间内 **水平居中**\n\n\n<br>\n\n`article`是一个语义化标签:\n- 用于表示文档、页面或应用中的**独立**的、完整的内容单元;\n- 清晰地表明内容的用途，帮助开发者和搜索引擎理解页面结构;\n- 内容通常可以通过RSS订阅、社交媒体分享等方式单独发布.\n\n与其他类似标签的区别:\n- `div`: 粹的容器，没有语义，常用于布局;\n- `section`: 表示文档中的一个逻辑区域，通常用于分组内容，但不一定是独立的内容单元;\n- `article`: 示一个可以独立存在的内容单元.\n\n<br>\n\n```css\n/* 设置备用字体 */\nh1, h2 {\n  font-family: Impact, serif;\n}\n```\n\n\n","source":"_posts/前后端/响应式设计.md","raw":"---\ntitle: 响应式设计\ndate: 2025-01-20 21:38:45\ntags: \n- 杂记\nexcerpt: 通过在freecodeCamp上的入门项目“响应式设计”来复习html等基础知识.\nindex_img: \ncategories: 学习笔记\nmath: true\n---\n\n所有的 img 元素都应该有一个 alt 属性。 alt 属性的文本（值）有两个作用:\n- 第一个作用是让屏幕阅读器可以知晓图片的内容，这会对网页的可访问性有很大提升；\n- 另一个作用是当图片无法加载时，页面需要显示的替代文本。\n\n<br>\n\n注意嵌套的形式.\ne.g\n```html\n <p>See more <a href=\"https://freecatphotoapp.com\">cat photos</a> in our gallery.</p>\n```\n\n<br>\n\n\n要在新标签页中打开链接，可以在锚元素（a）中使用 target 属性。\n```html\n<p>See more <a href=\"https://freecatphotoapp.com\" target = \"_blank\">cat photos</a> in our gallery.</p>\n```\n\n<br>\n\n锚元素除了能将文本转化为链接, 还可以将 **图片** 转换为链接:\n```html\n<a hreg = \"https://freecatphotoapp.com\">\n    <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\">\n</a>\n```\n\n<br>\n\n\n**section** 元素用于在文档中定义各部分，如章节、标题、页脚或文档的任何其他部分。 它是一个对 SEO 和无障碍特性有帮助的语义元素。\n\n<br>\n\n\n列表:\n- 无序列表: `ul`;\n- 有序列表:`ol`;\n- 列表项: `li`;\n\n<br>\n\n\n**figure** 元素代表自包含的内容，允许将图像与标题相关联;\n**figcaption** 元素用于添加标题以描述 figure 元素中包含的图像。\n```html\n<figure>\n  <img src=\"image.jpg\" alt=\"A description of the image\">\n  <figcaption>A cute cat</figcaption>\n</figure>\n```\n\n<br>\n\n\n- 使用 **em** 使得文字为斜体;\n- `strong` 加深文字;\n\n<br>\n\n\nform 元素用于从用户获取信息，如姓名、电子邮件和其他详细信息。\n- `action`属性指定表单数据发送的位置;\n``` html\n<form action=\"/submit-url\"></form>\n```\n\n---\ninput 允许通过多种方式从Web表单中收集数据:\n- 与`img`一样为空元素——不需要结束标签;\n- 使用 `type` 属性创建多种输入;\n  - `text` : 文本;\n  - `radio`: 可以使用单选按钮;\n  - `checkbox`: 表单使用 **复选框**;\n- 使用`name`属性使得区分提交的数据;\n  - 令多个单选按钮具有 **相同** 的`name`, 使得在选中其中一个按钮时自动取消另外的单选按钮;\n  - 形成`name = value`形式的属性对进行提交;\n```html\n<label><input id=\"indoor\" type=\"radio\" name = \"indoor-outdoor\"> Indoor</label>\n<label><input id=\"outdoor\" type=\"radio\" name = 'indoor-outdoor'> Outdoor</label>\n```\n- `placeholder` 中为 **占位符** 文本, 用于提示输入框中输入的信息;\n- `required`属性可以避免缺少所需信息时的提交, 无需赋值, 确保空格即可;\n\n```html\n    <input type=\"text\" name = \"catphotourl\">\n```\n\n<br>\n\n\n`button` 用于创建可点击的按钮:\n- 单击**没有任何属性**的表单按钮的默认行为会将表单提交到**表单**的 `action `属性中指定的位置;\n- 由于`input`和`button`为 **内联** 元素, 即使相隔书写也会显示在同行:\n- `type`的`submit`明确了为 可提交按钮;\n```html\n<button type = \"submit\">Submit</button>\n```\n\n<br>\n\nlabel 元素用于帮助将 input 元素的文本与 input 元素本身关联起来\n```html\n<label><input type=\"radio\"> cat</label>\n<!-- 点击单词 \"cat\" 也将选择 radio 按钮。 -->\n```\n\n<br>\n\n`id`用于标识特定的HTML元素\n\n<br>\n\n`fieldset` 元素用于在 Web 表单中将相关的输入和标签组合在一起:\n  - 块级元素，这意味着它们出现在新的一行上。\n  - `legend` 元素充当 fieldset 元素中内容的标题。\n```html\n<fieldset>\n        <legend> Is your cat an indoor or outdoor cat?</legend>\n          <label><input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"indoor\"> Indoor</label>\n          <label><input id=\"outdoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"outdoor\"> Outdoor</label>\n</fieldset>\n```\n![](/img/legend-2025-01-21-21-19-51.png)\n\n<br>\n\n还可以使用`for`属性将文本直接嵌套在`label`当中, 同时设置`input`的`id`与上述的`for`属性相同, 从而实现文本与元素相关联的效果:\n```html\n<input id=\"loving\" type=\"checkbox\"> \n<label for = \"loving\"> Loving </label>\n```\n\n<br>\n\n默认选中的按钮: `checked`\n```html\n<input checked type=\"radio\" name=\"meal\" value=\"breakfast\"> Breakfast\n```\n> checked属性无需额外赋值.\n\n<br>\n\n`footer`素用于定义文档或章节的页脚:\n- 脚通常包含文档作者信息、版权数据、使用条款链接、联系信息等.\n\n<br>\n\nhead 相关\n- 存放 $\\underline{元数据}$ 不会实际显示在html中的数据;\n- `title `元素决定了浏览器在页面的标题栏或选项卡中显示的内容;\n- `<link rel = \"stylesheet\" href = \"styles.css\">` 将CSS文件链接到当前的HTML\n\nelse:\n- `<!DOCTYPE html`: 声明满足最新版本html相关设置的要求;\n- `meta`是空元素; `<meta charset = \"utf-8\">`;\n- \n\n\n---\n\n选择器:\n- **id**选择器\n```css\n#cat {\n  width: 250px;\n}\n```\n- **class**选择器\n```css\n.class-name, .other-class {\n  styles\n}\n```\n- class类中元素的选择\n```css\n.item p{\n  /* 设置为样式近似于内联--排列在同一行, 同时可以设置宽高、边距 */\n  display: inline-block; \n}\n```\n- **伪元素**\n```css\n/* 已访问链接后设置为灰色 */\na:visited{\n  color: grey;\n}\n\n/* 悬浮时的变色 */\na:hover {\n  color: brown;\n}\n\n/* 点击时的状态设置 */\na:active{\n  color: white;\n}\n```\n<br>\n\n```css\n  margin-left : auto;\n  margin-right: auto;\n```\n> 使得**普通**元素在父级元素的空间内 **水平居中**\n\n\n<br>\n\n`article`是一个语义化标签:\n- 用于表示文档、页面或应用中的**独立**的、完整的内容单元;\n- 清晰地表明内容的用途，帮助开发者和搜索引擎理解页面结构;\n- 内容通常可以通过RSS订阅、社交媒体分享等方式单独发布.\n\n与其他类似标签的区别:\n- `div`: 粹的容器，没有语义，常用于布局;\n- `section`: 表示文档中的一个逻辑区域，通常用于分组内容，但不一定是独立的内容单元;\n- `article`: 示一个可以独立存在的内容单元.\n\n<br>\n\n```css\n/* 设置备用字体 */\nh1, h2 {\n  font-family: Impact, serif;\n}\n```\n\n\n","slug":"前后端/响应式设计","published":1,"updated":"2025-05-08T12:02:22.523Z","comments":1,"layout":"post","photos":[],"_id":"cmcbm7pqh0028e2qg5mtrfvsv","content":"<p>所有的 img 元素都应该有一个 alt 属性。 alt 属性的文本（值）有两个作用:</p>\n<ul>\n<li>第一个作用是让屏幕阅读器可以知晓图片的内容，这会对网页的可访问性有很大提升；</li>\n<li>另一个作用是当图片无法加载时，页面需要显示的替代文本。</li>\n</ul>\n<br>\n\n<p>注意嵌套的形式.<br>e.g</p>\n<div class=\"code-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>See more <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://freecatphotoapp.com&quot;</span>&gt;</span>cat photos<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> in our gallery.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<br>\n\n\n<p>要在新标签页中打开链接，可以在锚元素（a）中使用 target 属性。</p>\n<div class=\"code-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>See more <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://freecatphotoapp.com&quot;</span> <span class=\"attr\">target</span> = <span class=\"string\">&quot;_blank&quot;</span>&gt;</span>cat photos<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> in our gallery.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<br>\n\n<p>锚元素除了能将文本转化为链接, 还可以将 <strong>图片</strong> 转换为链接:</p>\n<div class=\"code-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">hreg</span> = <span class=\"string\">&quot;https://freecatphotoapp.com&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;A cute orange cat lying on its back.&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<br>\n\n\n<p><strong>section</strong> 元素用于在文档中定义各部分，如章节、标题、页脚或文档的任何其他部分。 它是一个对 SEO 和无障碍特性有帮助的语义元素。</p>\n<br>\n\n\n<p>列表:</p>\n<ul>\n<li>无序列表: <code>ul</code>;</li>\n<li>有序列表:<code>ol</code>;</li>\n<li>列表项: <code>li</code>;</li>\n</ul>\n<br>\n\n\n<p><strong>figure</strong> 元素代表自包含的内容，允许将图像与标题相关联;<br><strong>figcaption</strong> 元素用于添加标题以描述 figure 元素中包含的图像。</p>\n<div class=\"code-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">figure</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;image.jpg&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;A description of the image&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">figcaption</span>&gt;</span>A cute cat<span class=\"tag\">&lt;/<span class=\"name\">figcaption</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">figure</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<br>\n\n\n<ul>\n<li>使用 <strong>em</strong> 使得文字为斜体;</li>\n<li><code>strong</code> 加深文字;</li>\n</ul>\n<br>\n\n\n<p>form 元素用于从用户获取信息，如姓名、电子邮件和其他详细信息。</p>\n<ul>\n<li><code>action</code>属性指定表单数据发送的位置;</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/submit-url&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<hr>\n<p>input 允许通过多种方式从Web表单中收集数据:</p>\n<ul>\n<li>与<code>img</code>一样为空元素——不需要结束标签;</li>\n<li>使用 <code>type</code> 属性创建多种输入;<ul>\n<li><code>text</code> : 文本;</li>\n<li><code>radio</code>: 可以使用单选按钮;</li>\n<li><code>checkbox</code>: 表单使用 <strong>复选框</strong>;</li>\n</ul>\n</li>\n<li>使用<code>name</code>属性使得区分提交的数据;<ul>\n<li>令多个单选按钮具有 <strong>相同</strong> 的<code>name</code>, 使得在选中其中一个按钮时自动取消另外的单选按钮;</li>\n<li>形成<code>name = value</code>形式的属性对进行提交;</li>\n</ul>\n</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;indoor&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span> = <span class=\"string\">&quot;indoor-outdoor&quot;</span>&gt;</span> Indoor<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;outdoor&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span> = <span class=\"string\">&#x27;indoor-outdoor&#x27;</span>&gt;</span> Outdoor<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<ul>\n<li><code>placeholder</code> 中为 <strong>占位符</strong> 文本, 用于提示输入框中输入的信息;</li>\n<li><code>required</code>属性可以避免缺少所需信息时的提交, 无需赋值, 确保空格即可;</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span> = <span class=\"string\">&quot;catphotourl&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<br>\n\n\n<p><code>button</code> 用于创建可点击的按钮:</p>\n<ul>\n<li>单击<strong>没有任何属性</strong>的表单按钮的默认行为会将表单提交到<strong>表单</strong>的 <code>action </code>属性中指定的位置;</li>\n<li>由于<code>input</code>和<code>button</code>为 <strong>内联</strong> 元素, 即使相隔书写也会显示在同行:</li>\n<li><code>type</code>的<code>submit</code>明确了为 可提交按钮;</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span> = <span class=\"string\">&quot;submit&quot;</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<br>\n\n<p>label 元素用于帮助将 input 元素的文本与 input 元素本身关联起来</p>\n<div class=\"code-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span>&gt;</span> cat<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 点击单词 &quot;cat&quot; 也将选择 radio 按钮。 --&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<br>\n\n<p><code>id</code>用于标识特定的HTML元素</p>\n<br>\n\n<p><code>fieldset</code> 元素用于在 Web 表单中将相关的输入和标签组合在一起:</p>\n<ul>\n<li>块级元素，这意味着它们出现在新的一行上。</li>\n<li><code>legend</code> 元素充当 fieldset 元素中内容的标题。</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">legend</span>&gt;</span> Is your cat an indoor or outdoor cat?<span class=\"tag\">&lt;/<span class=\"name\">legend</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;indoor&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;indoor-outdoor&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;indoor&quot;</span>&gt;</span> Indoor<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;outdoor&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;indoor-outdoor&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;outdoor&quot;</span>&gt;</span> Outdoor<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">fieldset</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/img/legend-2025-01-21-21-19-51.png\"\n                     \n                ></p>\n<br>\n\n<p>还可以使用<code>for</code>属性将文本直接嵌套在<code>label</code>当中, 同时设置<code>input</code>的<code>id</code>与上述的<code>for</code>属性相同, 从而实现文本与元素相关联的效果:</p>\n<div class=\"code-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;loving&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span> = <span class=\"string\">&quot;loving&quot;</span>&gt;</span> Loving <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<br>\n\n<p>默认选中的按钮: <code>checked</code></p>\n<div class=\"code-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">checked</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;meal&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;breakfast&quot;</span>&gt;</span> Breakfast</span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p>checked属性无需额外赋值.</p>\n</blockquote>\n<br>\n\n<p><code>footer</code>素用于定义文档或章节的页脚:</p>\n<ul>\n<li>脚通常包含文档作者信息、版权数据、使用条款链接、联系信息等.</li>\n</ul>\n<br>\n\n<p>head 相关</p>\n<ul>\n<li>存放 $\\underline{元数据}$ 不会实际显示在html中的数据;</li>\n<li><code>title </code>元素决定了浏览器在页面的标题栏或选项卡中显示的内容;</li>\n<li><code>&lt;link rel = &quot;stylesheet&quot; href = &quot;styles.css&quot;&gt;</code> 将CSS文件链接到当前的HTML</li>\n</ul>\n<p>else:</p>\n<ul>\n<li><code>&lt;!DOCTYPE html</code>: 声明满足最新版本html相关设置的要求;</li>\n<li><code>meta</code>是空元素; <code>&lt;meta charset = &quot;utf-8&quot;&gt;</code>;</li>\n<li></li>\n</ul>\n<hr>\n<p>选择器:</p>\n<ul>\n<li><strong>id</strong>选择器</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Css\"><figure class=\"iseeu highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#cat</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">250px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li><strong>class</strong>选择器</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Css\"><figure class=\"iseeu highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.class-name</span>, <span class=\"selector-class\">.other-class</span> &#123;</span><br><span class=\"line\">  styles</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>class类中元素的选择</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Css\"><figure class=\"iseeu highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> <span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 设置为样式近似于内联--排列在同一行, 同时可以设置宽高、边距 */</span></span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li><strong>伪元素</strong></li>\n</ul>\n<div class=\"code-container\" data-rel=\"Css\"><figure class=\"iseeu highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 已访问链接后设置为灰色 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:visited</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: grey;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 悬浮时的变色 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: brown;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 点击时的状态设置 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:active</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<br>\n\n<div class=\"code-container\" data-rel=\"Css\"><figure class=\"iseeu highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">margin-left</span> : auto;</span><br><span class=\"line\"><span class=\"attribute\">margin-right</span>: auto;</span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p>使得<strong>普通</strong>元素在父级元素的空间内 <strong>水平居中</strong></p>\n</blockquote>\n<br>\n\n<p><code>article</code>是一个语义化标签:</p>\n<ul>\n<li>用于表示文档、页面或应用中的<strong>独立</strong>的、完整的内容单元;</li>\n<li>清晰地表明内容的用途，帮助开发者和搜索引擎理解页面结构;</li>\n<li>内容通常可以通过RSS订阅、社交媒体分享等方式单独发布.</li>\n</ul>\n<p>与其他类似标签的区别:</p>\n<ul>\n<li><code>div</code>: 粹的容器，没有语义，常用于布局;</li>\n<li><code>section</code>: 表示文档中的一个逻辑区域，通常用于分组内容，但不一定是独立的内容单元;</li>\n<li><code>article</code>: 示一个可以独立存在的内容单元.</li>\n</ul>\n<br>\n\n<div class=\"code-container\" data-rel=\"Css\"><figure class=\"iseeu highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 设置备用字体 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span>, <span class=\"selector-tag\">h2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: Impact, serif;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n\n","more":"<p>所有的 img 元素都应该有一个 alt 属性。 alt 属性的文本（值）有两个作用:</p>\n<ul>\n<li>第一个作用是让屏幕阅读器可以知晓图片的内容，这会对网页的可访问性有很大提升；</li>\n<li>另一个作用是当图片无法加载时，页面需要显示的替代文本。</li>\n</ul>\n<br>\n\n<p>注意嵌套的形式.<br>e.g</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>See more <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://freecatphotoapp.com&quot;</span>&gt;</span>cat photos<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> in our gallery.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n<p>要在新标签页中打开链接，可以在锚元素（a）中使用 target 属性。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>See more <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://freecatphotoapp.com&quot;</span> <span class=\"attr\">target</span> = <span class=\"string\">&quot;_blank&quot;</span>&gt;</span>cat photos<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> in our gallery.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<p>锚元素除了能将文本转化为链接, 还可以将 <strong>图片</strong> 转换为链接:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">hreg</span> = <span class=\"string\">&quot;https://freecatphotoapp.com&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;A cute orange cat lying on its back.&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n<p><strong>section</strong> 元素用于在文档中定义各部分，如章节、标题、页脚或文档的任何其他部分。 它是一个对 SEO 和无障碍特性有帮助的语义元素。</p>\n<br>\n\n\n<p>列表:</p>\n<ul>\n<li>无序列表: <code>ul</code>;</li>\n<li>有序列表:<code>ol</code>;</li>\n<li>列表项: <code>li</code>;</li>\n</ul>\n<br>\n\n\n<p><strong>figure</strong> 元素代表自包含的内容，允许将图像与标题相关联;<br><strong>figcaption</strong> 元素用于添加标题以描述 figure 元素中包含的图像。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">figure</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;image.jpg&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;A description of the image&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">figcaption</span>&gt;</span>A cute cat<span class=\"tag\">&lt;/<span class=\"name\">figcaption</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">figure</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n<ul>\n<li>使用 <strong>em</strong> 使得文字为斜体;</li>\n<li><code>strong</code> 加深文字;</li>\n</ul>\n<br>\n\n\n<p>form 元素用于从用户获取信息，如姓名、电子邮件和其他详细信息。</p>\n<ul>\n<li><code>action</code>属性指定表单数据发送的位置;</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/submit-url&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>input 允许通过多种方式从Web表单中收集数据:</p>\n<ul>\n<li>与<code>img</code>一样为空元素——不需要结束标签;</li>\n<li>使用 <code>type</code> 属性创建多种输入;<ul>\n<li><code>text</code> : 文本;</li>\n<li><code>radio</code>: 可以使用单选按钮;</li>\n<li><code>checkbox</code>: 表单使用 <strong>复选框</strong>;</li>\n</ul>\n</li>\n<li>使用<code>name</code>属性使得区分提交的数据;<ul>\n<li>令多个单选按钮具有 <strong>相同</strong> 的<code>name</code>, 使得在选中其中一个按钮时自动取消另外的单选按钮;</li>\n<li>形成<code>name = value</code>形式的属性对进行提交;</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;indoor&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span> = <span class=\"string\">&quot;indoor-outdoor&quot;</span>&gt;</span> Indoor<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;outdoor&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span> = <span class=\"string\">&#x27;indoor-outdoor&#x27;</span>&gt;</span> Outdoor<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>placeholder</code> 中为 <strong>占位符</strong> 文本, 用于提示输入框中输入的信息;</li>\n<li><code>required</code>属性可以避免缺少所需信息时的提交, 无需赋值, 确保空格即可;</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span> = <span class=\"string\">&quot;catphotourl&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n<p><code>button</code> 用于创建可点击的按钮:</p>\n<ul>\n<li>单击<strong>没有任何属性</strong>的表单按钮的默认行为会将表单提交到<strong>表单</strong>的 <code>action </code>属性中指定的位置;</li>\n<li>由于<code>input</code>和<code>button</code>为 <strong>内联</strong> 元素, 即使相隔书写也会显示在同行:</li>\n<li><code>type</code>的<code>submit</code>明确了为 可提交按钮;</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span> = <span class=\"string\">&quot;submit&quot;</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<p>label 元素用于帮助将 input 元素的文本与 input 元素本身关联起来</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span>&gt;</span> cat<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 点击单词 &quot;cat&quot; 也将选择 radio 按钮。 --&gt;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<p><code>id</code>用于标识特定的HTML元素</p>\n<br>\n\n<p><code>fieldset</code> 元素用于在 Web 表单中将相关的输入和标签组合在一起:</p>\n<ul>\n<li>块级元素，这意味着它们出现在新的一行上。</li>\n<li><code>legend</code> 元素充当 fieldset 元素中内容的标题。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">legend</span>&gt;</span> Is your cat an indoor or outdoor cat?<span class=\"tag\">&lt;/<span class=\"name\">legend</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;indoor&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;indoor-outdoor&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;indoor&quot;</span>&gt;</span> Indoor<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;outdoor&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;indoor-outdoor&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;outdoor&quot;</span>&gt;</span> Outdoor<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">fieldset</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/img/legend-2025-01-21-21-19-51.png\"\n                     \n                ></p>\n<br>\n\n<p>还可以使用<code>for</code>属性将文本直接嵌套在<code>label</code>当中, 同时设置<code>input</code>的<code>id</code>与上述的<code>for</code>属性相同, 从而实现文本与元素相关联的效果:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;loving&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span> = <span class=\"string\">&quot;loving&quot;</span>&gt;</span> Loving <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<p>默认选中的按钮: <code>checked</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">checked</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;meal&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;breakfast&quot;</span>&gt;</span> Breakfast</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>checked属性无需额外赋值.</p>\n</blockquote>\n<br>\n\n<p><code>footer</code>素用于定义文档或章节的页脚:</p>\n<ul>\n<li>脚通常包含文档作者信息、版权数据、使用条款链接、联系信息等.</li>\n</ul>\n<br>\n\n<p>head 相关</p>\n<ul>\n<li>存放 $\\underline{元数据}$ 不会实际显示在html中的数据;</li>\n<li><code>title </code>元素决定了浏览器在页面的标题栏或选项卡中显示的内容;</li>\n<li><code>&lt;link rel = &quot;stylesheet&quot; href = &quot;styles.css&quot;&gt;</code> 将CSS文件链接到当前的HTML</li>\n</ul>\n<p>else:</p>\n<ul>\n<li><code>&lt;!DOCTYPE html</code>: 声明满足最新版本html相关设置的要求;</li>\n<li><code>meta</code>是空元素; <code>&lt;meta charset = &quot;utf-8&quot;&gt;</code>;</li>\n<li></li>\n</ul>\n<hr>\n<p>选择器:</p>\n<ul>\n<li><strong>id</strong>选择器</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#cat</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">250px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>class</strong>选择器</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.class-name</span>, <span class=\"selector-class\">.other-class</span> &#123;</span><br><span class=\"line\">  styles</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>class类中元素的选择</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> <span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 设置为样式近似于内联--排列在同一行, 同时可以设置宽高、边距 */</span></span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>伪元素</strong></li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 已访问链接后设置为灰色 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:visited</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: grey;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 悬浮时的变色 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: brown;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 点击时的状态设置 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:active</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<br>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">margin-left</span> : auto;</span><br><span class=\"line\"><span class=\"attribute\">margin-right</span>: auto;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使得<strong>普通</strong>元素在父级元素的空间内 <strong>水平居中</strong></p>\n</blockquote>\n<br>\n\n<p><code>article</code>是一个语义化标签:</p>\n<ul>\n<li>用于表示文档、页面或应用中的<strong>独立</strong>的、完整的内容单元;</li>\n<li>清晰地表明内容的用途，帮助开发者和搜索引擎理解页面结构;</li>\n<li>内容通常可以通过RSS订阅、社交媒体分享等方式单独发布.</li>\n</ul>\n<p>与其他类似标签的区别:</p>\n<ul>\n<li><code>div</code>: 粹的容器，没有语义，常用于布局;</li>\n<li><code>section</code>: 表示文档中的一个逻辑区域，通常用于分组内容，但不一定是独立的内容单元;</li>\n<li><code>article</code>: 示一个可以独立存在的内容单元.</li>\n</ul>\n<br>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 设置备用字体 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span>, <span class=\"selector-tag\">h2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: Impact, serif;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n","_processedHighlight":true},{"title":"CORS","date":"2025-01-16T02:11:38.000Z","excerpt":"在前后端分离的项目中, 常常需要注意跨域资源共享的问题.","index_img":"/img/跨域共享.jpg","_content":"\n\n\n## 概述\n\n跨域资源共享（Cross-Origin Resource Sharing, CORS）是现代Web应用程序中的重要安全机制。本文档旨在提供全面的CORS配置指南，涵盖从开发环境到生产部署的完整实施方案。\n\n## 技术背景\n\n### 同源策略基础\n\n同源策略是Web应用安全的基石，要求协议（Protocol）、域名（Domain）和端口（Port）三者均相同。以下为不同场景的示例分析：\n\n```plaintext\n基准URL：http://example.com/page.html\n\n跨域场景：\n- http://api.example.com/data     // 子域名差异\n- https://example.com/data        // 协议差异\n- http://example.com:8080/data    // 端口差异\n```\n\n## 配置方案\n\n### 环境变量驱动的CORS配置\n\n以下是一个完整的、基于环境变量的CORS配置示例。这种方案具有良好的灵活性和可维护性：\n\n```python\nimport os\nfrom flask import Flask\nfrom flask_cors import CORS\n\napp = Flask(__name__)\n\n# 从环境变量获取前端URL，如果没有设置则使用默认值\nFRONTEND_URL = os.environ.get('FRONTEND_URL', 'http://localhost:3000')\n\n# CORS配置实现\nCORS(app, resources={\n    r\"/api/*\": {\n        \"origins\": FRONTEND_URL,\n        \"methods\": [\"GET\", \"POST\", \"OPTIONS\", \"PUT\", \"DELETE\"],\n        \"allow_headers\": [\"Content-Type\", \"Authorization\", \"X-Requested-With\"],\n        \"supports_credentials\": True,\n        \"expose_headers\": [\"Content-Disposition\"]\n    }\n})\n```\n\n### 配置详解\n\n让我们逐行分析这个配置：\n\n1. **环境变量设置**\n```python\nFRONTEND_URL = os.environ.get('FRONTEND_URL', 'http://localhost:3000')\n```\n- 使用`os.environ.get()`获取环境变量\n- 提供默认值`'http://localhost:3000'`作为本地开发环境的配置\n- 可以通过环境变量轻松切换不同环境的配置\n\n2. **CORS配置参数**\n```python\n\"origins\": FRONTEND_URL\n```\n- 动态设置允许的源，基于环境变量\n- 避免了硬编码的问题\n- 支持不同部署环境的灵活配置\n\n3. **HTTP方法配置**\n```python\n\"methods\": [\"GET\", \"POST\", \"OPTIONS\", \"PUT\", \"DELETE\"]\n```\n- 明确定义允许的HTTP方法\n- 包含了RESTful API所需的全部方法\n- `OPTIONS`用于预检请求（preflight request）\n\n4. **请求头配置**\n```python\n\"allow_headers\": [\"Content-Type\", \"Authorization\", \"X-Requested-With\"]\n```\n- `Content-Type`：允许设置请求的内容类型\n- `Authorization`：支持身份验证令牌\n- `X-Requested-With`：用于标识AJAX请求\n\n5. **凭证支持**\n```python\n\"supports_credentials\": True\n```\n- 允许跨域请求携带凭证（如Cookie）\n- 对需要身份验证的API至关重要\n\n6. **响应头暴露**\n```python\n\"expose_headers\": [\"Content-Disposition\"]\n```\n- 允许客户端访问`Content-Disposition`响应头\n- 通常用于文件下载功能\n\n### 环境变量配置示例\n\n```bash\n# 开发环境\nexport FRONTEND_URL=http://localhost:3000\n\n# 测试环境\nexport FRONTEND_URL=http://test.example.com\n\n# 生产环境\nexport FRONTEND_URL=https://www.example.com\n```\n\n## 最佳实践\n\n### 环境变量管理建议\n\n1. **开发环境**\n- 使用`.env`文件管理本地开发环境变量\n- 将`.env`文件加入`.gitignore`\n\n2. **生产环境**\n- 使用容器化部署时通过环境变量注入\n- 使用配置管理系统统一管理环境变量\n\n### 安全性考虑\n\n1. **避免过于宽松的配置**\n```python\n# 不推荐\n\"origins\": \"*\"  \n\n# 推荐\n\"origins\": FRONTEND_URL\n```\n\n2. **合理设置凭证策略**\n- 仅在必要时启用`supports_credentials`\n- 确保前端配置匹配（`credentials: 'include'`）\n\n## 问题排查\n\n### 常见错误及解决方案\n\n1. **CORS策略违规**\n```plaintext\nAccess to XMLHttpRequest at 'http://api.example.com' from origin 'http://example.com' \nhas been blocked by CORS policy\n```\n解决方案：\n- 检查环境变量是否正确设置\n- 验证前端请求URL与配置是否匹配\n- 确认所有必要的请求头都已配置\n\n## 参考文献\n\n1. [W3C CORS Specification](https://fetch.spec.whatwg.org/?locale=zh_CN)\n2. [MDN Web Docs - Cross-Origin Resource Sharing](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS)\n3. [Flask-CORS Official Documentation](https://flask-cors.readthedocs.io/en/latest/?locale=zh_CN)\n","source":"_posts/前后端/CORS.md","raw":"---\ntitle: CORS\ndate: 2025-01-16 10:11:38\ntags: \n- 前后端交互  \n- 网站开发\ncategories: 学习笔记\nexcerpt: 在前后端分离的项目中, 常常需要注意跨域资源共享的问题.\nindex_img: /img/跨域共享.jpg\n---\n\n\n\n## 概述\n\n跨域资源共享（Cross-Origin Resource Sharing, CORS）是现代Web应用程序中的重要安全机制。本文档旨在提供全面的CORS配置指南，涵盖从开发环境到生产部署的完整实施方案。\n\n## 技术背景\n\n### 同源策略基础\n\n同源策略是Web应用安全的基石，要求协议（Protocol）、域名（Domain）和端口（Port）三者均相同。以下为不同场景的示例分析：\n\n```plaintext\n基准URL：http://example.com/page.html\n\n跨域场景：\n- http://api.example.com/data     // 子域名差异\n- https://example.com/data        // 协议差异\n- http://example.com:8080/data    // 端口差异\n```\n\n## 配置方案\n\n### 环境变量驱动的CORS配置\n\n以下是一个完整的、基于环境变量的CORS配置示例。这种方案具有良好的灵活性和可维护性：\n\n```python\nimport os\nfrom flask import Flask\nfrom flask_cors import CORS\n\napp = Flask(__name__)\n\n# 从环境变量获取前端URL，如果没有设置则使用默认值\nFRONTEND_URL = os.environ.get('FRONTEND_URL', 'http://localhost:3000')\n\n# CORS配置实现\nCORS(app, resources={\n    r\"/api/*\": {\n        \"origins\": FRONTEND_URL,\n        \"methods\": [\"GET\", \"POST\", \"OPTIONS\", \"PUT\", \"DELETE\"],\n        \"allow_headers\": [\"Content-Type\", \"Authorization\", \"X-Requested-With\"],\n        \"supports_credentials\": True,\n        \"expose_headers\": [\"Content-Disposition\"]\n    }\n})\n```\n\n### 配置详解\n\n让我们逐行分析这个配置：\n\n1. **环境变量设置**\n```python\nFRONTEND_URL = os.environ.get('FRONTEND_URL', 'http://localhost:3000')\n```\n- 使用`os.environ.get()`获取环境变量\n- 提供默认值`'http://localhost:3000'`作为本地开发环境的配置\n- 可以通过环境变量轻松切换不同环境的配置\n\n2. **CORS配置参数**\n```python\n\"origins\": FRONTEND_URL\n```\n- 动态设置允许的源，基于环境变量\n- 避免了硬编码的问题\n- 支持不同部署环境的灵活配置\n\n3. **HTTP方法配置**\n```python\n\"methods\": [\"GET\", \"POST\", \"OPTIONS\", \"PUT\", \"DELETE\"]\n```\n- 明确定义允许的HTTP方法\n- 包含了RESTful API所需的全部方法\n- `OPTIONS`用于预检请求（preflight request）\n\n4. **请求头配置**\n```python\n\"allow_headers\": [\"Content-Type\", \"Authorization\", \"X-Requested-With\"]\n```\n- `Content-Type`：允许设置请求的内容类型\n- `Authorization`：支持身份验证令牌\n- `X-Requested-With`：用于标识AJAX请求\n\n5. **凭证支持**\n```python\n\"supports_credentials\": True\n```\n- 允许跨域请求携带凭证（如Cookie）\n- 对需要身份验证的API至关重要\n\n6. **响应头暴露**\n```python\n\"expose_headers\": [\"Content-Disposition\"]\n```\n- 允许客户端访问`Content-Disposition`响应头\n- 通常用于文件下载功能\n\n### 环境变量配置示例\n\n```bash\n# 开发环境\nexport FRONTEND_URL=http://localhost:3000\n\n# 测试环境\nexport FRONTEND_URL=http://test.example.com\n\n# 生产环境\nexport FRONTEND_URL=https://www.example.com\n```\n\n## 最佳实践\n\n### 环境变量管理建议\n\n1. **开发环境**\n- 使用`.env`文件管理本地开发环境变量\n- 将`.env`文件加入`.gitignore`\n\n2. **生产环境**\n- 使用容器化部署时通过环境变量注入\n- 使用配置管理系统统一管理环境变量\n\n### 安全性考虑\n\n1. **避免过于宽松的配置**\n```python\n# 不推荐\n\"origins\": \"*\"  \n\n# 推荐\n\"origins\": FRONTEND_URL\n```\n\n2. **合理设置凭证策略**\n- 仅在必要时启用`supports_credentials`\n- 确保前端配置匹配（`credentials: 'include'`）\n\n## 问题排查\n\n### 常见错误及解决方案\n\n1. **CORS策略违规**\n```plaintext\nAccess to XMLHttpRequest at 'http://api.example.com' from origin 'http://example.com' \nhas been blocked by CORS policy\n```\n解决方案：\n- 检查环境变量是否正确设置\n- 验证前端请求URL与配置是否匹配\n- 确认所有必要的请求头都已配置\n\n## 参考文献\n\n1. [W3C CORS Specification](https://fetch.spec.whatwg.org/?locale=zh_CN)\n2. [MDN Web Docs - Cross-Origin Resource Sharing](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS)\n3. [Flask-CORS Official Documentation](https://flask-cors.readthedocs.io/en/latest/?locale=zh_CN)\n","slug":"前后端/CORS","published":1,"updated":"2025-05-10T02:31:49.659Z","comments":1,"layout":"post","photos":[],"_id":"cmcbm7pqh0029e2qgd2ueefks","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>跨域资源共享（Cross-Origin Resource Sharing, CORS）是现代Web应用程序中的重要安全机制。本文档旨在提供全面的CORS配置指南，涵盖从开发环境到生产部署的完整实施方案。</p>\n<h2 id=\"技术背景\"><a href=\"#技术背景\" class=\"headerlink\" title=\"技术背景\"></a>技术背景</h2><h3 id=\"同源策略基础\"><a href=\"#同源策略基础\" class=\"headerlink\" title=\"同源策略基础\"></a>同源策略基础</h3><p>同源策略是Web应用安全的基石，要求协议（Protocol）、域名（Domain）和端口（Port）三者均相同。以下为不同场景的示例分析：</p>\n<div class=\"code-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">基准URL：http://example.com/page.html</span><br><span class=\"line\"></span><br><span class=\"line\">跨域场景：</span><br><span class=\"line\">- http://api.example.com/data     // 子域名差异</span><br><span class=\"line\">- https://example.com/data        // 协议差异</span><br><span class=\"line\">- http://example.com:8080/data    // 端口差异</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"配置方案\"><a href=\"#配置方案\" class=\"headerlink\" title=\"配置方案\"></a>配置方案</h2><h3 id=\"环境变量驱动的CORS配置\"><a href=\"#环境变量驱动的CORS配置\" class=\"headerlink\" title=\"环境变量驱动的CORS配置\"></a>环境变量驱动的CORS配置</h3><p>以下是一个完整的、基于环境变量的CORS配置示例。这种方案具有良好的灵活性和可维护性：</p>\n<div class=\"code-container\" data-rel=\"Python\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_cors <span class=\"keyword\">import</span> CORS</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从环境变量获取前端URL，如果没有设置则使用默认值</span></span><br><span class=\"line\">FRONTEND_URL = os.environ.get(<span class=\"string\">&#x27;FRONTEND_URL&#x27;</span>, <span class=\"string\">&#x27;http://localhost:3000&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># CORS配置实现</span></span><br><span class=\"line\">CORS(app, resources=&#123;</span><br><span class=\"line\">    <span class=\"string\">r&quot;/api/*&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;origins&quot;</span>: FRONTEND_URL,</span><br><span class=\"line\">        <span class=\"string\">&quot;methods&quot;</span>: [<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;POST&quot;</span>, <span class=\"string\">&quot;OPTIONS&quot;</span>, <span class=\"string\">&quot;PUT&quot;</span>, <span class=\"string\">&quot;DELETE&quot;</span>],</span><br><span class=\"line\">        <span class=\"string\">&quot;allow_headers&quot;</span>: [<span class=\"string\">&quot;Content-Type&quot;</span>, <span class=\"string\">&quot;Authorization&quot;</span>, <span class=\"string\">&quot;X-Requested-With&quot;</span>],</span><br><span class=\"line\">        <span class=\"string\">&quot;supports_credentials&quot;</span>: <span class=\"literal\">True</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;expose_headers&quot;</span>: [<span class=\"string\">&quot;Content-Disposition&quot;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"配置详解\"><a href=\"#配置详解\" class=\"headerlink\" title=\"配置详解\"></a>配置详解</h3><p>让我们逐行分析这个配置：</p>\n<ol>\n<li><strong>环境变量设置</strong></li>\n</ol>\n<div class=\"code-container\" data-rel=\"Python\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FRONTEND_URL = os.environ.get(<span class=\"string\">&#x27;FRONTEND_URL&#x27;</span>, <span class=\"string\">&#x27;http://localhost:3000&#x27;</span>)</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>使用<code>os.environ.get()</code>获取环境变量</li>\n<li>提供默认值<code>&#39;http://localhost:3000&#39;</code>作为本地开发环境的配置</li>\n<li>可以通过环境变量轻松切换不同环境的配置</li>\n</ul>\n<ol start=\"2\">\n<li><strong>CORS配置参数</strong></li>\n</ol>\n<div class=\"code-container\" data-rel=\"Python\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;origins&quot;</span>: FRONTEND_URL</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>动态设置允许的源，基于环境变量</li>\n<li>避免了硬编码的问题</li>\n<li>支持不同部署环境的灵活配置</li>\n</ul>\n<ol start=\"3\">\n<li><strong>HTTP方法配置</strong></li>\n</ol>\n<div class=\"code-container\" data-rel=\"Python\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;methods&quot;</span>: [<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;POST&quot;</span>, <span class=\"string\">&quot;OPTIONS&quot;</span>, <span class=\"string\">&quot;PUT&quot;</span>, <span class=\"string\">&quot;DELETE&quot;</span>]</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>明确定义允许的HTTP方法</li>\n<li>包含了RESTful API所需的全部方法</li>\n<li><code>OPTIONS</code>用于预检请求（preflight request）</li>\n</ul>\n<ol start=\"4\">\n<li><strong>请求头配置</strong></li>\n</ol>\n<div class=\"code-container\" data-rel=\"Python\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;allow_headers&quot;</span>: [<span class=\"string\">&quot;Content-Type&quot;</span>, <span class=\"string\">&quot;Authorization&quot;</span>, <span class=\"string\">&quot;X-Requested-With&quot;</span>]</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li><code>Content-Type</code>：允许设置请求的内容类型</li>\n<li><code>Authorization</code>：支持身份验证令牌</li>\n<li><code>X-Requested-With</code>：用于标识AJAX请求</li>\n</ul>\n<ol start=\"5\">\n<li><strong>凭证支持</strong></li>\n</ol>\n<div class=\"code-container\" data-rel=\"Python\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;supports_credentials&quot;</span>: <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>允许跨域请求携带凭证（如Cookie）</li>\n<li>对需要身份验证的API至关重要</li>\n</ul>\n<ol start=\"6\">\n<li><strong>响应头暴露</strong></li>\n</ol>\n<div class=\"code-container\" data-rel=\"Python\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;expose_headers&quot;</span>: [<span class=\"string\">&quot;Content-Disposition&quot;</span>]</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>允许客户端访问<code>Content-Disposition</code>响应头</li>\n<li>通常用于文件下载功能</li>\n</ul>\n<h3 id=\"环境变量配置示例\"><a href=\"#环境变量配置示例\" class=\"headerlink\" title=\"环境变量配置示例\"></a>环境变量配置示例</h3><div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 开发环境</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> FRONTEND_URL=http://localhost:3000</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试环境</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> FRONTEND_URL=http://test.example.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生产环境</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> FRONTEND_URL=https://www.example.com</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h2><h3 id=\"环境变量管理建议\"><a href=\"#环境变量管理建议\" class=\"headerlink\" title=\"环境变量管理建议\"></a>环境变量管理建议</h3><ol>\n<li><strong>开发环境</strong></li>\n</ol>\n<ul>\n<li>使用<code>.env</code>文件管理本地开发环境变量</li>\n<li>将<code>.env</code>文件加入<code>.gitignore</code></li>\n</ul>\n<ol start=\"2\">\n<li><strong>生产环境</strong></li>\n</ol>\n<ul>\n<li>使用容器化部署时通过环境变量注入</li>\n<li>使用配置管理系统统一管理环境变量</li>\n</ul>\n<h3 id=\"安全性考虑\"><a href=\"#安全性考虑\" class=\"headerlink\" title=\"安全性考虑\"></a>安全性考虑</h3><ol>\n<li><strong>避免过于宽松的配置</strong></li>\n</ol>\n<div class=\"code-container\" data-rel=\"Python\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 不推荐</span></span><br><span class=\"line\"><span class=\"string\">&quot;origins&quot;</span>: <span class=\"string\">&quot;*&quot;</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 推荐</span></span><br><span class=\"line\"><span class=\"string\">&quot;origins&quot;</span>: FRONTEND_URL</span><br></pre></td></tr></table></figure></div>\n\n<ol start=\"2\">\n<li><strong>合理设置凭证策略</strong></li>\n</ol>\n<ul>\n<li>仅在必要时启用<code>supports_credentials</code></li>\n<li>确保前端配置匹配（<code>credentials: &#39;include&#39;</code>）</li>\n</ul>\n<h2 id=\"问题排查\"><a href=\"#问题排查\" class=\"headerlink\" title=\"问题排查\"></a>问题排查</h2><h3 id=\"常见错误及解决方案\"><a href=\"#常见错误及解决方案\" class=\"headerlink\" title=\"常见错误及解决方案\"></a>常见错误及解决方案</h3><ol>\n<li><strong>CORS策略违规</strong></li>\n</ol>\n<div class=\"code-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access to XMLHttpRequest at &#x27;http://api.example.com&#x27; from origin &#x27;http://example.com&#x27; </span><br><span class=\"line\">has been blocked by CORS policy</span><br></pre></td></tr></table></figure></div>\n<p>解决方案：</p>\n<ul>\n<li>检查环境变量是否正确设置</li>\n<li>验证前端请求URL与配置是否匹配</li>\n<li>确认所有必要的请求头都已配置</li>\n</ul>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ol>\n<li><a class=\"link\"   href=\"https://fetch.spec.whatwg.org/?locale=zh_CN\" >W3C CORS Specification<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n<li><a class=\"link\"   href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS\" >MDN Web Docs - Cross-Origin Resource Sharing<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n<li><a class=\"link\"   href=\"https://flask-cors.readthedocs.io/en/latest/?locale=zh_CN\" >Flask-CORS Official Documentation<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n</ol>\n","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>跨域资源共享（Cross-Origin Resource Sharing, CORS）是现代Web应用程序中的重要安全机制。本文档旨在提供全面的CORS配置指南，涵盖从开发环境到生产部署的完整实施方案。</p>\n<h2 id=\"技术背景\"><a href=\"#技术背景\" class=\"headerlink\" title=\"技术背景\"></a>技术背景</h2><h3 id=\"同源策略基础\"><a href=\"#同源策略基础\" class=\"headerlink\" title=\"同源策略基础\"></a>同源策略基础</h3><p>同源策略是Web应用安全的基石，要求协议（Protocol）、域名（Domain）和端口（Port）三者均相同。以下为不同场景的示例分析：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">基准URL：http://example.com/page.html</span><br><span class=\"line\"></span><br><span class=\"line\">跨域场景：</span><br><span class=\"line\">- http://api.example.com/data     // 子域名差异</span><br><span class=\"line\">- https://example.com/data        // 协议差异</span><br><span class=\"line\">- http://example.com:8080/data    // 端口差异</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置方案\"><a href=\"#配置方案\" class=\"headerlink\" title=\"配置方案\"></a>配置方案</h2><h3 id=\"环境变量驱动的CORS配置\"><a href=\"#环境变量驱动的CORS配置\" class=\"headerlink\" title=\"环境变量驱动的CORS配置\"></a>环境变量驱动的CORS配置</h3><p>以下是一个完整的、基于环境变量的CORS配置示例。这种方案具有良好的灵活性和可维护性：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_cors <span class=\"keyword\">import</span> CORS</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从环境变量获取前端URL，如果没有设置则使用默认值</span></span><br><span class=\"line\">FRONTEND_URL = os.environ.get(<span class=\"string\">&#x27;FRONTEND_URL&#x27;</span>, <span class=\"string\">&#x27;http://localhost:3000&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># CORS配置实现</span></span><br><span class=\"line\">CORS(app, resources=&#123;</span><br><span class=\"line\">    <span class=\"string\">r&quot;/api/*&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;origins&quot;</span>: FRONTEND_URL,</span><br><span class=\"line\">        <span class=\"string\">&quot;methods&quot;</span>: [<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;POST&quot;</span>, <span class=\"string\">&quot;OPTIONS&quot;</span>, <span class=\"string\">&quot;PUT&quot;</span>, <span class=\"string\">&quot;DELETE&quot;</span>],</span><br><span class=\"line\">        <span class=\"string\">&quot;allow_headers&quot;</span>: [<span class=\"string\">&quot;Content-Type&quot;</span>, <span class=\"string\">&quot;Authorization&quot;</span>, <span class=\"string\">&quot;X-Requested-With&quot;</span>],</span><br><span class=\"line\">        <span class=\"string\">&quot;supports_credentials&quot;</span>: <span class=\"literal\">True</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;expose_headers&quot;</span>: [<span class=\"string\">&quot;Content-Disposition&quot;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置详解\"><a href=\"#配置详解\" class=\"headerlink\" title=\"配置详解\"></a>配置详解</h3><p>让我们逐行分析这个配置：</p>\n<ol>\n<li><strong>环境变量设置</strong></li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FRONTEND_URL = os.environ.get(<span class=\"string\">&#x27;FRONTEND_URL&#x27;</span>, <span class=\"string\">&#x27;http://localhost:3000&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用<code>os.environ.get()</code>获取环境变量</li>\n<li>提供默认值<code>&#39;http://localhost:3000&#39;</code>作为本地开发环境的配置</li>\n<li>可以通过环境变量轻松切换不同环境的配置</li>\n</ul>\n<ol start=\"2\">\n<li><strong>CORS配置参数</strong></li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;origins&quot;</span>: FRONTEND_URL</span><br></pre></td></tr></table></figure>\n<ul>\n<li>动态设置允许的源，基于环境变量</li>\n<li>避免了硬编码的问题</li>\n<li>支持不同部署环境的灵活配置</li>\n</ul>\n<ol start=\"3\">\n<li><strong>HTTP方法配置</strong></li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;methods&quot;</span>: [<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;POST&quot;</span>, <span class=\"string\">&quot;OPTIONS&quot;</span>, <span class=\"string\">&quot;PUT&quot;</span>, <span class=\"string\">&quot;DELETE&quot;</span>]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>明确定义允许的HTTP方法</li>\n<li>包含了RESTful API所需的全部方法</li>\n<li><code>OPTIONS</code>用于预检请求（preflight request）</li>\n</ul>\n<ol start=\"4\">\n<li><strong>请求头配置</strong></li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;allow_headers&quot;</span>: [<span class=\"string\">&quot;Content-Type&quot;</span>, <span class=\"string\">&quot;Authorization&quot;</span>, <span class=\"string\">&quot;X-Requested-With&quot;</span>]</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>Content-Type</code>：允许设置请求的内容类型</li>\n<li><code>Authorization</code>：支持身份验证令牌</li>\n<li><code>X-Requested-With</code>：用于标识AJAX请求</li>\n</ul>\n<ol start=\"5\">\n<li><strong>凭证支持</strong></li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;supports_credentials&quot;</span>: <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>允许跨域请求携带凭证（如Cookie）</li>\n<li>对需要身份验证的API至关重要</li>\n</ul>\n<ol start=\"6\">\n<li><strong>响应头暴露</strong></li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;expose_headers&quot;</span>: [<span class=\"string\">&quot;Content-Disposition&quot;</span>]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>允许客户端访问<code>Content-Disposition</code>响应头</li>\n<li>通常用于文件下载功能</li>\n</ul>\n<h3 id=\"环境变量配置示例\"><a href=\"#环境变量配置示例\" class=\"headerlink\" title=\"环境变量配置示例\"></a>环境变量配置示例</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 开发环境</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> FRONTEND_URL=http://localhost:3000</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试环境</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> FRONTEND_URL=http://test.example.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生产环境</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> FRONTEND_URL=https://www.example.com</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h2><h3 id=\"环境变量管理建议\"><a href=\"#环境变量管理建议\" class=\"headerlink\" title=\"环境变量管理建议\"></a>环境变量管理建议</h3><ol>\n<li><strong>开发环境</strong></li>\n</ol>\n<ul>\n<li>使用<code>.env</code>文件管理本地开发环境变量</li>\n<li>将<code>.env</code>文件加入<code>.gitignore</code></li>\n</ul>\n<ol start=\"2\">\n<li><strong>生产环境</strong></li>\n</ol>\n<ul>\n<li>使用容器化部署时通过环境变量注入</li>\n<li>使用配置管理系统统一管理环境变量</li>\n</ul>\n<h3 id=\"安全性考虑\"><a href=\"#安全性考虑\" class=\"headerlink\" title=\"安全性考虑\"></a>安全性考虑</h3><ol>\n<li><strong>避免过于宽松的配置</strong></li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 不推荐</span></span><br><span class=\"line\"><span class=\"string\">&quot;origins&quot;</span>: <span class=\"string\">&quot;*&quot;</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 推荐</span></span><br><span class=\"line\"><span class=\"string\">&quot;origins&quot;</span>: FRONTEND_URL</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><strong>合理设置凭证策略</strong></li>\n</ol>\n<ul>\n<li>仅在必要时启用<code>supports_credentials</code></li>\n<li>确保前端配置匹配（<code>credentials: &#39;include&#39;</code>）</li>\n</ul>\n<h2 id=\"问题排查\"><a href=\"#问题排查\" class=\"headerlink\" title=\"问题排查\"></a>问题排查</h2><h3 id=\"常见错误及解决方案\"><a href=\"#常见错误及解决方案\" class=\"headerlink\" title=\"常见错误及解决方案\"></a>常见错误及解决方案</h3><ol>\n<li><strong>CORS策略违规</strong></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access to XMLHttpRequest at &#x27;http://api.example.com&#x27; from origin &#x27;http://example.com&#x27; </span><br><span class=\"line\">has been blocked by CORS policy</span><br></pre></td></tr></table></figure>\n<p>解决方案：</p>\n<ul>\n<li>检查环境变量是否正确设置</li>\n<li>验证前端请求URL与配置是否匹配</li>\n<li>确认所有必要的请求头都已配置</li>\n</ul>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ol>\n<li><a class=\"link\"   href=\"https://fetch.spec.whatwg.org/?locale=zh_CN\" >W3C CORS Specification<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n<li><a class=\"link\"   href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS\" >MDN Web Docs - Cross-Origin Resource Sharing<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n<li><a class=\"link\"   href=\"https://flask-cors.readthedocs.io/en/latest/?locale=zh_CN\" >Flask-CORS Official Documentation<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n</ol>\n","_processedHighlight":true},{"title":"跨组件渲染","date":"2025-02-16T07:40:06.000Z","_content":"\n## 为什么需要跨组件实时渲染？\n\n在开发 React 应用时，我们经常遇到这样的场景：某个组件的状态变化需要即时反映在其他不相关的组件中。例如：\n\n- 用户在一个组件中编辑内容，其他组件需要立即看到更新\n- 多个组件需要共享同一份数据\n- 需要避免通过层层组件传递 props（即所谓的 prop drilling）\n\n这种情况下，使用 React Context 来实现跨组件的实时渲染就显得尤为重要。\n\n## 最小实现示例\n\n以下是实现跨组件实时渲染的最简代码结构：\n\n```typescript\n// 1. 定义 Context 类型\ninterface SharedContextType {\n  data: any;\n  updateData: (newData: any) => void;\n}\n\n// 2. 创建 Context\nconst SharedContext = createContext<SharedContextType | undefined>(undefined);\n\n// 3. 创建 Provider 组件\nexport function SharedProvider({ children }: { children: React.ReactNode }) {\n  const [data, setData] = useState<any>(null);\n\n  const updateData = useCallback((newData: any) => {\n    setData(newData);\n  }, []);\n\n  return (\n    <SharedContext.Provider value={{ data, updateData }}>\n      {children}\n    </SharedContext.Provider>\n  );\n}\n\n// 4. 创建自定义 Hook\nexport function useShared() {\n  const context = useContext(SharedContext);\n  if (!context) {\n    throw new Error('useShared must be used within SharedProvider');\n  }\n  return context;\n}\n```\n\n## 实际应用分析\n\n让我们以一个实际的 Mermaid 图表生成器项目为例，分析如何运用这个模式：\n\n```typescript\n// 1. 定义具体的数据结构\ninterface HistoryItem {\n  id: string;\n  content: string;\n  mermaidCode: string;\n  timestamp: number;\n}\n\n// 2. 实现带有持久化的 Context Provider\nexport function HistoryProvider({ children }: { children: React.ReactNode }) {\n  const [selectedHistory, setSelectedHistory] = useState<HistoryItem | null>(null);\n  const [historyList, setHistoryList] = useState<HistoryItem[]>([]);\n\n  // 数据持久化\n  useEffect(() => {\n    if (selectedHistory) {\n      localStorage.setItem('selectedHistory', JSON.stringify(selectedHistory));\n    }\n  }, [selectedHistory]);\n\n  // 实时更新方法\n  const addHistory = async (content: string, mermaidCode: string) => {\n    const historyItem: HistoryItem = {\n      id: Date.now().toString(),\n      content,\n      mermaidCode,\n      timestamp: Date.now()\n    };\n    setHistoryList(prev => [historyItem, ...prev]);\n  };\n\n  return (\n    <HistoryContext.Provider\n      value={{\n        selectedHistory,\n        setSelectedHistory,\n        addHistory,\n        historyList\n      }}\n    >\n      {children}\n    </HistoryContext.Provider>\n  );\n}\n```\n\n在这个实际例子中，我们可以看到几个关键点：\n\n1. **状态定义**：使用 TypeScript 接口明确定义了数据结构，确保类型安全\n2. **状态持久化**：通过 `useEffect` 监听状态变化并保存到 localStorage\n3. **实时更新**：通过 `setHistoryList` 确保状态更新后所有使用该 Context 的组件都能即时获得更新\n\n当组件需要使用这些共享状态时，只需：\n\n```typescript\nfunction HistoryViewer() {\n  const { selectedHistory } = useHistory();\n  \n  return (\n    <div>\n      {selectedHistory && (\n        <div>{selectedHistory.content}</div>\n      )}\n    </div>\n  );\n}\n```\n\n这种模式的优势在于：\n\n- 避免了 props 的层层传递\n- 实现了组件间的解耦\n- 确保了状态更新的实时性\n- 提供了类型安全的数据访问\n\n## 参考资料\n\n- [React Context Documentation](https://react.dev/reference/react/createContext)\n- [TypeScript Handbook](https://www.typescriptlang.org/docs/)\n- [React Hooks API Reference](https://react.dev/reference/react/hooks)\n","source":"_posts/前后端/跨组件渲染.md","raw":"---\ntitle: 跨组件渲染\ndate: 2025-02-16 15:40:06\ntags: \n- 前端\ncategories:\n---\n\n## 为什么需要跨组件实时渲染？\n\n在开发 React 应用时，我们经常遇到这样的场景：某个组件的状态变化需要即时反映在其他不相关的组件中。例如：\n\n- 用户在一个组件中编辑内容，其他组件需要立即看到更新\n- 多个组件需要共享同一份数据\n- 需要避免通过层层组件传递 props（即所谓的 prop drilling）\n\n这种情况下，使用 React Context 来实现跨组件的实时渲染就显得尤为重要。\n\n## 最小实现示例\n\n以下是实现跨组件实时渲染的最简代码结构：\n\n```typescript\n// 1. 定义 Context 类型\ninterface SharedContextType {\n  data: any;\n  updateData: (newData: any) => void;\n}\n\n// 2. 创建 Context\nconst SharedContext = createContext<SharedContextType | undefined>(undefined);\n\n// 3. 创建 Provider 组件\nexport function SharedProvider({ children }: { children: React.ReactNode }) {\n  const [data, setData] = useState<any>(null);\n\n  const updateData = useCallback((newData: any) => {\n    setData(newData);\n  }, []);\n\n  return (\n    <SharedContext.Provider value={{ data, updateData }}>\n      {children}\n    </SharedContext.Provider>\n  );\n}\n\n// 4. 创建自定义 Hook\nexport function useShared() {\n  const context = useContext(SharedContext);\n  if (!context) {\n    throw new Error('useShared must be used within SharedProvider');\n  }\n  return context;\n}\n```\n\n## 实际应用分析\n\n让我们以一个实际的 Mermaid 图表生成器项目为例，分析如何运用这个模式：\n\n```typescript\n// 1. 定义具体的数据结构\ninterface HistoryItem {\n  id: string;\n  content: string;\n  mermaidCode: string;\n  timestamp: number;\n}\n\n// 2. 实现带有持久化的 Context Provider\nexport function HistoryProvider({ children }: { children: React.ReactNode }) {\n  const [selectedHistory, setSelectedHistory] = useState<HistoryItem | null>(null);\n  const [historyList, setHistoryList] = useState<HistoryItem[]>([]);\n\n  // 数据持久化\n  useEffect(() => {\n    if (selectedHistory) {\n      localStorage.setItem('selectedHistory', JSON.stringify(selectedHistory));\n    }\n  }, [selectedHistory]);\n\n  // 实时更新方法\n  const addHistory = async (content: string, mermaidCode: string) => {\n    const historyItem: HistoryItem = {\n      id: Date.now().toString(),\n      content,\n      mermaidCode,\n      timestamp: Date.now()\n    };\n    setHistoryList(prev => [historyItem, ...prev]);\n  };\n\n  return (\n    <HistoryContext.Provider\n      value={{\n        selectedHistory,\n        setSelectedHistory,\n        addHistory,\n        historyList\n      }}\n    >\n      {children}\n    </HistoryContext.Provider>\n  );\n}\n```\n\n在这个实际例子中，我们可以看到几个关键点：\n\n1. **状态定义**：使用 TypeScript 接口明确定义了数据结构，确保类型安全\n2. **状态持久化**：通过 `useEffect` 监听状态变化并保存到 localStorage\n3. **实时更新**：通过 `setHistoryList` 确保状态更新后所有使用该 Context 的组件都能即时获得更新\n\n当组件需要使用这些共享状态时，只需：\n\n```typescript\nfunction HistoryViewer() {\n  const { selectedHistory } = useHistory();\n  \n  return (\n    <div>\n      {selectedHistory && (\n        <div>{selectedHistory.content}</div>\n      )}\n    </div>\n  );\n}\n```\n\n这种模式的优势在于：\n\n- 避免了 props 的层层传递\n- 实现了组件间的解耦\n- 确保了状态更新的实时性\n- 提供了类型安全的数据访问\n\n## 参考资料\n\n- [React Context Documentation](https://react.dev/reference/react/createContext)\n- [TypeScript Handbook](https://www.typescriptlang.org/docs/)\n- [React Hooks API Reference](https://react.dev/reference/react/hooks)\n","slug":"前后端/跨组件渲染","published":1,"updated":"2025-05-10T02:23:35.319Z","comments":1,"layout":"post","photos":[],"_id":"cmcbm7pqi002be2qg778vgpm0","content":"<h2 id=\"为什么需要跨组件实时渲染？\"><a href=\"#为什么需要跨组件实时渲染？\" class=\"headerlink\" title=\"为什么需要跨组件实时渲染？\"></a>为什么需要跨组件实时渲染？</h2><p>在开发 React 应用时，我们经常遇到这样的场景：某个组件的状态变化需要即时反映在其他不相关的组件中。例如：</p>\n<ul>\n<li>用户在一个组件中编辑内容，其他组件需要立即看到更新</li>\n<li>多个组件需要共享同一份数据</li>\n<li>需要避免通过层层组件传递 props（即所谓的 prop drilling）</li>\n</ul>\n<p>这种情况下，使用 React Context 来实现跨组件的实时渲染就显得尤为重要。</p>\n<h2 id=\"最小实现示例\"><a href=\"#最小实现示例\" class=\"headerlink\" title=\"最小实现示例\"></a>最小实现示例</h2><p>以下是实现跨组件实时渲染的最简代码结构：</p>\n<div class=\"code-container\" data-rel=\"Typescript\"><figure class=\"iseeu highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 定义 Context 类型</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">SharedContextType</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">data</span>: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">  <span class=\"attr\">updateData</span>: <span class=\"function\">(<span class=\"params\"><span class=\"attr\">newData</span>: <span class=\"built_in\">any</span></span>) =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 创建 Context</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">SharedContext</span> = createContext&lt;<span class=\"title class_\">SharedContextType</span> | <span class=\"literal\">undefined</span>&gt;(<span class=\"literal\">undefined</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 创建 Provider 组件</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">SharedProvider</span>(<span class=\"params\">&#123; children &#125;: &#123; children: React.ReactNode &#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [data, setData] = useState&lt;<span class=\"built_in\">any</span>&gt;(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> updateData = <span class=\"title function_\">useCallback</span>(<span class=\"function\">(<span class=\"params\"><span class=\"attr\">newData</span>: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setData</span>(newData);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">SharedContext.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">data</span>, <span class=\"attr\">updateData</span> &#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;children&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">SharedContext.Provider</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4. 创建自定义 Hook</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">useShared</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> context = <span class=\"title function_\">useContext</span>(<span class=\"title class_\">SharedContext</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;useShared must be used within SharedProvider&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> context;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"实际应用分析\"><a href=\"#实际应用分析\" class=\"headerlink\" title=\"实际应用分析\"></a>实际应用分析</h2><p>让我们以一个实际的 Mermaid 图表生成器项目为例，分析如何运用这个模式：</p>\n<div class=\"code-container\" data-rel=\"Typescript\"><figure class=\"iseeu highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 定义具体的数据结构</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">HistoryItem</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">content</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">mermaidCode</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">timestamp</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 实现带有持久化的 Context Provider</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">HistoryProvider</span>(<span class=\"params\">&#123; children &#125;: &#123; children: React.ReactNode &#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [selectedHistory, setSelectedHistory] = useState&lt;<span class=\"title class_\">HistoryItem</span> | <span class=\"literal\">null</span>&gt;(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [historyList, setHistoryList] = useState&lt;<span class=\"title class_\">HistoryItem</span>[]&gt;([]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 数据持久化</span></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (selectedHistory) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">&#x27;selectedHistory&#x27;</span>, <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(selectedHistory));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, [selectedHistory]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 实时更新方法</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">addHistory</span> = <span class=\"keyword\">async</span> (<span class=\"params\"><span class=\"attr\">content</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">mermaidCode</span>: <span class=\"built_in\">string</span></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">historyItem</span>: <span class=\"title class_\">HistoryItem</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">id</span>: <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>().<span class=\"title function_\">toString</span>(),</span><br><span class=\"line\">      content,</span><br><span class=\"line\">      mermaidCode,</span><br><span class=\"line\">      <span class=\"attr\">timestamp</span>: <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>()</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"title function_\">setHistoryList</span>(<span class=\"function\"><span class=\"params\">prev</span> =&gt;</span> [historyItem, ...prev]);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">HistoryContext.Provider</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      <span class=\"attr\">value</span>=<span class=\"string\">&#123;&#123;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">selectedHistory</span>,</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">setSelectedHistory</span>,</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">addHistory</span>,</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">historyList</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;children&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">HistoryContext.Provider</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>在这个实际例子中，我们可以看到几个关键点：</p>\n<ol>\n<li><strong>状态定义</strong>：使用 TypeScript 接口明确定义了数据结构，确保类型安全</li>\n<li><strong>状态持久化</strong>：通过 <code>useEffect</code> 监听状态变化并保存到 localStorage</li>\n<li><strong>实时更新</strong>：通过 <code>setHistoryList</code> 确保状态更新后所有使用该 Context 的组件都能即时获得更新</li>\n</ol>\n<p>当组件需要使用这些共享状态时，只需：</p>\n<div class=\"code-container\" data-rel=\"Typescript\"><figure class=\"iseeu highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">HistoryViewer</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; selectedHistory &#125; = <span class=\"title function_\">useHistory</span>();</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;selectedHistory &amp;&amp; (</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;selectedHistory.content&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      )&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>这种模式的优势在于：</p>\n<ul>\n<li>避免了 props 的层层传递</li>\n<li>实现了组件间的解耦</li>\n<li>确保了状态更新的实时性</li>\n<li>提供了类型安全的数据访问</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a class=\"link\"   href=\"https://react.dev/reference/react/createContext\" >React Context Documentation<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n<li><a class=\"link\"   href=\"https://www.typescriptlang.org/docs/\" >TypeScript Handbook<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n<li><a class=\"link\"   href=\"https://react.dev/reference/react/hooks\" >React Hooks API Reference<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"为什么需要跨组件实时渲染？\"><a href=\"#为什么需要跨组件实时渲染？\" class=\"headerlink\" title=\"为什么需要跨组件实时渲染？\"></a>为什么需要跨组件实时渲染？</h2><p>在开发 React 应用时，我们经常遇到这样的场景：某个组件的状态变化需要即时反映在其他不相关的组件中。例如：</p>\n<ul>\n<li>用户在一个组件中编辑内容，其他组件需要立即看到更新</li>\n<li>多个组件需要共享同一份数据</li>\n<li>需要避免通过层层组件传递 props（即所谓的 prop drilling）</li>\n</ul>\n<p>这种情况下，使用 React Context 来实现跨组件的实时渲染就显得尤为重要。</p>\n<h2 id=\"最小实现示例\"><a href=\"#最小实现示例\" class=\"headerlink\" title=\"最小实现示例\"></a>最小实现示例</h2><p>以下是实现跨组件实时渲染的最简代码结构：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 定义 Context 类型</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">SharedContextType</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">data</span>: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">  <span class=\"attr\">updateData</span>: <span class=\"function\">(<span class=\"params\"><span class=\"attr\">newData</span>: <span class=\"built_in\">any</span></span>) =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 创建 Context</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">SharedContext</span> = createContext&lt;<span class=\"title class_\">SharedContextType</span> | <span class=\"literal\">undefined</span>&gt;(<span class=\"literal\">undefined</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 创建 Provider 组件</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">SharedProvider</span>(<span class=\"params\">&#123; children &#125;: &#123; children: React.ReactNode &#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [data, setData] = useState&lt;<span class=\"built_in\">any</span>&gt;(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> updateData = <span class=\"title function_\">useCallback</span>(<span class=\"function\">(<span class=\"params\"><span class=\"attr\">newData</span>: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setData</span>(newData);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">SharedContext.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">data</span>, <span class=\"attr\">updateData</span> &#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;children&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">SharedContext.Provider</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4. 创建自定义 Hook</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">useShared</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> context = <span class=\"title function_\">useContext</span>(<span class=\"title class_\">SharedContext</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;useShared must be used within SharedProvider&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> context;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实际应用分析\"><a href=\"#实际应用分析\" class=\"headerlink\" title=\"实际应用分析\"></a>实际应用分析</h2><p>让我们以一个实际的 Mermaid 图表生成器项目为例，分析如何运用这个模式：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 定义具体的数据结构</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">HistoryItem</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">content</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">mermaidCode</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">timestamp</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 实现带有持久化的 Context Provider</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">HistoryProvider</span>(<span class=\"params\">&#123; children &#125;: &#123; children: React.ReactNode &#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [selectedHistory, setSelectedHistory] = useState&lt;<span class=\"title class_\">HistoryItem</span> | <span class=\"literal\">null</span>&gt;(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [historyList, setHistoryList] = useState&lt;<span class=\"title class_\">HistoryItem</span>[]&gt;([]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 数据持久化</span></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (selectedHistory) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">&#x27;selectedHistory&#x27;</span>, <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(selectedHistory));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, [selectedHistory]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 实时更新方法</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">addHistory</span> = <span class=\"keyword\">async</span> (<span class=\"params\"><span class=\"attr\">content</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">mermaidCode</span>: <span class=\"built_in\">string</span></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">historyItem</span>: <span class=\"title class_\">HistoryItem</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">id</span>: <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>().<span class=\"title function_\">toString</span>(),</span><br><span class=\"line\">      content,</span><br><span class=\"line\">      mermaidCode,</span><br><span class=\"line\">      <span class=\"attr\">timestamp</span>: <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>()</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"title function_\">setHistoryList</span>(<span class=\"function\"><span class=\"params\">prev</span> =&gt;</span> [historyItem, ...prev]);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">HistoryContext.Provider</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      <span class=\"attr\">value</span>=<span class=\"string\">&#123;&#123;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">selectedHistory</span>,</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">setSelectedHistory</span>,</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">addHistory</span>,</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">historyList</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;children&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">HistoryContext.Provider</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个实际例子中，我们可以看到几个关键点：</p>\n<ol>\n<li><strong>状态定义</strong>：使用 TypeScript 接口明确定义了数据结构，确保类型安全</li>\n<li><strong>状态持久化</strong>：通过 <code>useEffect</code> 监听状态变化并保存到 localStorage</li>\n<li><strong>实时更新</strong>：通过 <code>setHistoryList</code> 确保状态更新后所有使用该 Context 的组件都能即时获得更新</li>\n</ol>\n<p>当组件需要使用这些共享状态时，只需：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">HistoryViewer</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; selectedHistory &#125; = <span class=\"title function_\">useHistory</span>();</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;selectedHistory &amp;&amp; (</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;selectedHistory.content&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      )&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种模式的优势在于：</p>\n<ul>\n<li>避免了 props 的层层传递</li>\n<li>实现了组件间的解耦</li>\n<li>确保了状态更新的实时性</li>\n<li>提供了类型安全的数据访问</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a class=\"link\"   href=\"https://react.dev/reference/react/createContext\" >React Context Documentation<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n<li><a class=\"link\"   href=\"https://www.typescriptlang.org/docs/\" >TypeScript Handbook<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n<li><a class=\"link\"   href=\"https://react.dev/reference/react/hooks\" >React Hooks API Reference<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n</ul>\n","_processedHighlight":true},{"title":"oop复习","date":"2025-06-21T10:55:00.000Z","excerpt":"复习阶段整理的oop课程笔记，整体分为核心知识点回顾以及针对部分历年卷题目的整理","thumbnail":"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250509094812819.png?imageSlim","_content":"# 知识点回顾\n\n- `end（）`返回的是容器最后一个位置的**下一个位置**的迭代器\n- `string::npos`是 `size_t`类型的最大值;\n- `to_string`将数字转换成字符串:\n\n  ```cpp\n  int num = 123;\n  string str = to_string(num);\n  ```\n- `stoi`将字符串转换成整数\n- 参数的默认值只能从右到左给出；默认值只能出现在函数的原型或者将定义和声明放在一起，而不能在分离的定义中声明\n- 列表初始化是按成员的**声明顺序**执行的，和成员在列表中的顺序无关。\n\n## 实验操作\n\n#### 截取字符串\n\n用邮箱地址的截取，说明 `rfind`与 `str`等方法的使用：\n\n```cpp\nstring email = \"user.name@example.com\";\n\n// 获取用户名的部分\nint atPos = email.find('@');\nstring username = email.substr(0, atPos); // result: \"user.name\"\n\n// 获取域名部分\nstring domain =  email.substr(atPos + 1); // result: \"example.com\"\n\n// 获取顶级域名(最后一个.之后的部分)\nint lastDotPos = email.rfind('.');\nstring topLevelDomain = email.substr(lastDotPos + 1); // result: \"com\"\n```\n\n## Stream\n\n### 文件流\n\n- 一个简单的输入/输出：流\n\n```cpp\n#include <fstream>  // 需要包含这个头文件\nusing namespace std;\n\n// 文件输出（写入文件）\nofstream outFile(\"output.txt\");\noutFile << \"Hello World\" << endl;\noutFile.close();\n\n// 文件输入（读取文件）\nifstream inFile(\"input.txt\"); \nstring line;\ngetline(inFile, line);\ninFile.close();\n\n```\n\n> `getline()`函数可以显式指定终止符（第三个参数），默认为 `\\n`也就是换行符。并且会将终止符丢弃\n\n#### 位或运算符指定模式\n\n可以使用 `｜`来指定多个模式：\n\n```cpp\n// 组合使用打开模式\nofstream outFile(\"test.txt\", ios::out | ios::app);\n```\n\n### 字符串流\n\n字符串流的作用原理：\n\n- 作用: 将字符串转换成一个类似于输入流的对象;\n- 内部维护了一个字符串和一个位置指针;\n- 每次读取时, 位置指针向后移动, 且自动跳过空白字符.\n\n`stringstream`表示双向字符串流\n\n#### 字符串分词\n\n我们可以将字符串转换成字符串流，来实现字符串的分词：\n\n```cpp\n#include <string>\n#include <iostream>\n#include <sstream>\n\n...\n\nstring name(\"xiao ming\");\n\nistringstream is(name);\nstring token;\nwhile(is >> token)\n\tcout << token << endl;\n```\n\n> 按照空白字符i.e. 空格、`\\t`, `\\n`来分词\n\n#### 字符串的拼接\n\n```cpp\n#include <sstream>\n#include <string>\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    ostringstream oss;\n    string name = \"Alice\";\n    int age = 25;\n  \n    oss << \"Name: \" << name << \", Age: \" << age;\n    string result = oss.str();\n    cout << result << endl;\n}\n\n```\n\n**Output:**\n\n```shell\nName: Alice, Age: 25\n```\n\n> 通过 `.str()`方法可以对象转换为字符串类型, 从而**格式化输出**.\n>\n> `.str(\"\")`方法可以**清空**字符串流:\n\n## STL\n\n#### for-each\n\n以更简单的方式遍历容器内元素:\n\n```cpp\nstd::map<std::string, double> price;\n// Assume we've inserted a lot of name-price pairs\nfor(auto [key, value]: price){\n    std::cout << key << \": \" << value << std::endl;\n}\n```\n\n### map\n\n#### lower_bound\n\n使用～函数可以查找不小于某个值的第一个键：\n\n```cpp\nstd::map<long long, int> tags{{10, 1}, {100, 2}, {1000, 3}, {10000, 4}, {10000000000, 10}};\nstd::map<long long, int>::iterator it = tags.lower_bound(2000);\nstd::cout << it->first << \" \" << it->second << std::endl; // it should be \"10000 4\"\nit++;\nstd::cout << it->first << \" \" << it->second << std::endl; // it should be \"10000000000 10\"\n```\n\n## class\n\n#### include机制\n\n`#include` 语句的作用是将某个文件插入到语句所在位置。根据搜索的顺序，可以划分不同的用法。\n\n* `#include \"xx.h\"`：先搜索当前文件夹，再搜索系统库\n* `#include <xx.h>`：搜索系统库\n* `#include <xx>`：搜索系统库\n\n注意权限的管理是**针对于类**的，同一类的不同对象可以在其成员函数内任意访问别的成员\n\n友元不具有传递性：\n\n- `friend class`+一个类名，可以指定友元类\n- `friend`+一个函数的声明，指定友元函数\n\n生命周期：\n\n- main外的类的对象（i.e. 全局作用域），其构造函数调用的时间早于 `main`函数；其析构函数的调用也在 `main`函数返回之后\n\n#### 静态\n\n静态指的是：\n\n- 空间的静态\n- 受限的访问\n- 静态局部变量在第一次遇到的时候初始化\n- 静态成员变量在 `.h`文件中的声明有 `static`标签，但是在 `.cpp` 中不应该有～标签；否则无法被其他文件中使用。 静态成员函数同理\n\n两种访问静态内容的方式：\n\n```cpp\n<class name>::<static member>\n<object name>.<static member>\n```\n\n#### 引用\n\n一般的字面量都是右值，但是字符串是例外，因为字符串实际上存储在静态内存区\n\n一般来说，左值引用不能绑定右值，但是**常量左值引用可以绑定右值**，因为常量的特性确定了不会对右值进行修改\n\n> 但是如果同时存在右值引用，右值作为参数时还是会优先重载右值引用的版本\n\n**规范：**\n\n- 不允许定义引用的引用；\n- **不允许定义引用的数组**；\n\n  - 引用不是单独存在的对象，无法按照数组存储\n- **不允许定义指向引用的指针**\n\n  - 指针必须指向对象，而引用不是对象\n\n#### 常量\n\n使用 `const`标记声明为常量\n\n常量可以直接让编译器尝试替换：\n\n```cpp\nconst int bufsize = 1 << 10;\nconst int index[] = {1, 2, 3, 4};\nint f[bufsize]; // Ok: f[1024]\nint f[index[3]]; // Error\n```\n\n但是需要特别注意的是：**对象的常量不是编译器常量！ i.e.**\n\n```cpp\nclass Array{\n    const int size = 10;\n    int array[size]; // Error！\n};\n```\n\n> 可以使用枚举或者 `static`来解决上述的问题：\n>\n> ```cpp\n> enum {size = 10};\n> static const int size = 10;\n> ```\n\n常量和指针；\n\n- `const *p`表示不能通过指针改变指向的对象内容；\n- `* const p`表示不能改变指针的指向位置\n\n> 不需要关注类型与 `*`的位置关系\n\n**字符指针和字符数组；**\n\n```cpp\nchar *sp = \"Hello World!\"; // 字符指针可以移动，不能修改\nchar array[] = \"Hello World!\"; // 字符数组不能移动，可以修改\n\narray[0] = 'h' ; // 合法\narray = 'hello'; // 非法！\n\nsp = 'world'; // 合法\n```\n\n> 实际上，`char *sp`就是 `const char *sp`，所以不能改变字符串的值，但是可以改变sp的指向\n>\n> 而字符串数组的数组名是栈中的固定地址，无法移动，但是可以修改\n\n注意区分**常量函数**和返回值的常量：\n\n```cpp\nint getName(int id) const; // 常量函数，无法改变成员变量，常量对象只能调用自己的常量成员函数（与静态成员函数）\n\nconst int getAge(int id); // 限制了返回值是一个常量\n```\n\n#### delete\n\n注意 `[]`搭配的使用：\n\n```cpp\nint *p = new int[10];\n...\ndelete [] p;\n```\n\n## Inside class\n\n#### 代理构造\n\n可以在一个构造函数中调用另一个构造函数，减少代码的重复：\n\n```cpp\nclass sorted{\npublic:\n    sorted(){}\n    sorted(int _x){\n        x = _x > 0? _x: 10;\n    }\n    sorted(int _x, int _z): sorted(_x){\n        z = _z > 0 && _z < x? _z: 1;\n    }\n    sorted(int _x, int _y, int _z): sorted(_x, _z){\n        y = _y < x && _y > z? _y: 5;\n    }\nprivate:\n    int x, y, z;\n};\n```\n\n#### 内联函数\n\n通过 `inline`关键字，**建议编译器将函数调用处替换为函数体代码本身** ，从而避免函数调用开销。\n\n> 是否作为内联函数，实际上由编译器所决定\n\n内联函数必须提供完整的函数定义\n\n> i.e. 内联函数的声明必需伴随实现（在同一个头文件中即可，二者可以分离）\n\n## 组合与继承\n\n### 组合\n\n组合的对象分为完全包含和引用包含，什么时候使用引用包含呢？\n\n- 逻辑上子对象应该在对象的外部；\n- 子对象的大小不确定\n- 子对象的空间应该在运行时被分配或者链接\n\n#### 命名空间\n\n```cpp\nnamespace sp1{\n    void f();\n    void g();\n}\nnamespace sp2{\n    void f();\n    void g();\n}// No terminating end colon!\nnamespace alias = sp1;\nvoid f();\nvoid g();\nint main(){\n    sp1::f();\n    sp2::f();\n    ::f();\n    f();// the same as ::f()\n    alias::f();// the same as sp1::f()\n    return 0;\n}\n```\n\n> - 可以为命名空间声明别名；\n> - 命名空间的末尾没有分号 `；`\n\n#### using\n\n使用 `using`可以在当前的作用域引入其他的命名空间的成员、函数：\n\n- `using <namespace>::<member>` 引入部分的成员\n- `using namespace <namespace>` 引入该命名空间的全部成员\n\ne.g.\n\n```cpp\nusing std::cin; // 只引入 cin\nusing namespace std; // 引入std的所有成员\n```\n\n> 如果引入同名的对象或者函数，将会导致编译器链接失败\n\n### 继承\n\n父类的析构函数更晚调用\n\n父类的**私有成员变量在子类的对象中依旧存在**，但是不可直接访问（只能通过父类方法来间接访问）\n\n父类的受保护成员可以被子类访问，但是无法被外界访问\n\n#### 非公开的继承\n\n```cpp\nclass B: protected A{\n    ...  \n};\nclass B: private A{//default\n    ...\n};\n```\n\n> 如果定义 `protected` 继承，只有子类及其派生类可以调用父类方法，外部是不可以的。\n>\n> 如果定义 `private` 继承，只有子类本身可以调用父类方法。\n\n#### 静态成员的继承\n\n父类的静态成员不会在子类中具有自己的副本，**子类和父类共享一个静态成员！**\n\n以下介绍using相关的几个问题：\n\n#### name hiding\n\n如果子类重载了父类的函数，父类的同名函数将会失效，无法直接调用，需要使用 `using`来声明：\n\ne.g.\n\n```cpp\nclass Base{\n  public: \n  \tvoid f(double){\n      cout << \"double\\n\" << endl;\n    }\n};\n\nclass Derived : Base{\n  public:\n  \tusing Base::f; // 将基类中的私有函数本地使用\n  \tvoid f(int){\n      cout << \"int\\n\"<<endl;\n    }\n};\n```\n\n#### 默认参数的重载传递\n\n在cpp中, 默认参数值绑定在函数声明的作用域上, 而不是函数本身! 这是为了避免 **多重继承时参数值产生冲突或二义性** 。\n\n> 默认参数是静态绑定（编译期行为），它必须清楚地知道取哪个作用域的值.\n\ne.g.\n\n```cpp\nclass A {\npublic:\n    void f(int a = 3, double b = 2.0);\n};\n\nclass B : public A {\npublic:\n    using A::f;         // ✅ 此时默认参数仍可见\n    void f(int a);      // ❌ 重载后，这个版本没有默认参数\n};\n```\n\n#### 子类重写父类函数\n\n如果子类直接重写了父类的函数，但是父类中的同名函数本身具有重载的版本，那么也需要使用 `using`来声明：\n\n```cpp\n#include <iostream>\n\nclass Base\n{\npublic:\n    // 基类中的重载函数\n    void display(int x)\n    {\n        std::cout << \"Base display(int): \" << x << std::endl;\n    }\n\n    void display(double x)\n    {\n        std::cout << \"Base display(double): \" << x << std::endl;\n    }\n};\n\nclass Derived : public Base\n{\npublic:\n    // 子类重新定义了基类的 display(int)\n    void display(int x)\n    {\n        std::cout << \"Derived display(int): \" << x << std::endl;\n    }\n    using Base::display;\n};\n\nint main()\n{\n    Derived d;\n    d.display(5); // 调用 Derived 的 display(int)\n\n    d.Base::display(5.5); // 或者d.display(5.5);\n    return 0;\n}\n\n```\n\n## 多态\n\n- 我们应当将所有类的析构函数都设置为**虚析构函数**，因为每个类都有成为父类的可能\n\n```cpp\nclass Base {\npublic:\n    virtual ~Base() {\n        cout << \"Base Destructor\" << endl;\n    }\n};\n\nclass Derived : public Base {\npublic:\n    ~Derived() {\n        cout << \"Derived Destructor\" << endl;\n    }\n};\n\n```\n\n> 子类和父类的析构函数先后调用\n\n- `vptr`在构造的时候确定，虚继承的子类在调用父类的构造函数时，默认**调用父类的成员函数**\n\n  ```cpp\n  class A {\n  public:\n      A() {\n          f();\n      }\n      virtual void f() {\n          cout << \"A::f()\";\n      }\n  };\n  class B : public A {\n  public:\n      B() {\n          f();\n      }\n      void f() {\n          cout << \"B::f()\";\n      }\n  };\n  B temp;\n  ```\n\n#### 虚函数的规范\n\n注意 `virtual`与 `override`的搭配：\n\n```cpp\nclass Animal {\npublic:\n    virtual void speak() {\n        cout << \"Animal speaks\" << endl;\n    }\n};\n\nclass Dog : public Animal {\npublic:\n    void speak() override {\n        cout << \"Dog barks\" << endl;\n    }\n};\n```\n\n> override是为了让编译器检查该函数在父类中是虚函数，但不是必须的\n\n- vtable是类级别的, 所有该类的对象共享一个vtable;\n- vptr是对象级别的, 隐含于各个对象当中.并且在内存的开头\n\n#### 抽象类\n\n抽象类：至少包含一个**纯虚函数**的类是～\n\n```cpp\nclass Shape {\npublic:\n    // 纯虚函数，子类必须实现\n    virtual void draw() = 0;\n};\n```\n\n> 纯虚函数类似于协议，要求子类必须实现\n>\n> 只有完成了所有纯虚函数定义的、抽象类的子类，才能够实例化\n\n**接口类 Interface Class：**\n\n- 比抽象类更加抽象）\n- 只定义接口, 不提供实现的抽象类\n- 所有的**成员函数都是纯虚函数**;\n- 一般不包含任何数据成员.\n\n#### 菱形继承与虚继承\n\n在继承时添加 `virtual` 关键字实现,子类中不存在父类的对象，而是保有父类的指针。\n\n```cpp\nclass A\n{\npublic:\n    int value;\n    void ptr()\n    {\n        cout << \"value: \" << value << endl;\n    }\n};\nclass B : virtual public A {};\nclass C : virtual public A {};\nclass D : public B, public C {};\n```\n\n上述的虚继承确保了B，C只会拥有A的一份value，从而避免了从D的对象访问 `value`时存在的**二义性**\n\n> 并非所有的菱形继承都会因为二义性的访问而导致访问的问题！\n\nTODO：检查什么时候没有二义性？\n\n由于虚继承带来的是“共享”的基类对象，所以：\n\n- 虚基类的构造 **必须由最底层派生类负责**\n- 派生类的构造函数中要**显式初始化**虚基类\n\n## Copy & Move\n\n- 拷贝构造函数的签名：`T::T(const T&)`\n- 默认的拷贝构造函数的指针类型成员是直接赋值的，也就是共享同一地址\n  - 因此我们需要显式定义类的拷贝构造函数，避免依赖默认的～\n  - 默认拷贝构造中，成员对象也会调用自己的拷贝构造函数\n\n#### 拷贝构造函数的调用时机\n\n* **按值传递参数时**：当对象作为参数按值传递给函数时\n  ```cpp\n  void func(MyClass obj); // 调用时会触发拷贝构造\n  ```\n* **对象初始化时**：\n  ```cpp\n  MyClass a;\n  MyClass b = a;    // 初始化，调用拷贝构造函数\n  MyClass c(a);     // 初始化，调用拷贝构造函数\n  ```\n* **函数返回对象时**：\n  ```cpp\n  MyClass func() {\n      MyClass obj;\n      return obj;   // 可能触发拷贝构造（取决于编译器优化）\n  }\n  ```\n\n一个简单的例子：\n\n```cpp\nStringHolder(const StringHolder &other)\n    {\n        if (other.data)\n        {\n            data = new char[strlen(other.data) + 1];\n            strcpy(data, other.data);\n            std::cout << \"深拷贝构造函数: 为\\\"\" << data << \"\\\"分配新内存\" << std::endl;\n        }\n        else\n        {\n            data = nullptr;\n            std::cout << \"深拷贝构造函数: 复制空字符串\" << std::endl;\n        }\n    }\n```\n\n#### 右值引用\n\n两种可以同时输入左值和右值引用作为参数的方法:\n\n- **重载**\n\n  ```cpp\n  // 重载函数，分别处理左值和右值\n  void process(int& x) {\n      std::cout << \"重载函数 - 处理左值: \" << x << std::endl;\n  }\n\n  void process(int&& x) {\n      std::cout << \"重载函数 - 处理右值: \" << x << std::endl;\n  }\n  ```\n- `const int& x `\n\n  ```cpp\n  // 接受const左值引用的函数（可以接受左值和右值）\n  void processAny(const int& x) {\n      std::cout << \"处理任意值: \" << x << std::endl;\n  }\n  ```\n\n#### 移动构造函数\n\n- 签名：`T::T(T&& other)`, 也就是**将右值引用作为参数的构造函数**\n- 用于\"窃取\"即将销毁的对象的资源，避免不必要的深拷贝\n- 通常将源对象的指针成员置为 `nullptr`，防止资源被错误释放. 其他成员设置为零值\n\n一个简单的例子：\n\n```cpp\nclass DynamicArray\n{\nprivate:\n    int *m_array;\n    size_t m_size;\n...\n}\n\n// 移动构造函数\nDynamicArray(DynamicArray &&other) noexcept : m_array(other.m_array), m_size(other.m_size)\n    {\n        // \"窃取\"other的资源，并将other置为安全状态\n        other.m_array = nullptr;\n        other.m_size = 0;\n        std::cout << \"移动构造函数: 移动大小为\" << m_size << \"的数组\" << std::endl;\n    }\n```\n\n> `noexcept`标记表示不会抛出异常；\n>\n> 标准库容器在进行元素移动时会**优先选择不会抛异常的移动构造函数**，如果不存在～会退而求其次选择拷贝构造函数（更慢）。\n\n#### move\n\n如果对象不是右值引用，我们可以使用 `std::move`来显式调用移动构造函数：\n\n```cpp\nvector<int> v1{1, 2, 3, 4};\nvector<int> v2 = v1; // v2 是 v1 的副本\nvector<int> v3 = std::move(v1); // 调用移动构造函数\n```\n\n### 初始化的方式\n\nC++11提供了多种初始化对象的方式：\n\n- **小括号初始化**：`MyClass obj(arg1, arg2);`\n- **等号初始化**：`MyClass obj = value;`\n- **大括号初始化**（统一初始化）：`MyClass obj{arg1, arg2};`\n- **列表初始化**：\n\n  ```cpp\n  int arr[] = {1, 2, 3};\n  MyClass* ptr = new MyClass{arg1, arg2};\n  ```\n\n#### 基本类型的初始化\n\n```cpp\n// 基本类型的初始化方式\nint a = 10;             // 等号初始化\nint b(20);              // 小括号初始化\nint c{30};              // 大括号初始化（C++11）\nint d = {40};           // 等号+大括号初始化（C++11）\nint arr1[] = {1, 2, 3}; // 数组初始化\nint arr2[]{4, 5, 6};    // 数组大括号初始化（C++11）\n```\n\n#### 对象的初始化\n\n```cpp\n// 对象的初始化方式\nPerson p1(\"张三\", 25);          // 小括号初始化\nPerson p2 = Person(\"李四\", 30); // 等号+临时对象初始化\nPerson p3{\"王五\", 35};          // 大括号初始化（C++11）\nPerson p4 = {\"赵六\", 40};       // 等号+大括号初始化（C++11）\n```\n\n- 动态分配对象的初始化\n\n  ```cpp\n  // 动态分配对象的初始化方式\n  Person *pp1 = new Person(\"动态张三\", 25); // 传统new\n  Person *pp2 = new Person{\"动态李四\", 30}; // 大括号初始化（C++11）\n  ```\n\n#### 统一初始化\n\n对于简单的类或者容器内部的类，我们可以不写构造函数，而是用花括号进行 **统一初始化** 。\n\n如果类没有构造函数，参数应按照成员的声明顺序给出；如果有，参数应按照构造函数的参数顺序给出。\n\n```cpp\nclass Test{\n    int a, b;\n};\nTest t{0, 0};\nTest *pt = new Test{1, 2};\nint *a = new int[3]{1, 2, 0};\nvector<string> vec = { \"first\", \"second\", \"third\"};\n```\n\n## 操作符重载\n\n运算符重载本质上是一个以 `operator`关键字为前缀，后跟运算符的特殊函数\n\n- 赋值运算符首先要**检查是否为自赋值**\n- 必须在**类或者枚举类**上定义\n- 类内成员函数的重载将第一个参数作为隐式的 `this`传递，操作符左端的类型决定了使用的操作符的类型\n  - `3+a1`非法 if `a1`无法转换为 `int`\n\n#### 成员函数与自由函数\n\n* `=, (), [], ->, ->*` 必须是成员函数\n* 单目运算符应该声明为成员；\n* 二目运算符应该声明为自由函数\n\n#### 无法重载的运算符\n\n```cpp\n. .* :: ?:\nsizeof typeid\nstatic_cast dynamic_cast const_cast\nreinterpret_cast\n```\n\n#### 参数传递与返回类型\n\n- `+ - * / % ^ & | ~` 返回新的对象\n  - `const Tp operator X(const Tp & l, const Tp & r);`\n- 布尔运算，返回 `bool`类型\n- `[ ]` 返回可以修改的引用，类似于数组的赋值\n  - `Tp & operator X(int index);`\n- `= += *= /= <<= >>=` 返回可以修改的引用，确保链式操作\n  - `Tp & operator X(const Tp &l, const Tp &r);`\n\n前缀自增和后缀自增需要区分，在后缀自增的参数列表中添加 `int`即可\n\n```cpp\n// 前缀自增返回引用\nconst Integer& Integer::operator++(){\n    *this += 1;\n    return *this;\n}\n\n// 后缀自增返回对象\nconst Integer Integer::operator++(int){// just leave the parameter unnamed\n    Integer old(*this);\n    ++(*this);\n    return old;\n}\n```\n\n#### 比较运算符\n\n考虑实现基础的 `==` 与 `<` ，其余的比较重载在上述的基础上通过 `!` 运算实现，便于直接迁移\n\n#### 流运算\n\n```cpp\nistream& operator>>(istream& is, _Tp& obj){\n    // read obj from is\n    return is;\n}\nostream& operator<<(ostream& os, const _Tp& obj){\n    // output obj in os\n    return os;\n}\nostream& tab(ostream& os){// manipulator\n    return os << '\\t';\n}\n```\n\n- 输出流运算符的第一个参数不能是 `const`，因为输出会修改流\n- 输入流运算符的第二个参数不能是 `const`，因为需要修改对象\n- 通常需要声明为友元以访问私有成员\n\n#### 赋值运算符\n\n```cpp\n_Tp& _Tp::operator=(const _Tp& rhs){\n    if(this != &rhs){\n        size = rhs.size;\n        delete[] p;\n        p = new int[size];\n        for(int i = 0 ; i < size; ++i)\n            p[i] = rhs.p[i];\n    }\n    return *this;\n}\n```\n\n> 首先检查是否为自赋值\n\n如果不希望进行赋值运算，将上述的 `=` 重载声明为 `private`，并且无需实现。\n\n> 这是因为 `a = b;  // 实际等价于：a.operator=(b)`， 发起调用的是当前代码片段所在的作用域，如果不是类内函数，那么就是非法的\n\n#### 隐式转换\n\n**1. 构造函数转换**：从其他类型到当前类型\n\n```cpp\nclass PathName {\n    string name;\npublic:\n    PathName(const string& s) : name(s) {}  // string到PathName的转换\n};\n\nstring abc(\"abc\");\nPathName xyz = abc;  // 隐式转换：abc => PathName\n\n```\n\n2.**转换运算符**：从当前类型到其他类型\n\n> `operator <typename> {}`关键字\n\n```cpp\nclass Rational {\npublic:\n    operator double() const {  // Rational到double的转换\n        return numerator_ / (double)denominator_;\n    }\n};\n\nRational r(1, 3);\ndouble d = r;  // 隐式转换：r => double\n\n```\n\n可以使用 `explicit`关键字要求显式转换：\n\n```cpp\nexplicit operator double() const;\ndouble d = (double)r;  // 必须显式转换\n```\n\n#### 显式转换\n\n- 构造函数的显式转换\n\n```cpp\n// 如果想要强制显式转换，应该这样声明：\nexplicit Rational(double value) {\n    const int PRECISION = 10000;\n    numerator = static_cast<int>(value * PRECISION);\n    denominator = PRECISION;\n    simplify();\n}\n\nRational r1 = 3.14;        // 错误：不允许隐式转换\nRational r2(2.5);          // 正确：显式构造\nRational r3 = Rational(3.14); // 正确：显式转换\n\n```\n\n- 类型转换运算符的显式转换\n\n```cpp\nexplicit operator double() const;\ndouble d = (double)r;  // 显式转换 or double(r)\n\ndouble d2 = static_cast<double>(r2);  // 显式转换\n\n```\n\n#### 转换优先级\n\n如果同时存在两种方向的转换，将优先采取**构造函数**的转换方式\n\n> 可以通过声明其中的一种情况必须显式调用来并存；比如必须显式调用构造函数的转换，那么下面的情况将会调用构造函数将A转换到B的对象：\n>\n> ```cpp\n> class B{\n> public:\n>     B();\n>     explicit B(A); // 从A到B的显式构造函数\n> };\n>\n> void functionTakingB(B thing){\n>     cout << \"OK\" << std::endl;\n> }\n>\n> functionTakingB(static_cast<B>(a));\n> ```\n\n#### 转换运算符\n\nC++ 中有四个**转换运算符** Cast Operator：\n\n* `static_cast`：\n\n  * 基本类型的转换\n  * 子类向父类的指针/引用的转换\n  * `void`与其他类型指针的转换\n* `dynamic_cast`：**down-cast**，安全\n\n  * 父类向子类的指针/引用的转换，不一定总是安全（要求原本指向的对象就是子类对象）\n  * 要求基类中**至少存在一个虚函数**（因此具有 `vptr`，从而可以通过不同类的 `vptr`进行类的区分）\n  * ```cpp\n    Base* basePtr = new Derived();\n    Derived* derivedPtr = dynamic_cast<Derived*>(basePtr);\n\n    if(derivedPtr){\n    ...\n    }\n\n    ```\n* `const_cast`：修改 `const` 属性\n\n  * ```cpp\n    const int a = 10;\n    int *b = const_cast<int*>(&a);\n\n    *b = 20; // 转换之后可以修改value\n    ```\n\n    > 但是更加常见的是将非const类型的属性修改为 `const`；原本是常量类型的属性可能被编译器存储在只读内存区域，如果编译器没有在 `const_cast`的转换中进行优化，可能导致运行问题？\n    >\n* `reinterpret_cast`：忽略类型检查，强制转换，低安全性\n\n## Template\n\n一个模板完全都是声明，应该只有 `.h`，而不含有 `.cpp`\n\n> 必须**都放在头文件的实现**包含:\n>\n> - 函数模板;\n> - inline函数\n> - 带有default参数的声明.\n> - 类模板的成员函数\n\n### 函数模板\n\n#### 参数匹配\n\n```cpp\n#include <algorithm>\n#include <iostream>\n \nint add(int x, int y){\n    return x + y;\n}\n \ntemplate<typename _Tp>\n_Tp add(_Tp x, _Tp y){\n    return x + y;\n}\n \nsigned main(int argc, char **argv){\n    std::cout << add(1, 2) << std::endl; \n    std::cout << add(1.1, 2.2) << std::endl;\n    return 0;\n}\n\n/* T add(int, int) 和 T double add<double>(double, double) */\n```\n\n1. 如果有原生的完全匹配的函数，优先使用原生函数，例如 `add(1, 2)` 调用 `add(int, int)`。\n2. 其次，如果有模板能完全匹配的函数，使用模板生成函数，例如 `add(1.1, 2.2)` 调用 `add<double>(dobule, double)`。\n3. 再其次，尝试使用类型转换来匹配其他原生函数。但是，类型转换不能用于匹配模板，例如 `add(1, 2.2)`。\n\n### 类模板\n\n简单的示例：\n\n```cpp\ntemplate<typename T>\nclass Vector{\npublic:\n    Vector(int s):size(s){\n        content = new T[size];\n    }\n    virtual ~Vector(){\n        delete[] content;\n    }\n    T& operator[](int p){\n        return content[p];\n    }\nprivate:\n    T* content;\n    int size;\n};\n```\n\n## Exception\n\n**异常的类型如何定义？**\n\n> ```cpp\n> // 异常对象的定义\n> class DivisionError {\n> private:\n>     string message;\n> public:\n>     DivisionError(const string& msg) : message(msg) {\n>         cout << \"创建DivisionError异常对象\" << endl;\n>     }\n>   \n>     ~DivisionError() {\n>         cout << \"销毁DivisionError异常对象\" << endl;\n>     }\n>   \n>     string what() const {\n>         return message;\n>     }\n> };\n>\n> // 内层函数\n> double divide(double a, double b) {\n>     cout << \"进入divide函数\" << endl;\n>     Resource r(\"divide函数的局部资源\");\n>   \n>     if (b == 0) {\n>         throw DivisionError(\"除数不能为零\");\n>     }\n>   \n>     cout << \"divide函数正常返回\" << endl;\n>     return a / b;\n> }\n> ```\n\n执行流程：\n\n1. 通过 `throw` 创建对应的**异常对象**\n2. 将异常所在的内层函数的**资源释放**；\n3. 再被外层的 `catch` 所**捕获**\n\n在 `catch`块中可以通过 `throw;`再次抛出当前的异常\n\n自定义异常类时，通常应该继承自 `std::exception`或其派生类\n\n#### 异常规范\n\n在函数原型中声明可能返回的异常类型：\n\n```cpp\nvoid print(Document& p) throw(PrintOffLine, BadDocument);\nvoid goodguy() throw();// throw no exceptions, until C++11\nvoid alloc() throw(...);// can throw any exception\nvoid abc() noexcept;// throw no exceptions, since C++11\n```\n\n> 如果函数返回了规范之外的异常，将调用 `std::unexpected()`处理（默认调用 `std::terminate()`终止程序）\n\n`noexcept`也可以作为运算符使用，检查表达式是否声明为不抛出异常：\n\n```cpp\nbool willNotThrow = noexcept(func());  // 检查func()是否声明为noexcept\n```\n\n#### 层次结构\n\n```cpp\nstd::exception\n├── std::logic_error\n│   ├── std::invalid_argument\n│   ├── std::domain_error\n│   ├── std::length_error\n│   ├── std::out_of_range\n│   └── std::future_error\n├── std::runtime_error\n│   ├── std::range_error\n│   ├── std::overflow_error\n│   ├── std::underflow_error\n│   └── std::system_error\n├── std::bad_alloc\n├── std::bad_cast\n├── std::bad_typeid\n├── std::bad_exception\n└── std::bad_function_call\n```\n\n- 数组的 `.at`可以自动抛出数组访问异常的 `range_error`；\n- 容器的 `resize`方法可以自动抛出长度异常 `length_error`；\n\n#### 构造与析构\n\n析构函数应该避免抛出异常，否则会导致系统调用 `std::terminate()`\n\n由于在 `try-catch`中，如果发生了异常，本地变量将自动调用自己的析构函数，此时如果存在 `new`申请的空间资源，将导致其无法指向正确的地址\n\n因此，我们采取两阶段的构造确保构造函数不会抛出异常：\n\n1. 在构造函数内对基本变量赋值\n2. 在 `init()`函数中显式申请内存空间\n\n```cpp\nclass Widget {\npublic:\n    Widget() : initialized(false) {\n        // 只做最小的初始化： 不存在抛出异常的可能\n    }\n  \n    bool initialize() {\n        try {\n            // 执行可能失败的初始化操作\n            initialized = true;\n            return true;\n        } catch (...) {\n            return false;\n        }\n    }\n  \n    void use() {\n        if (!initialized) {\n            throw std::runtime_error(\"对象未初始化\");\n        }\n        // 使用对象\n    }\n  \nprivate:\n    bool initialized;\n};\n\n```\n\n---\n\n# 知识蒸馏\n\n> 将个人印象比较浅的部分重新摘了一遍\n\n- 字符指针与字符数组\n\n```cpp\nchar *sp = \"Hello World!\"; // 字符指针可以移动，不能修改\nchar array[] = \"Hello World!\"; // 字符数组不能移动，可以修改\n\narray[0] = 'h' ; // 合法\narray = 'hello'; // 非法！\n\nsp = 'world'; // 合法\n```\n\n> 实际上，`char *sp`就是 `const char *sp`，所以不能改变字符串的值，但是可以改变sp的指向\n>\n> 而字符串数组的数组名是栈中的固定地址，无法移动，但是可以修改\n\n- 不同文件之间的全局变量, 初始化的前后顺序由链接器随机决定. 此时需要确保它们**之间没有初始化的依赖.**\n- 返回类型的常量\n\n  ```cpp\n  const int* f();\n  // 只能将函数的返回值赋值给一个 const int*\n  ```\n\n#### vptr的大小\n\n如果父类具有 `virtual`也就是虚函数，子类继承之后也会得到一个虚函数表，对应有一个**vptr**指针指向自己的虚函数表：\n\n- 在64位的机器下，一个vptr指针的大小是**8字节**\n- 普通函数不占据类的大小，因为函数地址存放在全局空间\n- 如果类内没有成员变量，也没有虚函数，那么大小就是**1**（告诉编译器这个类的存在）\n\n#### 编译器的对齐\n\n* C++ 编译器会对类进行**按最大对齐的成员**进行对齐\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nclass Nothing {\npublic:\n    Nothing() {}\n    int a;\n    virtual ~Nothing() {}\n};\n\nint main() {\n    Nothing obj;\n    cout << \"Sizeof Nothing: \" << sizeof(Nothing) << endl;\n    cout << \"Address of obj: \" << &obj << endl;\n    cout << \"Address of a: \" << &(obj.a) << endl;\n}\n```\n\n对应的输出：\n\n```bash\nSizeof Nothing: 16\nAddress of obj: 0x16d57e830\nAddress of a: 0x16d57e838\n```\n\n我们可以观察到两个现象：\n\n1. `size`=16说明了对齐现象；\n2. Nothing对象的地址首先是其vptr，然后是其他的成员\n\n# 期末题集\n\n> 补天专用楼\n\n## 程序填空\n\n#### 题目摘录\n\n##### 类模板：Array\n\n```cpp\n#include <iostream>\nusing namespace std;\n\ntemplate <typename T>\nclass Array {\npublic:\n    Array() {\n        data = new T[BLK_SIZE];\n        next = nullptr ;\n     }\n    ~Array() {\n        delete [] data;\n        delete next;\n     }\n    T& operator[](int i);\n    void iterate(void (*f)(T&));\nprivate:\n    T  *data; // data of type T\n    static const int BLK_SIZE=32; // fixed block size\n    Array *next;  // the next array block\n};\n\ntemplate <typename T>\nT& Array<T>::operator[](int i) {\n    if (i < BLK_SIZE) {\n        return data[i];\n     } else {\n        if (next == NULL) {\n            next = new Array<T>;\n         }\n        return (*next)[i-BLK_SIZE];\n    }\n}\n\ntemplate <typename T>\nvoid Array<T>::iterate(void (*f)(T&)) {\n    for (int i = 0; i < BLK_SIZE; i++) {\n        f(data[i]);\n    }\n    if (next != NULL) {\n        next-> iterate(f);\n    }\n}\n\nint main()\n{\n    Array<int> a;\n    int size = 100;\n    cin >> size;\n    for (int i = 0; i < size; i++) {\n        a[i] = i;\n    }\n    a.iterate([](int &x) { cout << x << endl; });\n}\n```\n\n##### 函数模板：内积\n\n此处的 `op`操作之前没有接触过，利用的是标准库提供的二元操作：\n\n```cpp\n#include <functional>\n#include <iostream>\n#include <vector>\n\ntemplate <class InputIt1, class InputIt2, class T, class BinaryOp1, class BinaryOp2>\nT inner_product(InputIt1 first1, InputIt1 last1, InputIt2 first2, T init, BinaryOp1 op1, BinaryOp2 op2)\n{\n  while (first1 != last1)\n  {\n    init = op1 (init, op2(*first1, *first2) );\n    ++first1;\n\t++first2;\n  }\n  return init;\n}\n \nint main()\n{\n  std::vector<int> a{0, 1, 2, 3, 4};\n  std::vector<int> b{5, 4, 2, 3, 1};\n  int r1 = inner_product(a.begin(), a.end(), b.begin(), 0, std::plus<>(), std::multiplies<>());\n  std::cout << \"Inner product of a and b: \" << r1 << '\\n';\n \n  int r2 = inner_product(a.begin(), a.end(), b.begin(), 0, std::plus<>(), std::equal_to<>());\n  std::cout << \"Number of pairwise matches between a and b: \" <<  r2 << '\\n';\n}\n\n```\n\n#### 类模板的填写\n\n- 非内联定义成员函数时，需要在类型与函数名之间加上 `<class-name><T>::` ，不要忘记了其中的 `<T>`\n\n```cpp\ntemplate <typename T>\nT& Array<T>::operator[](int i) {\n    if (i < BLK_SIZE) {\n        return data[i];\n     } else {\n        if (next == NULL) {\n            next = new Array<T>;\n         }\n        return (*next)[i-BLK_SIZE];\n    }\n}\n```\n\n## 长话短说\n\n**注意函数模板的返回类型：**\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\ntemplate<typename T>\nT func(T x, double y) {\n    return x + y;\n}\n\nint main() {\n    cout << func(2.7, 3) << endl;\n    cout << func(3, 2.7) << endl;\n}\n```\n\n此时第二个输出从 5.7 向 int转换，得到的结果是 5\n\n如果是数组空间的管理, 注意 `new` 和  `delete` 都需要对应的 `[]`\n\n如果没有显式定义任何的构造函数，那么编译器会自动创建一个默认构造函数\n\n- 但是如果程序员定义了任何的构造函数（无论是否带有默认参数），编译器就不用自动创建默认构造函数\n\n**upcast**：将一个派生类的指针或者引用赋值给基类的指针或引用\n\n- **动态绑定**：发生upcast之后，通过基类指针或引用调用虚函数时，实际调用的是指针或引用锁指向的对象的虚函数的实现；而不是根据指针或引用的静态类型\n- 如果此时发生了析构，如果基类的析构函数是虚函数，就会先后调用子类和父类的析构函数；如果父类的析构函数不是虚函数，就只会调用父类的析构函数\n  - 为了确保子类的资源可以被释放，总是应当将类的析构函数作为虚析构函数\n\n**析构函数不允许被重载**\n\n- 事实上，析构函数的名称固定，并且没有参数，因此无法通过参数列表来区分不同的韩苏版本，自然也就无法重载\n\nC++标准只规定了整数类型的相对顺序：\n\n```cpp\nsizeof(char) <= sizeof(short) <= sizeof(int) <= sizeof(long) <= sizeof(long long)\n```\n\n- 也就是说, 可能存在 size上 `int = long`的情况\n\nA program is a bunch of objects telling each other how to do **by sending messages**\n\n- 此处的消息在oop中指的就是通过调用对象内部的方法\n\n## 一句话说不清楚的\n\n#### 重载与友元函数\n\n- 完全无法重载的：\n\n  ```cpp\n  . .* :: ?:\n  sizeof typeid\n  static_cast dynamic_cast const_cast\n  reinterpret_cast\n  ```\n- 只能作为成员函数（无法作为友元函数）重载的：\n\n  ```\n  =, (), [], ->, ->*\n  ```\n\n  > 以及单目运算符\n  >\n\n#### 父类的构造函数\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613213521969.png?imageSlim\"/>\n\n构造函数与普通的成员函数不同：\n\n- 如果父类的构造函数被声明为 `private` 的，和普通的成员函数一样——只能被自己的成员和友元函数可以调用\n- 如果父类的构造函数被声明为 `protected` 的，那么只有父类的成员、友元以及**派生类的构造函数**可以调用；\n  - 这意味着此时无法直接在子类除了构造函数之外的地方来直接创建独立的父类对象\n\n#### C++对编程范式的支持\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613214216540.png?imageSlim\"/>\n\n- 过程式编程的特性包括：函数、全局变量、顺序执行、选择（if/else, switch）、循环等\n  - C就是过程式编程的一种，C++继承了C的特性，因此对过程式变成支持良好\n- 声明式编程指的是“做什么”而非如何做，比如SQL、HTML、Swift等。C++和C是命令式语言，关注“如何做”\n\n> 因此答案选C\n\n#### 对象切片\n\n```cpp\nC2* pC2 = new C2();\ncout << endl;\n{\n    C1 a = *pC2; // 发生了对象切片，只保留了基类对象的属性\n    cout << endl;\n}\nC1* pC1 = pC2;\ndelete pC1; // 基类的析构函数是virtual的，所以此处发生多态析构\ncout << endl;\n```\n\n#### 拷贝初始化\n\n用基本类型的值来隐式调用构造函数以创建对象:\n\n```cpp\nclass ResId {\npublic:\n    ResId(int Id);\n};\n\nResId res = 5;\n// 等价于\n// ResId res(5);\n// ResId res = ResId(5);\n```\n\n这个过程分为两步:\n\n1. 用 5 构造一个临时的ResId对象;\n2. 用这个临时对象初始化res\n\n因此我们整体上可以说:\n\n```cpp\nAn object of class ResId will be created by 5\n```\n\n#### 禁止隐式的拷贝初始化\n\n通过声明 `explicit` 来禁止上述通过值隐式调用构造函数:\n\n```cpp\n#include <iostream>\n\nclass C {\npublic:\n    explicit C(int) {\n        std::cout << \"i\" << std::endl;\n    }\n    C(double) {\n        std::cout << \"d\" << std::endl;\n    }\n};\n\nint main() {\n    C c1(7); // 匹配了第一个构造函数\n    C c2 = 7; // 隐式构造, 只能将7转换为double, 然后调用第二个构造函数\n}\n```\n\n**输出:**\n\n```cpp\ni\nd\n```\n\n#### 子类对父类函数的重载与重写\n\n子类如果重载或者重写了父类的同名函数，将无法通过子类的对象访问父类中的这些函数：\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\nclass A {\npublic:\n    void F(int) { cout << \"A::F(int)\" << endl; }\n    void F(double) { cout << \"A::F(double)\" << endl; }\n    void F2(int) { cout << \"A::F2(int)\" << endl; }\n};\n\nclass B : public A {\npublic:\n\t  using A::F;\n    void F(double) { cout << \"B::F(double)\" << endl; }\n};\n\nint main() {\n    B b;\n    b.F(2.0);\n    b.F(2);\n    b.F2(2);\n}\n```\n\n输出：\n\n```cpp\nB::F(double)\nB::F(double)\nA::F2(int)\n```\n\n但是我们可以通过在子类中声明 `using A::F`来重新获得访问权限：\n\n```cpp\nclass B : public A {\npublic:\n    using A::F;\n    void F(double) { cout << \"B::F(double)\" << endl; }\n};\n```\n\n此时的输出为：\n\n```cpp\nB::F(double)\nA::F(int)\nA::F2(int)\n```\n\n#### 默认参数的静态绑定\n\n- 虚函数：运行时多态（动态绑定）\n- 默认参数：编译时确定（静态绑定）\n\n```cpp\n#include <iostream>\n\nstruct A {\n    virtual void foo(int a = 1) {\n        std::cout << \"A\" << '\\n' << a;\n    }\n};\n\nstruct B : A {\n    virtual void foo(int a = 2) {\n        std::cout << \"B\" << '\\n' << a;\n    }\n};\n\nint main() {\n    A *a = new B;\n    a->foo();\n    delete a;\n}\n```\n\n输出：\n\n```cpp\nB\n1\n```\n\n> **为什么cpp要选择让静态参数实现静态绑定？**\n>\n> 为了保持语言的一致性与可预测性，设计者让静态参数作为编译时期自动替换的值，避免在运行过程中动态替换\n\n#### 函数模板与模板特化\n\n模板特化：在函数模板的基础上，如果我们希望对某个类型实现不一样的逻辑，就可以使用～\n\n```cpp\ntemplate<typename T>\nvoid f(const T& value) {\n    std::cout << \"泛型模板: \" << value << std::endl;\n}\n\n// 对int类型采取模板特化\ntemplate<>\nvoid f<int>(const int& value) {\n    std::cout << \"特化版本: int 类型\" << std::endl;\n}\n```\n\n- 因此，模板特化必须首先存在一个主模板\n\n**模板特化的结果无法被重载**\n\n```cpp\n#include <iostream>\n\ntemplate<class T> void f(T &i) { std::cout << 1; }\ntemplate<> void f(const int &i) { std::cout << 2; }\n\nint main() {\n    int i = 24;\n    f(i);\n}\n```\n\n将会输出： `1`\n\n- 如果我们只保留 `void f(const int &i) { std::cout << 2; }`  函数，将会触发类型转换，可以调用\n- 如果我们只去除模板特化中的 `const`， 就可以匹配（输出 `2`）\n\n再比如：\n\n```cpp\ntemplate<typename T>\nvoid add(T, T);\n\nadd(1, 2.2); // ❌ 模板不能推导出统一的 T（int vs double）\n```\n\n#### 常量对象\n\n- 静态函数同样参与函数重载，但是优先匹配非静态函数\n- 静态函数不受 `const`限制——即使没有被声明为 `const`也可以被常量对象调用\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\nclass A {\npublic:\n    static void f(double) {\n        cout << \"f(double)\" << endl;\n    }\n    void f(int) {\n        cout << \"f(int)\" << endl;\n    }\n};\n\nint main() {\n    const A a;\n    a.f(3);\n}\n```\n\n输出：\n\n```cpp\nf(double)\n```\n\n如果存在完全匹配的普通函数，就会直接调用非静态函数：\n\n```cpp\nvoid f(int) const {\n    cout << \"f(int) const\" << endl;\n}\nvoid f(int) {\n    cout << \"f(int)\" << endl;\n```\n\n> 此处的 `void f(int) const` 无法改为 `void f(double) const`, 否则与同名静态函数的参数完全一致\n\n#### 异常的 `catch`顺序\n\n`catch`块的匹配是从上到下的，因此只要遇到第一个匹配的，后续的匹配就会结束\n\n- 子类的对象可以被父类捕获\n- 注意此时的动态绑定——如果父类层级（引用或者指针）在前，内部抛出的是子类的异常对象，捕捉之后调用的函数是子类的对象\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nclass Base {\npublic:\n    virtual const char* what() const {\n        return \"Base::what()\";\n    }\n    virtual ~Base() {}  // 虚析构保证多态安全\n};\n\nclass Derived : public Base {\npublic:\n    const char* what() const override {\n        return \"Derived::what()\";\n    }\n};\n\nint main() {\n    try {\n        throw Derived();  // 抛出子类对象\n    } catch (const Base& e) {  // 用父类引用接收\n        cout << \"由父类层级捕获到异常: \" << e.what() << endl;  // 动态绑定调用子类 what()\n    } catch (const Derived& e) {\n        cout << \"由子类层级捕获到异常: \" << e.what() << endl;\n    } catch (...) {\n        cout << \"捕获到未知异常\" << endl;\n    }\n    return 0;\n}\n```\n\n输出：\n\n```cpp\n由父类层级捕获到异常: Derived::what()\n```\n\n> 如果将 `catch`内部改为普通的对象，将会输出 `由父类层级捕获到异常: Base::what()`\n\n由此可见，我们应该遵循：将子类对象的捕捉放在其父类之前，最后是 `catch(...)`\n","source":"_posts/课程笔记/oop复习笔记.md","raw":"---\ntitle: oop复习\ndate: 2025-06-21 18:55:00\ntags: \n- 编程语言\n- 面向对象编程\n- CS课程\ncategories: \n- 课程笔记\nexcerpt: 复习阶段整理的oop课程笔记，整体分为核心知识点回顾以及针对部分历年卷题目的整理\nthumbnail: https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250509094812819.png?imageSlim\n---\n# 知识点回顾\n\n- `end（）`返回的是容器最后一个位置的**下一个位置**的迭代器\n- `string::npos`是 `size_t`类型的最大值;\n- `to_string`将数字转换成字符串:\n\n  ```cpp\n  int num = 123;\n  string str = to_string(num);\n  ```\n- `stoi`将字符串转换成整数\n- 参数的默认值只能从右到左给出；默认值只能出现在函数的原型或者将定义和声明放在一起，而不能在分离的定义中声明\n- 列表初始化是按成员的**声明顺序**执行的，和成员在列表中的顺序无关。\n\n## 实验操作\n\n#### 截取字符串\n\n用邮箱地址的截取，说明 `rfind`与 `str`等方法的使用：\n\n```cpp\nstring email = \"user.name@example.com\";\n\n// 获取用户名的部分\nint atPos = email.find('@');\nstring username = email.substr(0, atPos); // result: \"user.name\"\n\n// 获取域名部分\nstring domain =  email.substr(atPos + 1); // result: \"example.com\"\n\n// 获取顶级域名(最后一个.之后的部分)\nint lastDotPos = email.rfind('.');\nstring topLevelDomain = email.substr(lastDotPos + 1); // result: \"com\"\n```\n\n## Stream\n\n### 文件流\n\n- 一个简单的输入/输出：流\n\n```cpp\n#include <fstream>  // 需要包含这个头文件\nusing namespace std;\n\n// 文件输出（写入文件）\nofstream outFile(\"output.txt\");\noutFile << \"Hello World\" << endl;\noutFile.close();\n\n// 文件输入（读取文件）\nifstream inFile(\"input.txt\"); \nstring line;\ngetline(inFile, line);\ninFile.close();\n\n```\n\n> `getline()`函数可以显式指定终止符（第三个参数），默认为 `\\n`也就是换行符。并且会将终止符丢弃\n\n#### 位或运算符指定模式\n\n可以使用 `｜`来指定多个模式：\n\n```cpp\n// 组合使用打开模式\nofstream outFile(\"test.txt\", ios::out | ios::app);\n```\n\n### 字符串流\n\n字符串流的作用原理：\n\n- 作用: 将字符串转换成一个类似于输入流的对象;\n- 内部维护了一个字符串和一个位置指针;\n- 每次读取时, 位置指针向后移动, 且自动跳过空白字符.\n\n`stringstream`表示双向字符串流\n\n#### 字符串分词\n\n我们可以将字符串转换成字符串流，来实现字符串的分词：\n\n```cpp\n#include <string>\n#include <iostream>\n#include <sstream>\n\n...\n\nstring name(\"xiao ming\");\n\nistringstream is(name);\nstring token;\nwhile(is >> token)\n\tcout << token << endl;\n```\n\n> 按照空白字符i.e. 空格、`\\t`, `\\n`来分词\n\n#### 字符串的拼接\n\n```cpp\n#include <sstream>\n#include <string>\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    ostringstream oss;\n    string name = \"Alice\";\n    int age = 25;\n  \n    oss << \"Name: \" << name << \", Age: \" << age;\n    string result = oss.str();\n    cout << result << endl;\n}\n\n```\n\n**Output:**\n\n```shell\nName: Alice, Age: 25\n```\n\n> 通过 `.str()`方法可以对象转换为字符串类型, 从而**格式化输出**.\n>\n> `.str(\"\")`方法可以**清空**字符串流:\n\n## STL\n\n#### for-each\n\n以更简单的方式遍历容器内元素:\n\n```cpp\nstd::map<std::string, double> price;\n// Assume we've inserted a lot of name-price pairs\nfor(auto [key, value]: price){\n    std::cout << key << \": \" << value << std::endl;\n}\n```\n\n### map\n\n#### lower_bound\n\n使用～函数可以查找不小于某个值的第一个键：\n\n```cpp\nstd::map<long long, int> tags{{10, 1}, {100, 2}, {1000, 3}, {10000, 4}, {10000000000, 10}};\nstd::map<long long, int>::iterator it = tags.lower_bound(2000);\nstd::cout << it->first << \" \" << it->second << std::endl; // it should be \"10000 4\"\nit++;\nstd::cout << it->first << \" \" << it->second << std::endl; // it should be \"10000000000 10\"\n```\n\n## class\n\n#### include机制\n\n`#include` 语句的作用是将某个文件插入到语句所在位置。根据搜索的顺序，可以划分不同的用法。\n\n* `#include \"xx.h\"`：先搜索当前文件夹，再搜索系统库\n* `#include <xx.h>`：搜索系统库\n* `#include <xx>`：搜索系统库\n\n注意权限的管理是**针对于类**的，同一类的不同对象可以在其成员函数内任意访问别的成员\n\n友元不具有传递性：\n\n- `friend class`+一个类名，可以指定友元类\n- `friend`+一个函数的声明，指定友元函数\n\n生命周期：\n\n- main外的类的对象（i.e. 全局作用域），其构造函数调用的时间早于 `main`函数；其析构函数的调用也在 `main`函数返回之后\n\n#### 静态\n\n静态指的是：\n\n- 空间的静态\n- 受限的访问\n- 静态局部变量在第一次遇到的时候初始化\n- 静态成员变量在 `.h`文件中的声明有 `static`标签，但是在 `.cpp` 中不应该有～标签；否则无法被其他文件中使用。 静态成员函数同理\n\n两种访问静态内容的方式：\n\n```cpp\n<class name>::<static member>\n<object name>.<static member>\n```\n\n#### 引用\n\n一般的字面量都是右值，但是字符串是例外，因为字符串实际上存储在静态内存区\n\n一般来说，左值引用不能绑定右值，但是**常量左值引用可以绑定右值**，因为常量的特性确定了不会对右值进行修改\n\n> 但是如果同时存在右值引用，右值作为参数时还是会优先重载右值引用的版本\n\n**规范：**\n\n- 不允许定义引用的引用；\n- **不允许定义引用的数组**；\n\n  - 引用不是单独存在的对象，无法按照数组存储\n- **不允许定义指向引用的指针**\n\n  - 指针必须指向对象，而引用不是对象\n\n#### 常量\n\n使用 `const`标记声明为常量\n\n常量可以直接让编译器尝试替换：\n\n```cpp\nconst int bufsize = 1 << 10;\nconst int index[] = {1, 2, 3, 4};\nint f[bufsize]; // Ok: f[1024]\nint f[index[3]]; // Error\n```\n\n但是需要特别注意的是：**对象的常量不是编译器常量！ i.e.**\n\n```cpp\nclass Array{\n    const int size = 10;\n    int array[size]; // Error！\n};\n```\n\n> 可以使用枚举或者 `static`来解决上述的问题：\n>\n> ```cpp\n> enum {size = 10};\n> static const int size = 10;\n> ```\n\n常量和指针；\n\n- `const *p`表示不能通过指针改变指向的对象内容；\n- `* const p`表示不能改变指针的指向位置\n\n> 不需要关注类型与 `*`的位置关系\n\n**字符指针和字符数组；**\n\n```cpp\nchar *sp = \"Hello World!\"; // 字符指针可以移动，不能修改\nchar array[] = \"Hello World!\"; // 字符数组不能移动，可以修改\n\narray[0] = 'h' ; // 合法\narray = 'hello'; // 非法！\n\nsp = 'world'; // 合法\n```\n\n> 实际上，`char *sp`就是 `const char *sp`，所以不能改变字符串的值，但是可以改变sp的指向\n>\n> 而字符串数组的数组名是栈中的固定地址，无法移动，但是可以修改\n\n注意区分**常量函数**和返回值的常量：\n\n```cpp\nint getName(int id) const; // 常量函数，无法改变成员变量，常量对象只能调用自己的常量成员函数（与静态成员函数）\n\nconst int getAge(int id); // 限制了返回值是一个常量\n```\n\n#### delete\n\n注意 `[]`搭配的使用：\n\n```cpp\nint *p = new int[10];\n...\ndelete [] p;\n```\n\n## Inside class\n\n#### 代理构造\n\n可以在一个构造函数中调用另一个构造函数，减少代码的重复：\n\n```cpp\nclass sorted{\npublic:\n    sorted(){}\n    sorted(int _x){\n        x = _x > 0? _x: 10;\n    }\n    sorted(int _x, int _z): sorted(_x){\n        z = _z > 0 && _z < x? _z: 1;\n    }\n    sorted(int _x, int _y, int _z): sorted(_x, _z){\n        y = _y < x && _y > z? _y: 5;\n    }\nprivate:\n    int x, y, z;\n};\n```\n\n#### 内联函数\n\n通过 `inline`关键字，**建议编译器将函数调用处替换为函数体代码本身** ，从而避免函数调用开销。\n\n> 是否作为内联函数，实际上由编译器所决定\n\n内联函数必须提供完整的函数定义\n\n> i.e. 内联函数的声明必需伴随实现（在同一个头文件中即可，二者可以分离）\n\n## 组合与继承\n\n### 组合\n\n组合的对象分为完全包含和引用包含，什么时候使用引用包含呢？\n\n- 逻辑上子对象应该在对象的外部；\n- 子对象的大小不确定\n- 子对象的空间应该在运行时被分配或者链接\n\n#### 命名空间\n\n```cpp\nnamespace sp1{\n    void f();\n    void g();\n}\nnamespace sp2{\n    void f();\n    void g();\n}// No terminating end colon!\nnamespace alias = sp1;\nvoid f();\nvoid g();\nint main(){\n    sp1::f();\n    sp2::f();\n    ::f();\n    f();// the same as ::f()\n    alias::f();// the same as sp1::f()\n    return 0;\n}\n```\n\n> - 可以为命名空间声明别名；\n> - 命名空间的末尾没有分号 `；`\n\n#### using\n\n使用 `using`可以在当前的作用域引入其他的命名空间的成员、函数：\n\n- `using <namespace>::<member>` 引入部分的成员\n- `using namespace <namespace>` 引入该命名空间的全部成员\n\ne.g.\n\n```cpp\nusing std::cin; // 只引入 cin\nusing namespace std; // 引入std的所有成员\n```\n\n> 如果引入同名的对象或者函数，将会导致编译器链接失败\n\n### 继承\n\n父类的析构函数更晚调用\n\n父类的**私有成员变量在子类的对象中依旧存在**，但是不可直接访问（只能通过父类方法来间接访问）\n\n父类的受保护成员可以被子类访问，但是无法被外界访问\n\n#### 非公开的继承\n\n```cpp\nclass B: protected A{\n    ...  \n};\nclass B: private A{//default\n    ...\n};\n```\n\n> 如果定义 `protected` 继承，只有子类及其派生类可以调用父类方法，外部是不可以的。\n>\n> 如果定义 `private` 继承，只有子类本身可以调用父类方法。\n\n#### 静态成员的继承\n\n父类的静态成员不会在子类中具有自己的副本，**子类和父类共享一个静态成员！**\n\n以下介绍using相关的几个问题：\n\n#### name hiding\n\n如果子类重载了父类的函数，父类的同名函数将会失效，无法直接调用，需要使用 `using`来声明：\n\ne.g.\n\n```cpp\nclass Base{\n  public: \n  \tvoid f(double){\n      cout << \"double\\n\" << endl;\n    }\n};\n\nclass Derived : Base{\n  public:\n  \tusing Base::f; // 将基类中的私有函数本地使用\n  \tvoid f(int){\n      cout << \"int\\n\"<<endl;\n    }\n};\n```\n\n#### 默认参数的重载传递\n\n在cpp中, 默认参数值绑定在函数声明的作用域上, 而不是函数本身! 这是为了避免 **多重继承时参数值产生冲突或二义性** 。\n\n> 默认参数是静态绑定（编译期行为），它必须清楚地知道取哪个作用域的值.\n\ne.g.\n\n```cpp\nclass A {\npublic:\n    void f(int a = 3, double b = 2.0);\n};\n\nclass B : public A {\npublic:\n    using A::f;         // ✅ 此时默认参数仍可见\n    void f(int a);      // ❌ 重载后，这个版本没有默认参数\n};\n```\n\n#### 子类重写父类函数\n\n如果子类直接重写了父类的函数，但是父类中的同名函数本身具有重载的版本，那么也需要使用 `using`来声明：\n\n```cpp\n#include <iostream>\n\nclass Base\n{\npublic:\n    // 基类中的重载函数\n    void display(int x)\n    {\n        std::cout << \"Base display(int): \" << x << std::endl;\n    }\n\n    void display(double x)\n    {\n        std::cout << \"Base display(double): \" << x << std::endl;\n    }\n};\n\nclass Derived : public Base\n{\npublic:\n    // 子类重新定义了基类的 display(int)\n    void display(int x)\n    {\n        std::cout << \"Derived display(int): \" << x << std::endl;\n    }\n    using Base::display;\n};\n\nint main()\n{\n    Derived d;\n    d.display(5); // 调用 Derived 的 display(int)\n\n    d.Base::display(5.5); // 或者d.display(5.5);\n    return 0;\n}\n\n```\n\n## 多态\n\n- 我们应当将所有类的析构函数都设置为**虚析构函数**，因为每个类都有成为父类的可能\n\n```cpp\nclass Base {\npublic:\n    virtual ~Base() {\n        cout << \"Base Destructor\" << endl;\n    }\n};\n\nclass Derived : public Base {\npublic:\n    ~Derived() {\n        cout << \"Derived Destructor\" << endl;\n    }\n};\n\n```\n\n> 子类和父类的析构函数先后调用\n\n- `vptr`在构造的时候确定，虚继承的子类在调用父类的构造函数时，默认**调用父类的成员函数**\n\n  ```cpp\n  class A {\n  public:\n      A() {\n          f();\n      }\n      virtual void f() {\n          cout << \"A::f()\";\n      }\n  };\n  class B : public A {\n  public:\n      B() {\n          f();\n      }\n      void f() {\n          cout << \"B::f()\";\n      }\n  };\n  B temp;\n  ```\n\n#### 虚函数的规范\n\n注意 `virtual`与 `override`的搭配：\n\n```cpp\nclass Animal {\npublic:\n    virtual void speak() {\n        cout << \"Animal speaks\" << endl;\n    }\n};\n\nclass Dog : public Animal {\npublic:\n    void speak() override {\n        cout << \"Dog barks\" << endl;\n    }\n};\n```\n\n> override是为了让编译器检查该函数在父类中是虚函数，但不是必须的\n\n- vtable是类级别的, 所有该类的对象共享一个vtable;\n- vptr是对象级别的, 隐含于各个对象当中.并且在内存的开头\n\n#### 抽象类\n\n抽象类：至少包含一个**纯虚函数**的类是～\n\n```cpp\nclass Shape {\npublic:\n    // 纯虚函数，子类必须实现\n    virtual void draw() = 0;\n};\n```\n\n> 纯虚函数类似于协议，要求子类必须实现\n>\n> 只有完成了所有纯虚函数定义的、抽象类的子类，才能够实例化\n\n**接口类 Interface Class：**\n\n- 比抽象类更加抽象）\n- 只定义接口, 不提供实现的抽象类\n- 所有的**成员函数都是纯虚函数**;\n- 一般不包含任何数据成员.\n\n#### 菱形继承与虚继承\n\n在继承时添加 `virtual` 关键字实现,子类中不存在父类的对象，而是保有父类的指针。\n\n```cpp\nclass A\n{\npublic:\n    int value;\n    void ptr()\n    {\n        cout << \"value: \" << value << endl;\n    }\n};\nclass B : virtual public A {};\nclass C : virtual public A {};\nclass D : public B, public C {};\n```\n\n上述的虚继承确保了B，C只会拥有A的一份value，从而避免了从D的对象访问 `value`时存在的**二义性**\n\n> 并非所有的菱形继承都会因为二义性的访问而导致访问的问题！\n\nTODO：检查什么时候没有二义性？\n\n由于虚继承带来的是“共享”的基类对象，所以：\n\n- 虚基类的构造 **必须由最底层派生类负责**\n- 派生类的构造函数中要**显式初始化**虚基类\n\n## Copy & Move\n\n- 拷贝构造函数的签名：`T::T(const T&)`\n- 默认的拷贝构造函数的指针类型成员是直接赋值的，也就是共享同一地址\n  - 因此我们需要显式定义类的拷贝构造函数，避免依赖默认的～\n  - 默认拷贝构造中，成员对象也会调用自己的拷贝构造函数\n\n#### 拷贝构造函数的调用时机\n\n* **按值传递参数时**：当对象作为参数按值传递给函数时\n  ```cpp\n  void func(MyClass obj); // 调用时会触发拷贝构造\n  ```\n* **对象初始化时**：\n  ```cpp\n  MyClass a;\n  MyClass b = a;    // 初始化，调用拷贝构造函数\n  MyClass c(a);     // 初始化，调用拷贝构造函数\n  ```\n* **函数返回对象时**：\n  ```cpp\n  MyClass func() {\n      MyClass obj;\n      return obj;   // 可能触发拷贝构造（取决于编译器优化）\n  }\n  ```\n\n一个简单的例子：\n\n```cpp\nStringHolder(const StringHolder &other)\n    {\n        if (other.data)\n        {\n            data = new char[strlen(other.data) + 1];\n            strcpy(data, other.data);\n            std::cout << \"深拷贝构造函数: 为\\\"\" << data << \"\\\"分配新内存\" << std::endl;\n        }\n        else\n        {\n            data = nullptr;\n            std::cout << \"深拷贝构造函数: 复制空字符串\" << std::endl;\n        }\n    }\n```\n\n#### 右值引用\n\n两种可以同时输入左值和右值引用作为参数的方法:\n\n- **重载**\n\n  ```cpp\n  // 重载函数，分别处理左值和右值\n  void process(int& x) {\n      std::cout << \"重载函数 - 处理左值: \" << x << std::endl;\n  }\n\n  void process(int&& x) {\n      std::cout << \"重载函数 - 处理右值: \" << x << std::endl;\n  }\n  ```\n- `const int& x `\n\n  ```cpp\n  // 接受const左值引用的函数（可以接受左值和右值）\n  void processAny(const int& x) {\n      std::cout << \"处理任意值: \" << x << std::endl;\n  }\n  ```\n\n#### 移动构造函数\n\n- 签名：`T::T(T&& other)`, 也就是**将右值引用作为参数的构造函数**\n- 用于\"窃取\"即将销毁的对象的资源，避免不必要的深拷贝\n- 通常将源对象的指针成员置为 `nullptr`，防止资源被错误释放. 其他成员设置为零值\n\n一个简单的例子：\n\n```cpp\nclass DynamicArray\n{\nprivate:\n    int *m_array;\n    size_t m_size;\n...\n}\n\n// 移动构造函数\nDynamicArray(DynamicArray &&other) noexcept : m_array(other.m_array), m_size(other.m_size)\n    {\n        // \"窃取\"other的资源，并将other置为安全状态\n        other.m_array = nullptr;\n        other.m_size = 0;\n        std::cout << \"移动构造函数: 移动大小为\" << m_size << \"的数组\" << std::endl;\n    }\n```\n\n> `noexcept`标记表示不会抛出异常；\n>\n> 标准库容器在进行元素移动时会**优先选择不会抛异常的移动构造函数**，如果不存在～会退而求其次选择拷贝构造函数（更慢）。\n\n#### move\n\n如果对象不是右值引用，我们可以使用 `std::move`来显式调用移动构造函数：\n\n```cpp\nvector<int> v1{1, 2, 3, 4};\nvector<int> v2 = v1; // v2 是 v1 的副本\nvector<int> v3 = std::move(v1); // 调用移动构造函数\n```\n\n### 初始化的方式\n\nC++11提供了多种初始化对象的方式：\n\n- **小括号初始化**：`MyClass obj(arg1, arg2);`\n- **等号初始化**：`MyClass obj = value;`\n- **大括号初始化**（统一初始化）：`MyClass obj{arg1, arg2};`\n- **列表初始化**：\n\n  ```cpp\n  int arr[] = {1, 2, 3};\n  MyClass* ptr = new MyClass{arg1, arg2};\n  ```\n\n#### 基本类型的初始化\n\n```cpp\n// 基本类型的初始化方式\nint a = 10;             // 等号初始化\nint b(20);              // 小括号初始化\nint c{30};              // 大括号初始化（C++11）\nint d = {40};           // 等号+大括号初始化（C++11）\nint arr1[] = {1, 2, 3}; // 数组初始化\nint arr2[]{4, 5, 6};    // 数组大括号初始化（C++11）\n```\n\n#### 对象的初始化\n\n```cpp\n// 对象的初始化方式\nPerson p1(\"张三\", 25);          // 小括号初始化\nPerson p2 = Person(\"李四\", 30); // 等号+临时对象初始化\nPerson p3{\"王五\", 35};          // 大括号初始化（C++11）\nPerson p4 = {\"赵六\", 40};       // 等号+大括号初始化（C++11）\n```\n\n- 动态分配对象的初始化\n\n  ```cpp\n  // 动态分配对象的初始化方式\n  Person *pp1 = new Person(\"动态张三\", 25); // 传统new\n  Person *pp2 = new Person{\"动态李四\", 30}; // 大括号初始化（C++11）\n  ```\n\n#### 统一初始化\n\n对于简单的类或者容器内部的类，我们可以不写构造函数，而是用花括号进行 **统一初始化** 。\n\n如果类没有构造函数，参数应按照成员的声明顺序给出；如果有，参数应按照构造函数的参数顺序给出。\n\n```cpp\nclass Test{\n    int a, b;\n};\nTest t{0, 0};\nTest *pt = new Test{1, 2};\nint *a = new int[3]{1, 2, 0};\nvector<string> vec = { \"first\", \"second\", \"third\"};\n```\n\n## 操作符重载\n\n运算符重载本质上是一个以 `operator`关键字为前缀，后跟运算符的特殊函数\n\n- 赋值运算符首先要**检查是否为自赋值**\n- 必须在**类或者枚举类**上定义\n- 类内成员函数的重载将第一个参数作为隐式的 `this`传递，操作符左端的类型决定了使用的操作符的类型\n  - `3+a1`非法 if `a1`无法转换为 `int`\n\n#### 成员函数与自由函数\n\n* `=, (), [], ->, ->*` 必须是成员函数\n* 单目运算符应该声明为成员；\n* 二目运算符应该声明为自由函数\n\n#### 无法重载的运算符\n\n```cpp\n. .* :: ?:\nsizeof typeid\nstatic_cast dynamic_cast const_cast\nreinterpret_cast\n```\n\n#### 参数传递与返回类型\n\n- `+ - * / % ^ & | ~` 返回新的对象\n  - `const Tp operator X(const Tp & l, const Tp & r);`\n- 布尔运算，返回 `bool`类型\n- `[ ]` 返回可以修改的引用，类似于数组的赋值\n  - `Tp & operator X(int index);`\n- `= += *= /= <<= >>=` 返回可以修改的引用，确保链式操作\n  - `Tp & operator X(const Tp &l, const Tp &r);`\n\n前缀自增和后缀自增需要区分，在后缀自增的参数列表中添加 `int`即可\n\n```cpp\n// 前缀自增返回引用\nconst Integer& Integer::operator++(){\n    *this += 1;\n    return *this;\n}\n\n// 后缀自增返回对象\nconst Integer Integer::operator++(int){// just leave the parameter unnamed\n    Integer old(*this);\n    ++(*this);\n    return old;\n}\n```\n\n#### 比较运算符\n\n考虑实现基础的 `==` 与 `<` ，其余的比较重载在上述的基础上通过 `!` 运算实现，便于直接迁移\n\n#### 流运算\n\n```cpp\nistream& operator>>(istream& is, _Tp& obj){\n    // read obj from is\n    return is;\n}\nostream& operator<<(ostream& os, const _Tp& obj){\n    // output obj in os\n    return os;\n}\nostream& tab(ostream& os){// manipulator\n    return os << '\\t';\n}\n```\n\n- 输出流运算符的第一个参数不能是 `const`，因为输出会修改流\n- 输入流运算符的第二个参数不能是 `const`，因为需要修改对象\n- 通常需要声明为友元以访问私有成员\n\n#### 赋值运算符\n\n```cpp\n_Tp& _Tp::operator=(const _Tp& rhs){\n    if(this != &rhs){\n        size = rhs.size;\n        delete[] p;\n        p = new int[size];\n        for(int i = 0 ; i < size; ++i)\n            p[i] = rhs.p[i];\n    }\n    return *this;\n}\n```\n\n> 首先检查是否为自赋值\n\n如果不希望进行赋值运算，将上述的 `=` 重载声明为 `private`，并且无需实现。\n\n> 这是因为 `a = b;  // 实际等价于：a.operator=(b)`， 发起调用的是当前代码片段所在的作用域，如果不是类内函数，那么就是非法的\n\n#### 隐式转换\n\n**1. 构造函数转换**：从其他类型到当前类型\n\n```cpp\nclass PathName {\n    string name;\npublic:\n    PathName(const string& s) : name(s) {}  // string到PathName的转换\n};\n\nstring abc(\"abc\");\nPathName xyz = abc;  // 隐式转换：abc => PathName\n\n```\n\n2.**转换运算符**：从当前类型到其他类型\n\n> `operator <typename> {}`关键字\n\n```cpp\nclass Rational {\npublic:\n    operator double() const {  // Rational到double的转换\n        return numerator_ / (double)denominator_;\n    }\n};\n\nRational r(1, 3);\ndouble d = r;  // 隐式转换：r => double\n\n```\n\n可以使用 `explicit`关键字要求显式转换：\n\n```cpp\nexplicit operator double() const;\ndouble d = (double)r;  // 必须显式转换\n```\n\n#### 显式转换\n\n- 构造函数的显式转换\n\n```cpp\n// 如果想要强制显式转换，应该这样声明：\nexplicit Rational(double value) {\n    const int PRECISION = 10000;\n    numerator = static_cast<int>(value * PRECISION);\n    denominator = PRECISION;\n    simplify();\n}\n\nRational r1 = 3.14;        // 错误：不允许隐式转换\nRational r2(2.5);          // 正确：显式构造\nRational r3 = Rational(3.14); // 正确：显式转换\n\n```\n\n- 类型转换运算符的显式转换\n\n```cpp\nexplicit operator double() const;\ndouble d = (double)r;  // 显式转换 or double(r)\n\ndouble d2 = static_cast<double>(r2);  // 显式转换\n\n```\n\n#### 转换优先级\n\n如果同时存在两种方向的转换，将优先采取**构造函数**的转换方式\n\n> 可以通过声明其中的一种情况必须显式调用来并存；比如必须显式调用构造函数的转换，那么下面的情况将会调用构造函数将A转换到B的对象：\n>\n> ```cpp\n> class B{\n> public:\n>     B();\n>     explicit B(A); // 从A到B的显式构造函数\n> };\n>\n> void functionTakingB(B thing){\n>     cout << \"OK\" << std::endl;\n> }\n>\n> functionTakingB(static_cast<B>(a));\n> ```\n\n#### 转换运算符\n\nC++ 中有四个**转换运算符** Cast Operator：\n\n* `static_cast`：\n\n  * 基本类型的转换\n  * 子类向父类的指针/引用的转换\n  * `void`与其他类型指针的转换\n* `dynamic_cast`：**down-cast**，安全\n\n  * 父类向子类的指针/引用的转换，不一定总是安全（要求原本指向的对象就是子类对象）\n  * 要求基类中**至少存在一个虚函数**（因此具有 `vptr`，从而可以通过不同类的 `vptr`进行类的区分）\n  * ```cpp\n    Base* basePtr = new Derived();\n    Derived* derivedPtr = dynamic_cast<Derived*>(basePtr);\n\n    if(derivedPtr){\n    ...\n    }\n\n    ```\n* `const_cast`：修改 `const` 属性\n\n  * ```cpp\n    const int a = 10;\n    int *b = const_cast<int*>(&a);\n\n    *b = 20; // 转换之后可以修改value\n    ```\n\n    > 但是更加常见的是将非const类型的属性修改为 `const`；原本是常量类型的属性可能被编译器存储在只读内存区域，如果编译器没有在 `const_cast`的转换中进行优化，可能导致运行问题？\n    >\n* `reinterpret_cast`：忽略类型检查，强制转换，低安全性\n\n## Template\n\n一个模板完全都是声明，应该只有 `.h`，而不含有 `.cpp`\n\n> 必须**都放在头文件的实现**包含:\n>\n> - 函数模板;\n> - inline函数\n> - 带有default参数的声明.\n> - 类模板的成员函数\n\n### 函数模板\n\n#### 参数匹配\n\n```cpp\n#include <algorithm>\n#include <iostream>\n \nint add(int x, int y){\n    return x + y;\n}\n \ntemplate<typename _Tp>\n_Tp add(_Tp x, _Tp y){\n    return x + y;\n}\n \nsigned main(int argc, char **argv){\n    std::cout << add(1, 2) << std::endl; \n    std::cout << add(1.1, 2.2) << std::endl;\n    return 0;\n}\n\n/* T add(int, int) 和 T double add<double>(double, double) */\n```\n\n1. 如果有原生的完全匹配的函数，优先使用原生函数，例如 `add(1, 2)` 调用 `add(int, int)`。\n2. 其次，如果有模板能完全匹配的函数，使用模板生成函数，例如 `add(1.1, 2.2)` 调用 `add<double>(dobule, double)`。\n3. 再其次，尝试使用类型转换来匹配其他原生函数。但是，类型转换不能用于匹配模板，例如 `add(1, 2.2)`。\n\n### 类模板\n\n简单的示例：\n\n```cpp\ntemplate<typename T>\nclass Vector{\npublic:\n    Vector(int s):size(s){\n        content = new T[size];\n    }\n    virtual ~Vector(){\n        delete[] content;\n    }\n    T& operator[](int p){\n        return content[p];\n    }\nprivate:\n    T* content;\n    int size;\n};\n```\n\n## Exception\n\n**异常的类型如何定义？**\n\n> ```cpp\n> // 异常对象的定义\n> class DivisionError {\n> private:\n>     string message;\n> public:\n>     DivisionError(const string& msg) : message(msg) {\n>         cout << \"创建DivisionError异常对象\" << endl;\n>     }\n>   \n>     ~DivisionError() {\n>         cout << \"销毁DivisionError异常对象\" << endl;\n>     }\n>   \n>     string what() const {\n>         return message;\n>     }\n> };\n>\n> // 内层函数\n> double divide(double a, double b) {\n>     cout << \"进入divide函数\" << endl;\n>     Resource r(\"divide函数的局部资源\");\n>   \n>     if (b == 0) {\n>         throw DivisionError(\"除数不能为零\");\n>     }\n>   \n>     cout << \"divide函数正常返回\" << endl;\n>     return a / b;\n> }\n> ```\n\n执行流程：\n\n1. 通过 `throw` 创建对应的**异常对象**\n2. 将异常所在的内层函数的**资源释放**；\n3. 再被外层的 `catch` 所**捕获**\n\n在 `catch`块中可以通过 `throw;`再次抛出当前的异常\n\n自定义异常类时，通常应该继承自 `std::exception`或其派生类\n\n#### 异常规范\n\n在函数原型中声明可能返回的异常类型：\n\n```cpp\nvoid print(Document& p) throw(PrintOffLine, BadDocument);\nvoid goodguy() throw();// throw no exceptions, until C++11\nvoid alloc() throw(...);// can throw any exception\nvoid abc() noexcept;// throw no exceptions, since C++11\n```\n\n> 如果函数返回了规范之外的异常，将调用 `std::unexpected()`处理（默认调用 `std::terminate()`终止程序）\n\n`noexcept`也可以作为运算符使用，检查表达式是否声明为不抛出异常：\n\n```cpp\nbool willNotThrow = noexcept(func());  // 检查func()是否声明为noexcept\n```\n\n#### 层次结构\n\n```cpp\nstd::exception\n├── std::logic_error\n│   ├── std::invalid_argument\n│   ├── std::domain_error\n│   ├── std::length_error\n│   ├── std::out_of_range\n│   └── std::future_error\n├── std::runtime_error\n│   ├── std::range_error\n│   ├── std::overflow_error\n│   ├── std::underflow_error\n│   └── std::system_error\n├── std::bad_alloc\n├── std::bad_cast\n├── std::bad_typeid\n├── std::bad_exception\n└── std::bad_function_call\n```\n\n- 数组的 `.at`可以自动抛出数组访问异常的 `range_error`；\n- 容器的 `resize`方法可以自动抛出长度异常 `length_error`；\n\n#### 构造与析构\n\n析构函数应该避免抛出异常，否则会导致系统调用 `std::terminate()`\n\n由于在 `try-catch`中，如果发生了异常，本地变量将自动调用自己的析构函数，此时如果存在 `new`申请的空间资源，将导致其无法指向正确的地址\n\n因此，我们采取两阶段的构造确保构造函数不会抛出异常：\n\n1. 在构造函数内对基本变量赋值\n2. 在 `init()`函数中显式申请内存空间\n\n```cpp\nclass Widget {\npublic:\n    Widget() : initialized(false) {\n        // 只做最小的初始化： 不存在抛出异常的可能\n    }\n  \n    bool initialize() {\n        try {\n            // 执行可能失败的初始化操作\n            initialized = true;\n            return true;\n        } catch (...) {\n            return false;\n        }\n    }\n  \n    void use() {\n        if (!initialized) {\n            throw std::runtime_error(\"对象未初始化\");\n        }\n        // 使用对象\n    }\n  \nprivate:\n    bool initialized;\n};\n\n```\n\n---\n\n# 知识蒸馏\n\n> 将个人印象比较浅的部分重新摘了一遍\n\n- 字符指针与字符数组\n\n```cpp\nchar *sp = \"Hello World!\"; // 字符指针可以移动，不能修改\nchar array[] = \"Hello World!\"; // 字符数组不能移动，可以修改\n\narray[0] = 'h' ; // 合法\narray = 'hello'; // 非法！\n\nsp = 'world'; // 合法\n```\n\n> 实际上，`char *sp`就是 `const char *sp`，所以不能改变字符串的值，但是可以改变sp的指向\n>\n> 而字符串数组的数组名是栈中的固定地址，无法移动，但是可以修改\n\n- 不同文件之间的全局变量, 初始化的前后顺序由链接器随机决定. 此时需要确保它们**之间没有初始化的依赖.**\n- 返回类型的常量\n\n  ```cpp\n  const int* f();\n  // 只能将函数的返回值赋值给一个 const int*\n  ```\n\n#### vptr的大小\n\n如果父类具有 `virtual`也就是虚函数，子类继承之后也会得到一个虚函数表，对应有一个**vptr**指针指向自己的虚函数表：\n\n- 在64位的机器下，一个vptr指针的大小是**8字节**\n- 普通函数不占据类的大小，因为函数地址存放在全局空间\n- 如果类内没有成员变量，也没有虚函数，那么大小就是**1**（告诉编译器这个类的存在）\n\n#### 编译器的对齐\n\n* C++ 编译器会对类进行**按最大对齐的成员**进行对齐\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nclass Nothing {\npublic:\n    Nothing() {}\n    int a;\n    virtual ~Nothing() {}\n};\n\nint main() {\n    Nothing obj;\n    cout << \"Sizeof Nothing: \" << sizeof(Nothing) << endl;\n    cout << \"Address of obj: \" << &obj << endl;\n    cout << \"Address of a: \" << &(obj.a) << endl;\n}\n```\n\n对应的输出：\n\n```bash\nSizeof Nothing: 16\nAddress of obj: 0x16d57e830\nAddress of a: 0x16d57e838\n```\n\n我们可以观察到两个现象：\n\n1. `size`=16说明了对齐现象；\n2. Nothing对象的地址首先是其vptr，然后是其他的成员\n\n# 期末题集\n\n> 补天专用楼\n\n## 程序填空\n\n#### 题目摘录\n\n##### 类模板：Array\n\n```cpp\n#include <iostream>\nusing namespace std;\n\ntemplate <typename T>\nclass Array {\npublic:\n    Array() {\n        data = new T[BLK_SIZE];\n        next = nullptr ;\n     }\n    ~Array() {\n        delete [] data;\n        delete next;\n     }\n    T& operator[](int i);\n    void iterate(void (*f)(T&));\nprivate:\n    T  *data; // data of type T\n    static const int BLK_SIZE=32; // fixed block size\n    Array *next;  // the next array block\n};\n\ntemplate <typename T>\nT& Array<T>::operator[](int i) {\n    if (i < BLK_SIZE) {\n        return data[i];\n     } else {\n        if (next == NULL) {\n            next = new Array<T>;\n         }\n        return (*next)[i-BLK_SIZE];\n    }\n}\n\ntemplate <typename T>\nvoid Array<T>::iterate(void (*f)(T&)) {\n    for (int i = 0; i < BLK_SIZE; i++) {\n        f(data[i]);\n    }\n    if (next != NULL) {\n        next-> iterate(f);\n    }\n}\n\nint main()\n{\n    Array<int> a;\n    int size = 100;\n    cin >> size;\n    for (int i = 0; i < size; i++) {\n        a[i] = i;\n    }\n    a.iterate([](int &x) { cout << x << endl; });\n}\n```\n\n##### 函数模板：内积\n\n此处的 `op`操作之前没有接触过，利用的是标准库提供的二元操作：\n\n```cpp\n#include <functional>\n#include <iostream>\n#include <vector>\n\ntemplate <class InputIt1, class InputIt2, class T, class BinaryOp1, class BinaryOp2>\nT inner_product(InputIt1 first1, InputIt1 last1, InputIt2 first2, T init, BinaryOp1 op1, BinaryOp2 op2)\n{\n  while (first1 != last1)\n  {\n    init = op1 (init, op2(*first1, *first2) );\n    ++first1;\n\t++first2;\n  }\n  return init;\n}\n \nint main()\n{\n  std::vector<int> a{0, 1, 2, 3, 4};\n  std::vector<int> b{5, 4, 2, 3, 1};\n  int r1 = inner_product(a.begin(), a.end(), b.begin(), 0, std::plus<>(), std::multiplies<>());\n  std::cout << \"Inner product of a and b: \" << r1 << '\\n';\n \n  int r2 = inner_product(a.begin(), a.end(), b.begin(), 0, std::plus<>(), std::equal_to<>());\n  std::cout << \"Number of pairwise matches between a and b: \" <<  r2 << '\\n';\n}\n\n```\n\n#### 类模板的填写\n\n- 非内联定义成员函数时，需要在类型与函数名之间加上 `<class-name><T>::` ，不要忘记了其中的 `<T>`\n\n```cpp\ntemplate <typename T>\nT& Array<T>::operator[](int i) {\n    if (i < BLK_SIZE) {\n        return data[i];\n     } else {\n        if (next == NULL) {\n            next = new Array<T>;\n         }\n        return (*next)[i-BLK_SIZE];\n    }\n}\n```\n\n## 长话短说\n\n**注意函数模板的返回类型：**\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\ntemplate<typename T>\nT func(T x, double y) {\n    return x + y;\n}\n\nint main() {\n    cout << func(2.7, 3) << endl;\n    cout << func(3, 2.7) << endl;\n}\n```\n\n此时第二个输出从 5.7 向 int转换，得到的结果是 5\n\n如果是数组空间的管理, 注意 `new` 和  `delete` 都需要对应的 `[]`\n\n如果没有显式定义任何的构造函数，那么编译器会自动创建一个默认构造函数\n\n- 但是如果程序员定义了任何的构造函数（无论是否带有默认参数），编译器就不用自动创建默认构造函数\n\n**upcast**：将一个派生类的指针或者引用赋值给基类的指针或引用\n\n- **动态绑定**：发生upcast之后，通过基类指针或引用调用虚函数时，实际调用的是指针或引用锁指向的对象的虚函数的实现；而不是根据指针或引用的静态类型\n- 如果此时发生了析构，如果基类的析构函数是虚函数，就会先后调用子类和父类的析构函数；如果父类的析构函数不是虚函数，就只会调用父类的析构函数\n  - 为了确保子类的资源可以被释放，总是应当将类的析构函数作为虚析构函数\n\n**析构函数不允许被重载**\n\n- 事实上，析构函数的名称固定，并且没有参数，因此无法通过参数列表来区分不同的韩苏版本，自然也就无法重载\n\nC++标准只规定了整数类型的相对顺序：\n\n```cpp\nsizeof(char) <= sizeof(short) <= sizeof(int) <= sizeof(long) <= sizeof(long long)\n```\n\n- 也就是说, 可能存在 size上 `int = long`的情况\n\nA program is a bunch of objects telling each other how to do **by sending messages**\n\n- 此处的消息在oop中指的就是通过调用对象内部的方法\n\n## 一句话说不清楚的\n\n#### 重载与友元函数\n\n- 完全无法重载的：\n\n  ```cpp\n  . .* :: ?:\n  sizeof typeid\n  static_cast dynamic_cast const_cast\n  reinterpret_cast\n  ```\n- 只能作为成员函数（无法作为友元函数）重载的：\n\n  ```\n  =, (), [], ->, ->*\n  ```\n\n  > 以及单目运算符\n  >\n\n#### 父类的构造函数\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613213521969.png?imageSlim\"/>\n\n构造函数与普通的成员函数不同：\n\n- 如果父类的构造函数被声明为 `private` 的，和普通的成员函数一样——只能被自己的成员和友元函数可以调用\n- 如果父类的构造函数被声明为 `protected` 的，那么只有父类的成员、友元以及**派生类的构造函数**可以调用；\n  - 这意味着此时无法直接在子类除了构造函数之外的地方来直接创建独立的父类对象\n\n#### C++对编程范式的支持\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613214216540.png?imageSlim\"/>\n\n- 过程式编程的特性包括：函数、全局变量、顺序执行、选择（if/else, switch）、循环等\n  - C就是过程式编程的一种，C++继承了C的特性，因此对过程式变成支持良好\n- 声明式编程指的是“做什么”而非如何做，比如SQL、HTML、Swift等。C++和C是命令式语言，关注“如何做”\n\n> 因此答案选C\n\n#### 对象切片\n\n```cpp\nC2* pC2 = new C2();\ncout << endl;\n{\n    C1 a = *pC2; // 发生了对象切片，只保留了基类对象的属性\n    cout << endl;\n}\nC1* pC1 = pC2;\ndelete pC1; // 基类的析构函数是virtual的，所以此处发生多态析构\ncout << endl;\n```\n\n#### 拷贝初始化\n\n用基本类型的值来隐式调用构造函数以创建对象:\n\n```cpp\nclass ResId {\npublic:\n    ResId(int Id);\n};\n\nResId res = 5;\n// 等价于\n// ResId res(5);\n// ResId res = ResId(5);\n```\n\n这个过程分为两步:\n\n1. 用 5 构造一个临时的ResId对象;\n2. 用这个临时对象初始化res\n\n因此我们整体上可以说:\n\n```cpp\nAn object of class ResId will be created by 5\n```\n\n#### 禁止隐式的拷贝初始化\n\n通过声明 `explicit` 来禁止上述通过值隐式调用构造函数:\n\n```cpp\n#include <iostream>\n\nclass C {\npublic:\n    explicit C(int) {\n        std::cout << \"i\" << std::endl;\n    }\n    C(double) {\n        std::cout << \"d\" << std::endl;\n    }\n};\n\nint main() {\n    C c1(7); // 匹配了第一个构造函数\n    C c2 = 7; // 隐式构造, 只能将7转换为double, 然后调用第二个构造函数\n}\n```\n\n**输出:**\n\n```cpp\ni\nd\n```\n\n#### 子类对父类函数的重载与重写\n\n子类如果重载或者重写了父类的同名函数，将无法通过子类的对象访问父类中的这些函数：\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\nclass A {\npublic:\n    void F(int) { cout << \"A::F(int)\" << endl; }\n    void F(double) { cout << \"A::F(double)\" << endl; }\n    void F2(int) { cout << \"A::F2(int)\" << endl; }\n};\n\nclass B : public A {\npublic:\n\t  using A::F;\n    void F(double) { cout << \"B::F(double)\" << endl; }\n};\n\nint main() {\n    B b;\n    b.F(2.0);\n    b.F(2);\n    b.F2(2);\n}\n```\n\n输出：\n\n```cpp\nB::F(double)\nB::F(double)\nA::F2(int)\n```\n\n但是我们可以通过在子类中声明 `using A::F`来重新获得访问权限：\n\n```cpp\nclass B : public A {\npublic:\n    using A::F;\n    void F(double) { cout << \"B::F(double)\" << endl; }\n};\n```\n\n此时的输出为：\n\n```cpp\nB::F(double)\nA::F(int)\nA::F2(int)\n```\n\n#### 默认参数的静态绑定\n\n- 虚函数：运行时多态（动态绑定）\n- 默认参数：编译时确定（静态绑定）\n\n```cpp\n#include <iostream>\n\nstruct A {\n    virtual void foo(int a = 1) {\n        std::cout << \"A\" << '\\n' << a;\n    }\n};\n\nstruct B : A {\n    virtual void foo(int a = 2) {\n        std::cout << \"B\" << '\\n' << a;\n    }\n};\n\nint main() {\n    A *a = new B;\n    a->foo();\n    delete a;\n}\n```\n\n输出：\n\n```cpp\nB\n1\n```\n\n> **为什么cpp要选择让静态参数实现静态绑定？**\n>\n> 为了保持语言的一致性与可预测性，设计者让静态参数作为编译时期自动替换的值，避免在运行过程中动态替换\n\n#### 函数模板与模板特化\n\n模板特化：在函数模板的基础上，如果我们希望对某个类型实现不一样的逻辑，就可以使用～\n\n```cpp\ntemplate<typename T>\nvoid f(const T& value) {\n    std::cout << \"泛型模板: \" << value << std::endl;\n}\n\n// 对int类型采取模板特化\ntemplate<>\nvoid f<int>(const int& value) {\n    std::cout << \"特化版本: int 类型\" << std::endl;\n}\n```\n\n- 因此，模板特化必须首先存在一个主模板\n\n**模板特化的结果无法被重载**\n\n```cpp\n#include <iostream>\n\ntemplate<class T> void f(T &i) { std::cout << 1; }\ntemplate<> void f(const int &i) { std::cout << 2; }\n\nint main() {\n    int i = 24;\n    f(i);\n}\n```\n\n将会输出： `1`\n\n- 如果我们只保留 `void f(const int &i) { std::cout << 2; }`  函数，将会触发类型转换，可以调用\n- 如果我们只去除模板特化中的 `const`， 就可以匹配（输出 `2`）\n\n再比如：\n\n```cpp\ntemplate<typename T>\nvoid add(T, T);\n\nadd(1, 2.2); // ❌ 模板不能推导出统一的 T（int vs double）\n```\n\n#### 常量对象\n\n- 静态函数同样参与函数重载，但是优先匹配非静态函数\n- 静态函数不受 `const`限制——即使没有被声明为 `const`也可以被常量对象调用\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\nclass A {\npublic:\n    static void f(double) {\n        cout << \"f(double)\" << endl;\n    }\n    void f(int) {\n        cout << \"f(int)\" << endl;\n    }\n};\n\nint main() {\n    const A a;\n    a.f(3);\n}\n```\n\n输出：\n\n```cpp\nf(double)\n```\n\n如果存在完全匹配的普通函数，就会直接调用非静态函数：\n\n```cpp\nvoid f(int) const {\n    cout << \"f(int) const\" << endl;\n}\nvoid f(int) {\n    cout << \"f(int)\" << endl;\n```\n\n> 此处的 `void f(int) const` 无法改为 `void f(double) const`, 否则与同名静态函数的参数完全一致\n\n#### 异常的 `catch`顺序\n\n`catch`块的匹配是从上到下的，因此只要遇到第一个匹配的，后续的匹配就会结束\n\n- 子类的对象可以被父类捕获\n- 注意此时的动态绑定——如果父类层级（引用或者指针）在前，内部抛出的是子类的异常对象，捕捉之后调用的函数是子类的对象\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nclass Base {\npublic:\n    virtual const char* what() const {\n        return \"Base::what()\";\n    }\n    virtual ~Base() {}  // 虚析构保证多态安全\n};\n\nclass Derived : public Base {\npublic:\n    const char* what() const override {\n        return \"Derived::what()\";\n    }\n};\n\nint main() {\n    try {\n        throw Derived();  // 抛出子类对象\n    } catch (const Base& e) {  // 用父类引用接收\n        cout << \"由父类层级捕获到异常: \" << e.what() << endl;  // 动态绑定调用子类 what()\n    } catch (const Derived& e) {\n        cout << \"由子类层级捕获到异常: \" << e.what() << endl;\n    } catch (...) {\n        cout << \"捕获到未知异常\" << endl;\n    }\n    return 0;\n}\n```\n\n输出：\n\n```cpp\n由父类层级捕获到异常: Derived::what()\n```\n\n> 如果将 `catch`内部改为普通的对象，将会输出 `由父类层级捕获到异常: Base::what()`\n\n由此可见，我们应该遵循：将子类对象的捕捉放在其父类之前，最后是 `catch(...)`\n","slug":"课程笔记/oop复习笔记","published":1,"updated":"2025-06-25T07:06:39.433Z","comments":1,"layout":"post","photos":[],"_id":"cmcbm7pqi002fe2qgfcjkbyva","content":"<h1 id=\"知识点回顾\"><a href=\"#知识点回顾\" class=\"headerlink\" title=\"知识点回顾\"></a>知识点回顾</h1><ul>\n<li><p><code>end（）</code>返回的是容器最后一个位置的<strong>下一个位置</strong>的迭代器</p>\n</li>\n<li><p><code>string::npos</code>是 <code>size_t</code>类型的最大值;</p>\n</li>\n<li><p><code>to_string</code>将数字转换成字符串:</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> num = <span class=\"number\">123</span>;</span><br><span class=\"line\">string str = <span class=\"built_in\">to_string</span>(num);</span><br></pre></td></tr></table></figure></div></li>\n<li><p><code>stoi</code>将字符串转换成整数</p>\n</li>\n<li><p>参数的默认值只能从右到左给出；默认值只能出现在函数的原型或者将定义和声明放在一起，而不能在分离的定义中声明</p>\n</li>\n<li><p>列表初始化是按成员的<strong>声明顺序</strong>执行的，和成员在列表中的顺序无关。</p>\n</li>\n</ul>\n<h2 id=\"实验操作\"><a href=\"#实验操作\" class=\"headerlink\" title=\"实验操作\"></a>实验操作</h2><h4 id=\"截取字符串\"><a href=\"#截取字符串\" class=\"headerlink\" title=\"截取字符串\"></a>截取字符串</h4><p>用邮箱地址的截取，说明 <code>rfind</code>与 <code>str</code>等方法的使用：</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string email = <span class=\"string\">&quot;user.name@example.com&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取用户名的部分</span></span><br><span class=\"line\"><span class=\"type\">int</span> atPos = email.<span class=\"built_in\">find</span>(<span class=\"string\">&#x27;@&#x27;</span>);</span><br><span class=\"line\">string username = email.<span class=\"built_in\">substr</span>(<span class=\"number\">0</span>, atPos); <span class=\"comment\">// result: &quot;user.name&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取域名部分</span></span><br><span class=\"line\">string domain =  email.<span class=\"built_in\">substr</span>(atPos + <span class=\"number\">1</span>); <span class=\"comment\">// result: &quot;example.com&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取顶级域名(最后一个.之后的部分)</span></span><br><span class=\"line\"><span class=\"type\">int</span> lastDotPos = email.<span class=\"built_in\">rfind</span>(<span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">string topLevelDomain = email.<span class=\"built_in\">substr</span>(lastDotPos + <span class=\"number\">1</span>); <span class=\"comment\">// result: &quot;com&quot;</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"Stream\"><a href=\"#Stream\" class=\"headerlink\" title=\"Stream\"></a>Stream</h2><h3 id=\"文件流\"><a href=\"#文件流\" class=\"headerlink\" title=\"文件流\"></a>文件流</h3><ul>\n<li>一个简单的输入&#x2F;输出：流</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span>  <span class=\"comment\">// 需要包含这个头文件</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 文件输出（写入文件）</span></span><br><span class=\"line\"><span class=\"function\">ofstream <span class=\"title\">outFile</span><span class=\"params\">(<span class=\"string\">&quot;output.txt&quot;</span>)</span></span>;</span><br><span class=\"line\">outFile &lt;&lt; <span class=\"string\">&quot;Hello World&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">outFile.<span class=\"built_in\">close</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 文件输入（读取文件）</span></span><br><span class=\"line\"><span class=\"function\">ifstream <span class=\"title\">inFile</span><span class=\"params\">(<span class=\"string\">&quot;input.txt&quot;</span>)</span></span>; </span><br><span class=\"line\">string line;</span><br><span class=\"line\"><span class=\"built_in\">getline</span>(inFile, line);</span><br><span class=\"line\">inFile.<span class=\"built_in\">close</span>();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p><code>getline()</code>函数可以显式指定终止符（第三个参数），默认为 <code>\\n</code>也就是换行符。并且会将终止符丢弃</p>\n</blockquote>\n<h4 id=\"位或运算符指定模式\"><a href=\"#位或运算符指定模式\" class=\"headerlink\" title=\"位或运算符指定模式\"></a>位或运算符指定模式</h4><p>可以使用 <code>｜</code>来指定多个模式：</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 组合使用打开模式</span></span><br><span class=\"line\"><span class=\"function\">ofstream <span class=\"title\">outFile</span><span class=\"params\">(<span class=\"string\">&quot;test.txt&quot;</span>, ios::out | ios::app)</span></span>;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"字符串流\"><a href=\"#字符串流\" class=\"headerlink\" title=\"字符串流\"></a>字符串流</h3><p>字符串流的作用原理：</p>\n<ul>\n<li>作用: 将字符串转换成一个类似于输入流的对象;</li>\n<li>内部维护了一个字符串和一个位置指针;</li>\n<li>每次读取时, 位置指针向后移动, 且自动跳过空白字符.</li>\n</ul>\n<p><code>stringstream</code>表示双向字符串流</p>\n<h4 id=\"字符串分词\"><a href=\"#字符串分词\" class=\"headerlink\" title=\"字符串分词\"></a>字符串分词</h4><p>我们可以将字符串转换成字符串流，来实现字符串的分词：</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">name</span><span class=\"params\">(<span class=\"string\">&quot;xiao ming&quot;</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">istringstream <span class=\"title\">is</span><span class=\"params\">(name)</span></span>;</span><br><span class=\"line\">string token;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(is &gt;&gt; token)</span><br><span class=\"line\">\tcout &lt;&lt; token &lt;&lt; endl;</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>按照空白字符i.e. 空格、<code>\\t</code>, <code>\\n</code>来分词</p>\n</blockquote>\n<h4 id=\"字符串的拼接\"><a href=\"#字符串的拼接\" class=\"headerlink\" title=\"字符串的拼接\"></a>字符串的拼接</h4><div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ostringstream oss;</span><br><span class=\"line\">    string name = <span class=\"string\">&quot;Alice&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> age = <span class=\"number\">25</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">    oss &lt;&lt; <span class=\"string\">&quot;Name: &quot;</span> &lt;&lt; name &lt;&lt; <span class=\"string\">&quot;, Age: &quot;</span> &lt;&lt; age;</span><br><span class=\"line\">    string result = oss.<span class=\"built_in\">str</span>();</span><br><span class=\"line\">    cout &lt;&lt; result &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<p><strong>Output:</strong></p>\n<div class=\"code-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Name: Alice, Age: 25</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>通过 <code>.str()</code>方法可以对象转换为字符串类型, 从而<strong>格式化输出</strong>.</p>\n<p><code>.str(&quot;&quot;)</code>方法可以<strong>清空</strong>字符串流:</p>\n</blockquote>\n<h2 id=\"STL\"><a href=\"#STL\" class=\"headerlink\" title=\"STL\"></a>STL</h2><h4 id=\"for-each\"><a href=\"#for-each\" class=\"headerlink\" title=\"for-each\"></a>for-each</h4><p>以更简单的方式遍历容器内元素:</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::map&lt;std::string, <span class=\"type\">double</span>&gt; price;</span><br><span class=\"line\"><span class=\"comment\">// Assume we&#x27;ve inserted a lot of name-price pairs</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [key, value]: price)&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; key &lt;&lt; <span class=\"string\">&quot;: &quot;</span> &lt;&lt; value &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h3><h4 id=\"lower-bound\"><a href=\"#lower-bound\" class=\"headerlink\" title=\"lower_bound\"></a>lower_bound</h4><p>使用～函数可以查找不小于某个值的第一个键：</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::map&lt;<span class=\"type\">long</span> <span class=\"type\">long</span>, <span class=\"type\">int</span>&gt; tags&#123;&#123;<span class=\"number\">10</span>, <span class=\"number\">1</span>&#125;, &#123;<span class=\"number\">100</span>, <span class=\"number\">2</span>&#125;, &#123;<span class=\"number\">1000</span>, <span class=\"number\">3</span>&#125;, &#123;<span class=\"number\">10000</span>, <span class=\"number\">4</span>&#125;, &#123;<span class=\"number\">10000000000</span>, <span class=\"number\">10</span>&#125;&#125;;</span><br><span class=\"line\">std::map&lt;<span class=\"type\">long</span> <span class=\"type\">long</span>, <span class=\"type\">int</span>&gt;::iterator it = tags.<span class=\"built_in\">lower_bound</span>(<span class=\"number\">2000</span>);</span><br><span class=\"line\">std::cout &lt;&lt; it-&gt;first &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; std::endl; <span class=\"comment\">// it should be &quot;10000 4&quot;</span></span><br><span class=\"line\">it++;</span><br><span class=\"line\">std::cout &lt;&lt; it-&gt;first &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; std::endl; <span class=\"comment\">// it should be &quot;10000000000 10&quot;</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"class\"><a href=\"#class\" class=\"headerlink\" title=\"class\"></a>class</h2><h4 id=\"include机制\"><a href=\"#include机制\" class=\"headerlink\" title=\"include机制\"></a>include机制</h4><p><code>#include</code> 语句的作用是将某个文件插入到语句所在位置。根据搜索的顺序，可以划分不同的用法。</p>\n<ul>\n<li><code>#include &quot;xx.h&quot;</code>：先搜索当前文件夹，再搜索系统库</li>\n<li><code>#include &lt;xx.h&gt;</code>：搜索系统库</li>\n<li><code>#include &lt;xx&gt;</code>：搜索系统库</li>\n</ul>\n<p>注意权限的管理是<strong>针对于类</strong>的，同一类的不同对象可以在其成员函数内任意访问别的成员</p>\n<p>友元不具有传递性：</p>\n<ul>\n<li><code>friend class</code>+一个类名，可以指定友元类</li>\n<li><code>friend</code>+一个函数的声明，指定友元函数</li>\n</ul>\n<p>生命周期：</p>\n<ul>\n<li>main外的类的对象（i.e. 全局作用域），其构造函数调用的时间早于 <code>main</code>函数；其析构函数的调用也在 <code>main</code>函数返回之后</li>\n</ul>\n<h4 id=\"静态\"><a href=\"#静态\" class=\"headerlink\" title=\"静态\"></a>静态</h4><p>静态指的是：</p>\n<ul>\n<li>空间的静态</li>\n<li>受限的访问</li>\n<li>静态局部变量在第一次遇到的时候初始化</li>\n<li>静态成员变量在 <code>.h</code>文件中的声明有 <code>static</code>标签，但是在 <code>.cpp</code> 中不应该有～标签；否则无法被其他文件中使用。 静态成员函数同理</li>\n</ul>\n<p>两种访问静态内容的方式：</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">name</span>&gt;::&lt;<span class=\"type\">static</span> member&gt;</span><br><span class=\"line\">&lt;object name&gt;.&lt;<span class=\"type\">static</span> member&gt;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h4><p>一般的字面量都是右值，但是字符串是例外，因为字符串实际上存储在静态内存区</p>\n<p>一般来说，左值引用不能绑定右值，但是<strong>常量左值引用可以绑定右值</strong>，因为常量的特性确定了不会对右值进行修改</p>\n<blockquote>\n<p>但是如果同时存在右值引用，右值作为参数时还是会优先重载右值引用的版本</p>\n</blockquote>\n<p><strong>规范：</strong></p>\n<ul>\n<li><p>不允许定义引用的引用；</p>\n</li>\n<li><p><strong>不允许定义引用的数组</strong>；</p>\n<ul>\n<li>引用不是单独存在的对象，无法按照数组存储</li>\n</ul>\n</li>\n<li><p><strong>不允许定义指向引用的指针</strong></p>\n<ul>\n<li>指针必须指向对象，而引用不是对象</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h4><p>使用 <code>const</code>标记声明为常量</p>\n<p>常量可以直接让编译器尝试替换：</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> bufsize = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> index[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> f[bufsize]; <span class=\"comment\">// Ok: f[1024]</span></span><br><span class=\"line\"><span class=\"type\">int</span> f[index[<span class=\"number\">3</span>]]; <span class=\"comment\">// Error</span></span><br></pre></td></tr></table></figure></div>\n\n<p>但是需要特别注意的是：<strong>对象的常量不是编译器常量！ i.e.</strong></p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Array</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> size = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> array[size]; <span class=\"comment\">// Error！</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>可以使用枚举或者 <code>static</code>来解决上述的问题：</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> &#123;size = <span class=\"number\">10</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">int</span> size = <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure></div></blockquote>\n<p>常量和指针；</p>\n<ul>\n<li><code>const *p</code>表示不能通过指针改变指向的对象内容；</li>\n<li><code>* const p</code>表示不能改变指针的指向位置</li>\n</ul>\n<blockquote>\n<p>不需要关注类型与 <code>*</code>的位置关系</p>\n</blockquote>\n<p><strong>字符指针和字符数组；</strong></p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> *sp = <span class=\"string\">&quot;Hello World!&quot;</span>; <span class=\"comment\">// 字符指针可以移动，不能修改</span></span><br><span class=\"line\"><span class=\"type\">char</span> array[] = <span class=\"string\">&quot;Hello World!&quot;</span>; <span class=\"comment\">// 字符数组不能移动，可以修改</span></span><br><span class=\"line\"></span><br><span class=\"line\">array[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;h&#x27;</span> ; <span class=\"comment\">// 合法</span></span><br><span class=\"line\">array = <span class=\"string\">&#x27;hello&#x27;</span>; <span class=\"comment\">// 非法！</span></span><br><span class=\"line\"></span><br><span class=\"line\">sp = <span class=\"string\">&#x27;world&#x27;</span>; <span class=\"comment\">// 合法</span></span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>实际上，<code>char *sp</code>就是 <code>const char *sp</code>，所以不能改变字符串的值，但是可以改变sp的指向</p>\n<p>而字符串数组的数组名是栈中的固定地址，无法移动，但是可以修改</p>\n</blockquote>\n<p>注意区分<strong>常量函数</strong>和返回值的常量：</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getName</span><span class=\"params\">(<span class=\"type\">int</span> id)</span> <span class=\"type\">const</span></span>; <span class=\"comment\">// 常量函数，无法改变成员变量，常量对象只能调用自己的常量成员函数（与静态成员函数）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">const</span> <span class=\"type\">int</span> <span class=\"title\">getAge</span><span class=\"params\">(<span class=\"type\">int</span> id)</span></span>; <span class=\"comment\">// 限制了返回值是一个常量</span></span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"delete\"><a href=\"#delete\" class=\"headerlink\" title=\"delete\"></a>delete</h4><p>注意 <code>[]</code>搭配的使用：</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> *p = <span class=\"keyword\">new</span> <span class=\"type\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">delete</span> [] p;</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"Inside-class\"><a href=\"#Inside-class\" class=\"headerlink\" title=\"Inside class\"></a>Inside class</h2><h4 id=\"代理构造\"><a href=\"#代理构造\" class=\"headerlink\" title=\"代理构造\"></a>代理构造</h4><p>可以在一个构造函数中调用另一个构造函数，减少代码的重复：</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">sorted</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">sorted</span>()&#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">sorted</span>(<span class=\"type\">int</span> _x)&#123;</span><br><span class=\"line\">        x = _x &gt; <span class=\"number\">0</span>? _x: <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sorted</span>(<span class=\"type\">int</span> _x, <span class=\"type\">int</span> _z): <span class=\"built_in\">sorted</span>(_x)&#123;</span><br><span class=\"line\">        z = _z &gt; <span class=\"number\">0</span> &amp;&amp; _z &lt; x? _z: <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sorted</span>(<span class=\"type\">int</span> _x, <span class=\"type\">int</span> _y, <span class=\"type\">int</span> _z): <span class=\"built_in\">sorted</span>(_x, _z)&#123;</span><br><span class=\"line\">        y = _y &lt; x &amp;&amp; _y &gt; z? _y: <span class=\"number\">5</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> x, y, z;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"内联函数\"><a href=\"#内联函数\" class=\"headerlink\" title=\"内联函数\"></a>内联函数</h4><p>通过 <code>inline</code>关键字，<strong>建议编译器将函数调用处替换为函数体代码本身</strong> ，从而避免函数调用开销。</p>\n<blockquote>\n<p>是否作为内联函数，实际上由编译器所决定</p>\n</blockquote>\n<p>内联函数必须提供完整的函数定义</p>\n<blockquote>\n<p>i.e. 内联函数的声明必需伴随实现（在同一个头文件中即可，二者可以分离）</p>\n</blockquote>\n<h2 id=\"组合与继承\"><a href=\"#组合与继承\" class=\"headerlink\" title=\"组合与继承\"></a>组合与继承</h2><h3 id=\"组合\"><a href=\"#组合\" class=\"headerlink\" title=\"组合\"></a>组合</h3><p>组合的对象分为完全包含和引用包含，什么时候使用引用包含呢？</p>\n<ul>\n<li>逻辑上子对象应该在对象的外部；</li>\n<li>子对象的大小不确定</li>\n<li>子对象的空间应该在运行时被分配或者链接</li>\n</ul>\n<h4 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a>命名空间</h4><div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> sp1&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">g</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> sp2&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">g</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;<span class=\"comment\">// No terminating end colon!</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> alias = sp1;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">g</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    sp1::<span class=\"built_in\">f</span>();</span><br><span class=\"line\">    sp2::<span class=\"built_in\">f</span>();</span><br><span class=\"line\">    ::<span class=\"built_in\">f</span>();</span><br><span class=\"line\">    <span class=\"built_in\">f</span>();<span class=\"comment\">// the same as ::f()</span></span><br><span class=\"line\">    alias::<span class=\"built_in\">f</span>();<span class=\"comment\">// the same as sp1::f()</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<ul>\n<li>可以为命名空间声明别名；</li>\n<li>命名空间的末尾没有分号 <code>；</code></li>\n</ul>\n</blockquote>\n<h4 id=\"using\"><a href=\"#using\" class=\"headerlink\" title=\"using\"></a>using</h4><p>使用 <code>using</code>可以在当前的作用域引入其他的命名空间的成员、函数：</p>\n<ul>\n<li><code>using &lt;namespace&gt;::&lt;member&gt;</code> 引入部分的成员</li>\n<li><code>using namespace &lt;namespace&gt;</code> 引入该命名空间的全部成员</li>\n</ul>\n<p>e.g.</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> std::cin; <span class=\"comment\">// 只引入 cin</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std; <span class=\"comment\">// 引入std的所有成员</span></span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>如果引入同名的对象或者函数，将会导致编译器链接失败</p>\n</blockquote>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>父类的析构函数更晚调用</p>\n<p>父类的<strong>私有成员变量在子类的对象中依旧存在</strong>，但是不可直接访问（只能通过父类方法来间接访问）</p>\n<p>父类的受保护成员可以被子类访问，但是无法被外界访问</p>\n<h4 id=\"非公开的继承\"><a href=\"#非公开的继承\" class=\"headerlink\" title=\"非公开的继承\"></a>非公开的继承</h4><div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span>: <span class=\"keyword\">protected</span> A&#123;</span><br><span class=\"line\">    ...  </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span>: <span class=\"keyword\">private</span> A&#123;<span class=\"comment\">//default</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>如果定义 <code>protected</code> 继承，只有子类及其派生类可以调用父类方法，外部是不可以的。</p>\n<p>如果定义 <code>private</code> 继承，只有子类本身可以调用父类方法。</p>\n</blockquote>\n<h4 id=\"静态成员的继承\"><a href=\"#静态成员的继承\" class=\"headerlink\" title=\"静态成员的继承\"></a>静态成员的继承</h4><p>父类的静态成员不会在子类中具有自己的副本，<strong>子类和父类共享一个静态成员！</strong></p>\n<p>以下介绍using相关的几个问题：</p>\n<h4 id=\"name-hiding\"><a href=\"#name-hiding\" class=\"headerlink\" title=\"name hiding\"></a>name hiding</h4><p>如果子类重载了父类的函数，父类的同名函数将会失效，无法直接调用，需要使用 <code>using</code>来声明：</p>\n<p>e.g.</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>: </span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"type\">double</span>)</span></span>&#123;</span><br><span class=\"line\">      cout &lt;&lt; <span class=\"string\">&quot;double\\n&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Derived</span> : Base&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  \t<span class=\"keyword\">using</span> Base::f; <span class=\"comment\">// 将基类中的私有函数本地使用</span></span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"type\">int</span>)</span></span>&#123;</span><br><span class=\"line\">      cout &lt;&lt; <span class=\"string\">&quot;int\\n&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"默认参数的重载传递\"><a href=\"#默认参数的重载传递\" class=\"headerlink\" title=\"默认参数的重载传递\"></a>默认参数的重载传递</h4><p>在cpp中, 默认参数值绑定在函数声明的作用域上, 而不是函数本身! 这是为了避免 <strong>多重继承时参数值产生冲突或二义性</strong> 。</p>\n<blockquote>\n<p>默认参数是静态绑定（编译期行为），它必须清楚地知道取哪个作用域的值.</p>\n</blockquote>\n<p>e.g.</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"type\">int</span> a = <span class=\"number\">3</span>, <span class=\"type\">double</span> b = <span class=\"number\">2.0</span>)</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> : <span class=\"keyword\">public</span> A &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">using</span> A::f;         <span class=\"comment\">// ✅ 此时默认参数仍可见</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"type\">int</span> a)</span></span>;      <span class=\"comment\">// ❌ 重载后，这个版本没有默认参数</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"子类重写父类函数\"><a href=\"#子类重写父类函数\" class=\"headerlink\" title=\"子类重写父类函数\"></a>子类重写父类函数</h4><p>如果子类直接重写了父类的函数，但是父类中的同名函数本身具有重载的版本，那么也需要使用 <code>using</code>来声明：</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 基类中的重载函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">display</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;Base display(int): &quot;</span> &lt;&lt; x &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">display</span><span class=\"params\">(<span class=\"type\">double</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;Base display(double): &quot;</span> &lt;&lt; x &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Derived</span> : <span class=\"keyword\">public</span> Base</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 子类重新定义了基类的 display(int)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">display</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;Derived display(int): &quot;</span> &lt;&lt; x &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> Base::display;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Derived d;</span><br><span class=\"line\">    d.<span class=\"built_in\">display</span>(<span class=\"number\">5</span>); <span class=\"comment\">// 调用 Derived 的 display(int)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    d.Base::<span class=\"built_in\">display</span>(<span class=\"number\">5.5</span>); <span class=\"comment\">// 或者d.display(5.5);</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h2><ul>\n<li>我们应当将所有类的析构函数都设置为<strong>虚析构函数</strong>，因为每个类都有成为父类的可能</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">virtual</span> ~<span class=\"built_in\">Base</span>() &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Base Destructor&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Derived</span> : <span class=\"keyword\">public</span> Base &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    ~<span class=\"built_in\">Derived</span>() &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Derived Destructor&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>子类和父类的析构函数先后调用</p>\n</blockquote>\n<ul>\n<li><p><code>vptr</code>在构造的时候确定，虚继承的子类在调用父类的构造函数时，默认<strong>调用父类的成员函数</strong></p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">A</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">f</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;A::f()&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> : <span class=\"keyword\">public</span> A &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">B</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">f</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;B::f()&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">B temp;</span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<h4 id=\"虚函数的规范\"><a href=\"#虚函数的规范\" class=\"headerlink\" title=\"虚函数的规范\"></a>虚函数的规范</h4><p>注意 <code>virtual</code>与 <code>override</code>的搭配：</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">speak</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Animal speaks&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span> : <span class=\"keyword\">public</span> Animal &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">speak</span><span class=\"params\">()</span> <span class=\"keyword\">override</span> </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Dog barks&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>override是为了让编译器检查该函数在父类中是虚函数，但不是必须的</p>\n</blockquote>\n<ul>\n<li>vtable是类级别的, 所有该类的对象共享一个vtable;</li>\n<li>vptr是对象级别的, 隐含于各个对象当中.并且在内存的开头</li>\n</ul>\n<h4 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h4><p>抽象类：至少包含一个<strong>纯虚函数</strong>的类是～</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Shape</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 纯虚函数，子类必须实现</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>纯虚函数类似于协议，要求子类必须实现</p>\n<p>只有完成了所有纯虚函数定义的、抽象类的子类，才能够实例化</p>\n</blockquote>\n<p><strong>接口类 Interface Class：</strong></p>\n<ul>\n<li>比抽象类更加抽象）</li>\n<li>只定义接口, 不提供实现的抽象类</li>\n<li>所有的<strong>成员函数都是纯虚函数</strong>;</li>\n<li>一般不包含任何数据成员.</li>\n</ul>\n<h4 id=\"菱形继承与虚继承\"><a href=\"#菱形继承与虚继承\" class=\"headerlink\" title=\"菱形继承与虚继承\"></a>菱形继承与虚继承</h4><p>在继承时添加 <code>virtual</code> 关键字实现,子类中不存在父类的对象，而是保有父类的指针。</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> value;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ptr</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;value: &quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> : <span class=\"keyword\">virtual</span> <span class=\"keyword\">public</span> A &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">C</span> : <span class=\"keyword\">virtual</span> <span class=\"keyword\">public</span> A &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">D</span> : <span class=\"keyword\">public</span> B, <span class=\"keyword\">public</span> C &#123;&#125;;</span><br></pre></td></tr></table></figure></div>\n\n<p>上述的虚继承确保了B，C只会拥有A的一份value，从而避免了从D的对象访问 <code>value</code>时存在的<strong>二义性</strong></p>\n<blockquote>\n<p>并非所有的菱形继承都会因为二义性的访问而导致访问的问题！</p>\n</blockquote>\n<p>TODO：检查什么时候没有二义性？</p>\n<p>由于虚继承带来的是“共享”的基类对象，所以：</p>\n<ul>\n<li>虚基类的构造 <strong>必须由最底层派生类负责</strong></li>\n<li>派生类的构造函数中要<strong>显式初始化</strong>虚基类</li>\n</ul>\n<h2 id=\"Copy-Move\"><a href=\"#Copy-Move\" class=\"headerlink\" title=\"Copy &amp; Move\"></a>Copy &amp; Move</h2><ul>\n<li>拷贝构造函数的签名：<code>T::T(const T&amp;)</code></li>\n<li>默认的拷贝构造函数的指针类型成员是直接赋值的，也就是共享同一地址<ul>\n<li>因此我们需要显式定义类的拷贝构造函数，避免依赖默认的～</li>\n<li>默认拷贝构造中，成员对象也会调用自己的拷贝构造函数</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"拷贝构造函数的调用时机\"><a href=\"#拷贝构造函数的调用时机\" class=\"headerlink\" title=\"拷贝构造函数的调用时机\"></a>拷贝构造函数的调用时机</h4><ul>\n<li><strong>按值传递参数时</strong>：当对象作为参数按值传递给函数时<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(MyClass obj)</span></span>; <span class=\"comment\">// 调用时会触发拷贝构造</span></span><br></pre></td></tr></table></figure></div></li>\n<li><strong>对象初始化时</strong>：<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyClass a;</span><br><span class=\"line\">MyClass b = a;    <span class=\"comment\">// 初始化，调用拷贝构造函数</span></span><br><span class=\"line\"><span class=\"function\">MyClass <span class=\"title\">c</span><span class=\"params\">(a)</span></span>;     <span class=\"comment\">// 初始化，调用拷贝构造函数</span></span><br></pre></td></tr></table></figure></div></li>\n<li><strong>函数返回对象时</strong>：<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">MyClass <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    MyClass obj;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;   <span class=\"comment\">// 可能触发拷贝构造（取决于编译器优化）</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<p>一个简单的例子：</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">StringHolder</span>(<span class=\"type\">const</span> StringHolder &amp;other)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (other.data)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            data = <span class=\"keyword\">new</span> <span class=\"type\">char</span>[<span class=\"built_in\">strlen</span>(other.data) + <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"built_in\">strcpy</span>(data, other.data);</span><br><span class=\"line\">            std::cout &lt;&lt; <span class=\"string\">&quot;深拷贝构造函数: 为\\&quot;&quot;</span> &lt;&lt; data &lt;&lt; <span class=\"string\">&quot;\\&quot;分配新内存&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            data = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">            std::cout &lt;&lt; <span class=\"string\">&quot;深拷贝构造函数: 复制空字符串&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"右值引用\"><a href=\"#右值引用\" class=\"headerlink\" title=\"右值引用\"></a>右值引用</h4><p>两种可以同时输入左值和右值引用作为参数的方法:</p>\n<ul>\n<li><p><strong>重载</strong></p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 重载函数，分别处理左值和右值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">process</span><span class=\"params\">(<span class=\"type\">int</span>&amp; x)</span> </span>&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;重载函数 - 处理左值: &quot;</span> &lt;&lt; x &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">process</span><span class=\"params\">(<span class=\"type\">int</span>&amp;&amp; x)</span> </span>&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;重载函数 - 处理右值: &quot;</span> &lt;&lt; x &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div></li>\n<li><p><code>const int&amp; x </code></p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 接受const左值引用的函数（可以接受左值和右值）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">processAny</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span>&amp; x)</span> </span>&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;处理任意值: &quot;</span> &lt;&lt; x &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<h4 id=\"移动构造函数\"><a href=\"#移动构造函数\" class=\"headerlink\" title=\"移动构造函数\"></a>移动构造函数</h4><ul>\n<li>签名：<code>T::T(T&amp;&amp; other)</code>, 也就是<strong>将右值引用作为参数的构造函数</strong></li>\n<li>用于”窃取”即将销毁的对象的资源，避免不必要的深拷贝</li>\n<li>通常将源对象的指针成员置为 <code>nullptr</code>，防止资源被错误释放. 其他成员设置为零值</li>\n</ul>\n<p>一个简单的例子：</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DynamicArray</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> *m_array;</span><br><span class=\"line\">    <span class=\"type\">size_t</span> m_size;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 移动构造函数</span></span><br><span class=\"line\"><span class=\"built_in\">DynamicArray</span>(DynamicArray &amp;&amp;other) <span class=\"keyword\">noexcept</span> : <span class=\"built_in\">m_array</span>(other.m_array), <span class=\"built_in\">m_size</span>(other.m_size)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// &quot;窃取&quot;other的资源，并将other置为安全状态</span></span><br><span class=\"line\">        other.m_array = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        other.m_size = <span class=\"number\">0</span>;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;移动构造函数: 移动大小为&quot;</span> &lt;&lt; m_size &lt;&lt; <span class=\"string\">&quot;的数组&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p><code>noexcept</code>标记表示不会抛出异常；</p>\n<p>标准库容器在进行元素移动时会<strong>优先选择不会抛异常的移动构造函数</strong>，如果不存在～会退而求其次选择拷贝构造函数（更慢）。</p>\n</blockquote>\n<h4 id=\"move\"><a href=\"#move\" class=\"headerlink\" title=\"move\"></a>move</h4><p>如果对象不是右值引用，我们可以使用 <code>std::move</code>来显式调用移动构造函数：</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; v1&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; v2 = v1; <span class=\"comment\">// v2 是 v1 的副本</span></span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; v3 = std::<span class=\"built_in\">move</span>(v1); <span class=\"comment\">// 调用移动构造函数</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"初始化的方式\"><a href=\"#初始化的方式\" class=\"headerlink\" title=\"初始化的方式\"></a>初始化的方式</h3><p>C++11提供了多种初始化对象的方式：</p>\n<ul>\n<li><p><strong>小括号初始化</strong>：<code>MyClass obj(arg1, arg2);</code></p>\n</li>\n<li><p><strong>等号初始化</strong>：<code>MyClass obj = value;</code></p>\n</li>\n<li><p><strong>大括号初始化</strong>（统一初始化）：<code>MyClass obj&#123;arg1, arg2&#125;;</code></p>\n</li>\n<li><p><strong>列表初始化</strong>：</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> arr[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">MyClass* ptr = <span class=\"keyword\">new</span> MyClass&#123;arg1, arg2&#125;;</span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<h4 id=\"基本类型的初始化\"><a href=\"#基本类型的初始化\" class=\"headerlink\" title=\"基本类型的初始化\"></a>基本类型的初始化</h4><div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基本类型的初始化方式</span></span><br><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">10</span>;             <span class=\"comment\">// 等号初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">b</span><span class=\"params\">(<span class=\"number\">20</span>)</span></span>;              <span class=\"comment\">// 小括号初始化</span></span><br><span class=\"line\"><span class=\"type\">int</span> c&#123;<span class=\"number\">30</span>&#125;;              <span class=\"comment\">// 大括号初始化（C++11）</span></span><br><span class=\"line\"><span class=\"type\">int</span> d = &#123;<span class=\"number\">40</span>&#125;;           <span class=\"comment\">// 等号+大括号初始化（C++11）</span></span><br><span class=\"line\"><span class=\"type\">int</span> arr1[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;; <span class=\"comment\">// 数组初始化</span></span><br><span class=\"line\"><span class=\"type\">int</span> arr2[]&#123;<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;;    <span class=\"comment\">// 数组大括号初始化（C++11）</span></span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"对象的初始化\"><a href=\"#对象的初始化\" class=\"headerlink\" title=\"对象的初始化\"></a>对象的初始化</h4><div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对象的初始化方式</span></span><br><span class=\"line\"><span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">25</span>)</span></span>;          <span class=\"comment\">// 小括号初始化</span></span><br><span class=\"line\">Person p2 = <span class=\"built_in\">Person</span>(<span class=\"string\">&quot;李四&quot;</span>, <span class=\"number\">30</span>); <span class=\"comment\">// 等号+临时对象初始化</span></span><br><span class=\"line\">Person p3&#123;<span class=\"string\">&quot;王五&quot;</span>, <span class=\"number\">35</span>&#125;;          <span class=\"comment\">// 大括号初始化（C++11）</span></span><br><span class=\"line\">Person p4 = &#123;<span class=\"string\">&quot;赵六&quot;</span>, <span class=\"number\">40</span>&#125;;       <span class=\"comment\">// 等号+大括号初始化（C++11）</span></span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li><p>动态分配对象的初始化</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 动态分配对象的初始化方式</span></span><br><span class=\"line\">Person *pp1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Person</span>(<span class=\"string\">&quot;动态张三&quot;</span>, <span class=\"number\">25</span>); <span class=\"comment\">// 传统new</span></span><br><span class=\"line\">Person *pp2 = <span class=\"keyword\">new</span> Person&#123;<span class=\"string\">&quot;动态李四&quot;</span>, <span class=\"number\">30</span>&#125;; <span class=\"comment\">// 大括号初始化（C++11）</span></span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<h4 id=\"统一初始化\"><a href=\"#统一初始化\" class=\"headerlink\" title=\"统一初始化\"></a>统一初始化</h4><p>对于简单的类或者容器内部的类，我们可以不写构造函数，而是用花括号进行 <strong>统一初始化</strong> 。</p>\n<p>如果类没有构造函数，参数应按照成员的声明顺序给出；如果有，参数应按照构造函数的参数顺序给出。</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a, b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Test t&#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">Test *pt = <span class=\"keyword\">new</span> Test&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> *a = <span class=\"keyword\">new</span> <span class=\"type\">int</span>[<span class=\"number\">3</span>]&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">vector&lt;string&gt; vec = &#123; <span class=\"string\">&quot;first&quot;</span>, <span class=\"string\">&quot;second&quot;</span>, <span class=\"string\">&quot;third&quot;</span>&#125;;</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"操作符重载\"><a href=\"#操作符重载\" class=\"headerlink\" title=\"操作符重载\"></a>操作符重载</h2><p>运算符重载本质上是一个以 <code>operator</code>关键字为前缀，后跟运算符的特殊函数</p>\n<ul>\n<li>赋值运算符首先要<strong>检查是否为自赋值</strong></li>\n<li>必须在<strong>类或者枚举类</strong>上定义</li>\n<li>类内成员函数的重载将第一个参数作为隐式的 <code>this</code>传递，操作符左端的类型决定了使用的操作符的类型<ul>\n<li><code>3+a1</code>非法 if <code>a1</code>无法转换为 <code>int</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"成员函数与自由函数\"><a href=\"#成员函数与自由函数\" class=\"headerlink\" title=\"成员函数与自由函数\"></a>成员函数与自由函数</h4><ul>\n<li><code>=, (), [], -&gt;, -&gt;*</code> 必须是成员函数</li>\n<li>单目运算符应该声明为成员；</li>\n<li>二目运算符应该声明为自由函数</li>\n</ul>\n<h4 id=\"无法重载的运算符\"><a href=\"#无法重载的运算符\" class=\"headerlink\" title=\"无法重载的运算符\"></a>无法重载的运算符</h4><div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. .* :: ?:</span><br><span class=\"line\"><span class=\"keyword\">sizeof</span> <span class=\"keyword\">typeid</span></span><br><span class=\"line\"><span class=\"keyword\">static_cast</span> <span class=\"keyword\">dynamic_cast</span> <span class=\"keyword\">const_cast</span></span><br><span class=\"line\"><span class=\"keyword\">reinterpret_cast</span></span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"参数传递与返回类型\"><a href=\"#参数传递与返回类型\" class=\"headerlink\" title=\"参数传递与返回类型\"></a>参数传递与返回类型</h4><ul>\n<li><code>+ - * / % ^ &amp; | ~</code> 返回新的对象<ul>\n<li><code>const Tp operator X(const Tp &amp; l, const Tp &amp; r);</code></li>\n</ul>\n</li>\n<li>布尔运算，返回 <code>bool</code>类型</li>\n<li><code>[ ]</code> 返回可以修改的引用，类似于数组的赋值<ul>\n<li><code>Tp &amp; operator X(int index);</code></li>\n</ul>\n</li>\n<li><code>= += *= /= &lt;&lt;= &gt;&gt;=</code> 返回可以修改的引用，确保链式操作<ul>\n<li><code>Tp &amp; operator X(const Tp &amp;l, const Tp &amp;r);</code></li>\n</ul>\n</li>\n</ul>\n<p>前缀自增和后缀自增需要区分，在后缀自增的参数列表中添加 <code>int</code>即可</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 前缀自增返回引用</span></span><br><span class=\"line\"><span class=\"type\">const</span> Integer&amp; Integer::<span class=\"keyword\">operator</span>++()&#123;</span><br><span class=\"line\">    *<span class=\"keyword\">this</span> += <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 后缀自增返回对象</span></span><br><span class=\"line\"><span class=\"type\">const</span> Integer Integer::<span class=\"keyword\">operator</span>++(<span class=\"type\">int</span>)&#123;<span class=\"comment\">// just leave the parameter unnamed</span></span><br><span class=\"line\">    <span class=\"function\">Integer <span class=\"title\">old</span><span class=\"params\">(*<span class=\"keyword\">this</span>)</span></span>;</span><br><span class=\"line\">    ++(*<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> old;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"比较运算符\"><a href=\"#比较运算符\" class=\"headerlink\" title=\"比较运算符\"></a>比较运算符</h4><p>考虑实现基础的 <code>==</code> 与 <code>&lt;</code> ，其余的比较重载在上述的基础上通过 <code>!</code> 运算实现，便于直接迁移</p>\n<h4 id=\"流运算\"><a href=\"#流运算\" class=\"headerlink\" title=\"流运算\"></a>流运算</h4><div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">istream&amp; <span class=\"keyword\">operator</span>&gt;&gt;(istream&amp; is, _Tp&amp; obj)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// read obj from is</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> is;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(ostream&amp; os, <span class=\"type\">const</span> _Tp&amp; obj)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// output obj in os</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> os;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ostream&amp; <span class=\"title\">tab</span><span class=\"params\">(ostream&amp; os)</span></span>&#123;<span class=\"comment\">// manipulator</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> os &lt;&lt; <span class=\"string\">&#x27;\\t&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li>输出流运算符的第一个参数不能是 <code>const</code>，因为输出会修改流</li>\n<li>输入流运算符的第二个参数不能是 <code>const</code>，因为需要修改对象</li>\n<li>通常需要声明为友元以访问私有成员</li>\n</ul>\n<h4 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h4><div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_Tp&amp; _Tp::<span class=\"keyword\">operator</span>=(<span class=\"type\">const</span> _Tp&amp; rhs)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span> != &amp;rhs)&#123;</span><br><span class=\"line\">        size = rhs.size;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span>[] p;</span><br><span class=\"line\">        p = <span class=\"keyword\">new</span> <span class=\"type\">int</span>[size];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; size; ++i)</span><br><span class=\"line\">            p[i] = rhs.p[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>首先检查是否为自赋值</p>\n</blockquote>\n<p>如果不希望进行赋值运算，将上述的 <code>=</code> 重载声明为 <code>private</code>，并且无需实现。</p>\n<blockquote>\n<p>这是因为 <code>a = b;  // 实际等价于：a.operator=(b)</code>， 发起调用的是当前代码片段所在的作用域，如果不是类内函数，那么就是非法的</p>\n</blockquote>\n<h4 id=\"隐式转换\"><a href=\"#隐式转换\" class=\"headerlink\" title=\"隐式转换\"></a>隐式转换</h4><p><strong>1. 构造函数转换</strong>：从其他类型到当前类型</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">PathName</span> &#123;</span><br><span class=\"line\">    string name;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">PathName</span>(<span class=\"type\">const</span> string&amp; s) : <span class=\"built_in\">name</span>(s) &#123;&#125;  <span class=\"comment\">// string到PathName的转换</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">abc</span><span class=\"params\">(<span class=\"string\">&quot;abc&quot;</span>)</span></span>;</span><br><span class=\"line\">PathName xyz = abc;  <span class=\"comment\">// 隐式转换：abc =&gt; PathName</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<p>2.<strong>转换运算符</strong>：从当前类型到其他类型</p>\n<blockquote>\n<p><code>operator &lt;typename&gt; &#123;&#125;</code>关键字</p>\n</blockquote>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Rational</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">operator</span> <span class=\"title\">double</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123;  <span class=\"comment\">// Rational到double的转换</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> numerator_ / (<span class=\"type\">double</span>)denominator_;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Rational <span class=\"title\">r</span><span class=\"params\">(<span class=\"number\">1</span>, <span class=\"number\">3</span>)</span></span>;</span><br><span class=\"line\"><span class=\"type\">double</span> d = r;  <span class=\"comment\">// 隐式转换：r =&gt; double</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<p>可以使用 <code>explicit</code>关键字要求显式转换：</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"keyword\">operator</span> <span class=\"title\">double</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;</span><br><span class=\"line\"><span class=\"type\">double</span> d = (<span class=\"type\">double</span>)r;  <span class=\"comment\">// 必须显式转换</span></span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"显式转换\"><a href=\"#显式转换\" class=\"headerlink\" title=\"显式转换\"></a>显式转换</h4><ul>\n<li>构造函数的显式转换</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果想要强制显式转换，应该这样声明：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">Rational</span><span class=\"params\">(<span class=\"type\">double</span> value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> PRECISION = <span class=\"number\">10000</span>;</span><br><span class=\"line\">    numerator = <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">int</span>&gt;(value * PRECISION);</span><br><span class=\"line\">    denominator = PRECISION;</span><br><span class=\"line\">    <span class=\"built_in\">simplify</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Rational r1 = <span class=\"number\">3.14</span>;        <span class=\"comment\">// 错误：不允许隐式转换</span></span><br><span class=\"line\"><span class=\"function\">Rational <span class=\"title\">r2</span><span class=\"params\">(<span class=\"number\">2.5</span>)</span></span>;          <span class=\"comment\">// 正确：显式构造</span></span><br><span class=\"line\">Rational r3 = <span class=\"built_in\">Rational</span>(<span class=\"number\">3.14</span>); <span class=\"comment\">// 正确：显式转换</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li>类型转换运算符的显式转换</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"keyword\">operator</span> <span class=\"title\">double</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;</span><br><span class=\"line\"><span class=\"type\">double</span> d = (<span class=\"type\">double</span>)r;  <span class=\"comment\">// 显式转换 or double(r)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">double</span> d2 = <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">double</span>&gt;(r2);  <span class=\"comment\">// 显式转换</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"转换优先级\"><a href=\"#转换优先级\" class=\"headerlink\" title=\"转换优先级\"></a>转换优先级</h4><p>如果同时存在两种方向的转换，将优先采取<strong>构造函数</strong>的转换方式</p>\n<blockquote>\n<p>可以通过声明其中的一种情况必须显式调用来并存；比如必须显式调用构造函数的转换，那么下面的情况将会调用构造函数将A转换到B的对象：</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">B</span>();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">B</span><span class=\"params\">(A)</span></span>; <span class=\"comment\">// 从A到B的显式构造函数</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">functionTakingB</span><span class=\"params\">(B thing)</span></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;OK&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">functionTakingB</span>(<span class=\"built_in\">static_cast</span>&lt;B&gt;(a));</span><br></pre></td></tr></table></figure></div></blockquote>\n<h4 id=\"转换运算符\"><a href=\"#转换运算符\" class=\"headerlink\" title=\"转换运算符\"></a>转换运算符</h4><p>C++ 中有四个<strong>转换运算符</strong> Cast Operator：</p>\n<ul>\n<li><p><code>static_cast</code>：</p>\n<ul>\n<li>基本类型的转换</li>\n<li>子类向父类的指针&#x2F;引用的转换</li>\n<li><code>void</code>与其他类型指针的转换</li>\n</ul>\n</li>\n<li><p><code>dynamic_cast</code>：<strong>down-cast</strong>，安全</p>\n<ul>\n<li>父类向子类的指针&#x2F;引用的转换，不一定总是安全（要求原本指向的对象就是子类对象）</li>\n<li>要求基类中<strong>至少存在一个虚函数</strong>（因此具有 <code>vptr</code>，从而可以通过不同类的 <code>vptr</code>进行类的区分）</li>\n<li><pre><code class=\"language-cpp\">Base* basePtr = new Derived();\nDerived* derivedPtr = dynamic_cast&lt;Derived*&gt;(basePtr);\n\nif(derivedPtr)&#123;\n...\n&#125;\n\n<div class=\"code-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* `const_cast`：修改 `const` 属性</span><br><span class=\"line\"></span><br><span class=\"line\">  * ```cpp</span><br><span class=\"line\">    const int a = 10;</span><br><span class=\"line\">    int *b = const_cast&lt;int*&gt;(&amp;a);</span><br><span class=\"line\"></span><br><span class=\"line\">    *b = 20; // 转换之后可以修改value</span><br></pre></td></tr></table></figure></div>\n\n&gt; 但是更加常见的是将非const类型的属性修改为 `const`；原本是常量类型的属性可能被编译器存储在只读内存区域，如果编译器没有在 `const_cast`的转换中进行优化，可能导致运行问题？\n&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p><code>reinterpret_cast</code>：忽略类型检查，强制转换，低安全性</p>\n</li>\n</ul>\n<h2 id=\"Template\"><a href=\"#Template\" class=\"headerlink\" title=\"Template\"></a>Template</h2><p>一个模板完全都是声明，应该只有 <code>.h</code>，而不含有 <code>.cpp</code></p>\n<blockquote>\n<p>必须<strong>都放在头文件的实现</strong>包含:</p>\n<ul>\n<li>函数模板;</li>\n<li>inline函数</li>\n<li>带有default参数的声明.</li>\n<li>类模板的成员函数</li>\n</ul>\n</blockquote>\n<h3 id=\"函数模板\"><a href=\"#函数模板\" class=\"headerlink\" title=\"函数模板\"></a>函数模板</h3><h4 id=\"参数匹配\"><a href=\"#参数匹配\" class=\"headerlink\" title=\"参数匹配\"></a>参数匹配</h4><div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Tp&gt;</span></span><br><span class=\"line\"><span class=\"function\">_Tp <span class=\"title\">add</span><span class=\"params\">(_Tp x, _Tp y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> **argv)</span></span>&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"built_in\">add</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>) &lt;&lt; std::endl; </span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"built_in\">add</span>(<span class=\"number\">1.1</span>, <span class=\"number\">2.2</span>) &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* T add(int, int) 和 T double add&lt;double&gt;(double, double) */</span></span><br></pre></td></tr></table></figure></div>\n\n<ol>\n<li>如果有原生的完全匹配的函数，优先使用原生函数，例如 <code>add(1, 2)</code> 调用 <code>add(int, int)</code>。</li>\n<li>其次，如果有模板能完全匹配的函数，使用模板生成函数，例如 <code>add(1.1, 2.2)</code> 调用 <code>add&lt;double&gt;(dobule, double)</code>。</li>\n<li>再其次，尝试使用类型转换来匹配其他原生函数。但是，类型转换不能用于匹配模板，例如 <code>add(1, 2.2)</code>。</li>\n</ol>\n<h3 id=\"类模板\"><a href=\"#类模板\" class=\"headerlink\" title=\"类模板\"></a>类模板</h3><p>简单的示例：</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Vector</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Vector</span>(<span class=\"type\">int</span> s):<span class=\"built_in\">size</span>(s)&#123;</span><br><span class=\"line\">        content = <span class=\"keyword\">new</span> T[size];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">virtual</span> ~<span class=\"built_in\">Vector</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span>[] content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    T&amp; <span class=\"keyword\">operator</span>[](<span class=\"type\">int</span> p)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> content[p];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    T* content;</span><br><span class=\"line\">    <span class=\"type\">int</span> size;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"Exception\"><a href=\"#Exception\" class=\"headerlink\" title=\"Exception\"></a>Exception</h2><p><strong>异常的类型如何定义？</strong></p>\n<blockquote>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 异常对象的定义</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DivisionError</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    string message;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">DivisionError</span>(<span class=\"type\">const</span> string&amp; msg) : <span class=\"built_in\">message</span>(msg) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;创建DivisionError异常对象&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    ~<span class=\"built_in\">DivisionError</span>() &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;销毁DivisionError异常对象&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\">string <span class=\"title\">what</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 内层函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">divide</span><span class=\"params\">(<span class=\"type\">double</span> a, <span class=\"type\">double</span> b)</span> </span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;进入divide函数&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"function\">Resource <span class=\"title\">r</span><span class=\"params\">(<span class=\"string\">&quot;divide函数的局部资源&quot;</span>)</span></span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (b == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"built_in\">DivisionError</span>(<span class=\"string\">&quot;除数不能为零&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;divide函数正常返回&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a / b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div></blockquote>\n<p>执行流程：</p>\n<ol>\n<li>通过 <code>throw</code> 创建对应的<strong>异常对象</strong></li>\n<li>将异常所在的内层函数的<strong>资源释放</strong>；</li>\n<li>再被外层的 <code>catch</code> 所<strong>捕获</strong></li>\n</ol>\n<p>在 <code>catch</code>块中可以通过 <code>throw;</code>再次抛出当前的异常</p>\n<p>自定义异常类时，通常应该继承自 <code>std::exception</code>或其派生类</p>\n<h4 id=\"异常规范\"><a href=\"#异常规范\" class=\"headerlink\" title=\"异常规范\"></a>异常规范</h4><p>在函数原型中声明可能返回的异常类型：</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(Document&amp; p)</span> <span class=\"title\">throw</span><span class=\"params\">(PrintOffLine, BadDocument)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">goodguy</span><span class=\"params\">()</span> <span class=\"title\">throw</span><span class=\"params\">()</span></span>;<span class=\"comment\">// throw no exceptions, until C++11</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">alloc</span><span class=\"params\">()</span> <span class=\"title\">throw</span><span class=\"params\">(...)</span></span>;<span class=\"comment\">// can throw any exception</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">abc</span><span class=\"params\">()</span> <span class=\"keyword\">noexcept</span></span>;<span class=\"comment\">// throw no exceptions, since C++11</span></span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>如果函数返回了规范之外的异常，将调用 <code>std::unexpected()</code>处理（默认调用 <code>std::terminate()</code>终止程序）</p>\n</blockquote>\n<p><code>noexcept</code>也可以作为运算符使用，检查表达式是否声明为不抛出异常：</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">bool</span> willNotThrow = <span class=\"built_in\">noexcept</span>(<span class=\"built_in\">func</span>());  <span class=\"comment\">// 检查func()是否声明为noexcept</span></span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"层次结构\"><a href=\"#层次结构\" class=\"headerlink\" title=\"层次结构\"></a>层次结构</h4><div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::exception</span><br><span class=\"line\">├── std::logic_error</span><br><span class=\"line\">│   ├── std::invalid_argument</span><br><span class=\"line\">│   ├── std::domain_error</span><br><span class=\"line\">│   ├── std::length_error</span><br><span class=\"line\">│   ├── std::out_of_range</span><br><span class=\"line\">│   └── std::future_error</span><br><span class=\"line\">├── std::runtime_error</span><br><span class=\"line\">│   ├── std::range_error</span><br><span class=\"line\">│   ├── std::overflow_error</span><br><span class=\"line\">│   ├── std::underflow_error</span><br><span class=\"line\">│   └── std::system_error</span><br><span class=\"line\">├── std::bad_alloc</span><br><span class=\"line\">├── std::bad_cast</span><br><span class=\"line\">├── std::bad_typeid</span><br><span class=\"line\">├── std::bad_exception</span><br><span class=\"line\">└── std::bad_function_call</span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li>数组的 <code>.at</code>可以自动抛出数组访问异常的 <code>range_error</code>；</li>\n<li>容器的 <code>resize</code>方法可以自动抛出长度异常 <code>length_error</code>；</li>\n</ul>\n<h4 id=\"构造与析构\"><a href=\"#构造与析构\" class=\"headerlink\" title=\"构造与析构\"></a>构造与析构</h4><p>析构函数应该避免抛出异常，否则会导致系统调用 <code>std::terminate()</code></p>\n<p>由于在 <code>try-catch</code>中，如果发生了异常，本地变量将自动调用自己的析构函数，此时如果存在 <code>new</code>申请的空间资源，将导致其无法指向正确的地址</p>\n<p>因此，我们采取两阶段的构造确保构造函数不会抛出异常：</p>\n<ol>\n<li>在构造函数内对基本变量赋值</li>\n<li>在 <code>init()</code>函数中显式申请内存空间</li>\n</ol>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Widget</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Widget</span>() : <span class=\"built_in\">initialized</span>(<span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 只做最小的初始化： 不存在抛出异常的可能</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">initialize</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 执行可能失败的初始化操作</span></span><br><span class=\"line\">            initialized = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"built_in\">catch</span> (...) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">use</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!initialized) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> std::<span class=\"built_in\">runtime_error</span>(<span class=\"string\">&quot;对象未初始化&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 使用对象</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">bool</span> initialized;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<hr>\n<h1 id=\"知识蒸馏\"><a href=\"#知识蒸馏\" class=\"headerlink\" title=\"知识蒸馏\"></a>知识蒸馏</h1><blockquote>\n<p>将个人印象比较浅的部分重新摘了一遍</p>\n</blockquote>\n<ul>\n<li>字符指针与字符数组</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> *sp = <span class=\"string\">&quot;Hello World!&quot;</span>; <span class=\"comment\">// 字符指针可以移动，不能修改</span></span><br><span class=\"line\"><span class=\"type\">char</span> array[] = <span class=\"string\">&quot;Hello World!&quot;</span>; <span class=\"comment\">// 字符数组不能移动，可以修改</span></span><br><span class=\"line\"></span><br><span class=\"line\">array[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;h&#x27;</span> ; <span class=\"comment\">// 合法</span></span><br><span class=\"line\">array = <span class=\"string\">&#x27;hello&#x27;</span>; <span class=\"comment\">// 非法！</span></span><br><span class=\"line\"></span><br><span class=\"line\">sp = <span class=\"string\">&#x27;world&#x27;</span>; <span class=\"comment\">// 合法</span></span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>实际上，<code>char *sp</code>就是 <code>const char *sp</code>，所以不能改变字符串的值，但是可以改变sp的指向</p>\n<p>而字符串数组的数组名是栈中的固定地址，无法移动，但是可以修改</p>\n</blockquote>\n<ul>\n<li><p>不同文件之间的全局变量, 初始化的前后顺序由链接器随机决定. 此时需要确保它们<strong>之间没有初始化的依赖.</strong></p>\n</li>\n<li><p>返回类型的常量</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">const</span> <span class=\"type\">int</span>* <span class=\"title\">f</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 只能将函数的返回值赋值给一个 const int*</span></span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<h4 id=\"vptr的大小\"><a href=\"#vptr的大小\" class=\"headerlink\" title=\"vptr的大小\"></a>vptr的大小</h4><p>如果父类具有 <code>virtual</code>也就是虚函数，子类继承之后也会得到一个虚函数表，对应有一个<strong>vptr</strong>指针指向自己的虚函数表：</p>\n<ul>\n<li>在64位的机器下，一个vptr指针的大小是<strong>8字节</strong></li>\n<li>普通函数不占据类的大小，因为函数地址存放在全局空间</li>\n<li>如果类内没有成员变量，也没有虚函数，那么大小就是<strong>1</strong>（告诉编译器这个类的存在）</li>\n</ul>\n<h4 id=\"编译器的对齐\"><a href=\"#编译器的对齐\" class=\"headerlink\" title=\"编译器的对齐\"></a>编译器的对齐</h4><ul>\n<li>C++ 编译器会对类进行<strong>按最大对齐的成员</strong>进行对齐</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Nothing</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Nothing</span>() &#123;&#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">virtual</span> ~<span class=\"built_in\">Nothing</span>() &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Nothing obj;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Sizeof Nothing: &quot;</span> &lt;&lt; <span class=\"built_in\">sizeof</span>(Nothing) &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Address of obj: &quot;</span> &lt;&lt; &amp;obj &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Address of a: &quot;</span> &lt;&lt; &amp;(obj.a) &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>对应的输出：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sizeof Nothing: 16</span><br><span class=\"line\">Address of obj: 0x16d57e830</span><br><span class=\"line\">Address of a: 0x16d57e838</span><br></pre></td></tr></table></figure></div>\n\n<p>我们可以观察到两个现象：</p>\n<ol>\n<li><code>size</code>&#x3D;16说明了对齐现象；</li>\n<li>Nothing对象的地址首先是其vptr，然后是其他的成员</li>\n</ol>\n<h1 id=\"期末题集\"><a href=\"#期末题集\" class=\"headerlink\" title=\"期末题集\"></a>期末题集</h1><blockquote>\n<p>补天专用楼</p>\n</blockquote>\n<h2 id=\"程序填空\"><a href=\"#程序填空\" class=\"headerlink\" title=\"程序填空\"></a>程序填空</h2><h4 id=\"题目摘录\"><a href=\"#题目摘录\" class=\"headerlink\" title=\"题目摘录\"></a>题目摘录</h4><h5 id=\"类模板：Array\"><a href=\"#类模板：Array\" class=\"headerlink\" title=\"类模板：Array\"></a>类模板：Array</h5><div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Array</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Array</span>() &#123;</span><br><span class=\"line\">        data = <span class=\"keyword\">new</span> T[BLK_SIZE];</span><br><span class=\"line\">        next = <span class=\"literal\">nullptr</span> ;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    ~<span class=\"built_in\">Array</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> [] data;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> next;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    T&amp; <span class=\"keyword\">operator</span>[](<span class=\"type\">int</span> i);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">iterate</span><span class=\"params\">(<span class=\"type\">void</span> (*f)(T&amp;))</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    T  *data; <span class=\"comment\">// data of type T</span></span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">int</span> BLK_SIZE=<span class=\"number\">32</span>; <span class=\"comment\">// fixed block size</span></span><br><span class=\"line\">    Array *next;  <span class=\"comment\">// the next array block</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">T&amp; Array&lt;T&gt;::<span class=\"keyword\">operator</span>[](<span class=\"type\">int</span> i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; BLK_SIZE) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data[i];</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (next == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            next = <span class=\"keyword\">new</span> Array&lt;T&gt;;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (*next)[i-BLK_SIZE];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> Array&lt;T&gt;::<span class=\"built_in\">iterate</span>(<span class=\"built_in\">void</span> (*f)(T&amp;)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; BLK_SIZE; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">f</span>(data[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (next != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        next-&gt; <span class=\"built_in\">iterate</span>(f);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Array&lt;<span class=\"type\">int</span>&gt; a;</span><br><span class=\"line\">    <span class=\"type\">int</span> size = <span class=\"number\">100</span>;</span><br><span class=\"line\">    cin &gt;&gt; size;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">        a[i] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    a.<span class=\"built_in\">iterate</span>([](<span class=\"type\">int</span> &amp;x) &#123; cout &lt;&lt; x &lt;&lt; endl; &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h5 id=\"函数模板：内积\"><a href=\"#函数模板：内积\" class=\"headerlink\" title=\"函数模板：内积\"></a>函数模板：内积</h5><p>此处的 <code>op</code>操作之前没有接触过，利用的是标准库提供的二元操作：</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;functional&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">InputIt1</span>, <span class=\"keyword\">class</span> <span class=\"title class_\">InputIt2</span>, <span class=\"keyword\">class</span> <span class=\"title class_\">T</span>, <span class=\"keyword\">class</span> <span class=\"title class_\">BinaryOp1</span>, <span class=\"keyword\">class</span> <span class=\"title class_\">BinaryOp2</span>&gt;</span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">inner_product</span><span class=\"params\">(InputIt1 first1, InputIt1 last1, InputIt2 first2, T init, BinaryOp1 op1, BinaryOp2 op2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (first1 != last1)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    init = <span class=\"built_in\">op1</span> (init, <span class=\"built_in\">op2</span>(*first1, *first2) );</span><br><span class=\"line\">    ++first1;</span><br><span class=\"line\">\t++first2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> init;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  std::vector&lt;<span class=\"type\">int</span>&gt; a&#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;;</span><br><span class=\"line\">  std::vector&lt;<span class=\"type\">int</span>&gt; b&#123;<span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">  <span class=\"type\">int</span> r1 = <span class=\"built_in\">inner_product</span>(a.<span class=\"built_in\">begin</span>(), a.<span class=\"built_in\">end</span>(), b.<span class=\"built_in\">begin</span>(), <span class=\"number\">0</span>, std::plus&lt;&gt;(), std::multiplies&lt;&gt;());</span><br><span class=\"line\">  std::cout &lt;&lt; <span class=\"string\">&quot;Inner product of a and b: &quot;</span> &lt;&lt; r1 &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"type\">int</span> r2 = <span class=\"built_in\">inner_product</span>(a.<span class=\"built_in\">begin</span>(), a.<span class=\"built_in\">end</span>(), b.<span class=\"built_in\">begin</span>(), <span class=\"number\">0</span>, std::plus&lt;&gt;(), std::equal_to&lt;&gt;());</span><br><span class=\"line\">  std::cout &lt;&lt; <span class=\"string\">&quot;Number of pairwise matches between a and b: &quot;</span> &lt;&lt;  r2 &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"类模板的填写\"><a href=\"#类模板的填写\" class=\"headerlink\" title=\"类模板的填写\"></a>类模板的填写</h4><ul>\n<li>非内联定义成员函数时，需要在类型与函数名之间加上 <code>&lt;class-name&gt;&lt;T&gt;::</code> ，不要忘记了其中的 <code>&lt;T&gt;</code></li>\n</ul>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">T&amp; Array&lt;T&gt;::<span class=\"keyword\">operator</span>[](<span class=\"type\">int</span> i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; BLK_SIZE) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data[i];</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (next == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            next = <span class=\"keyword\">new</span> Array&lt;T&gt;;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (*next)[i-BLK_SIZE];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"长话短说\"><a href=\"#长话短说\" class=\"headerlink\" title=\"长话短说\"></a>长话短说</h2><p><strong>注意函数模板的返回类型：</strong></p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">func</span><span class=\"params\">(T x, <span class=\"type\">double</span> y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">func</span>(<span class=\"number\">2.7</span>, <span class=\"number\">3</span>) &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">func</span>(<span class=\"number\">3</span>, <span class=\"number\">2.7</span>) &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>此时第二个输出从 5.7 向 int转换，得到的结果是 5</p>\n<p>如果是数组空间的管理, 注意 <code>new</code> 和  <code>delete</code> 都需要对应的 <code>[]</code></p>\n<p>如果没有显式定义任何的构造函数，那么编译器会自动创建一个默认构造函数</p>\n<ul>\n<li>但是如果程序员定义了任何的构造函数（无论是否带有默认参数），编译器就不用自动创建默认构造函数</li>\n</ul>\n<p><strong>upcast</strong>：将一个派生类的指针或者引用赋值给基类的指针或引用</p>\n<ul>\n<li><strong>动态绑定</strong>：发生upcast之后，通过基类指针或引用调用虚函数时，实际调用的是指针或引用锁指向的对象的虚函数的实现；而不是根据指针或引用的静态类型</li>\n<li>如果此时发生了析构，如果基类的析构函数是虚函数，就会先后调用子类和父类的析构函数；如果父类的析构函数不是虚函数，就只会调用父类的析构函数<ul>\n<li>为了确保子类的资源可以被释放，总是应当将类的析构函数作为虚析构函数</li>\n</ul>\n</li>\n</ul>\n<p><strong>析构函数不允许被重载</strong></p>\n<ul>\n<li>事实上，析构函数的名称固定，并且没有参数，因此无法通过参数列表来区分不同的韩苏版本，自然也就无法重载</li>\n</ul>\n<p>C++标准只规定了整数类型的相对顺序：</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sizeof</span>(<span class=\"type\">char</span>) &lt;= <span class=\"built_in\">sizeof</span>(<span class=\"type\">short</span>) &lt;= <span class=\"built_in\">sizeof</span>(<span class=\"type\">int</span>) &lt;= <span class=\"built_in\">sizeof</span>(<span class=\"type\">long</span>) &lt;= <span class=\"built_in\">sizeof</span>(<span class=\"type\">long</span> <span class=\"type\">long</span>)</span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li>也就是说, 可能存在 size上 <code>int = long</code>的情况</li>\n</ul>\n<p>A program is a bunch of objects telling each other how to do <strong>by sending messages</strong></p>\n<ul>\n<li>此处的消息在oop中指的就是通过调用对象内部的方法</li>\n</ul>\n<h2 id=\"一句话说不清楚的\"><a href=\"#一句话说不清楚的\" class=\"headerlink\" title=\"一句话说不清楚的\"></a>一句话说不清楚的</h2><h4 id=\"重载与友元函数\"><a href=\"#重载与友元函数\" class=\"headerlink\" title=\"重载与友元函数\"></a>重载与友元函数</h4><ul>\n<li><p>完全无法重载的：</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. .* :: ?:</span><br><span class=\"line\"><span class=\"keyword\">sizeof</span> <span class=\"keyword\">typeid</span></span><br><span class=\"line\"><span class=\"keyword\">static_cast</span> <span class=\"keyword\">dynamic_cast</span> <span class=\"keyword\">const_cast</span></span><br><span class=\"line\"><span class=\"keyword\">reinterpret_cast</span></span><br></pre></td></tr></table></figure></div></li>\n<li><p>只能作为成员函数（无法作为友元函数）重载的：</p>\n<div class=\"code-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=, (), [], -&gt;, -&gt;*</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>以及单目运算符</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"父类的构造函数\"><a href=\"#父类的构造函数\" class=\"headerlink\" title=\"父类的构造函数\"></a>父类的构造函数</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613213521969.png?imageSlim\"\n                     \n                >\n\n<p>构造函数与普通的成员函数不同：</p>\n<ul>\n<li>如果父类的构造函数被声明为 <code>private</code> 的，和普通的成员函数一样——只能被自己的成员和友元函数可以调用</li>\n<li>如果父类的构造函数被声明为 <code>protected</code> 的，那么只有父类的成员、友元以及<strong>派生类的构造函数</strong>可以调用；<ul>\n<li>这意味着此时无法直接在子类除了构造函数之外的地方来直接创建独立的父类对象</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"C-对编程范式的支持\"><a href=\"#C-对编程范式的支持\" class=\"headerlink\" title=\"C++对编程范式的支持\"></a>C++对编程范式的支持</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613214216540.png?imageSlim\"\n                     \n                >\n\n<ul>\n<li>过程式编程的特性包括：函数、全局变量、顺序执行、选择（if&#x2F;else, switch）、循环等<ul>\n<li>C就是过程式编程的一种，C++继承了C的特性，因此对过程式变成支持良好</li>\n</ul>\n</li>\n<li>声明式编程指的是“做什么”而非如何做，比如SQL、HTML、Swift等。C++和C是命令式语言，关注“如何做”</li>\n</ul>\n<blockquote>\n<p>因此答案选C</p>\n</blockquote>\n<h4 id=\"对象切片\"><a href=\"#对象切片\" class=\"headerlink\" title=\"对象切片\"></a>对象切片</h4><div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C2* pC2 = <span class=\"keyword\">new</span> <span class=\"built_in\">C2</span>();</span><br><span class=\"line\">cout &lt;&lt; endl;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    C1 a = *pC2; <span class=\"comment\">// 发生了对象切片，只保留了基类对象的属性</span></span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">C1* pC1 = pC2;</span><br><span class=\"line\"><span class=\"keyword\">delete</span> pC1; <span class=\"comment\">// 基类的析构函数是virtual的，所以此处发生多态析构</span></span><br><span class=\"line\">cout &lt;&lt; endl;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"拷贝初始化\"><a href=\"#拷贝初始化\" class=\"headerlink\" title=\"拷贝初始化\"></a>拷贝初始化</h4><p>用基本类型的值来隐式调用构造函数以创建对象:</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ResId</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">ResId</span>(<span class=\"type\">int</span> Id);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ResId res = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"comment\">// 等价于</span></span><br><span class=\"line\"><span class=\"comment\">// ResId res(5);</span></span><br><span class=\"line\"><span class=\"comment\">// ResId res = ResId(5);</span></span><br></pre></td></tr></table></figure></div>\n\n<p>这个过程分为两步:</p>\n<ol>\n<li>用 5 构造一个临时的ResId对象;</li>\n<li>用这个临时对象初始化res</li>\n</ol>\n<p>因此我们整体上可以说:</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">An object of <span class=\"keyword\">class</span> <span class=\"title class_\">ResId</span> will be created by <span class=\"number\">5</span></span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"禁止隐式的拷贝初始化\"><a href=\"#禁止隐式的拷贝初始化\" class=\"headerlink\" title=\"禁止隐式的拷贝初始化\"></a>禁止隐式的拷贝初始化</h4><p>通过声明 <code>explicit</code> 来禁止上述通过值隐式调用构造函数:</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">C</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">C</span><span class=\"params\">(<span class=\"type\">int</span>)</span> </span>&#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;i&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">C</span>(<span class=\"type\">double</span>) &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;d&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">C <span class=\"title\">c1</span><span class=\"params\">(<span class=\"number\">7</span>)</span></span>; <span class=\"comment\">// 匹配了第一个构造函数</span></span><br><span class=\"line\">    C c2 = <span class=\"number\">7</span>; <span class=\"comment\">// 隐式构造, 只能将7转换为double, 然后调用第二个构造函数</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>输出:</strong></p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i</span><br><span class=\"line\">d</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"子类对父类函数的重载与重写\"><a href=\"#子类对父类函数的重载与重写\" class=\"headerlink\" title=\"子类对父类函数的重载与重写\"></a>子类对父类函数的重载与重写</h4><p>子类如果重载或者重写了父类的同名函数，将无法通过子类的对象访问父类中的这些函数：</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">F</span><span class=\"params\">(<span class=\"type\">int</span>)</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;A::F(int)&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">F</span><span class=\"params\">(<span class=\"type\">double</span>)</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;A::F(double)&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">F2</span><span class=\"params\">(<span class=\"type\">int</span>)</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;A::F2(int)&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> : <span class=\"keyword\">public</span> A &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t  <span class=\"keyword\">using</span> A::F;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">F</span><span class=\"params\">(<span class=\"type\">double</span>)</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;B::F(double)&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    B b;</span><br><span class=\"line\">    b.<span class=\"built_in\">F</span>(<span class=\"number\">2.0</span>);</span><br><span class=\"line\">    b.<span class=\"built_in\">F</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">    b.<span class=\"built_in\">F2</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>输出：</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B::<span class=\"built_in\">F</span>(<span class=\"type\">double</span>)</span><br><span class=\"line\">B::<span class=\"built_in\">F</span>(<span class=\"type\">double</span>)</span><br><span class=\"line\">A::<span class=\"built_in\">F2</span>(<span class=\"type\">int</span>)</span><br></pre></td></tr></table></figure></div>\n\n<p>但是我们可以通过在子类中声明 <code>using A::F</code>来重新获得访问权限：</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> : <span class=\"keyword\">public</span> A &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">using</span> A::F;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">F</span><span class=\"params\">(<span class=\"type\">double</span>)</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;B::F(double)&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></div>\n\n<p>此时的输出为：</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B::<span class=\"built_in\">F</span>(<span class=\"type\">double</span>)</span><br><span class=\"line\">A::<span class=\"built_in\">F</span>(<span class=\"type\">int</span>)</span><br><span class=\"line\">A::<span class=\"built_in\">F2</span>(<span class=\"type\">int</span>)</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"默认参数的静态绑定\"><a href=\"#默认参数的静态绑定\" class=\"headerlink\" title=\"默认参数的静态绑定\"></a>默认参数的静态绑定</h4><ul>\n<li>虚函数：运行时多态（动态绑定）</li>\n<li>默认参数：编译时确定（静态绑定）</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">foo</span><span class=\"params\">(<span class=\"type\">int</span> a = <span class=\"number\">1</span>)</span> </span>&#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;A&quot;</span> &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span> &lt;&lt; a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">B</span> : A &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">foo</span><span class=\"params\">(<span class=\"type\">int</span> a = <span class=\"number\">2</span>)</span> </span>&#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;B&quot;</span> &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span> &lt;&lt; a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    A *a = <span class=\"keyword\">new</span> B;</span><br><span class=\"line\">    a-&gt;<span class=\"built_in\">foo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>输出：</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B</span><br><span class=\"line\"><span class=\"number\">1</span></span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p><strong>为什么cpp要选择让静态参数实现静态绑定？</strong></p>\n<p>为了保持语言的一致性与可预测性，设计者让静态参数作为编译时期自动替换的值，避免在运行过程中动态替换</p>\n</blockquote>\n<h4 id=\"函数模板与模板特化\"><a href=\"#函数模板与模板特化\" class=\"headerlink\" title=\"函数模板与模板特化\"></a>函数模板与模板特化</h4><p>模板特化：在函数模板的基础上，如果我们希望对某个类型实现不一样的逻辑，就可以使用～</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"type\">const</span> T&amp; value)</span> </span>&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;泛型模板: &quot;</span> &lt;&lt; value &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对int类型采取模板特化</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"built_in\">f</span>&lt;<span class=\"type\">int</span>&gt;(<span class=\"type\">const</span> <span class=\"type\">int</span>&amp; value) &#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;特化版本: int 类型&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li>因此，模板特化必须首先存在一个主模板</li>\n</ul>\n<p><strong>模板特化的结果无法被重载</strong></p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt; <span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">(T &amp;i)</span> </span>&#123; std::cout &lt;&lt; <span class=\"number\">1</span>; &#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;&gt; <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;i)</span> </span>&#123; std::cout &lt;&lt; <span class=\"number\">2</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">24</span>;</span><br><span class=\"line\">    <span class=\"built_in\">f</span>(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>将会输出： <code>1</code></p>\n<ul>\n<li>如果我们只保留 <code>void f(const int &amp;i) &#123; std::cout &lt;&lt; 2; &#125;</code>  函数，将会触发类型转换，可以调用</li>\n<li>如果我们只去除模板特化中的 <code>const</code>， 就可以匹配（输出 <code>2</code>）</li>\n</ul>\n<p>再比如：</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(T, T)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">add</span>(<span class=\"number\">1</span>, <span class=\"number\">2.2</span>); <span class=\"comment\">// ❌ 模板不能推导出统一的 T（int vs double）</span></span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"常量对象\"><a href=\"#常量对象\" class=\"headerlink\" title=\"常量对象\"></a>常量对象</h4><ul>\n<li>静态函数同样参与函数重载，但是优先匹配非静态函数</li>\n<li>静态函数不受 <code>const</code>限制——即使没有被声明为 <code>const</code>也可以被常量对象调用</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"type\">double</span>)</span> </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;f(double)&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"type\">int</span>)</span> </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;f(int)&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> A a;</span><br><span class=\"line\">    a.<span class=\"built_in\">f</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>输出：</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">f</span>(<span class=\"type\">double</span>)</span><br></pre></td></tr></table></figure></div>\n\n<p>如果存在完全匹配的普通函数，就会直接调用非静态函数：</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"type\">int</span>)</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;f(int) const&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"type\">int</span>)</span> </span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;f(int)&quot;</span> &lt;&lt; endl;</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>此处的 <code>void f(int) const</code> 无法改为 <code>void f(double) const</code>, 否则与同名静态函数的参数完全一致</p>\n</blockquote>\n<h4 id=\"异常的-catch顺序\"><a href=\"#异常的-catch顺序\" class=\"headerlink\" title=\"异常的 catch顺序\"></a>异常的 <code>catch</code>顺序</h4><p><code>catch</code>块的匹配是从上到下的，因此只要遇到第一个匹配的，后续的匹配就会结束</p>\n<ul>\n<li>子类的对象可以被父类捕获</li>\n<li>注意此时的动态绑定——如果父类层级（引用或者指针）在前，内部抛出的是子类的异常对象，捕捉之后调用的函数是子类的对象</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">const</span> <span class=\"type\">char</span>* <span class=\"title\">what</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Base::what()&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">virtual</span> ~<span class=\"built_in\">Base</span>() &#123;&#125;  <span class=\"comment\">// 虚析构保证多态安全</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Derived</span> : <span class=\"keyword\">public</span> Base &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">const</span> <span class=\"type\">char</span>* <span class=\"title\">what</span><span class=\"params\">()</span> <span class=\"type\">const</span> <span class=\"keyword\">override</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Derived::what()&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"built_in\">Derived</span>();  <span class=\"comment\">// 抛出子类对象</span></span><br><span class=\"line\">    &#125; <span class=\"built_in\">catch</span> (<span class=\"type\">const</span> Base&amp; e) &#123;  <span class=\"comment\">// 用父类引用接收</span></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;由父类层级捕获到异常: &quot;</span> &lt;&lt; e.<span class=\"built_in\">what</span>() &lt;&lt; endl;  <span class=\"comment\">// 动态绑定调用子类 what()</span></span><br><span class=\"line\">    &#125; <span class=\"built_in\">catch</span> (<span class=\"type\">const</span> Derived&amp; e) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;由子类层级捕获到异常: &quot;</span> &lt;&lt; e.<span class=\"built_in\">what</span>() &lt;&lt; endl;</span><br><span class=\"line\">    &#125; <span class=\"built_in\">catch</span> (...) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;捕获到未知异常&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>输出：</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">由父类层级捕获到异常: Derived::<span class=\"built_in\">what</span>()</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>如果将 <code>catch</code>内部改为普通的对象，将会输出 <code>由父类层级捕获到异常: Base::what()</code></p>\n</blockquote>\n<p>由此可见，我们应该遵循：将子类对象的捕捉放在其父类之前，最后是 <code>catch(...)</code></p>\n","more":"<h1 id=\"知识点回顾\"><a href=\"#知识点回顾\" class=\"headerlink\" title=\"知识点回顾\"></a>知识点回顾</h1><ul>\n<li><p><code>end（）</code>返回的是容器最后一个位置的<strong>下一个位置</strong>的迭代器</p>\n</li>\n<li><p><code>string::npos</code>是 <code>size_t</code>类型的最大值;</p>\n</li>\n<li><p><code>to_string</code>将数字转换成字符串:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> num = <span class=\"number\">123</span>;</span><br><span class=\"line\">string str = <span class=\"built_in\">to_string</span>(num);</span><br></pre></td></tr></table></figure></li>\n<li><p><code>stoi</code>将字符串转换成整数</p>\n</li>\n<li><p>参数的默认值只能从右到左给出；默认值只能出现在函数的原型或者将定义和声明放在一起，而不能在分离的定义中声明</p>\n</li>\n<li><p>列表初始化是按成员的<strong>声明顺序</strong>执行的，和成员在列表中的顺序无关。</p>\n</li>\n</ul>\n<h2 id=\"实验操作\"><a href=\"#实验操作\" class=\"headerlink\" title=\"实验操作\"></a>实验操作</h2><h4 id=\"截取字符串\"><a href=\"#截取字符串\" class=\"headerlink\" title=\"截取字符串\"></a>截取字符串</h4><p>用邮箱地址的截取，说明 <code>rfind</code>与 <code>str</code>等方法的使用：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string email = <span class=\"string\">&quot;user.name@example.com&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取用户名的部分</span></span><br><span class=\"line\"><span class=\"type\">int</span> atPos = email.<span class=\"built_in\">find</span>(<span class=\"string\">&#x27;@&#x27;</span>);</span><br><span class=\"line\">string username = email.<span class=\"built_in\">substr</span>(<span class=\"number\">0</span>, atPos); <span class=\"comment\">// result: &quot;user.name&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取域名部分</span></span><br><span class=\"line\">string domain =  email.<span class=\"built_in\">substr</span>(atPos + <span class=\"number\">1</span>); <span class=\"comment\">// result: &quot;example.com&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取顶级域名(最后一个.之后的部分)</span></span><br><span class=\"line\"><span class=\"type\">int</span> lastDotPos = email.<span class=\"built_in\">rfind</span>(<span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">string topLevelDomain = email.<span class=\"built_in\">substr</span>(lastDotPos + <span class=\"number\">1</span>); <span class=\"comment\">// result: &quot;com&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Stream\"><a href=\"#Stream\" class=\"headerlink\" title=\"Stream\"></a>Stream</h2><h3 id=\"文件流\"><a href=\"#文件流\" class=\"headerlink\" title=\"文件流\"></a>文件流</h3><ul>\n<li>一个简单的输入&#x2F;输出：流</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span>  <span class=\"comment\">// 需要包含这个头文件</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 文件输出（写入文件）</span></span><br><span class=\"line\"><span class=\"function\">ofstream <span class=\"title\">outFile</span><span class=\"params\">(<span class=\"string\">&quot;output.txt&quot;</span>)</span></span>;</span><br><span class=\"line\">outFile &lt;&lt; <span class=\"string\">&quot;Hello World&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">outFile.<span class=\"built_in\">close</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 文件输入（读取文件）</span></span><br><span class=\"line\"><span class=\"function\">ifstream <span class=\"title\">inFile</span><span class=\"params\">(<span class=\"string\">&quot;input.txt&quot;</span>)</span></span>; </span><br><span class=\"line\">string line;</span><br><span class=\"line\"><span class=\"built_in\">getline</span>(inFile, line);</span><br><span class=\"line\">inFile.<span class=\"built_in\">close</span>();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>getline()</code>函数可以显式指定终止符（第三个参数），默认为 <code>\\n</code>也就是换行符。并且会将终止符丢弃</p>\n</blockquote>\n<h4 id=\"位或运算符指定模式\"><a href=\"#位或运算符指定模式\" class=\"headerlink\" title=\"位或运算符指定模式\"></a>位或运算符指定模式</h4><p>可以使用 <code>｜</code>来指定多个模式：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 组合使用打开模式</span></span><br><span class=\"line\"><span class=\"function\">ofstream <span class=\"title\">outFile</span><span class=\"params\">(<span class=\"string\">&quot;test.txt&quot;</span>, ios::out | ios::app)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串流\"><a href=\"#字符串流\" class=\"headerlink\" title=\"字符串流\"></a>字符串流</h3><p>字符串流的作用原理：</p>\n<ul>\n<li>作用: 将字符串转换成一个类似于输入流的对象;</li>\n<li>内部维护了一个字符串和一个位置指针;</li>\n<li>每次读取时, 位置指针向后移动, 且自动跳过空白字符.</li>\n</ul>\n<p><code>stringstream</code>表示双向字符串流</p>\n<h4 id=\"字符串分词\"><a href=\"#字符串分词\" class=\"headerlink\" title=\"字符串分词\"></a>字符串分词</h4><p>我们可以将字符串转换成字符串流，来实现字符串的分词：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">name</span><span class=\"params\">(<span class=\"string\">&quot;xiao ming&quot;</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">istringstream <span class=\"title\">is</span><span class=\"params\">(name)</span></span>;</span><br><span class=\"line\">string token;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(is &gt;&gt; token)</span><br><span class=\"line\">\tcout &lt;&lt; token &lt;&lt; endl;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>按照空白字符i.e. 空格、<code>\\t</code>, <code>\\n</code>来分词</p>\n</blockquote>\n<h4 id=\"字符串的拼接\"><a href=\"#字符串的拼接\" class=\"headerlink\" title=\"字符串的拼接\"></a>字符串的拼接</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ostringstream oss;</span><br><span class=\"line\">    string name = <span class=\"string\">&quot;Alice&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> age = <span class=\"number\">25</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">    oss &lt;&lt; <span class=\"string\">&quot;Name: &quot;</span> &lt;&lt; name &lt;&lt; <span class=\"string\">&quot;, Age: &quot;</span> &lt;&lt; age;</span><br><span class=\"line\">    string result = oss.<span class=\"built_in\">str</span>();</span><br><span class=\"line\">    cout &lt;&lt; result &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>Output:</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Name: Alice, Age: 25</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>通过 <code>.str()</code>方法可以对象转换为字符串类型, 从而<strong>格式化输出</strong>.</p>\n<p><code>.str(&quot;&quot;)</code>方法可以<strong>清空</strong>字符串流:</p>\n</blockquote>\n<h2 id=\"STL\"><a href=\"#STL\" class=\"headerlink\" title=\"STL\"></a>STL</h2><h4 id=\"for-each\"><a href=\"#for-each\" class=\"headerlink\" title=\"for-each\"></a>for-each</h4><p>以更简单的方式遍历容器内元素:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::map&lt;std::string, <span class=\"type\">double</span>&gt; price;</span><br><span class=\"line\"><span class=\"comment\">// Assume we&#x27;ve inserted a lot of name-price pairs</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [key, value]: price)&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; key &lt;&lt; <span class=\"string\">&quot;: &quot;</span> &lt;&lt; value &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h3><h4 id=\"lower-bound\"><a href=\"#lower-bound\" class=\"headerlink\" title=\"lower_bound\"></a>lower_bound</h4><p>使用～函数可以查找不小于某个值的第一个键：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::map&lt;<span class=\"type\">long</span> <span class=\"type\">long</span>, <span class=\"type\">int</span>&gt; tags&#123;&#123;<span class=\"number\">10</span>, <span class=\"number\">1</span>&#125;, &#123;<span class=\"number\">100</span>, <span class=\"number\">2</span>&#125;, &#123;<span class=\"number\">1000</span>, <span class=\"number\">3</span>&#125;, &#123;<span class=\"number\">10000</span>, <span class=\"number\">4</span>&#125;, &#123;<span class=\"number\">10000000000</span>, <span class=\"number\">10</span>&#125;&#125;;</span><br><span class=\"line\">std::map&lt;<span class=\"type\">long</span> <span class=\"type\">long</span>, <span class=\"type\">int</span>&gt;::iterator it = tags.<span class=\"built_in\">lower_bound</span>(<span class=\"number\">2000</span>);</span><br><span class=\"line\">std::cout &lt;&lt; it-&gt;first &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; std::endl; <span class=\"comment\">// it should be &quot;10000 4&quot;</span></span><br><span class=\"line\">it++;</span><br><span class=\"line\">std::cout &lt;&lt; it-&gt;first &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; std::endl; <span class=\"comment\">// it should be &quot;10000000000 10&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"class\"><a href=\"#class\" class=\"headerlink\" title=\"class\"></a>class</h2><h4 id=\"include机制\"><a href=\"#include机制\" class=\"headerlink\" title=\"include机制\"></a>include机制</h4><p><code>#include</code> 语句的作用是将某个文件插入到语句所在位置。根据搜索的顺序，可以划分不同的用法。</p>\n<ul>\n<li><code>#include &quot;xx.h&quot;</code>：先搜索当前文件夹，再搜索系统库</li>\n<li><code>#include &lt;xx.h&gt;</code>：搜索系统库</li>\n<li><code>#include &lt;xx&gt;</code>：搜索系统库</li>\n</ul>\n<p>注意权限的管理是<strong>针对于类</strong>的，同一类的不同对象可以在其成员函数内任意访问别的成员</p>\n<p>友元不具有传递性：</p>\n<ul>\n<li><code>friend class</code>+一个类名，可以指定友元类</li>\n<li><code>friend</code>+一个函数的声明，指定友元函数</li>\n</ul>\n<p>生命周期：</p>\n<ul>\n<li>main外的类的对象（i.e. 全局作用域），其构造函数调用的时间早于 <code>main</code>函数；其析构函数的调用也在 <code>main</code>函数返回之后</li>\n</ul>\n<h4 id=\"静态\"><a href=\"#静态\" class=\"headerlink\" title=\"静态\"></a>静态</h4><p>静态指的是：</p>\n<ul>\n<li>空间的静态</li>\n<li>受限的访问</li>\n<li>静态局部变量在第一次遇到的时候初始化</li>\n<li>静态成员变量在 <code>.h</code>文件中的声明有 <code>static</code>标签，但是在 <code>.cpp</code> 中不应该有～标签；否则无法被其他文件中使用。 静态成员函数同理</li>\n</ul>\n<p>两种访问静态内容的方式：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">name</span>&gt;::&lt;<span class=\"type\">static</span> member&gt;</span><br><span class=\"line\">&lt;object name&gt;.&lt;<span class=\"type\">static</span> member&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h4><p>一般的字面量都是右值，但是字符串是例外，因为字符串实际上存储在静态内存区</p>\n<p>一般来说，左值引用不能绑定右值，但是<strong>常量左值引用可以绑定右值</strong>，因为常量的特性确定了不会对右值进行修改</p>\n<blockquote>\n<p>但是如果同时存在右值引用，右值作为参数时还是会优先重载右值引用的版本</p>\n</blockquote>\n<p><strong>规范：</strong></p>\n<ul>\n<li><p>不允许定义引用的引用；</p>\n</li>\n<li><p><strong>不允许定义引用的数组</strong>；</p>\n<ul>\n<li>引用不是单独存在的对象，无法按照数组存储</li>\n</ul>\n</li>\n<li><p><strong>不允许定义指向引用的指针</strong></p>\n<ul>\n<li>指针必须指向对象，而引用不是对象</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h4><p>使用 <code>const</code>标记声明为常量</p>\n<p>常量可以直接让编译器尝试替换：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> bufsize = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> index[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> f[bufsize]; <span class=\"comment\">// Ok: f[1024]</span></span><br><span class=\"line\"><span class=\"type\">int</span> f[index[<span class=\"number\">3</span>]]; <span class=\"comment\">// Error</span></span><br></pre></td></tr></table></figure>\n\n<p>但是需要特别注意的是：<strong>对象的常量不是编译器常量！ i.e.</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Array</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> size = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> array[size]; <span class=\"comment\">// Error！</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>可以使用枚举或者 <code>static</code>来解决上述的问题：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> &#123;size = <span class=\"number\">10</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">int</span> size = <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure></blockquote>\n<p>常量和指针；</p>\n<ul>\n<li><code>const *p</code>表示不能通过指针改变指向的对象内容；</li>\n<li><code>* const p</code>表示不能改变指针的指向位置</li>\n</ul>\n<blockquote>\n<p>不需要关注类型与 <code>*</code>的位置关系</p>\n</blockquote>\n<p><strong>字符指针和字符数组；</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> *sp = <span class=\"string\">&quot;Hello World!&quot;</span>; <span class=\"comment\">// 字符指针可以移动，不能修改</span></span><br><span class=\"line\"><span class=\"type\">char</span> array[] = <span class=\"string\">&quot;Hello World!&quot;</span>; <span class=\"comment\">// 字符数组不能移动，可以修改</span></span><br><span class=\"line\"></span><br><span class=\"line\">array[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;h&#x27;</span> ; <span class=\"comment\">// 合法</span></span><br><span class=\"line\">array = <span class=\"string\">&#x27;hello&#x27;</span>; <span class=\"comment\">// 非法！</span></span><br><span class=\"line\"></span><br><span class=\"line\">sp = <span class=\"string\">&#x27;world&#x27;</span>; <span class=\"comment\">// 合法</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>实际上，<code>char *sp</code>就是 <code>const char *sp</code>，所以不能改变字符串的值，但是可以改变sp的指向</p>\n<p>而字符串数组的数组名是栈中的固定地址，无法移动，但是可以修改</p>\n</blockquote>\n<p>注意区分<strong>常量函数</strong>和返回值的常量：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getName</span><span class=\"params\">(<span class=\"type\">int</span> id)</span> <span class=\"type\">const</span></span>; <span class=\"comment\">// 常量函数，无法改变成员变量，常量对象只能调用自己的常量成员函数（与静态成员函数）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">const</span> <span class=\"type\">int</span> <span class=\"title\">getAge</span><span class=\"params\">(<span class=\"type\">int</span> id)</span></span>; <span class=\"comment\">// 限制了返回值是一个常量</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"delete\"><a href=\"#delete\" class=\"headerlink\" title=\"delete\"></a>delete</h4><p>注意 <code>[]</code>搭配的使用：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> *p = <span class=\"keyword\">new</span> <span class=\"type\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">delete</span> [] p;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Inside-class\"><a href=\"#Inside-class\" class=\"headerlink\" title=\"Inside class\"></a>Inside class</h2><h4 id=\"代理构造\"><a href=\"#代理构造\" class=\"headerlink\" title=\"代理构造\"></a>代理构造</h4><p>可以在一个构造函数中调用另一个构造函数，减少代码的重复：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">sorted</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">sorted</span>()&#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">sorted</span>(<span class=\"type\">int</span> _x)&#123;</span><br><span class=\"line\">        x = _x &gt; <span class=\"number\">0</span>? _x: <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sorted</span>(<span class=\"type\">int</span> _x, <span class=\"type\">int</span> _z): <span class=\"built_in\">sorted</span>(_x)&#123;</span><br><span class=\"line\">        z = _z &gt; <span class=\"number\">0</span> &amp;&amp; _z &lt; x? _z: <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sorted</span>(<span class=\"type\">int</span> _x, <span class=\"type\">int</span> _y, <span class=\"type\">int</span> _z): <span class=\"built_in\">sorted</span>(_x, _z)&#123;</span><br><span class=\"line\">        y = _y &lt; x &amp;&amp; _y &gt; z? _y: <span class=\"number\">5</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> x, y, z;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"内联函数\"><a href=\"#内联函数\" class=\"headerlink\" title=\"内联函数\"></a>内联函数</h4><p>通过 <code>inline</code>关键字，<strong>建议编译器将函数调用处替换为函数体代码本身</strong> ，从而避免函数调用开销。</p>\n<blockquote>\n<p>是否作为内联函数，实际上由编译器所决定</p>\n</blockquote>\n<p>内联函数必须提供完整的函数定义</p>\n<blockquote>\n<p>i.e. 内联函数的声明必需伴随实现（在同一个头文件中即可，二者可以分离）</p>\n</blockquote>\n<h2 id=\"组合与继承\"><a href=\"#组合与继承\" class=\"headerlink\" title=\"组合与继承\"></a>组合与继承</h2><h3 id=\"组合\"><a href=\"#组合\" class=\"headerlink\" title=\"组合\"></a>组合</h3><p>组合的对象分为完全包含和引用包含，什么时候使用引用包含呢？</p>\n<ul>\n<li>逻辑上子对象应该在对象的外部；</li>\n<li>子对象的大小不确定</li>\n<li>子对象的空间应该在运行时被分配或者链接</li>\n</ul>\n<h4 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a>命名空间</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> sp1&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">g</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> sp2&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">g</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;<span class=\"comment\">// No terminating end colon!</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> alias = sp1;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">g</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    sp1::<span class=\"built_in\">f</span>();</span><br><span class=\"line\">    sp2::<span class=\"built_in\">f</span>();</span><br><span class=\"line\">    ::<span class=\"built_in\">f</span>();</span><br><span class=\"line\">    <span class=\"built_in\">f</span>();<span class=\"comment\">// the same as ::f()</span></span><br><span class=\"line\">    alias::<span class=\"built_in\">f</span>();<span class=\"comment\">// the same as sp1::f()</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ul>\n<li>可以为命名空间声明别名；</li>\n<li>命名空间的末尾没有分号 <code>；</code></li>\n</ul>\n</blockquote>\n<h4 id=\"using\"><a href=\"#using\" class=\"headerlink\" title=\"using\"></a>using</h4><p>使用 <code>using</code>可以在当前的作用域引入其他的命名空间的成员、函数：</p>\n<ul>\n<li><code>using &lt;namespace&gt;::&lt;member&gt;</code> 引入部分的成员</li>\n<li><code>using namespace &lt;namespace&gt;</code> 引入该命名空间的全部成员</li>\n</ul>\n<p>e.g.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> std::cin; <span class=\"comment\">// 只引入 cin</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std; <span class=\"comment\">// 引入std的所有成员</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果引入同名的对象或者函数，将会导致编译器链接失败</p>\n</blockquote>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>父类的析构函数更晚调用</p>\n<p>父类的<strong>私有成员变量在子类的对象中依旧存在</strong>，但是不可直接访问（只能通过父类方法来间接访问）</p>\n<p>父类的受保护成员可以被子类访问，但是无法被外界访问</p>\n<h4 id=\"非公开的继承\"><a href=\"#非公开的继承\" class=\"headerlink\" title=\"非公开的继承\"></a>非公开的继承</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span>: <span class=\"keyword\">protected</span> A&#123;</span><br><span class=\"line\">    ...  </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span>: <span class=\"keyword\">private</span> A&#123;<span class=\"comment\">//default</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果定义 <code>protected</code> 继承，只有子类及其派生类可以调用父类方法，外部是不可以的。</p>\n<p>如果定义 <code>private</code> 继承，只有子类本身可以调用父类方法。</p>\n</blockquote>\n<h4 id=\"静态成员的继承\"><a href=\"#静态成员的继承\" class=\"headerlink\" title=\"静态成员的继承\"></a>静态成员的继承</h4><p>父类的静态成员不会在子类中具有自己的副本，<strong>子类和父类共享一个静态成员！</strong></p>\n<p>以下介绍using相关的几个问题：</p>\n<h4 id=\"name-hiding\"><a href=\"#name-hiding\" class=\"headerlink\" title=\"name hiding\"></a>name hiding</h4><p>如果子类重载了父类的函数，父类的同名函数将会失效，无法直接调用，需要使用 <code>using</code>来声明：</p>\n<p>e.g.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>: </span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"type\">double</span>)</span></span>&#123;</span><br><span class=\"line\">      cout &lt;&lt; <span class=\"string\">&quot;double\\n&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Derived</span> : Base&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  \t<span class=\"keyword\">using</span> Base::f; <span class=\"comment\">// 将基类中的私有函数本地使用</span></span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"type\">int</span>)</span></span>&#123;</span><br><span class=\"line\">      cout &lt;&lt; <span class=\"string\">&quot;int\\n&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"默认参数的重载传递\"><a href=\"#默认参数的重载传递\" class=\"headerlink\" title=\"默认参数的重载传递\"></a>默认参数的重载传递</h4><p>在cpp中, 默认参数值绑定在函数声明的作用域上, 而不是函数本身! 这是为了避免 <strong>多重继承时参数值产生冲突或二义性</strong> 。</p>\n<blockquote>\n<p>默认参数是静态绑定（编译期行为），它必须清楚地知道取哪个作用域的值.</p>\n</blockquote>\n<p>e.g.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"type\">int</span> a = <span class=\"number\">3</span>, <span class=\"type\">double</span> b = <span class=\"number\">2.0</span>)</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> : <span class=\"keyword\">public</span> A &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">using</span> A::f;         <span class=\"comment\">// ✅ 此时默认参数仍可见</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"type\">int</span> a)</span></span>;      <span class=\"comment\">// ❌ 重载后，这个版本没有默认参数</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"子类重写父类函数\"><a href=\"#子类重写父类函数\" class=\"headerlink\" title=\"子类重写父类函数\"></a>子类重写父类函数</h4><p>如果子类直接重写了父类的函数，但是父类中的同名函数本身具有重载的版本，那么也需要使用 <code>using</code>来声明：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 基类中的重载函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">display</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;Base display(int): &quot;</span> &lt;&lt; x &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">display</span><span class=\"params\">(<span class=\"type\">double</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;Base display(double): &quot;</span> &lt;&lt; x &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Derived</span> : <span class=\"keyword\">public</span> Base</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 子类重新定义了基类的 display(int)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">display</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;Derived display(int): &quot;</span> &lt;&lt; x &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> Base::display;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Derived d;</span><br><span class=\"line\">    d.<span class=\"built_in\">display</span>(<span class=\"number\">5</span>); <span class=\"comment\">// 调用 Derived 的 display(int)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    d.Base::<span class=\"built_in\">display</span>(<span class=\"number\">5.5</span>); <span class=\"comment\">// 或者d.display(5.5);</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h2><ul>\n<li>我们应当将所有类的析构函数都设置为<strong>虚析构函数</strong>，因为每个类都有成为父类的可能</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">virtual</span> ~<span class=\"built_in\">Base</span>() &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Base Destructor&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Derived</span> : <span class=\"keyword\">public</span> Base &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    ~<span class=\"built_in\">Derived</span>() &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Derived Destructor&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>子类和父类的析构函数先后调用</p>\n</blockquote>\n<ul>\n<li><p><code>vptr</code>在构造的时候确定，虚继承的子类在调用父类的构造函数时，默认<strong>调用父类的成员函数</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">A</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">f</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;A::f()&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> : <span class=\"keyword\">public</span> A &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">B</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">f</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;B::f()&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">B temp;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"虚函数的规范\"><a href=\"#虚函数的规范\" class=\"headerlink\" title=\"虚函数的规范\"></a>虚函数的规范</h4><p>注意 <code>virtual</code>与 <code>override</code>的搭配：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">speak</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Animal speaks&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span> : <span class=\"keyword\">public</span> Animal &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">speak</span><span class=\"params\">()</span> <span class=\"keyword\">override</span> </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Dog barks&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>override是为了让编译器检查该函数在父类中是虚函数，但不是必须的</p>\n</blockquote>\n<ul>\n<li>vtable是类级别的, 所有该类的对象共享一个vtable;</li>\n<li>vptr是对象级别的, 隐含于各个对象当中.并且在内存的开头</li>\n</ul>\n<h4 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h4><p>抽象类：至少包含一个<strong>纯虚函数</strong>的类是～</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Shape</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 纯虚函数，子类必须实现</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>纯虚函数类似于协议，要求子类必须实现</p>\n<p>只有完成了所有纯虚函数定义的、抽象类的子类，才能够实例化</p>\n</blockquote>\n<p><strong>接口类 Interface Class：</strong></p>\n<ul>\n<li>比抽象类更加抽象）</li>\n<li>只定义接口, 不提供实现的抽象类</li>\n<li>所有的<strong>成员函数都是纯虚函数</strong>;</li>\n<li>一般不包含任何数据成员.</li>\n</ul>\n<h4 id=\"菱形继承与虚继承\"><a href=\"#菱形继承与虚继承\" class=\"headerlink\" title=\"菱形继承与虚继承\"></a>菱形继承与虚继承</h4><p>在继承时添加 <code>virtual</code> 关键字实现,子类中不存在父类的对象，而是保有父类的指针。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> value;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ptr</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;value: &quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> : <span class=\"keyword\">virtual</span> <span class=\"keyword\">public</span> A &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">C</span> : <span class=\"keyword\">virtual</span> <span class=\"keyword\">public</span> A &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">D</span> : <span class=\"keyword\">public</span> B, <span class=\"keyword\">public</span> C &#123;&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>上述的虚继承确保了B，C只会拥有A的一份value，从而避免了从D的对象访问 <code>value</code>时存在的<strong>二义性</strong></p>\n<blockquote>\n<p>并非所有的菱形继承都会因为二义性的访问而导致访问的问题！</p>\n</blockquote>\n<p>TODO：检查什么时候没有二义性？</p>\n<p>由于虚继承带来的是“共享”的基类对象，所以：</p>\n<ul>\n<li>虚基类的构造 <strong>必须由最底层派生类负责</strong></li>\n<li>派生类的构造函数中要<strong>显式初始化</strong>虚基类</li>\n</ul>\n<h2 id=\"Copy-Move\"><a href=\"#Copy-Move\" class=\"headerlink\" title=\"Copy &amp; Move\"></a>Copy &amp; Move</h2><ul>\n<li>拷贝构造函数的签名：<code>T::T(const T&amp;)</code></li>\n<li>默认的拷贝构造函数的指针类型成员是直接赋值的，也就是共享同一地址<ul>\n<li>因此我们需要显式定义类的拷贝构造函数，避免依赖默认的～</li>\n<li>默认拷贝构造中，成员对象也会调用自己的拷贝构造函数</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"拷贝构造函数的调用时机\"><a href=\"#拷贝构造函数的调用时机\" class=\"headerlink\" title=\"拷贝构造函数的调用时机\"></a>拷贝构造函数的调用时机</h4><ul>\n<li><strong>按值传递参数时</strong>：当对象作为参数按值传递给函数时<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(MyClass obj)</span></span>; <span class=\"comment\">// 调用时会触发拷贝构造</span></span><br></pre></td></tr></table></figure></li>\n<li><strong>对象初始化时</strong>：<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyClass a;</span><br><span class=\"line\">MyClass b = a;    <span class=\"comment\">// 初始化，调用拷贝构造函数</span></span><br><span class=\"line\"><span class=\"function\">MyClass <span class=\"title\">c</span><span class=\"params\">(a)</span></span>;     <span class=\"comment\">// 初始化，调用拷贝构造函数</span></span><br></pre></td></tr></table></figure></li>\n<li><strong>函数返回对象时</strong>：<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">MyClass <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    MyClass obj;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;   <span class=\"comment\">// 可能触发拷贝构造（取决于编译器优化）</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>一个简单的例子：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">StringHolder</span>(<span class=\"type\">const</span> StringHolder &amp;other)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (other.data)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            data = <span class=\"keyword\">new</span> <span class=\"type\">char</span>[<span class=\"built_in\">strlen</span>(other.data) + <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"built_in\">strcpy</span>(data, other.data);</span><br><span class=\"line\">            std::cout &lt;&lt; <span class=\"string\">&quot;深拷贝构造函数: 为\\&quot;&quot;</span> &lt;&lt; data &lt;&lt; <span class=\"string\">&quot;\\&quot;分配新内存&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            data = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">            std::cout &lt;&lt; <span class=\"string\">&quot;深拷贝构造函数: 复制空字符串&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"右值引用\"><a href=\"#右值引用\" class=\"headerlink\" title=\"右值引用\"></a>右值引用</h4><p>两种可以同时输入左值和右值引用作为参数的方法:</p>\n<ul>\n<li><p><strong>重载</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 重载函数，分别处理左值和右值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">process</span><span class=\"params\">(<span class=\"type\">int</span>&amp; x)</span> </span>&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;重载函数 - 处理左值: &quot;</span> &lt;&lt; x &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">process</span><span class=\"params\">(<span class=\"type\">int</span>&amp;&amp; x)</span> </span>&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;重载函数 - 处理右值: &quot;</span> &lt;&lt; x &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p><code>const int&amp; x </code></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 接受const左值引用的函数（可以接受左值和右值）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">processAny</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span>&amp; x)</span> </span>&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;处理任意值: &quot;</span> &lt;&lt; x &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"移动构造函数\"><a href=\"#移动构造函数\" class=\"headerlink\" title=\"移动构造函数\"></a>移动构造函数</h4><ul>\n<li>签名：<code>T::T(T&amp;&amp; other)</code>, 也就是<strong>将右值引用作为参数的构造函数</strong></li>\n<li>用于”窃取”即将销毁的对象的资源，避免不必要的深拷贝</li>\n<li>通常将源对象的指针成员置为 <code>nullptr</code>，防止资源被错误释放. 其他成员设置为零值</li>\n</ul>\n<p>一个简单的例子：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DynamicArray</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> *m_array;</span><br><span class=\"line\">    <span class=\"type\">size_t</span> m_size;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 移动构造函数</span></span><br><span class=\"line\"><span class=\"built_in\">DynamicArray</span>(DynamicArray &amp;&amp;other) <span class=\"keyword\">noexcept</span> : <span class=\"built_in\">m_array</span>(other.m_array), <span class=\"built_in\">m_size</span>(other.m_size)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// &quot;窃取&quot;other的资源，并将other置为安全状态</span></span><br><span class=\"line\">        other.m_array = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        other.m_size = <span class=\"number\">0</span>;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;移动构造函数: 移动大小为&quot;</span> &lt;&lt; m_size &lt;&lt; <span class=\"string\">&quot;的数组&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>noexcept</code>标记表示不会抛出异常；</p>\n<p>标准库容器在进行元素移动时会<strong>优先选择不会抛异常的移动构造函数</strong>，如果不存在～会退而求其次选择拷贝构造函数（更慢）。</p>\n</blockquote>\n<h4 id=\"move\"><a href=\"#move\" class=\"headerlink\" title=\"move\"></a>move</h4><p>如果对象不是右值引用，我们可以使用 <code>std::move</code>来显式调用移动构造函数：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; v1&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; v2 = v1; <span class=\"comment\">// v2 是 v1 的副本</span></span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; v3 = std::<span class=\"built_in\">move</span>(v1); <span class=\"comment\">// 调用移动构造函数</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"初始化的方式\"><a href=\"#初始化的方式\" class=\"headerlink\" title=\"初始化的方式\"></a>初始化的方式</h3><p>C++11提供了多种初始化对象的方式：</p>\n<ul>\n<li><p><strong>小括号初始化</strong>：<code>MyClass obj(arg1, arg2);</code></p>\n</li>\n<li><p><strong>等号初始化</strong>：<code>MyClass obj = value;</code></p>\n</li>\n<li><p><strong>大括号初始化</strong>（统一初始化）：<code>MyClass obj&#123;arg1, arg2&#125;;</code></p>\n</li>\n<li><p><strong>列表初始化</strong>：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> arr[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">MyClass* ptr = <span class=\"keyword\">new</span> MyClass&#123;arg1, arg2&#125;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"基本类型的初始化\"><a href=\"#基本类型的初始化\" class=\"headerlink\" title=\"基本类型的初始化\"></a>基本类型的初始化</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基本类型的初始化方式</span></span><br><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">10</span>;             <span class=\"comment\">// 等号初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">b</span><span class=\"params\">(<span class=\"number\">20</span>)</span></span>;              <span class=\"comment\">// 小括号初始化</span></span><br><span class=\"line\"><span class=\"type\">int</span> c&#123;<span class=\"number\">30</span>&#125;;              <span class=\"comment\">// 大括号初始化（C++11）</span></span><br><span class=\"line\"><span class=\"type\">int</span> d = &#123;<span class=\"number\">40</span>&#125;;           <span class=\"comment\">// 等号+大括号初始化（C++11）</span></span><br><span class=\"line\"><span class=\"type\">int</span> arr1[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;; <span class=\"comment\">// 数组初始化</span></span><br><span class=\"line\"><span class=\"type\">int</span> arr2[]&#123;<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;;    <span class=\"comment\">// 数组大括号初始化（C++11）</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"对象的初始化\"><a href=\"#对象的初始化\" class=\"headerlink\" title=\"对象的初始化\"></a>对象的初始化</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对象的初始化方式</span></span><br><span class=\"line\"><span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">25</span>)</span></span>;          <span class=\"comment\">// 小括号初始化</span></span><br><span class=\"line\">Person p2 = <span class=\"built_in\">Person</span>(<span class=\"string\">&quot;李四&quot;</span>, <span class=\"number\">30</span>); <span class=\"comment\">// 等号+临时对象初始化</span></span><br><span class=\"line\">Person p3&#123;<span class=\"string\">&quot;王五&quot;</span>, <span class=\"number\">35</span>&#125;;          <span class=\"comment\">// 大括号初始化（C++11）</span></span><br><span class=\"line\">Person p4 = &#123;<span class=\"string\">&quot;赵六&quot;</span>, <span class=\"number\">40</span>&#125;;       <span class=\"comment\">// 等号+大括号初始化（C++11）</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>动态分配对象的初始化</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 动态分配对象的初始化方式</span></span><br><span class=\"line\">Person *pp1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Person</span>(<span class=\"string\">&quot;动态张三&quot;</span>, <span class=\"number\">25</span>); <span class=\"comment\">// 传统new</span></span><br><span class=\"line\">Person *pp2 = <span class=\"keyword\">new</span> Person&#123;<span class=\"string\">&quot;动态李四&quot;</span>, <span class=\"number\">30</span>&#125;; <span class=\"comment\">// 大括号初始化（C++11）</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"统一初始化\"><a href=\"#统一初始化\" class=\"headerlink\" title=\"统一初始化\"></a>统一初始化</h4><p>对于简单的类或者容器内部的类，我们可以不写构造函数，而是用花括号进行 <strong>统一初始化</strong> 。</p>\n<p>如果类没有构造函数，参数应按照成员的声明顺序给出；如果有，参数应按照构造函数的参数顺序给出。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a, b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Test t&#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">Test *pt = <span class=\"keyword\">new</span> Test&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> *a = <span class=\"keyword\">new</span> <span class=\"type\">int</span>[<span class=\"number\">3</span>]&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">vector&lt;string&gt; vec = &#123; <span class=\"string\">&quot;first&quot;</span>, <span class=\"string\">&quot;second&quot;</span>, <span class=\"string\">&quot;third&quot;</span>&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"操作符重载\"><a href=\"#操作符重载\" class=\"headerlink\" title=\"操作符重载\"></a>操作符重载</h2><p>运算符重载本质上是一个以 <code>operator</code>关键字为前缀，后跟运算符的特殊函数</p>\n<ul>\n<li>赋值运算符首先要<strong>检查是否为自赋值</strong></li>\n<li>必须在<strong>类或者枚举类</strong>上定义</li>\n<li>类内成员函数的重载将第一个参数作为隐式的 <code>this</code>传递，操作符左端的类型决定了使用的操作符的类型<ul>\n<li><code>3+a1</code>非法 if <code>a1</code>无法转换为 <code>int</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"成员函数与自由函数\"><a href=\"#成员函数与自由函数\" class=\"headerlink\" title=\"成员函数与自由函数\"></a>成员函数与自由函数</h4><ul>\n<li><code>=, (), [], -&gt;, -&gt;*</code> 必须是成员函数</li>\n<li>单目运算符应该声明为成员；</li>\n<li>二目运算符应该声明为自由函数</li>\n</ul>\n<h4 id=\"无法重载的运算符\"><a href=\"#无法重载的运算符\" class=\"headerlink\" title=\"无法重载的运算符\"></a>无法重载的运算符</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. .* :: ?:</span><br><span class=\"line\"><span class=\"keyword\">sizeof</span> <span class=\"keyword\">typeid</span></span><br><span class=\"line\"><span class=\"keyword\">static_cast</span> <span class=\"keyword\">dynamic_cast</span> <span class=\"keyword\">const_cast</span></span><br><span class=\"line\"><span class=\"keyword\">reinterpret_cast</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参数传递与返回类型\"><a href=\"#参数传递与返回类型\" class=\"headerlink\" title=\"参数传递与返回类型\"></a>参数传递与返回类型</h4><ul>\n<li><code>+ - * / % ^ &amp; | ~</code> 返回新的对象<ul>\n<li><code>const Tp operator X(const Tp &amp; l, const Tp &amp; r);</code></li>\n</ul>\n</li>\n<li>布尔运算，返回 <code>bool</code>类型</li>\n<li><code>[ ]</code> 返回可以修改的引用，类似于数组的赋值<ul>\n<li><code>Tp &amp; operator X(int index);</code></li>\n</ul>\n</li>\n<li><code>= += *= /= &lt;&lt;= &gt;&gt;=</code> 返回可以修改的引用，确保链式操作<ul>\n<li><code>Tp &amp; operator X(const Tp &amp;l, const Tp &amp;r);</code></li>\n</ul>\n</li>\n</ul>\n<p>前缀自增和后缀自增需要区分，在后缀自增的参数列表中添加 <code>int</code>即可</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 前缀自增返回引用</span></span><br><span class=\"line\"><span class=\"type\">const</span> Integer&amp; Integer::<span class=\"keyword\">operator</span>++()&#123;</span><br><span class=\"line\">    *<span class=\"keyword\">this</span> += <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 后缀自增返回对象</span></span><br><span class=\"line\"><span class=\"type\">const</span> Integer Integer::<span class=\"keyword\">operator</span>++(<span class=\"type\">int</span>)&#123;<span class=\"comment\">// just leave the parameter unnamed</span></span><br><span class=\"line\">    <span class=\"function\">Integer <span class=\"title\">old</span><span class=\"params\">(*<span class=\"keyword\">this</span>)</span></span>;</span><br><span class=\"line\">    ++(*<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> old;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"比较运算符\"><a href=\"#比较运算符\" class=\"headerlink\" title=\"比较运算符\"></a>比较运算符</h4><p>考虑实现基础的 <code>==</code> 与 <code>&lt;</code> ，其余的比较重载在上述的基础上通过 <code>!</code> 运算实现，便于直接迁移</p>\n<h4 id=\"流运算\"><a href=\"#流运算\" class=\"headerlink\" title=\"流运算\"></a>流运算</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">istream&amp; <span class=\"keyword\">operator</span>&gt;&gt;(istream&amp; is, _Tp&amp; obj)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// read obj from is</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> is;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(ostream&amp; os, <span class=\"type\">const</span> _Tp&amp; obj)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// output obj in os</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> os;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ostream&amp; <span class=\"title\">tab</span><span class=\"params\">(ostream&amp; os)</span></span>&#123;<span class=\"comment\">// manipulator</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> os &lt;&lt; <span class=\"string\">&#x27;\\t&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>输出流运算符的第一个参数不能是 <code>const</code>，因为输出会修改流</li>\n<li>输入流运算符的第二个参数不能是 <code>const</code>，因为需要修改对象</li>\n<li>通常需要声明为友元以访问私有成员</li>\n</ul>\n<h4 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_Tp&amp; _Tp::<span class=\"keyword\">operator</span>=(<span class=\"type\">const</span> _Tp&amp; rhs)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span> != &amp;rhs)&#123;</span><br><span class=\"line\">        size = rhs.size;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span>[] p;</span><br><span class=\"line\">        p = <span class=\"keyword\">new</span> <span class=\"type\">int</span>[size];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; size; ++i)</span><br><span class=\"line\">            p[i] = rhs.p[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>首先检查是否为自赋值</p>\n</blockquote>\n<p>如果不希望进行赋值运算，将上述的 <code>=</code> 重载声明为 <code>private</code>，并且无需实现。</p>\n<blockquote>\n<p>这是因为 <code>a = b;  // 实际等价于：a.operator=(b)</code>， 发起调用的是当前代码片段所在的作用域，如果不是类内函数，那么就是非法的</p>\n</blockquote>\n<h4 id=\"隐式转换\"><a href=\"#隐式转换\" class=\"headerlink\" title=\"隐式转换\"></a>隐式转换</h4><p><strong>1. 构造函数转换</strong>：从其他类型到当前类型</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">PathName</span> &#123;</span><br><span class=\"line\">    string name;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">PathName</span>(<span class=\"type\">const</span> string&amp; s) : <span class=\"built_in\">name</span>(s) &#123;&#125;  <span class=\"comment\">// string到PathName的转换</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">abc</span><span class=\"params\">(<span class=\"string\">&quot;abc&quot;</span>)</span></span>;</span><br><span class=\"line\">PathName xyz = abc;  <span class=\"comment\">// 隐式转换：abc =&gt; PathName</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>2.<strong>转换运算符</strong>：从当前类型到其他类型</p>\n<blockquote>\n<p><code>operator &lt;typename&gt; &#123;&#125;</code>关键字</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Rational</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">operator</span> <span class=\"title\">double</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123;  <span class=\"comment\">// Rational到double的转换</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> numerator_ / (<span class=\"type\">double</span>)denominator_;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Rational <span class=\"title\">r</span><span class=\"params\">(<span class=\"number\">1</span>, <span class=\"number\">3</span>)</span></span>;</span><br><span class=\"line\"><span class=\"type\">double</span> d = r;  <span class=\"comment\">// 隐式转换：r =&gt; double</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>可以使用 <code>explicit</code>关键字要求显式转换：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"keyword\">operator</span> <span class=\"title\">double</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;</span><br><span class=\"line\"><span class=\"type\">double</span> d = (<span class=\"type\">double</span>)r;  <span class=\"comment\">// 必须显式转换</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显式转换\"><a href=\"#显式转换\" class=\"headerlink\" title=\"显式转换\"></a>显式转换</h4><ul>\n<li>构造函数的显式转换</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果想要强制显式转换，应该这样声明：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">Rational</span><span class=\"params\">(<span class=\"type\">double</span> value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> PRECISION = <span class=\"number\">10000</span>;</span><br><span class=\"line\">    numerator = <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">int</span>&gt;(value * PRECISION);</span><br><span class=\"line\">    denominator = PRECISION;</span><br><span class=\"line\">    <span class=\"built_in\">simplify</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Rational r1 = <span class=\"number\">3.14</span>;        <span class=\"comment\">// 错误：不允许隐式转换</span></span><br><span class=\"line\"><span class=\"function\">Rational <span class=\"title\">r2</span><span class=\"params\">(<span class=\"number\">2.5</span>)</span></span>;          <span class=\"comment\">// 正确：显式构造</span></span><br><span class=\"line\">Rational r3 = <span class=\"built_in\">Rational</span>(<span class=\"number\">3.14</span>); <span class=\"comment\">// 正确：显式转换</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>类型转换运算符的显式转换</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"keyword\">operator</span> <span class=\"title\">double</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;</span><br><span class=\"line\"><span class=\"type\">double</span> d = (<span class=\"type\">double</span>)r;  <span class=\"comment\">// 显式转换 or double(r)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">double</span> d2 = <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">double</span>&gt;(r2);  <span class=\"comment\">// 显式转换</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"转换优先级\"><a href=\"#转换优先级\" class=\"headerlink\" title=\"转换优先级\"></a>转换优先级</h4><p>如果同时存在两种方向的转换，将优先采取<strong>构造函数</strong>的转换方式</p>\n<blockquote>\n<p>可以通过声明其中的一种情况必须显式调用来并存；比如必须显式调用构造函数的转换，那么下面的情况将会调用构造函数将A转换到B的对象：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">B</span>();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">B</span><span class=\"params\">(A)</span></span>; <span class=\"comment\">// 从A到B的显式构造函数</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">functionTakingB</span><span class=\"params\">(B thing)</span></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;OK&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">functionTakingB</span>(<span class=\"built_in\">static_cast</span>&lt;B&gt;(a));</span><br></pre></td></tr></table></figure></blockquote>\n<h4 id=\"转换运算符\"><a href=\"#转换运算符\" class=\"headerlink\" title=\"转换运算符\"></a>转换运算符</h4><p>C++ 中有四个<strong>转换运算符</strong> Cast Operator：</p>\n<ul>\n<li><p><code>static_cast</code>：</p>\n<ul>\n<li>基本类型的转换</li>\n<li>子类向父类的指针&#x2F;引用的转换</li>\n<li><code>void</code>与其他类型指针的转换</li>\n</ul>\n</li>\n<li><p><code>dynamic_cast</code>：<strong>down-cast</strong>，安全</p>\n<ul>\n<li>父类向子类的指针&#x2F;引用的转换，不一定总是安全（要求原本指向的对象就是子类对象）</li>\n<li>要求基类中<strong>至少存在一个虚函数</strong>（因此具有 <code>vptr</code>，从而可以通过不同类的 <code>vptr</code>进行类的区分）</li>\n<li><pre><code class=\"language-cpp\">Base* basePtr = new Derived();\nDerived* derivedPtr = dynamic_cast&lt;Derived*&gt;(basePtr);\n\nif(derivedPtr)&#123;\n...\n&#125;\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* `const_cast`：修改 `const` 属性</span><br><span class=\"line\"></span><br><span class=\"line\">  * ```cpp</span><br><span class=\"line\">    const int a = 10;</span><br><span class=\"line\">    int *b = const_cast&lt;int*&gt;(&amp;a);</span><br><span class=\"line\"></span><br><span class=\"line\">    *b = 20; // 转换之后可以修改value</span><br></pre></td></tr></table></figure>\n\n&gt; 但是更加常见的是将非const类型的属性修改为 `const`；原本是常量类型的属性可能被编译器存储在只读内存区域，如果编译器没有在 `const_cast`的转换中进行优化，可能导致运行问题？\n&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p><code>reinterpret_cast</code>：忽略类型检查，强制转换，低安全性</p>\n</li>\n</ul>\n<h2 id=\"Template\"><a href=\"#Template\" class=\"headerlink\" title=\"Template\"></a>Template</h2><p>一个模板完全都是声明，应该只有 <code>.h</code>，而不含有 <code>.cpp</code></p>\n<blockquote>\n<p>必须<strong>都放在头文件的实现</strong>包含:</p>\n<ul>\n<li>函数模板;</li>\n<li>inline函数</li>\n<li>带有default参数的声明.</li>\n<li>类模板的成员函数</li>\n</ul>\n</blockquote>\n<h3 id=\"函数模板\"><a href=\"#函数模板\" class=\"headerlink\" title=\"函数模板\"></a>函数模板</h3><h4 id=\"参数匹配\"><a href=\"#参数匹配\" class=\"headerlink\" title=\"参数匹配\"></a>参数匹配</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Tp&gt;</span></span><br><span class=\"line\"><span class=\"function\">_Tp <span class=\"title\">add</span><span class=\"params\">(_Tp x, _Tp y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> **argv)</span></span>&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"built_in\">add</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>) &lt;&lt; std::endl; </span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"built_in\">add</span>(<span class=\"number\">1.1</span>, <span class=\"number\">2.2</span>) &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* T add(int, int) 和 T double add&lt;double&gt;(double, double) */</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>如果有原生的完全匹配的函数，优先使用原生函数，例如 <code>add(1, 2)</code> 调用 <code>add(int, int)</code>。</li>\n<li>其次，如果有模板能完全匹配的函数，使用模板生成函数，例如 <code>add(1.1, 2.2)</code> 调用 <code>add&lt;double&gt;(dobule, double)</code>。</li>\n<li>再其次，尝试使用类型转换来匹配其他原生函数。但是，类型转换不能用于匹配模板，例如 <code>add(1, 2.2)</code>。</li>\n</ol>\n<h3 id=\"类模板\"><a href=\"#类模板\" class=\"headerlink\" title=\"类模板\"></a>类模板</h3><p>简单的示例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Vector</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Vector</span>(<span class=\"type\">int</span> s):<span class=\"built_in\">size</span>(s)&#123;</span><br><span class=\"line\">        content = <span class=\"keyword\">new</span> T[size];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">virtual</span> ~<span class=\"built_in\">Vector</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span>[] content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    T&amp; <span class=\"keyword\">operator</span>[](<span class=\"type\">int</span> p)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> content[p];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    T* content;</span><br><span class=\"line\">    <span class=\"type\">int</span> size;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Exception\"><a href=\"#Exception\" class=\"headerlink\" title=\"Exception\"></a>Exception</h2><p><strong>异常的类型如何定义？</strong></p>\n<blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 异常对象的定义</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DivisionError</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    string message;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">DivisionError</span>(<span class=\"type\">const</span> string&amp; msg) : <span class=\"built_in\">message</span>(msg) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;创建DivisionError异常对象&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    ~<span class=\"built_in\">DivisionError</span>() &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;销毁DivisionError异常对象&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\">string <span class=\"title\">what</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 内层函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">divide</span><span class=\"params\">(<span class=\"type\">double</span> a, <span class=\"type\">double</span> b)</span> </span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;进入divide函数&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"function\">Resource <span class=\"title\">r</span><span class=\"params\">(<span class=\"string\">&quot;divide函数的局部资源&quot;</span>)</span></span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (b == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"built_in\">DivisionError</span>(<span class=\"string\">&quot;除数不能为零&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;divide函数正常返回&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a / b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></blockquote>\n<p>执行流程：</p>\n<ol>\n<li>通过 <code>throw</code> 创建对应的<strong>异常对象</strong></li>\n<li>将异常所在的内层函数的<strong>资源释放</strong>；</li>\n<li>再被外层的 <code>catch</code> 所<strong>捕获</strong></li>\n</ol>\n<p>在 <code>catch</code>块中可以通过 <code>throw;</code>再次抛出当前的异常</p>\n<p>自定义异常类时，通常应该继承自 <code>std::exception</code>或其派生类</p>\n<h4 id=\"异常规范\"><a href=\"#异常规范\" class=\"headerlink\" title=\"异常规范\"></a>异常规范</h4><p>在函数原型中声明可能返回的异常类型：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(Document&amp; p)</span> <span class=\"title\">throw</span><span class=\"params\">(PrintOffLine, BadDocument)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">goodguy</span><span class=\"params\">()</span> <span class=\"title\">throw</span><span class=\"params\">()</span></span>;<span class=\"comment\">// throw no exceptions, until C++11</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">alloc</span><span class=\"params\">()</span> <span class=\"title\">throw</span><span class=\"params\">(...)</span></span>;<span class=\"comment\">// can throw any exception</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">abc</span><span class=\"params\">()</span> <span class=\"keyword\">noexcept</span></span>;<span class=\"comment\">// throw no exceptions, since C++11</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果函数返回了规范之外的异常，将调用 <code>std::unexpected()</code>处理（默认调用 <code>std::terminate()</code>终止程序）</p>\n</blockquote>\n<p><code>noexcept</code>也可以作为运算符使用，检查表达式是否声明为不抛出异常：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">bool</span> willNotThrow = <span class=\"built_in\">noexcept</span>(<span class=\"built_in\">func</span>());  <span class=\"comment\">// 检查func()是否声明为noexcept</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"层次结构\"><a href=\"#层次结构\" class=\"headerlink\" title=\"层次结构\"></a>层次结构</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::exception</span><br><span class=\"line\">├── std::logic_error</span><br><span class=\"line\">│   ├── std::invalid_argument</span><br><span class=\"line\">│   ├── std::domain_error</span><br><span class=\"line\">│   ├── std::length_error</span><br><span class=\"line\">│   ├── std::out_of_range</span><br><span class=\"line\">│   └── std::future_error</span><br><span class=\"line\">├── std::runtime_error</span><br><span class=\"line\">│   ├── std::range_error</span><br><span class=\"line\">│   ├── std::overflow_error</span><br><span class=\"line\">│   ├── std::underflow_error</span><br><span class=\"line\">│   └── std::system_error</span><br><span class=\"line\">├── std::bad_alloc</span><br><span class=\"line\">├── std::bad_cast</span><br><span class=\"line\">├── std::bad_typeid</span><br><span class=\"line\">├── std::bad_exception</span><br><span class=\"line\">└── std::bad_function_call</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>数组的 <code>.at</code>可以自动抛出数组访问异常的 <code>range_error</code>；</li>\n<li>容器的 <code>resize</code>方法可以自动抛出长度异常 <code>length_error</code>；</li>\n</ul>\n<h4 id=\"构造与析构\"><a href=\"#构造与析构\" class=\"headerlink\" title=\"构造与析构\"></a>构造与析构</h4><p>析构函数应该避免抛出异常，否则会导致系统调用 <code>std::terminate()</code></p>\n<p>由于在 <code>try-catch</code>中，如果发生了异常，本地变量将自动调用自己的析构函数，此时如果存在 <code>new</code>申请的空间资源，将导致其无法指向正确的地址</p>\n<p>因此，我们采取两阶段的构造确保构造函数不会抛出异常：</p>\n<ol>\n<li>在构造函数内对基本变量赋值</li>\n<li>在 <code>init()</code>函数中显式申请内存空间</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Widget</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Widget</span>() : <span class=\"built_in\">initialized</span>(<span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 只做最小的初始化： 不存在抛出异常的可能</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">initialize</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 执行可能失败的初始化操作</span></span><br><span class=\"line\">            initialized = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"built_in\">catch</span> (...) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">use</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!initialized) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> std::<span class=\"built_in\">runtime_error</span>(<span class=\"string\">&quot;对象未初始化&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 使用对象</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">bool</span> initialized;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"知识蒸馏\"><a href=\"#知识蒸馏\" class=\"headerlink\" title=\"知识蒸馏\"></a>知识蒸馏</h1><blockquote>\n<p>将个人印象比较浅的部分重新摘了一遍</p>\n</blockquote>\n<ul>\n<li>字符指针与字符数组</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> *sp = <span class=\"string\">&quot;Hello World!&quot;</span>; <span class=\"comment\">// 字符指针可以移动，不能修改</span></span><br><span class=\"line\"><span class=\"type\">char</span> array[] = <span class=\"string\">&quot;Hello World!&quot;</span>; <span class=\"comment\">// 字符数组不能移动，可以修改</span></span><br><span class=\"line\"></span><br><span class=\"line\">array[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;h&#x27;</span> ; <span class=\"comment\">// 合法</span></span><br><span class=\"line\">array = <span class=\"string\">&#x27;hello&#x27;</span>; <span class=\"comment\">// 非法！</span></span><br><span class=\"line\"></span><br><span class=\"line\">sp = <span class=\"string\">&#x27;world&#x27;</span>; <span class=\"comment\">// 合法</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>实际上，<code>char *sp</code>就是 <code>const char *sp</code>，所以不能改变字符串的值，但是可以改变sp的指向</p>\n<p>而字符串数组的数组名是栈中的固定地址，无法移动，但是可以修改</p>\n</blockquote>\n<ul>\n<li><p>不同文件之间的全局变量, 初始化的前后顺序由链接器随机决定. 此时需要确保它们<strong>之间没有初始化的依赖.</strong></p>\n</li>\n<li><p>返回类型的常量</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">const</span> <span class=\"type\">int</span>* <span class=\"title\">f</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 只能将函数的返回值赋值给一个 const int*</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"vptr的大小\"><a href=\"#vptr的大小\" class=\"headerlink\" title=\"vptr的大小\"></a>vptr的大小</h4><p>如果父类具有 <code>virtual</code>也就是虚函数，子类继承之后也会得到一个虚函数表，对应有一个<strong>vptr</strong>指针指向自己的虚函数表：</p>\n<ul>\n<li>在64位的机器下，一个vptr指针的大小是<strong>8字节</strong></li>\n<li>普通函数不占据类的大小，因为函数地址存放在全局空间</li>\n<li>如果类内没有成员变量，也没有虚函数，那么大小就是<strong>1</strong>（告诉编译器这个类的存在）</li>\n</ul>\n<h4 id=\"编译器的对齐\"><a href=\"#编译器的对齐\" class=\"headerlink\" title=\"编译器的对齐\"></a>编译器的对齐</h4><ul>\n<li>C++ 编译器会对类进行<strong>按最大对齐的成员</strong>进行对齐</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Nothing</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Nothing</span>() &#123;&#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">virtual</span> ~<span class=\"built_in\">Nothing</span>() &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Nothing obj;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Sizeof Nothing: &quot;</span> &lt;&lt; <span class=\"built_in\">sizeof</span>(Nothing) &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Address of obj: &quot;</span> &lt;&lt; &amp;obj &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Address of a: &quot;</span> &lt;&lt; &amp;(obj.a) &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对应的输出：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sizeof Nothing: 16</span><br><span class=\"line\">Address of obj: 0x16d57e830</span><br><span class=\"line\">Address of a: 0x16d57e838</span><br></pre></td></tr></table></figure>\n\n<p>我们可以观察到两个现象：</p>\n<ol>\n<li><code>size</code>&#x3D;16说明了对齐现象；</li>\n<li>Nothing对象的地址首先是其vptr，然后是其他的成员</li>\n</ol>\n<h1 id=\"期末题集\"><a href=\"#期末题集\" class=\"headerlink\" title=\"期末题集\"></a>期末题集</h1><blockquote>\n<p>补天专用楼</p>\n</blockquote>\n<h2 id=\"程序填空\"><a href=\"#程序填空\" class=\"headerlink\" title=\"程序填空\"></a>程序填空</h2><h4 id=\"题目摘录\"><a href=\"#题目摘录\" class=\"headerlink\" title=\"题目摘录\"></a>题目摘录</h4><h5 id=\"类模板：Array\"><a href=\"#类模板：Array\" class=\"headerlink\" title=\"类模板：Array\"></a>类模板：Array</h5><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Array</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Array</span>() &#123;</span><br><span class=\"line\">        data = <span class=\"keyword\">new</span> T[BLK_SIZE];</span><br><span class=\"line\">        next = <span class=\"literal\">nullptr</span> ;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    ~<span class=\"built_in\">Array</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> [] data;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> next;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    T&amp; <span class=\"keyword\">operator</span>[](<span class=\"type\">int</span> i);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">iterate</span><span class=\"params\">(<span class=\"type\">void</span> (*f)(T&amp;))</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    T  *data; <span class=\"comment\">// data of type T</span></span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">int</span> BLK_SIZE=<span class=\"number\">32</span>; <span class=\"comment\">// fixed block size</span></span><br><span class=\"line\">    Array *next;  <span class=\"comment\">// the next array block</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">T&amp; Array&lt;T&gt;::<span class=\"keyword\">operator</span>[](<span class=\"type\">int</span> i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; BLK_SIZE) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data[i];</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (next == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            next = <span class=\"keyword\">new</span> Array&lt;T&gt;;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (*next)[i-BLK_SIZE];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> Array&lt;T&gt;::<span class=\"built_in\">iterate</span>(<span class=\"built_in\">void</span> (*f)(T&amp;)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; BLK_SIZE; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">f</span>(data[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (next != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        next-&gt; <span class=\"built_in\">iterate</span>(f);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Array&lt;<span class=\"type\">int</span>&gt; a;</span><br><span class=\"line\">    <span class=\"type\">int</span> size = <span class=\"number\">100</span>;</span><br><span class=\"line\">    cin &gt;&gt; size;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">        a[i] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    a.<span class=\"built_in\">iterate</span>([](<span class=\"type\">int</span> &amp;x) &#123; cout &lt;&lt; x &lt;&lt; endl; &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"函数模板：内积\"><a href=\"#函数模板：内积\" class=\"headerlink\" title=\"函数模板：内积\"></a>函数模板：内积</h5><p>此处的 <code>op</code>操作之前没有接触过，利用的是标准库提供的二元操作：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;functional&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">InputIt1</span>, <span class=\"keyword\">class</span> <span class=\"title class_\">InputIt2</span>, <span class=\"keyword\">class</span> <span class=\"title class_\">T</span>, <span class=\"keyword\">class</span> <span class=\"title class_\">BinaryOp1</span>, <span class=\"keyword\">class</span> <span class=\"title class_\">BinaryOp2</span>&gt;</span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">inner_product</span><span class=\"params\">(InputIt1 first1, InputIt1 last1, InputIt2 first2, T init, BinaryOp1 op1, BinaryOp2 op2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (first1 != last1)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    init = <span class=\"built_in\">op1</span> (init, <span class=\"built_in\">op2</span>(*first1, *first2) );</span><br><span class=\"line\">    ++first1;</span><br><span class=\"line\">\t++first2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> init;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  std::vector&lt;<span class=\"type\">int</span>&gt; a&#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;;</span><br><span class=\"line\">  std::vector&lt;<span class=\"type\">int</span>&gt; b&#123;<span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">  <span class=\"type\">int</span> r1 = <span class=\"built_in\">inner_product</span>(a.<span class=\"built_in\">begin</span>(), a.<span class=\"built_in\">end</span>(), b.<span class=\"built_in\">begin</span>(), <span class=\"number\">0</span>, std::plus&lt;&gt;(), std::multiplies&lt;&gt;());</span><br><span class=\"line\">  std::cout &lt;&lt; <span class=\"string\">&quot;Inner product of a and b: &quot;</span> &lt;&lt; r1 &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"type\">int</span> r2 = <span class=\"built_in\">inner_product</span>(a.<span class=\"built_in\">begin</span>(), a.<span class=\"built_in\">end</span>(), b.<span class=\"built_in\">begin</span>(), <span class=\"number\">0</span>, std::plus&lt;&gt;(), std::equal_to&lt;&gt;());</span><br><span class=\"line\">  std::cout &lt;&lt; <span class=\"string\">&quot;Number of pairwise matches between a and b: &quot;</span> &lt;&lt;  r2 &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"类模板的填写\"><a href=\"#类模板的填写\" class=\"headerlink\" title=\"类模板的填写\"></a>类模板的填写</h4><ul>\n<li>非内联定义成员函数时，需要在类型与函数名之间加上 <code>&lt;class-name&gt;&lt;T&gt;::</code> ，不要忘记了其中的 <code>&lt;T&gt;</code></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">T&amp; Array&lt;T&gt;::<span class=\"keyword\">operator</span>[](<span class=\"type\">int</span> i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; BLK_SIZE) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data[i];</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (next == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            next = <span class=\"keyword\">new</span> Array&lt;T&gt;;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (*next)[i-BLK_SIZE];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"长话短说\"><a href=\"#长话短说\" class=\"headerlink\" title=\"长话短说\"></a>长话短说</h2><p><strong>注意函数模板的返回类型：</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">func</span><span class=\"params\">(T x, <span class=\"type\">double</span> y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">func</span>(<span class=\"number\">2.7</span>, <span class=\"number\">3</span>) &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">func</span>(<span class=\"number\">3</span>, <span class=\"number\">2.7</span>) &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时第二个输出从 5.7 向 int转换，得到的结果是 5</p>\n<p>如果是数组空间的管理, 注意 <code>new</code> 和  <code>delete</code> 都需要对应的 <code>[]</code></p>\n<p>如果没有显式定义任何的构造函数，那么编译器会自动创建一个默认构造函数</p>\n<ul>\n<li>但是如果程序员定义了任何的构造函数（无论是否带有默认参数），编译器就不用自动创建默认构造函数</li>\n</ul>\n<p><strong>upcast</strong>：将一个派生类的指针或者引用赋值给基类的指针或引用</p>\n<ul>\n<li><strong>动态绑定</strong>：发生upcast之后，通过基类指针或引用调用虚函数时，实际调用的是指针或引用锁指向的对象的虚函数的实现；而不是根据指针或引用的静态类型</li>\n<li>如果此时发生了析构，如果基类的析构函数是虚函数，就会先后调用子类和父类的析构函数；如果父类的析构函数不是虚函数，就只会调用父类的析构函数<ul>\n<li>为了确保子类的资源可以被释放，总是应当将类的析构函数作为虚析构函数</li>\n</ul>\n</li>\n</ul>\n<p><strong>析构函数不允许被重载</strong></p>\n<ul>\n<li>事实上，析构函数的名称固定，并且没有参数，因此无法通过参数列表来区分不同的韩苏版本，自然也就无法重载</li>\n</ul>\n<p>C++标准只规定了整数类型的相对顺序：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sizeof</span>(<span class=\"type\">char</span>) &lt;= <span class=\"built_in\">sizeof</span>(<span class=\"type\">short</span>) &lt;= <span class=\"built_in\">sizeof</span>(<span class=\"type\">int</span>) &lt;= <span class=\"built_in\">sizeof</span>(<span class=\"type\">long</span>) &lt;= <span class=\"built_in\">sizeof</span>(<span class=\"type\">long</span> <span class=\"type\">long</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>也就是说, 可能存在 size上 <code>int = long</code>的情况</li>\n</ul>\n<p>A program is a bunch of objects telling each other how to do <strong>by sending messages</strong></p>\n<ul>\n<li>此处的消息在oop中指的就是通过调用对象内部的方法</li>\n</ul>\n<h2 id=\"一句话说不清楚的\"><a href=\"#一句话说不清楚的\" class=\"headerlink\" title=\"一句话说不清楚的\"></a>一句话说不清楚的</h2><h4 id=\"重载与友元函数\"><a href=\"#重载与友元函数\" class=\"headerlink\" title=\"重载与友元函数\"></a>重载与友元函数</h4><ul>\n<li><p>完全无法重载的：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. .* :: ?:</span><br><span class=\"line\"><span class=\"keyword\">sizeof</span> <span class=\"keyword\">typeid</span></span><br><span class=\"line\"><span class=\"keyword\">static_cast</span> <span class=\"keyword\">dynamic_cast</span> <span class=\"keyword\">const_cast</span></span><br><span class=\"line\"><span class=\"keyword\">reinterpret_cast</span></span><br></pre></td></tr></table></figure></li>\n<li><p>只能作为成员函数（无法作为友元函数）重载的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=, (), [], -&gt;, -&gt;*</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>以及单目运算符</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"父类的构造函数\"><a href=\"#父类的构造函数\" class=\"headerlink\" title=\"父类的构造函数\"></a>父类的构造函数</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613213521969.png?imageSlim\"\n                     \n                >\n\n<p>构造函数与普通的成员函数不同：</p>\n<ul>\n<li>如果父类的构造函数被声明为 <code>private</code> 的，和普通的成员函数一样——只能被自己的成员和友元函数可以调用</li>\n<li>如果父类的构造函数被声明为 <code>protected</code> 的，那么只有父类的成员、友元以及<strong>派生类的构造函数</strong>可以调用；<ul>\n<li>这意味着此时无法直接在子类除了构造函数之外的地方来直接创建独立的父类对象</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"C-对编程范式的支持\"><a href=\"#C-对编程范式的支持\" class=\"headerlink\" title=\"C++对编程范式的支持\"></a>C++对编程范式的支持</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613214216540.png?imageSlim\"\n                     \n                >\n\n<ul>\n<li>过程式编程的特性包括：函数、全局变量、顺序执行、选择（if&#x2F;else, switch）、循环等<ul>\n<li>C就是过程式编程的一种，C++继承了C的特性，因此对过程式变成支持良好</li>\n</ul>\n</li>\n<li>声明式编程指的是“做什么”而非如何做，比如SQL、HTML、Swift等。C++和C是命令式语言，关注“如何做”</li>\n</ul>\n<blockquote>\n<p>因此答案选C</p>\n</blockquote>\n<h4 id=\"对象切片\"><a href=\"#对象切片\" class=\"headerlink\" title=\"对象切片\"></a>对象切片</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C2* pC2 = <span class=\"keyword\">new</span> <span class=\"built_in\">C2</span>();</span><br><span class=\"line\">cout &lt;&lt; endl;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    C1 a = *pC2; <span class=\"comment\">// 发生了对象切片，只保留了基类对象的属性</span></span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">C1* pC1 = pC2;</span><br><span class=\"line\"><span class=\"keyword\">delete</span> pC1; <span class=\"comment\">// 基类的析构函数是virtual的，所以此处发生多态析构</span></span><br><span class=\"line\">cout &lt;&lt; endl;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"拷贝初始化\"><a href=\"#拷贝初始化\" class=\"headerlink\" title=\"拷贝初始化\"></a>拷贝初始化</h4><p>用基本类型的值来隐式调用构造函数以创建对象:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ResId</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">ResId</span>(<span class=\"type\">int</span> Id);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ResId res = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"comment\">// 等价于</span></span><br><span class=\"line\"><span class=\"comment\">// ResId res(5);</span></span><br><span class=\"line\"><span class=\"comment\">// ResId res = ResId(5);</span></span><br></pre></td></tr></table></figure>\n\n<p>这个过程分为两步:</p>\n<ol>\n<li>用 5 构造一个临时的ResId对象;</li>\n<li>用这个临时对象初始化res</li>\n</ol>\n<p>因此我们整体上可以说:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">An object of <span class=\"keyword\">class</span> <span class=\"title class_\">ResId</span> will be created by <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"禁止隐式的拷贝初始化\"><a href=\"#禁止隐式的拷贝初始化\" class=\"headerlink\" title=\"禁止隐式的拷贝初始化\"></a>禁止隐式的拷贝初始化</h4><p>通过声明 <code>explicit</code> 来禁止上述通过值隐式调用构造函数:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">C</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">C</span><span class=\"params\">(<span class=\"type\">int</span>)</span> </span>&#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;i&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">C</span>(<span class=\"type\">double</span>) &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;d&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">C <span class=\"title\">c1</span><span class=\"params\">(<span class=\"number\">7</span>)</span></span>; <span class=\"comment\">// 匹配了第一个构造函数</span></span><br><span class=\"line\">    C c2 = <span class=\"number\">7</span>; <span class=\"comment\">// 隐式构造, 只能将7转换为double, 然后调用第二个构造函数</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出:</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i</span><br><span class=\"line\">d</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"子类对父类函数的重载与重写\"><a href=\"#子类对父类函数的重载与重写\" class=\"headerlink\" title=\"子类对父类函数的重载与重写\"></a>子类对父类函数的重载与重写</h4><p>子类如果重载或者重写了父类的同名函数，将无法通过子类的对象访问父类中的这些函数：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">F</span><span class=\"params\">(<span class=\"type\">int</span>)</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;A::F(int)&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">F</span><span class=\"params\">(<span class=\"type\">double</span>)</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;A::F(double)&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">F2</span><span class=\"params\">(<span class=\"type\">int</span>)</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;A::F2(int)&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> : <span class=\"keyword\">public</span> A &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t  <span class=\"keyword\">using</span> A::F;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">F</span><span class=\"params\">(<span class=\"type\">double</span>)</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;B::F(double)&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    B b;</span><br><span class=\"line\">    b.<span class=\"built_in\">F</span>(<span class=\"number\">2.0</span>);</span><br><span class=\"line\">    b.<span class=\"built_in\">F</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">    b.<span class=\"built_in\">F2</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B::<span class=\"built_in\">F</span>(<span class=\"type\">double</span>)</span><br><span class=\"line\">B::<span class=\"built_in\">F</span>(<span class=\"type\">double</span>)</span><br><span class=\"line\">A::<span class=\"built_in\">F2</span>(<span class=\"type\">int</span>)</span><br></pre></td></tr></table></figure>\n\n<p>但是我们可以通过在子类中声明 <code>using A::F</code>来重新获得访问权限：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> : <span class=\"keyword\">public</span> A &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">using</span> A::F;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">F</span><span class=\"params\">(<span class=\"type\">double</span>)</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;B::F(double)&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>此时的输出为：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B::<span class=\"built_in\">F</span>(<span class=\"type\">double</span>)</span><br><span class=\"line\">A::<span class=\"built_in\">F</span>(<span class=\"type\">int</span>)</span><br><span class=\"line\">A::<span class=\"built_in\">F2</span>(<span class=\"type\">int</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"默认参数的静态绑定\"><a href=\"#默认参数的静态绑定\" class=\"headerlink\" title=\"默认参数的静态绑定\"></a>默认参数的静态绑定</h4><ul>\n<li>虚函数：运行时多态（动态绑定）</li>\n<li>默认参数：编译时确定（静态绑定）</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">foo</span><span class=\"params\">(<span class=\"type\">int</span> a = <span class=\"number\">1</span>)</span> </span>&#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;A&quot;</span> &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span> &lt;&lt; a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">B</span> : A &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">foo</span><span class=\"params\">(<span class=\"type\">int</span> a = <span class=\"number\">2</span>)</span> </span>&#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;B&quot;</span> &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span> &lt;&lt; a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    A *a = <span class=\"keyword\">new</span> B;</span><br><span class=\"line\">    a-&gt;<span class=\"built_in\">foo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B</span><br><span class=\"line\"><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>为什么cpp要选择让静态参数实现静态绑定？</strong></p>\n<p>为了保持语言的一致性与可预测性，设计者让静态参数作为编译时期自动替换的值，避免在运行过程中动态替换</p>\n</blockquote>\n<h4 id=\"函数模板与模板特化\"><a href=\"#函数模板与模板特化\" class=\"headerlink\" title=\"函数模板与模板特化\"></a>函数模板与模板特化</h4><p>模板特化：在函数模板的基础上，如果我们希望对某个类型实现不一样的逻辑，就可以使用～</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"type\">const</span> T&amp; value)</span> </span>&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;泛型模板: &quot;</span> &lt;&lt; value &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对int类型采取模板特化</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"built_in\">f</span>&lt;<span class=\"type\">int</span>&gt;(<span class=\"type\">const</span> <span class=\"type\">int</span>&amp; value) &#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;特化版本: int 类型&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>因此，模板特化必须首先存在一个主模板</li>\n</ul>\n<p><strong>模板特化的结果无法被重载</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt; <span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">(T &amp;i)</span> </span>&#123; std::cout &lt;&lt; <span class=\"number\">1</span>; &#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;&gt; <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;i)</span> </span>&#123; std::cout &lt;&lt; <span class=\"number\">2</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">24</span>;</span><br><span class=\"line\">    <span class=\"built_in\">f</span>(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将会输出： <code>1</code></p>\n<ul>\n<li>如果我们只保留 <code>void f(const int &amp;i) &#123; std::cout &lt;&lt; 2; &#125;</code>  函数，将会触发类型转换，可以调用</li>\n<li>如果我们只去除模板特化中的 <code>const</code>， 就可以匹配（输出 <code>2</code>）</li>\n</ul>\n<p>再比如：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(T, T)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">add</span>(<span class=\"number\">1</span>, <span class=\"number\">2.2</span>); <span class=\"comment\">// ❌ 模板不能推导出统一的 T（int vs double）</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"常量对象\"><a href=\"#常量对象\" class=\"headerlink\" title=\"常量对象\"></a>常量对象</h4><ul>\n<li>静态函数同样参与函数重载，但是优先匹配非静态函数</li>\n<li>静态函数不受 <code>const</code>限制——即使没有被声明为 <code>const</code>也可以被常量对象调用</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"type\">double</span>)</span> </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;f(double)&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"type\">int</span>)</span> </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;f(int)&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> A a;</span><br><span class=\"line\">    a.<span class=\"built_in\">f</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">f</span>(<span class=\"type\">double</span>)</span><br></pre></td></tr></table></figure>\n\n<p>如果存在完全匹配的普通函数，就会直接调用非静态函数：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"type\">int</span>)</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;f(int) const&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"type\">int</span>)</span> </span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;f(int)&quot;</span> &lt;&lt; endl;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>此处的 <code>void f(int) const</code> 无法改为 <code>void f(double) const</code>, 否则与同名静态函数的参数完全一致</p>\n</blockquote>\n<h4 id=\"异常的-catch顺序\"><a href=\"#异常的-catch顺序\" class=\"headerlink\" title=\"异常的 catch顺序\"></a>异常的 <code>catch</code>顺序</h4><p><code>catch</code>块的匹配是从上到下的，因此只要遇到第一个匹配的，后续的匹配就会结束</p>\n<ul>\n<li>子类的对象可以被父类捕获</li>\n<li>注意此时的动态绑定——如果父类层级（引用或者指针）在前，内部抛出的是子类的异常对象，捕捉之后调用的函数是子类的对象</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">const</span> <span class=\"type\">char</span>* <span class=\"title\">what</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Base::what()&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">virtual</span> ~<span class=\"built_in\">Base</span>() &#123;&#125;  <span class=\"comment\">// 虚析构保证多态安全</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Derived</span> : <span class=\"keyword\">public</span> Base &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">const</span> <span class=\"type\">char</span>* <span class=\"title\">what</span><span class=\"params\">()</span> <span class=\"type\">const</span> <span class=\"keyword\">override</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Derived::what()&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"built_in\">Derived</span>();  <span class=\"comment\">// 抛出子类对象</span></span><br><span class=\"line\">    &#125; <span class=\"built_in\">catch</span> (<span class=\"type\">const</span> Base&amp; e) &#123;  <span class=\"comment\">// 用父类引用接收</span></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;由父类层级捕获到异常: &quot;</span> &lt;&lt; e.<span class=\"built_in\">what</span>() &lt;&lt; endl;  <span class=\"comment\">// 动态绑定调用子类 what()</span></span><br><span class=\"line\">    &#125; <span class=\"built_in\">catch</span> (<span class=\"type\">const</span> Derived&amp; e) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;由子类层级捕获到异常: &quot;</span> &lt;&lt; e.<span class=\"built_in\">what</span>() &lt;&lt; endl;</span><br><span class=\"line\">    &#125; <span class=\"built_in\">catch</span> (...) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;捕获到未知异常&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">由父类层级捕获到异常: Derived::<span class=\"built_in\">what</span>()</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果将 <code>catch</code>内部改为普通的对象，将会输出 <code>由父类层级捕获到异常: Base::what()</code></p>\n</blockquote>\n<p>由此可见，我们应该遵循：将子类对象的捕捉放在其父类之前，最后是 <code>catch(...)</code></p>\n","_processedHighlight":true},{"title":"密码学复习","date":"2025-06-25T01:33:10.000Z","excerpt":"复习阶段整理的密码学笔记，由于没有历年卷的缘故,仅仅是整理了白老师给出的知识文档的核心,以及对重要算法的分析","mathjax":true,"thumbnail":"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250625145854973.png?imageSlim","_content":"# 前期知识\n\n## 数学基础\n\n#### gcd相关定理\n\n设a,b为整数且至少有一个不为0, 令d = gcd(a,b), 则一定存在整数x, y 有:\n\n$$\na\\cdot x + b \\cdot y = d\n$$\n\n> 特别的,当a,b互素时一定存在整数x，y使得 上述的右式为1成立\n\n#### 扩展欧几里得法\n\n对于一个整数a来说，如果它存在模n的乘法逆元$a^{-1}$ , 那么这一充分必要条件是， a与n是互素的\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605200308734.png?imageSlim\"/>\n\n#### 素数相关的定理\n\n任意大于0的整数 $a$ 都能唯一分解成素数的乘积：\n\n$$\na = p_1 * p_2 \\dots * p_t\n$$\n\n## 古典密码\n\n- 频率分析表可以对付单表密码\n- 仿射密码\n  - 以加密为例：$y = (x \\cdot k_1 + k_2) \\mod n $\n\n#### Vigenere\n\nVigenere是一种多表简单加法密码.\n\n- 明文为 m1,m2...mp; 密钥为 k1,k2...kq\n- 当q小于p时, 重复使用密钥;\n- 加密: $c_i = (m_i + k_i) mod \\ n$\n- 解密: $m_i = (c_i - k_i) mod \\ n$\n\n### Enigma\n\n流程图：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefinedimage-20250310151647723.png?imageSlim\"/>\n\n## Hash函数\n\n### MD5\n\n使用～加密的过程也被称作生成摘要的过程，相当于有损压缩\n\n- 报文的长度固定为128位\n\nmd5是一种单向函数，意味着可能有多个输入对应相同的输出\n\n- 如果不同的报文计算得到的摘要相同，就称为发生了碰撞 collision\n\n#### 分块与填充\n\n- 如果最后一块的大小正好是64字节，还需要额外填充一块\n- 1字节的 `0x80`以及8字节的 `count 是一定要填充的`\n- 按照最后一块的大小，分为小于56与介于56和63字节之间2种情况\n\n#### 源代码分析\n\n**结构体**\n\n```cpp\ntypedef struct _MD5_CTX\n{\n   ulong32  state[4]; /* 128位摘要 */\n   ulong32  count[2]; /* 已处理的报文的二进制位数,最大值=2^64-1 */\n   unsigned char  data[64]; /* 64字节message块 */\n} MD5_CTX;\n```\n\n> 此处的count计数的是比特位而不是字节！因此通过下面的方式计算字节数：\n>\n> ```cpp\n> bytes_left = (MD5_ctx->count[0] >> 3) & 0x3F;\n> ```\n>\n> `&0x3F 等价于 %64` 也就是 和 n-bit的1进行与计算，相当于 mod $2^n$\n\n**Update**\n\n每次不断向其中添加新数据，添加前需要补充的字节数如果小于buf_len，说明可以补齐为1个block来处理，否则进入else分支直接赋值\n\n#### Final\n\n```c\nint Final_MD5(MD5_CTX *MD5_ctx)\n{\n   ulong32 bytes_left, pad_len;\n   unsigned char total_bits[8];\n\n   // unsigned char * 进行强制类型转换, 使得8“位”实际上得到的是64bits, 也就是计数的全部内容.\n   \n   memcpy(total_bits, (unsigned char *)MD5_ctx->count, 8); // total_bits=\n                                                           // 已处理的报文的二进制位数\n                                                           // (含data中剩余的字节)\n                                                           // 后面补充的pad_stuff及\n                                                           // total_bits本身不计在内\n   bytes_left = (MD5_ctx->count[0] >> 3) & 0x3F;\n   pad_len = (bytes_left < 56) ? (56 - bytes_left) : \n               (64 - bytes_left + 56); // bytes_left==56时, 要补8+56=64字节\n                                       // bytes_left==57时, 要补7+56=63字节\n   Update_MD5(MD5_ctx, pad_stuff, pad_len); // 把pad_stuff加到data中计算\n   Update_MD5(MD5_ctx, total_bits, 8); // 把total_bits加到data中计算\n   return 0;\n}\n```\n\n- 注意 `pad_len`在此处就是填充值的字节数，按照最后一个块的字节数的56划分\n- count中，不包含填充值和本身，只是计数处理的字节数\n\n#### 彩虹表破解MD5\n\n以4个大写字母的彩虹表为例:\n\n1. 生成随机数 n $\\in$ [0, $26^4-1$], 得到对应的字母 $p_0$\n\n   > 比如 `AAAA` 对应 `0`\n   >\n2. 计算 $m_0 = md\\,5(p_0)$\n\n   1. 每次将得到的 $m$取模得到上述的 $p_i$, 循环计算, 得到最后的一个 $m$;\n   2. 记录循环序列初始的 `n`与最后的 `m`.\n3. 循环上述操作 `k` 次, 得到 `k`对的值存入数据库, 然后用报文 $M$ 在数据库当中检索 `m`.\n4. 如果立即找到, 说明是这对键值对的 $p_{100}$, 使用 $n$重新计算即可.\n5. 如果在数据库中找不到 $M$ 的值, 作以下的操作\n\n   $$\n   M \\mod {26^4} \\rightarrow n  \\rightarrow p \\rightarrow m\n   $$\n\n   如果此时的 $m$ 在数据库中存在, 那么说明此时的 $M$ 就是那一对 n与m计算序列中的 $n_{99}$所对应的 $p_{99}$ .\n\n   > 如果继续找不到, 那么就循环上述的步骤.\n   >\n\n**NOTICE：**\n\n- 生成一个随机数的$n_0$之后，计算其MD5值$m_0$ , 然后将其赋值给$n_1$ （注意需要取模处理），迭代计算$m_1$， 直至索引为100， 因此最后一个随机数计算得到的链上有101个MD5值\n- 数据库中只存储一开始的随机数（为了开始计算），以及链尾的MD5值（为了查询比较）\n- 如果初始的100个md5的值中存在对应的，就认为明文是对应的 $n_{100}$(然后转换为字母组合)；\n- 如果一开始查询不到，就按照下面的说法继续计算：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609111021620.png?imageSlim\"/>\n\n> 注意，是向前迭代，也就是说存储的都是0和100，比较的都是idx=100的md5值\n\n### SHA\n\n- sha-1得到的hash值是160位 = 20 字节\n  - 使用5个32位寄存器\n- ～也是分块计算，每块64字节，不足64字节时按照与md5相同的方法填充\n\n#### 结构体\n\n```cpp\ntypedef struct _SHA1_CTX \n{\n   ulong state[5];    // 5个32位寄存器，对应A,B,C,D,E\n   struct {ulong hi, lo;} length;  // 64位消息长度计数器\n   uchar data[64];    // 512位的消息块\n} SHA1_CTX;\n```\n\n#### ROL\n\n> 循环左移\n\n```cpp\nstatic ulong ROL(ulong x, int number) /* left circular shift number bits */\n{\n   return (x << number) | (x >> (32 - number));\n}\n```\n\n> 在低位进行或运算，补充之前移出的位\n\n- `BigEndian` 将buf中的long转换成大端的存储格式\n- final中：\n  ```cpp\n     BigEndian(digest, 20); \n     /*[%] 注意SHA1的hash值共5个state, 每个state为ulong类型, \n           输出的时候,不可以把5个state当作连续的20个字节并以\n           字节为单位按从左到右顺序输出, 而应该以ulong为单位\n           分5次输出. 这是因为在Little-Endian的机器中, ulong\n           是按低字节在前高字节在后的顺序存放在内存中的 , 若\n           以字节为单位输出ulong , 则从左到右输出的4个字节与\n           直接输出ulong所得的4字节顺序刚好是反的.\n           这里为了达到以字节为单位按从左到右顺序输出的目的,\n           特地调用BigEndian()这个函数对每个ulong所包含的4个\n           字节颠倒顺序, 这样一来,  digest中包含的20字节摘要\n           就可以按从左到右顺序输出了.\n     */\n     #endif\n  ```\n\n## 分组密码工作与流密码\n\n### 分组密码\n\n#### ECB\n\n> 电子密码簿\n\n将明文分块, 分别用一个 `key`进行加密.\n\n- **优点**:  加密和解密都可以并行进行.\n- **缺点**: 块内依旧存在可能相同的密文块.\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609114145255.png?imageSlim\"/>\n\n#### CBC\n\n> **Cipher Block Chaining** 密文块链接模式\n\n当前块的密文与前一块的密文有关:\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609114730540.png?imageSlim\"/>\n\n加密过程**只能串行处理**：\n\n$$\nC_j = E_k (c_{j-1}\\oplus p_j)\n$$\n\n解密过程可以并行处理：\n\n$$\nP_j = D_k (c_{j}) \\oplus c_{j-1}\n$$\n\n#### CFB\n\n> **Cipher feedback** 密文反馈模式\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609131909707.png?imageSlim\"/>\n\n**加密流程：**\n\n* 每次加密一个字节\n  * 取X的高8位用E加密，然后与明文8位异或\n* 然后每字节加密结束之后, 将 x 左移一个字节, 然后用 `c[0]`填充右侧;\n* 循环上述, 注意每次都是用 `x[0]` 进行异或操作.\n\n$$\nC_j = P_j \\oplus L_8(E_k(X_j)) \\\\ X_{j} = R_{56}(X_j) \\ || \\ C_j\n$$\n\n**解密流程：**\n\n$$\nP_j = c_j \\oplus L_8(E_k(X_j)) \\\\ x_{j+1} = R_{56}(X_j) \\ || \\ C_j\n$$\n\n**优点：**\n\n- 可以从密文传输的错误中恢复\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609131813736.png?imageSlim\"/>\n\n### RC4\n\n是一种对称加密算算法，使用相同的密钥来加密和解密\n\n#### 结构体\n\n```cpp\ntypedef struct rc4_key\n{\n     unsigned char state[256];  // 256字节的状态表\n     unsigned char x;          // 状态表索引x\n     unsigned char y;          // 状态表索引y\n} rc4_key;\n```\n\n#### 密钥初始化\n\n```cpp\nvoid prepare_key(unsigned char *key_data_ptr, int key_data_len, rc4_key *key)\n{\n   // 初始化状态表\n   for(counter = 0; counter < 256; counter++)\n      state[counter] = counter;\n   \n   // 使用密钥打乱状态表\n   for(counter = 0; counter < 256; counter++)\n   {\n       index2 = (key_data_ptr[index1] + state[counter] + index2) % 256;\n       swap_byte(&state[counter], &state[index2]);\n       index1 = (index1 + 1) % key_data_len;\n   }\n}\n```\n\n> `key_data_ptr` 为种子密钥；使用循环打乱state\n\n#### 加密/解密函数\n\n```cpp\nvoid rc4(unsigned char *buffer_ptr, int buffer_len, rc4_key *key)\n{\n   for(counter = 0; counter < buffer_len; counter ++)\n   {\n      x = (x + 1) % 256;\n      y = (state[x] + y) % 256;\n      swap_byte(&state[x], &state[y]);\n      xorIndex = (state[x] + state[y]) % 256;\n      buffer_ptr[counter] ^= state[xorIndex];\n   }\n   key->x = x; /* 保存x及y这两个state的下标, 使得下次rc4()调用与本次调用可以衔接 */\n   key->y = y;\n}\n```\n\n#### 示例\n\n```cpp\nmain()\n{\n   rc4_key k;\n   char seed_key[] = \"This is RC4 seed key.\";\n   char plaintext[100] = \"A quick brown fox jumps over the lazy dog.\";\n   \n   // 初始化密钥\n   prepare_key(seed_key, strlen(seed_key), &k);\n   \n   // 加密\n   rc4(buf, n, &k);\n   \n   // 解密（重新初始化密钥后再次加密）\n   prepare_key(seed_key, strlen(seed_key), &k);\n   rc4(buf, n, &k);\n}\n```\n\n# 重要算法\n\n## DES\n\n### 基本介绍\n\n全称: **Data Encryption Standard**\n\n流程示意图：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefineddes.bmp?imageSlim\"/>\n\n> 1. 明文的L/R中交替加密，每轮没有改变的部分与K参与计算，将结果用于改变另一部分\n> 2. 64位的key去除8位（经过打乱）后变为56位的Key，然后将左右两侧分别循环左移，16次循环迭代中分别得到一组，然后利用56-48的表得到48位的值\n> 3. 查询sbox得到32位的结果，与L异或\n\n### 步骤解析\n\n#### 加密\n\n```c\nL[i] = L[i-1] ^ f(K[i], R[i-1]);\nR[i] = R[i-1]\n```\n\n其中的 `f`为：\n\n```c\nlong f(K[i], D[i]){\n  K48 = shrink ( K[i]);\n  D48 = expand( D[i]);\n  return query_sbox(K48 ^ D48);\n}\n```\n\n- `shrink`表示从最低位开始, 交替取用1/2次 比如 0,0,1,2,2,3...\n- 为了将48位的数据展开成为数组, 我们将48位分为8组, 各组为 **6**bits 并且用 unsigned char来表示 —— `unsigned char s[8]`.\n  - `s[i]`仅仅使用低六位.\n  - `sbox`恰好对应了8张表, 供 `s`进行查询, 且每次查询输入6位的输出是4位.\n  - 因此, 8次查询的返回值一共是32位.\n\n#### sbox的查询\n\n由8个一维数组组成，分别对应48位分成的8组查询, 其中每个数组都是64位, 每行是0-15构成的不重复的16个数字, 共四行.\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefinedimage-20250331200402762.png?imageSlim\"/>\n\n对于每组中的8位，实际的数据存储在低6位中，我们：\n\n- 提取首尾的2-bit合成查询的**行号**；\n- 提取中间的4-bit合成查询的**列号**\n\n#### disturb\n\n将输入的64位进行**位重排** `permutation`\n\n`table`中64字节是1～64的排序（因此内部的数值以1为基数）：\n\n> ip[0]=58  表示源数据中的第**58**位 **(** 实际是第58-1=57位)要转化成目标数据中的第0+1=1 位\n\n```c\nvoid disturb(unsigned char table[64], unsigned char s[8], unsigned char t[8])\n{\n   int i;\n   byte_num, bit_num;\n   /* memset(t, 0, sizeof(t)); 错误 */\n   memset(t, 0, 8); /* 正确 */\n   for(i=0; i<64; i++)\n   {\n      byte_num = (table[i]-1) / 8;\n      bit_num = (table[i]-1) % 8;\n\n// 如果对应的位是0，就直接进行下一轮的迭代，因为初始化t的各位都是0\n      if(s[byte_num] & (0x80 >> bit_num)) /* 或 if(s[byte_num] & (0x01 << 7-bit_num)) */\n         t[i/8] |= 0x80 >> i%8;\n   }\n}\n```\n\n- 每次循环取出table中的一个字节，并且通过 /8 与 %8的计算分别得到 `byte_num`, `bit_num`；\n- 一共需要迭代64次，因为一共有8x8位需要替换\n\n**什么时候打乱？**\n\n- 明文在加密之前——`ip`\n- 明文加密之后——`fp`\n- sbox查询结果的32位数据）`sbox_perm_table`\n  - 打乱之后再与“明文”异或\n- 64位的密钥转换位56位 TODO——`key_perm_table`\n- 56位的密钥循环左移之后取用48位 TODO\n\n### 密钥的合成\n\n#### 56 2 48\n\n```c\n      for (j=0; j<48; j++) /* select bits individually */\n      {                    /* [%] Select 48 bits from 56 bits.\n                                  j is the target bit number, and \n                                  key_56bit_to_48bit_table[j]-1 is \n                                  the source bit number */\n         /* check bit that goes to kn[j] */\n         if (pcr[key_56bit_to_48bit_table[j]-1]) /* [%] pcr[key_56bit_to_48bit_table[j]-1] is SourceBit, j is TargetBit */\n         {\n            /* mask it in if it's there */\n            b = j % 6;                     /*  same as bytebit[b+2] */\n            kn[i][j/6] |= bytebit[b] >> 2; /* [%] remove the trailing 2 bits\n                                              j=0    1    2    3    4    5\n                                     bytebit[b]=0x80 0x40 0x20 0x10 0x08 0x04\n                                  bytebit[b]>>2=0x20 0x10 0x08 0x04 0x02 0x01\n                                            */\n         }\n      } /* [%] for (j=0; j<48; j++) */\n   } /* [%] for (i=0; i<16; i++) */\n```\n\n此处的 `bytebit`为：\n\n```c\nstatic int bytebit[8] = \n{\n/* bit0  bit1  bit2  bit3  bit4  bit5  bit6  bit7 */\n   0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01\n};\n```\n\n也就是8bit中从最左侧为1开始，不断右移知道最右侧为1\n\n上述的 `bytebit[b`] >> 2 确保了1只可能只出现右侧的6位，因此实现了**靠右对齐**\n\n6个为一组，构成8x6，i表示16轮迭代中的层数\n\n### 操作汇总\n\n#### 利用一维idx在二维数组中索引\n\n- **要求**：给定1-64范围内的idx，在8x8 i.e. 8个字节中索引对应的1bit：\n- 分析：\n  - 8x8分别用3bit去索引\n\ndisturb中的实现\n\n```c\nfor(i=0; i<64; i++)\n{\n    byte_num = (table[i]-1) / 8;\n    bit_num = (table[i]-1) % 8;\n\n    // 如果对应的位是0，就直接进行下一轮的迭代，因为初始化t的各位都是0\n    if(s[byte_num] & (0x80 >> bit_num)) /* 或 if(s[byte_num] & (0x01 << 7-bit_num)) */\n        t[i/8] |= 0x80 >> i%8;\n}\n\n```\n\n> / 8 等价于 `>> 3` ； 同时 % 8等价于 `&7`\n>\n> 注意利用结果对二维的数组进行赋值（此处就是替换）：`t[i/8] |= 0x80 >> i % 8`\n\n下面的实现也是合理的：\n\n```c\n   for (j=0; j<56; j++) /* convert key_perm_table to bits of key */\n   {                    /* [%] j is the target bit number of key */\n      b = key_perm_table[j] - 1;   /* integer bit location */\n                                   /* [%] b is the source bit number of key, base 0 */\n      m = b & 7;        /* [%] m = b % 8; */ /* find bit */ \n\n      pc1m[j]=(key[b>>3] & bytebit[m]) ? 1 : 0; /* find which key byte b is in */\n                                                /* and which bit of that byte */\n                                                /* and store 1-bit result */\n\n   }\n```\n\n> 不同于第一个实现，此处的pclm就是一个一维的数组，因此可以直接赋值。\n\n#### 构建反查表\n\n已知sbox打乱表，需要根据表格内容构建反查表\n\n- 先遍历取值范围\n- 然后遍历已知表的idx，直到idx在已知表中索引得到的值与外层的遍历值相同\n- 将外层的idx作为索引，用内层表的idx赋值给反查表\n\n```c\n   for(p=0; p<32; p++) /* [%] p=SourceBit */\n   {\n      for(i=0; i<32; i++) /* [%] i=TargetBit */\n      {\n         if(sbox_perm_table[i]-1 == p) /* [%] sbox_perm_table[i] ranges within [1,32], so it is base 1, not base 0 */\n         {\n            sbox_perm_table_inverse[p] = i; /* [%] fill sbox_perm_table_inverse[p] with TargetBit=i */\n            break;\n         }\n      }\n   }\n```\n\n#### 循环右移与补偿\n\n方法1：循环左移与右移：\n\n```c\n// 循环左移n位\nulong ROL(ulong x, int n){\n  n = n % 32;\n\treturn (x << n) | (x >> ( 32 - n));\n}\n\n// 循环右移\nulong ROR(ulong x, int n){\n  n = n % 32;\n\treturn (x >> n) | (x << (32 - n));\n}\n```\n\n方法2：循环右移一位的写法\n\n```cpp\n// 循环右移，将r的最低位移到最高位，其他位向右移动一位\n//  r & 1用于判断移位前的最低位是否为1，如果是，需要在循环右移的结果补偿\nrt = (r >> 1) | ((r & 1) ? 0x80000000 : 0); /* [%] rt = ROR(rt, 1); */\n```\n\n#### 循环左移\n\n- 分别将左右两侧分为28bit进行循环左移；\n- 用 `b`表示移位的位数，将pclm中的位赋值给pcr数组\n- 注意在高28位中是 `(j - 28 + xx) % 28 ` 确保基数为1\n\n```c\nfor(j=0; j<28; j++) /* [%] left half */\n{\n   b = (j+key_rol_steps[i]) % 28;\n   pcr[j] = pc1m[b];\n}\nfor(j=28; j<56; j++) /* [%] right half */\n{\n   b = 28 + (j-28+key_rol_steps[i]) % 28;\n   pcr[j] = pc1m[b];\n}\n```\n\n#### 转换为16进制\n\n```c\nfor(i=0; i<blocks*8; i++) // 转化成 16进制字符串\n{\nsprintf(hex+i*2, \"%02X\", bufout[i]); // 2表示最少2位，0表示不足填充0，X表示用大写的16进制输出\n}\n```\n\n#### 三重DES\n\n由于存在一种称为**中途相遇攻击**（meet-in-the-middle attack）的技术，对双重DES加密构成了威胁，因此一般不使用双重DES，而是三重DES来多重加密\n\n给定3个长度为56比特的密钥与明文 $x$，密文为：\n\n$$\ny = DES_{k_3}(DES_{k_2}^{-1}(DES_{k_1}(x)))\n$$\n\n中间的密钥采取解密的形式加密，仅仅是为了可以**利用三重DES对单重DES加密的数据进行解密**\n\n## AES\n\n**整体流程**\n\n- bytesub 字节代替变换\n- shiftrows 行移位变换\n- mixcolumns 列混淆变换\n\n### MixColumn\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefinedimage-20250428165716701.png?imageSlim\"/>\n\n- 每次加密明文的一列.\n- 3112为底,不断循环左移一位得到另一行.\n  - 计算的时候是左列和右列诸位乘加. 和传统的矩阵乘法有所不同.\n- 乘数的低位在前, 高位在后.\n\n```cpp\nvoid MixColumn(unsigned char *p, unsigned char a[4], int do_mul)\n{\n   unsigned char b[4];\n   unsigned char t[4][4];\n   int j;\n   for (j = 0; j < 4; j++)\n   {\n      get_column(p, j, b);            /* 从p所指矩阵m中提取第j列, 保存到数组b中. */\n      if (do_mul)                     /* 在加密最后一轮以及解密第一轮的MixColumn步骤中不需要做乘法; */\n         aes_polynomial_mul(a, b, b); /* 其余轮都要做乘法: b = a*b mod (X^4+1); */\n      memcpy(t[j], b, 4);             /* 把乘法所得结果复制到t中第j行 */\n   }\n   memcpy(p, t, 4 * 4); /* 复制t中矩阵到p, 替换掉p中原有矩阵 */\n}\n```\n\n对应的乘法：\n\n```cpp\n// 有限域GF(2^8)多项式乘法 mod X^4 + 1\nvoid aes_polynomial_mul(unsigned char x[4], unsigned char y[4], unsigned char z[4])\n{\n    unsigned char temp[8] = {0};\n    int i, j;\n\n    for (i = 0; i < 4; i++)\n    {\n        for (j = 0; j < 4; j++)\n        {\n            unsigned char product_coeff = aes_8bit_mul_mod_0x11B(x[3 - i], y[j]);\n            temp[i + j] ^= product_coeff;\n        }\n    }\n    z[0] = temp[0] ^ temp[4];\n    z[1] = temp[1] ^ temp[5];\n    z[2] = temp[2] ^ temp[6];\n    z[3] = temp[3] ^ temp[7];\n}\n```\n\n> 由于原先矩阵中的低次系数均在前，我们希望计算0～3次之间相乘的结果，因此在两层的嵌套中，采取 `3-i` 与  `j` 并举的方式；\n>\n> i，j分别表示对应的阶数\n\n### 密钥生成\n\n**流程概述：**\n\n1. `4i` 形式比较特殊，一组（4x4字节）的key都在前者的基础上得到\n2. `4i的计算流程：`\n   1. `4i` 由 `4i-1` 临时赋值\n   2. 循环左移1位\n   3. 带入sbox替换查询\n   4. 利用4i计算轮常数r\n   5. 首字节与r异或\n   6. 4i 与 4(i-1) 作异或得到最终的4I\n3. 4i+1 =  4i ^ 4(i-1);\n4. 4i+2 = 4i+1 ^ 4(i-1) + 1\n5. ...\n\n```cpp\n pk[0] = pk[-1];\n      rol_a_row(key + i * 4, 1);\n      ByteSub(key + i * 4, 4);\n      r = 1 << ((i - step) / step);\n\n      // r较小的时候直接mod\n      if (r <= 0x80)\n         r = aes_8bit_mul_mod_0x11B(r, 1);\n      else\n         // r较大，为了避免处理大数，等价变换来优化\n         r = aes_8bit_mul_mod_0x11B(r / 4, 4);\n      key[i * 4] ^= r;\n      pk[0] ^= pk[-step];\n\n      for (j = 1; j < step; j++) /* i+j是密钥k的下标, 当(i+j)%step != 0时, */\n      {                          /* k[i+j]只需做简单的异或处理 */\n         if (...){}\n   \n         else /* 当(i+j)%step != 0时, k[i+j]只需做以下异或处理 */\n            pk[j] = pk[j - step] ^ pk[j - 1];\n      }\n      pk += step;\n```\n\n> 最后两组的轮常数因为 **mod 0x11B**的缘故与$2^{i-1}$的值并不相等\n>\n> 192和256位的密钥生成在上面的代码片段中被省略了\n\n### 操作汇总\n\n#### 农夫算法\n\n核心思想：通过被乘数的左移和乘数的右移，同时提前求模来加速计算\n\n```cpp\nint p = 0 ;\nfor(int i = 0; i < 8 && x > 0 && y > 0; i++){\n  if(y & 1){\n    p ^= x;\n  }\n  y >>= 1;\n  x <<= 1;\n  \n  // 通过迭代实现除法效果.\n  if(x >= 0x100){\n    x ^= 0x11B;  /* x = x % 0x11B */\n  }\n}\n\n```\n\n> GF2的减法就是加法，加法也就是异或；多次异或直至结果小于0x100\n\n## RSA\n\n属于公钥加密体制（非对称加密）\n\n**整体的流程：**\n\n1. 选择不等的素数 $p,q$\n2. 计算 $n = p \\cdot q$\n3. 选择与 $(p-1)\\cdot(q-1)$ 互素的数 $e$\n4. 计算$e$在模$(p-1)\\cdot(q-1)$下的乘法逆元 $d$\n5. 公开公钥：$(e,n)$\n6. 保存私钥：$(d,n)$\n\n加密与解密：\n\n$$\nc = m^e \\mod n \\\\ m = c^d \\mod n\n$$\n\n### Euler函数\n\n- 定义：$\\phi (n)$ ：小于n且与n互素的整数的个数\n- 对应的定理：\n\n  $$\n  \\gcd(x,n) = 1 \\Rightarrow x^{\\phi (n)} = 1 (\\text{ mod } n)\n  $$\n\n  特别的，如果$p$是素数的话，有 $\\phi (p)$ = $p-1$ ，推知 $x^{p-1} = 1 (\\text{ mod } p)$\n\n#### 中国剩余定理\n\n对于同余方程组：\n\n$$\nx \\equiv a_i (\\mod m_i), \\ i = 1,2,3\\dots r\n$$\n\n其中 $m_i$ 两两之间互素，并且令 ：\n\n$$\nM = \\Pi(m_i) \\\\ M_i = \\frac{M}{m_i}\n$$\n\n此时，$x$ 模 M的唯一解为：\n\n$$\nx = \\sum_{i=1}^r a_i\\times M_i \\times (M_i^{-1} \\mod m_i) \\mod M\n$$\n\n> 其中逆元可以根据辗转相除法得到\n\ne.g.\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250623191409827.png?imageSlim\"/>\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250623191422549.png?imageSlim\"/>\n\n#### Euler函数的拓展性质\n\n- 乘法性质：\n\n  $$\n  n_1, n_2 互素 \\Longrightarrow \\phi(n_1*n_2) = \\phi(n_1)*\\phi(n_2)\n  $$\n- 乘积公式：\n\n  $$\n  \\phi(n) = n*\\Pi(1-\\frac{1}{p})\n  $$\n\n  > 其中，$p|n$且 $p$为素数， 由对 $n$ 的质因数分解得到\n  >\n\ne.g.\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250623184937218.png?imageSlim\"/>\n\n### 签名\n\n加密：A将一封信发送给B\n\n- A将信件内容用B的公钥进行RSA的加密\n- B收到内容后使用自己的私钥解密，得到的结果就是A信件的内容\n\n签名：为了验证信件内容确实来自于A\n\n- A对信件内容计算摘要，以MD5算法为例：M = MD5（L）\n- 然后用A的私钥对M加密： M' = RSA（M， A的私钥）\n- A将M’与L一起发送给B\n- B利用A的公钥计算 M‘’ = RSA（M’，A的公钥），同时计算MD5（L）\n  - 如果后者的结果 = M‘’， 说明验证正确\n\n> 注意A无法得到B的私钥，因此此处RSA加密解密涉及的都是A的密钥\n\n## ECC\n\n> 直接参考pdf文档\n\n#### 常用ecc函数\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605193427122.png?imageSlim\"/>\n\n> 注意0表示计算得到的y是偶数\n\n# 补充\n\nAES算法的明文长度和密文长度都是16字节，密钥长度分为16、24、32字节三种\n\n请看调整后的表格，其中包含了ECC算法的特点：\n\n| **算法** | **加密模式**                           | **明文-密文长度**        | **密钥关系**                                         | **备注**                                      |\n| -------------- | -------------------------------------------- | ------------------------------ | ---------------------------------------------------------- | --------------------------------------------------- |\n| DES            | ECB, CBC, CFB                                | 明文64位，密文64位             | 64位密钥（实际56位用于加密，8位用于奇偶校验）              | 三重DES是为了对抗中途相遇攻击，增加安全性           |\n| AES            | ECB, CBC, CFB (未在文中明确提及，但通常支持) | 明文16字节，密文16字节         | 密钥长度可为16、24、32字节                                 | 具有字节代替、行移位、列混淆等变换                  |\n| RSA            | 不适用（非对称加密算法）                     | 明文长度需小于n，密文长度等于n | 公钥(e,n)，私钥(d,n)； e与ϕ(n)互素，d为e模ϕ(n)的乘法逆元 | 基于大数分解的困难性；可用于加密和数字签名          |\n| ECC            | 不适用（非对称加密算法）                     | 与所选椭圆曲线参数相关         | 基于椭圆曲线离散对数难题                                   | 相比RSA，在相同安全强度下密钥长度更短，计算效率更高 |\n\n#### xgcd\n\n```c\n/**\n * 扩展欧几里得算法实现\n * 计算gcd(x,y)以及x mod y的乘法逆元\n * \n * @param x 第一个整数\n * @param y 第二个整数\n * @param pinverse 用于存储x mod y的乘法逆元的指针\n * @return 返回gcd(x,y)\n * \n * 示例:\n * xgcd(3, 20, &inv)返回1，inv被赋值为7，因为3 * 7 ≡ 1 mod 20\n */\nint xgcd(int x, int y, int *pinverse)\n{\n   // 初始化扩展欧几里得算法所需的变量\n   // a1, b1用于跟踪第一个方程: x = a1*x + b1*y\n   // a2, b2用于跟踪第二个方程: y = a2*x + b2*y\n   int a1=1, b1=0, a2=0, b2=1;\n   \n   // q是商，r是余数\n   int q, r, t;\n   \n   // n和old_n用于跟踪当前的被除数和除数\n   int old_n;\n   \n   // 确保x <= y，如果不是则交换它们\n   if(x > y)\n   {\n      t = x;\n      x = y;\n      y = t;\n   }\n   \n   // 初始化n和r\n   // n初始为较大的数y，r初始为较小的数x\n   n = y;\n   r = x;\n   \n   // 当余数r不为0时继续循环\n   while(r != 0)\n   {\n      // 计算商q = n / r\n      q = n / r;\n  \n      // 更新a1和a2的值\n      // 这是扩展欧几里得算法的核心部分，同时计算系数\n      t = a1;\n      a1 = a2;\n      a2 = t - q*a2;\n  \n      // 更新b1和b2的值\n      t = b1;\n      b1 = b2;\n      b2 = t - q*b2;\n  \n      // 更新n和r的值，进行下一轮迭代\n      t = n;\n      n = r;\n      r = t % r;\n   }\n   \n   // 此时n就是gcd(x,y)\n   // 但我们需要确保乘法逆元b1在模y下是正数\n   // 因为b1可能是负数，所以加上y再取模y确保它在[0, y-1]范围内\n   a1 = (a1+y) % y;  // 虽然a1是x的系数，但这里也确保它在模y下\n   b1 = (b1+y) % y;  // 确保乘法逆元b1是正数\n   \n   // 将乘法逆元存入指针指向的变量\n   *pinverse = b1;\n   \n   // 返回gcd(x,y)\n   return n;\n}\n```\n","source":"_posts/课程笔记/密码学复习.md","raw":"---\ntitle: 密码学复习\ndate: 2025-06-25 09:33:10\ntags:\n- 信息安全\n- CS课程\n\ncategories: \n- 课程笔记\nexcerpt: 复习阶段整理的密码学笔记，由于没有历年卷的缘故,仅仅是整理了白老师给出的知识文档的核心,以及对重要算法的分析\nmathjax: true\n\n\nthumbnail: https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250625145854973.png?imageSlim\n---\n# 前期知识\n\n## 数学基础\n\n#### gcd相关定理\n\n设a,b为整数且至少有一个不为0, 令d = gcd(a,b), 则一定存在整数x, y 有:\n\n$$\na\\cdot x + b \\cdot y = d\n$$\n\n> 特别的,当a,b互素时一定存在整数x，y使得 上述的右式为1成立\n\n#### 扩展欧几里得法\n\n对于一个整数a来说，如果它存在模n的乘法逆元$a^{-1}$ , 那么这一充分必要条件是， a与n是互素的\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605200308734.png?imageSlim\"/>\n\n#### 素数相关的定理\n\n任意大于0的整数 $a$ 都能唯一分解成素数的乘积：\n\n$$\na = p_1 * p_2 \\dots * p_t\n$$\n\n## 古典密码\n\n- 频率分析表可以对付单表密码\n- 仿射密码\n  - 以加密为例：$y = (x \\cdot k_1 + k_2) \\mod n $\n\n#### Vigenere\n\nVigenere是一种多表简单加法密码.\n\n- 明文为 m1,m2...mp; 密钥为 k1,k2...kq\n- 当q小于p时, 重复使用密钥;\n- 加密: $c_i = (m_i + k_i) mod \\ n$\n- 解密: $m_i = (c_i - k_i) mod \\ n$\n\n### Enigma\n\n流程图：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefinedimage-20250310151647723.png?imageSlim\"/>\n\n## Hash函数\n\n### MD5\n\n使用～加密的过程也被称作生成摘要的过程，相当于有损压缩\n\n- 报文的长度固定为128位\n\nmd5是一种单向函数，意味着可能有多个输入对应相同的输出\n\n- 如果不同的报文计算得到的摘要相同，就称为发生了碰撞 collision\n\n#### 分块与填充\n\n- 如果最后一块的大小正好是64字节，还需要额外填充一块\n- 1字节的 `0x80`以及8字节的 `count 是一定要填充的`\n- 按照最后一块的大小，分为小于56与介于56和63字节之间2种情况\n\n#### 源代码分析\n\n**结构体**\n\n```cpp\ntypedef struct _MD5_CTX\n{\n   ulong32  state[4]; /* 128位摘要 */\n   ulong32  count[2]; /* 已处理的报文的二进制位数,最大值=2^64-1 */\n   unsigned char  data[64]; /* 64字节message块 */\n} MD5_CTX;\n```\n\n> 此处的count计数的是比特位而不是字节！因此通过下面的方式计算字节数：\n>\n> ```cpp\n> bytes_left = (MD5_ctx->count[0] >> 3) & 0x3F;\n> ```\n>\n> `&0x3F 等价于 %64` 也就是 和 n-bit的1进行与计算，相当于 mod $2^n$\n\n**Update**\n\n每次不断向其中添加新数据，添加前需要补充的字节数如果小于buf_len，说明可以补齐为1个block来处理，否则进入else分支直接赋值\n\n#### Final\n\n```c\nint Final_MD5(MD5_CTX *MD5_ctx)\n{\n   ulong32 bytes_left, pad_len;\n   unsigned char total_bits[8];\n\n   // unsigned char * 进行强制类型转换, 使得8“位”实际上得到的是64bits, 也就是计数的全部内容.\n   \n   memcpy(total_bits, (unsigned char *)MD5_ctx->count, 8); // total_bits=\n                                                           // 已处理的报文的二进制位数\n                                                           // (含data中剩余的字节)\n                                                           // 后面补充的pad_stuff及\n                                                           // total_bits本身不计在内\n   bytes_left = (MD5_ctx->count[0] >> 3) & 0x3F;\n   pad_len = (bytes_left < 56) ? (56 - bytes_left) : \n               (64 - bytes_left + 56); // bytes_left==56时, 要补8+56=64字节\n                                       // bytes_left==57时, 要补7+56=63字节\n   Update_MD5(MD5_ctx, pad_stuff, pad_len); // 把pad_stuff加到data中计算\n   Update_MD5(MD5_ctx, total_bits, 8); // 把total_bits加到data中计算\n   return 0;\n}\n```\n\n- 注意 `pad_len`在此处就是填充值的字节数，按照最后一个块的字节数的56划分\n- count中，不包含填充值和本身，只是计数处理的字节数\n\n#### 彩虹表破解MD5\n\n以4个大写字母的彩虹表为例:\n\n1. 生成随机数 n $\\in$ [0, $26^4-1$], 得到对应的字母 $p_0$\n\n   > 比如 `AAAA` 对应 `0`\n   >\n2. 计算 $m_0 = md\\,5(p_0)$\n\n   1. 每次将得到的 $m$取模得到上述的 $p_i$, 循环计算, 得到最后的一个 $m$;\n   2. 记录循环序列初始的 `n`与最后的 `m`.\n3. 循环上述操作 `k` 次, 得到 `k`对的值存入数据库, 然后用报文 $M$ 在数据库当中检索 `m`.\n4. 如果立即找到, 说明是这对键值对的 $p_{100}$, 使用 $n$重新计算即可.\n5. 如果在数据库中找不到 $M$ 的值, 作以下的操作\n\n   $$\n   M \\mod {26^4} \\rightarrow n  \\rightarrow p \\rightarrow m\n   $$\n\n   如果此时的 $m$ 在数据库中存在, 那么说明此时的 $M$ 就是那一对 n与m计算序列中的 $n_{99}$所对应的 $p_{99}$ .\n\n   > 如果继续找不到, 那么就循环上述的步骤.\n   >\n\n**NOTICE：**\n\n- 生成一个随机数的$n_0$之后，计算其MD5值$m_0$ , 然后将其赋值给$n_1$ （注意需要取模处理），迭代计算$m_1$， 直至索引为100， 因此最后一个随机数计算得到的链上有101个MD5值\n- 数据库中只存储一开始的随机数（为了开始计算），以及链尾的MD5值（为了查询比较）\n- 如果初始的100个md5的值中存在对应的，就认为明文是对应的 $n_{100}$(然后转换为字母组合)；\n- 如果一开始查询不到，就按照下面的说法继续计算：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609111021620.png?imageSlim\"/>\n\n> 注意，是向前迭代，也就是说存储的都是0和100，比较的都是idx=100的md5值\n\n### SHA\n\n- sha-1得到的hash值是160位 = 20 字节\n  - 使用5个32位寄存器\n- ～也是分块计算，每块64字节，不足64字节时按照与md5相同的方法填充\n\n#### 结构体\n\n```cpp\ntypedef struct _SHA1_CTX \n{\n   ulong state[5];    // 5个32位寄存器，对应A,B,C,D,E\n   struct {ulong hi, lo;} length;  // 64位消息长度计数器\n   uchar data[64];    // 512位的消息块\n} SHA1_CTX;\n```\n\n#### ROL\n\n> 循环左移\n\n```cpp\nstatic ulong ROL(ulong x, int number) /* left circular shift number bits */\n{\n   return (x << number) | (x >> (32 - number));\n}\n```\n\n> 在低位进行或运算，补充之前移出的位\n\n- `BigEndian` 将buf中的long转换成大端的存储格式\n- final中：\n  ```cpp\n     BigEndian(digest, 20); \n     /*[%] 注意SHA1的hash值共5个state, 每个state为ulong类型, \n           输出的时候,不可以把5个state当作连续的20个字节并以\n           字节为单位按从左到右顺序输出, 而应该以ulong为单位\n           分5次输出. 这是因为在Little-Endian的机器中, ulong\n           是按低字节在前高字节在后的顺序存放在内存中的 , 若\n           以字节为单位输出ulong , 则从左到右输出的4个字节与\n           直接输出ulong所得的4字节顺序刚好是反的.\n           这里为了达到以字节为单位按从左到右顺序输出的目的,\n           特地调用BigEndian()这个函数对每个ulong所包含的4个\n           字节颠倒顺序, 这样一来,  digest中包含的20字节摘要\n           就可以按从左到右顺序输出了.\n     */\n     #endif\n  ```\n\n## 分组密码工作与流密码\n\n### 分组密码\n\n#### ECB\n\n> 电子密码簿\n\n将明文分块, 分别用一个 `key`进行加密.\n\n- **优点**:  加密和解密都可以并行进行.\n- **缺点**: 块内依旧存在可能相同的密文块.\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609114145255.png?imageSlim\"/>\n\n#### CBC\n\n> **Cipher Block Chaining** 密文块链接模式\n\n当前块的密文与前一块的密文有关:\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609114730540.png?imageSlim\"/>\n\n加密过程**只能串行处理**：\n\n$$\nC_j = E_k (c_{j-1}\\oplus p_j)\n$$\n\n解密过程可以并行处理：\n\n$$\nP_j = D_k (c_{j}) \\oplus c_{j-1}\n$$\n\n#### CFB\n\n> **Cipher feedback** 密文反馈模式\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609131909707.png?imageSlim\"/>\n\n**加密流程：**\n\n* 每次加密一个字节\n  * 取X的高8位用E加密，然后与明文8位异或\n* 然后每字节加密结束之后, 将 x 左移一个字节, 然后用 `c[0]`填充右侧;\n* 循环上述, 注意每次都是用 `x[0]` 进行异或操作.\n\n$$\nC_j = P_j \\oplus L_8(E_k(X_j)) \\\\ X_{j} = R_{56}(X_j) \\ || \\ C_j\n$$\n\n**解密流程：**\n\n$$\nP_j = c_j \\oplus L_8(E_k(X_j)) \\\\ x_{j+1} = R_{56}(X_j) \\ || \\ C_j\n$$\n\n**优点：**\n\n- 可以从密文传输的错误中恢复\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609131813736.png?imageSlim\"/>\n\n### RC4\n\n是一种对称加密算算法，使用相同的密钥来加密和解密\n\n#### 结构体\n\n```cpp\ntypedef struct rc4_key\n{\n     unsigned char state[256];  // 256字节的状态表\n     unsigned char x;          // 状态表索引x\n     unsigned char y;          // 状态表索引y\n} rc4_key;\n```\n\n#### 密钥初始化\n\n```cpp\nvoid prepare_key(unsigned char *key_data_ptr, int key_data_len, rc4_key *key)\n{\n   // 初始化状态表\n   for(counter = 0; counter < 256; counter++)\n      state[counter] = counter;\n   \n   // 使用密钥打乱状态表\n   for(counter = 0; counter < 256; counter++)\n   {\n       index2 = (key_data_ptr[index1] + state[counter] + index2) % 256;\n       swap_byte(&state[counter], &state[index2]);\n       index1 = (index1 + 1) % key_data_len;\n   }\n}\n```\n\n> `key_data_ptr` 为种子密钥；使用循环打乱state\n\n#### 加密/解密函数\n\n```cpp\nvoid rc4(unsigned char *buffer_ptr, int buffer_len, rc4_key *key)\n{\n   for(counter = 0; counter < buffer_len; counter ++)\n   {\n      x = (x + 1) % 256;\n      y = (state[x] + y) % 256;\n      swap_byte(&state[x], &state[y]);\n      xorIndex = (state[x] + state[y]) % 256;\n      buffer_ptr[counter] ^= state[xorIndex];\n   }\n   key->x = x; /* 保存x及y这两个state的下标, 使得下次rc4()调用与本次调用可以衔接 */\n   key->y = y;\n}\n```\n\n#### 示例\n\n```cpp\nmain()\n{\n   rc4_key k;\n   char seed_key[] = \"This is RC4 seed key.\";\n   char plaintext[100] = \"A quick brown fox jumps over the lazy dog.\";\n   \n   // 初始化密钥\n   prepare_key(seed_key, strlen(seed_key), &k);\n   \n   // 加密\n   rc4(buf, n, &k);\n   \n   // 解密（重新初始化密钥后再次加密）\n   prepare_key(seed_key, strlen(seed_key), &k);\n   rc4(buf, n, &k);\n}\n```\n\n# 重要算法\n\n## DES\n\n### 基本介绍\n\n全称: **Data Encryption Standard**\n\n流程示意图：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefineddes.bmp?imageSlim\"/>\n\n> 1. 明文的L/R中交替加密，每轮没有改变的部分与K参与计算，将结果用于改变另一部分\n> 2. 64位的key去除8位（经过打乱）后变为56位的Key，然后将左右两侧分别循环左移，16次循环迭代中分别得到一组，然后利用56-48的表得到48位的值\n> 3. 查询sbox得到32位的结果，与L异或\n\n### 步骤解析\n\n#### 加密\n\n```c\nL[i] = L[i-1] ^ f(K[i], R[i-1]);\nR[i] = R[i-1]\n```\n\n其中的 `f`为：\n\n```c\nlong f(K[i], D[i]){\n  K48 = shrink ( K[i]);\n  D48 = expand( D[i]);\n  return query_sbox(K48 ^ D48);\n}\n```\n\n- `shrink`表示从最低位开始, 交替取用1/2次 比如 0,0,1,2,2,3...\n- 为了将48位的数据展开成为数组, 我们将48位分为8组, 各组为 **6**bits 并且用 unsigned char来表示 —— `unsigned char s[8]`.\n  - `s[i]`仅仅使用低六位.\n  - `sbox`恰好对应了8张表, 供 `s`进行查询, 且每次查询输入6位的输出是4位.\n  - 因此, 8次查询的返回值一共是32位.\n\n#### sbox的查询\n\n由8个一维数组组成，分别对应48位分成的8组查询, 其中每个数组都是64位, 每行是0-15构成的不重复的16个数字, 共四行.\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefinedimage-20250331200402762.png?imageSlim\"/>\n\n对于每组中的8位，实际的数据存储在低6位中，我们：\n\n- 提取首尾的2-bit合成查询的**行号**；\n- 提取中间的4-bit合成查询的**列号**\n\n#### disturb\n\n将输入的64位进行**位重排** `permutation`\n\n`table`中64字节是1～64的排序（因此内部的数值以1为基数）：\n\n> ip[0]=58  表示源数据中的第**58**位 **(** 实际是第58-1=57位)要转化成目标数据中的第0+1=1 位\n\n```c\nvoid disturb(unsigned char table[64], unsigned char s[8], unsigned char t[8])\n{\n   int i;\n   byte_num, bit_num;\n   /* memset(t, 0, sizeof(t)); 错误 */\n   memset(t, 0, 8); /* 正确 */\n   for(i=0; i<64; i++)\n   {\n      byte_num = (table[i]-1) / 8;\n      bit_num = (table[i]-1) % 8;\n\n// 如果对应的位是0，就直接进行下一轮的迭代，因为初始化t的各位都是0\n      if(s[byte_num] & (0x80 >> bit_num)) /* 或 if(s[byte_num] & (0x01 << 7-bit_num)) */\n         t[i/8] |= 0x80 >> i%8;\n   }\n}\n```\n\n- 每次循环取出table中的一个字节，并且通过 /8 与 %8的计算分别得到 `byte_num`, `bit_num`；\n- 一共需要迭代64次，因为一共有8x8位需要替换\n\n**什么时候打乱？**\n\n- 明文在加密之前——`ip`\n- 明文加密之后——`fp`\n- sbox查询结果的32位数据）`sbox_perm_table`\n  - 打乱之后再与“明文”异或\n- 64位的密钥转换位56位 TODO——`key_perm_table`\n- 56位的密钥循环左移之后取用48位 TODO\n\n### 密钥的合成\n\n#### 56 2 48\n\n```c\n      for (j=0; j<48; j++) /* select bits individually */\n      {                    /* [%] Select 48 bits from 56 bits.\n                                  j is the target bit number, and \n                                  key_56bit_to_48bit_table[j]-1 is \n                                  the source bit number */\n         /* check bit that goes to kn[j] */\n         if (pcr[key_56bit_to_48bit_table[j]-1]) /* [%] pcr[key_56bit_to_48bit_table[j]-1] is SourceBit, j is TargetBit */\n         {\n            /* mask it in if it's there */\n            b = j % 6;                     /*  same as bytebit[b+2] */\n            kn[i][j/6] |= bytebit[b] >> 2; /* [%] remove the trailing 2 bits\n                                              j=0    1    2    3    4    5\n                                     bytebit[b]=0x80 0x40 0x20 0x10 0x08 0x04\n                                  bytebit[b]>>2=0x20 0x10 0x08 0x04 0x02 0x01\n                                            */\n         }\n      } /* [%] for (j=0; j<48; j++) */\n   } /* [%] for (i=0; i<16; i++) */\n```\n\n此处的 `bytebit`为：\n\n```c\nstatic int bytebit[8] = \n{\n/* bit0  bit1  bit2  bit3  bit4  bit5  bit6  bit7 */\n   0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01\n};\n```\n\n也就是8bit中从最左侧为1开始，不断右移知道最右侧为1\n\n上述的 `bytebit[b`] >> 2 确保了1只可能只出现右侧的6位，因此实现了**靠右对齐**\n\n6个为一组，构成8x6，i表示16轮迭代中的层数\n\n### 操作汇总\n\n#### 利用一维idx在二维数组中索引\n\n- **要求**：给定1-64范围内的idx，在8x8 i.e. 8个字节中索引对应的1bit：\n- 分析：\n  - 8x8分别用3bit去索引\n\ndisturb中的实现\n\n```c\nfor(i=0; i<64; i++)\n{\n    byte_num = (table[i]-1) / 8;\n    bit_num = (table[i]-1) % 8;\n\n    // 如果对应的位是0，就直接进行下一轮的迭代，因为初始化t的各位都是0\n    if(s[byte_num] & (0x80 >> bit_num)) /* 或 if(s[byte_num] & (0x01 << 7-bit_num)) */\n        t[i/8] |= 0x80 >> i%8;\n}\n\n```\n\n> / 8 等价于 `>> 3` ； 同时 % 8等价于 `&7`\n>\n> 注意利用结果对二维的数组进行赋值（此处就是替换）：`t[i/8] |= 0x80 >> i % 8`\n\n下面的实现也是合理的：\n\n```c\n   for (j=0; j<56; j++) /* convert key_perm_table to bits of key */\n   {                    /* [%] j is the target bit number of key */\n      b = key_perm_table[j] - 1;   /* integer bit location */\n                                   /* [%] b is the source bit number of key, base 0 */\n      m = b & 7;        /* [%] m = b % 8; */ /* find bit */ \n\n      pc1m[j]=(key[b>>3] & bytebit[m]) ? 1 : 0; /* find which key byte b is in */\n                                                /* and which bit of that byte */\n                                                /* and store 1-bit result */\n\n   }\n```\n\n> 不同于第一个实现，此处的pclm就是一个一维的数组，因此可以直接赋值。\n\n#### 构建反查表\n\n已知sbox打乱表，需要根据表格内容构建反查表\n\n- 先遍历取值范围\n- 然后遍历已知表的idx，直到idx在已知表中索引得到的值与外层的遍历值相同\n- 将外层的idx作为索引，用内层表的idx赋值给反查表\n\n```c\n   for(p=0; p<32; p++) /* [%] p=SourceBit */\n   {\n      for(i=0; i<32; i++) /* [%] i=TargetBit */\n      {\n         if(sbox_perm_table[i]-1 == p) /* [%] sbox_perm_table[i] ranges within [1,32], so it is base 1, not base 0 */\n         {\n            sbox_perm_table_inverse[p] = i; /* [%] fill sbox_perm_table_inverse[p] with TargetBit=i */\n            break;\n         }\n      }\n   }\n```\n\n#### 循环右移与补偿\n\n方法1：循环左移与右移：\n\n```c\n// 循环左移n位\nulong ROL(ulong x, int n){\n  n = n % 32;\n\treturn (x << n) | (x >> ( 32 - n));\n}\n\n// 循环右移\nulong ROR(ulong x, int n){\n  n = n % 32;\n\treturn (x >> n) | (x << (32 - n));\n}\n```\n\n方法2：循环右移一位的写法\n\n```cpp\n// 循环右移，将r的最低位移到最高位，其他位向右移动一位\n//  r & 1用于判断移位前的最低位是否为1，如果是，需要在循环右移的结果补偿\nrt = (r >> 1) | ((r & 1) ? 0x80000000 : 0); /* [%] rt = ROR(rt, 1); */\n```\n\n#### 循环左移\n\n- 分别将左右两侧分为28bit进行循环左移；\n- 用 `b`表示移位的位数，将pclm中的位赋值给pcr数组\n- 注意在高28位中是 `(j - 28 + xx) % 28 ` 确保基数为1\n\n```c\nfor(j=0; j<28; j++) /* [%] left half */\n{\n   b = (j+key_rol_steps[i]) % 28;\n   pcr[j] = pc1m[b];\n}\nfor(j=28; j<56; j++) /* [%] right half */\n{\n   b = 28 + (j-28+key_rol_steps[i]) % 28;\n   pcr[j] = pc1m[b];\n}\n```\n\n#### 转换为16进制\n\n```c\nfor(i=0; i<blocks*8; i++) // 转化成 16进制字符串\n{\nsprintf(hex+i*2, \"%02X\", bufout[i]); // 2表示最少2位，0表示不足填充0，X表示用大写的16进制输出\n}\n```\n\n#### 三重DES\n\n由于存在一种称为**中途相遇攻击**（meet-in-the-middle attack）的技术，对双重DES加密构成了威胁，因此一般不使用双重DES，而是三重DES来多重加密\n\n给定3个长度为56比特的密钥与明文 $x$，密文为：\n\n$$\ny = DES_{k_3}(DES_{k_2}^{-1}(DES_{k_1}(x)))\n$$\n\n中间的密钥采取解密的形式加密，仅仅是为了可以**利用三重DES对单重DES加密的数据进行解密**\n\n## AES\n\n**整体流程**\n\n- bytesub 字节代替变换\n- shiftrows 行移位变换\n- mixcolumns 列混淆变换\n\n### MixColumn\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefinedimage-20250428165716701.png?imageSlim\"/>\n\n- 每次加密明文的一列.\n- 3112为底,不断循环左移一位得到另一行.\n  - 计算的时候是左列和右列诸位乘加. 和传统的矩阵乘法有所不同.\n- 乘数的低位在前, 高位在后.\n\n```cpp\nvoid MixColumn(unsigned char *p, unsigned char a[4], int do_mul)\n{\n   unsigned char b[4];\n   unsigned char t[4][4];\n   int j;\n   for (j = 0; j < 4; j++)\n   {\n      get_column(p, j, b);            /* 从p所指矩阵m中提取第j列, 保存到数组b中. */\n      if (do_mul)                     /* 在加密最后一轮以及解密第一轮的MixColumn步骤中不需要做乘法; */\n         aes_polynomial_mul(a, b, b); /* 其余轮都要做乘法: b = a*b mod (X^4+1); */\n      memcpy(t[j], b, 4);             /* 把乘法所得结果复制到t中第j行 */\n   }\n   memcpy(p, t, 4 * 4); /* 复制t中矩阵到p, 替换掉p中原有矩阵 */\n}\n```\n\n对应的乘法：\n\n```cpp\n// 有限域GF(2^8)多项式乘法 mod X^4 + 1\nvoid aes_polynomial_mul(unsigned char x[4], unsigned char y[4], unsigned char z[4])\n{\n    unsigned char temp[8] = {0};\n    int i, j;\n\n    for (i = 0; i < 4; i++)\n    {\n        for (j = 0; j < 4; j++)\n        {\n            unsigned char product_coeff = aes_8bit_mul_mod_0x11B(x[3 - i], y[j]);\n            temp[i + j] ^= product_coeff;\n        }\n    }\n    z[0] = temp[0] ^ temp[4];\n    z[1] = temp[1] ^ temp[5];\n    z[2] = temp[2] ^ temp[6];\n    z[3] = temp[3] ^ temp[7];\n}\n```\n\n> 由于原先矩阵中的低次系数均在前，我们希望计算0～3次之间相乘的结果，因此在两层的嵌套中，采取 `3-i` 与  `j` 并举的方式；\n>\n> i，j分别表示对应的阶数\n\n### 密钥生成\n\n**流程概述：**\n\n1. `4i` 形式比较特殊，一组（4x4字节）的key都在前者的基础上得到\n2. `4i的计算流程：`\n   1. `4i` 由 `4i-1` 临时赋值\n   2. 循环左移1位\n   3. 带入sbox替换查询\n   4. 利用4i计算轮常数r\n   5. 首字节与r异或\n   6. 4i 与 4(i-1) 作异或得到最终的4I\n3. 4i+1 =  4i ^ 4(i-1);\n4. 4i+2 = 4i+1 ^ 4(i-1) + 1\n5. ...\n\n```cpp\n pk[0] = pk[-1];\n      rol_a_row(key + i * 4, 1);\n      ByteSub(key + i * 4, 4);\n      r = 1 << ((i - step) / step);\n\n      // r较小的时候直接mod\n      if (r <= 0x80)\n         r = aes_8bit_mul_mod_0x11B(r, 1);\n      else\n         // r较大，为了避免处理大数，等价变换来优化\n         r = aes_8bit_mul_mod_0x11B(r / 4, 4);\n      key[i * 4] ^= r;\n      pk[0] ^= pk[-step];\n\n      for (j = 1; j < step; j++) /* i+j是密钥k的下标, 当(i+j)%step != 0时, */\n      {                          /* k[i+j]只需做简单的异或处理 */\n         if (...){}\n   \n         else /* 当(i+j)%step != 0时, k[i+j]只需做以下异或处理 */\n            pk[j] = pk[j - step] ^ pk[j - 1];\n      }\n      pk += step;\n```\n\n> 最后两组的轮常数因为 **mod 0x11B**的缘故与$2^{i-1}$的值并不相等\n>\n> 192和256位的密钥生成在上面的代码片段中被省略了\n\n### 操作汇总\n\n#### 农夫算法\n\n核心思想：通过被乘数的左移和乘数的右移，同时提前求模来加速计算\n\n```cpp\nint p = 0 ;\nfor(int i = 0; i < 8 && x > 0 && y > 0; i++){\n  if(y & 1){\n    p ^= x;\n  }\n  y >>= 1;\n  x <<= 1;\n  \n  // 通过迭代实现除法效果.\n  if(x >= 0x100){\n    x ^= 0x11B;  /* x = x % 0x11B */\n  }\n}\n\n```\n\n> GF2的减法就是加法，加法也就是异或；多次异或直至结果小于0x100\n\n## RSA\n\n属于公钥加密体制（非对称加密）\n\n**整体的流程：**\n\n1. 选择不等的素数 $p,q$\n2. 计算 $n = p \\cdot q$\n3. 选择与 $(p-1)\\cdot(q-1)$ 互素的数 $e$\n4. 计算$e$在模$(p-1)\\cdot(q-1)$下的乘法逆元 $d$\n5. 公开公钥：$(e,n)$\n6. 保存私钥：$(d,n)$\n\n加密与解密：\n\n$$\nc = m^e \\mod n \\\\ m = c^d \\mod n\n$$\n\n### Euler函数\n\n- 定义：$\\phi (n)$ ：小于n且与n互素的整数的个数\n- 对应的定理：\n\n  $$\n  \\gcd(x,n) = 1 \\Rightarrow x^{\\phi (n)} = 1 (\\text{ mod } n)\n  $$\n\n  特别的，如果$p$是素数的话，有 $\\phi (p)$ = $p-1$ ，推知 $x^{p-1} = 1 (\\text{ mod } p)$\n\n#### 中国剩余定理\n\n对于同余方程组：\n\n$$\nx \\equiv a_i (\\mod m_i), \\ i = 1,2,3\\dots r\n$$\n\n其中 $m_i$ 两两之间互素，并且令 ：\n\n$$\nM = \\Pi(m_i) \\\\ M_i = \\frac{M}{m_i}\n$$\n\n此时，$x$ 模 M的唯一解为：\n\n$$\nx = \\sum_{i=1}^r a_i\\times M_i \\times (M_i^{-1} \\mod m_i) \\mod M\n$$\n\n> 其中逆元可以根据辗转相除法得到\n\ne.g.\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250623191409827.png?imageSlim\"/>\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250623191422549.png?imageSlim\"/>\n\n#### Euler函数的拓展性质\n\n- 乘法性质：\n\n  $$\n  n_1, n_2 互素 \\Longrightarrow \\phi(n_1*n_2) = \\phi(n_1)*\\phi(n_2)\n  $$\n- 乘积公式：\n\n  $$\n  \\phi(n) = n*\\Pi(1-\\frac{1}{p})\n  $$\n\n  > 其中，$p|n$且 $p$为素数， 由对 $n$ 的质因数分解得到\n  >\n\ne.g.\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250623184937218.png?imageSlim\"/>\n\n### 签名\n\n加密：A将一封信发送给B\n\n- A将信件内容用B的公钥进行RSA的加密\n- B收到内容后使用自己的私钥解密，得到的结果就是A信件的内容\n\n签名：为了验证信件内容确实来自于A\n\n- A对信件内容计算摘要，以MD5算法为例：M = MD5（L）\n- 然后用A的私钥对M加密： M' = RSA（M， A的私钥）\n- A将M’与L一起发送给B\n- B利用A的公钥计算 M‘’ = RSA（M’，A的公钥），同时计算MD5（L）\n  - 如果后者的结果 = M‘’， 说明验证正确\n\n> 注意A无法得到B的私钥，因此此处RSA加密解密涉及的都是A的密钥\n\n## ECC\n\n> 直接参考pdf文档\n\n#### 常用ecc函数\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605193427122.png?imageSlim\"/>\n\n> 注意0表示计算得到的y是偶数\n\n# 补充\n\nAES算法的明文长度和密文长度都是16字节，密钥长度分为16、24、32字节三种\n\n请看调整后的表格，其中包含了ECC算法的特点：\n\n| **算法** | **加密模式**                           | **明文-密文长度**        | **密钥关系**                                         | **备注**                                      |\n| -------------- | -------------------------------------------- | ------------------------------ | ---------------------------------------------------------- | --------------------------------------------------- |\n| DES            | ECB, CBC, CFB                                | 明文64位，密文64位             | 64位密钥（实际56位用于加密，8位用于奇偶校验）              | 三重DES是为了对抗中途相遇攻击，增加安全性           |\n| AES            | ECB, CBC, CFB (未在文中明确提及，但通常支持) | 明文16字节，密文16字节         | 密钥长度可为16、24、32字节                                 | 具有字节代替、行移位、列混淆等变换                  |\n| RSA            | 不适用（非对称加密算法）                     | 明文长度需小于n，密文长度等于n | 公钥(e,n)，私钥(d,n)； e与ϕ(n)互素，d为e模ϕ(n)的乘法逆元 | 基于大数分解的困难性；可用于加密和数字签名          |\n| ECC            | 不适用（非对称加密算法）                     | 与所选椭圆曲线参数相关         | 基于椭圆曲线离散对数难题                                   | 相比RSA，在相同安全强度下密钥长度更短，计算效率更高 |\n\n#### xgcd\n\n```c\n/**\n * 扩展欧几里得算法实现\n * 计算gcd(x,y)以及x mod y的乘法逆元\n * \n * @param x 第一个整数\n * @param y 第二个整数\n * @param pinverse 用于存储x mod y的乘法逆元的指针\n * @return 返回gcd(x,y)\n * \n * 示例:\n * xgcd(3, 20, &inv)返回1，inv被赋值为7，因为3 * 7 ≡ 1 mod 20\n */\nint xgcd(int x, int y, int *pinverse)\n{\n   // 初始化扩展欧几里得算法所需的变量\n   // a1, b1用于跟踪第一个方程: x = a1*x + b1*y\n   // a2, b2用于跟踪第二个方程: y = a2*x + b2*y\n   int a1=1, b1=0, a2=0, b2=1;\n   \n   // q是商，r是余数\n   int q, r, t;\n   \n   // n和old_n用于跟踪当前的被除数和除数\n   int old_n;\n   \n   // 确保x <= y，如果不是则交换它们\n   if(x > y)\n   {\n      t = x;\n      x = y;\n      y = t;\n   }\n   \n   // 初始化n和r\n   // n初始为较大的数y，r初始为较小的数x\n   n = y;\n   r = x;\n   \n   // 当余数r不为0时继续循环\n   while(r != 0)\n   {\n      // 计算商q = n / r\n      q = n / r;\n  \n      // 更新a1和a2的值\n      // 这是扩展欧几里得算法的核心部分，同时计算系数\n      t = a1;\n      a1 = a2;\n      a2 = t - q*a2;\n  \n      // 更新b1和b2的值\n      t = b1;\n      b1 = b2;\n      b2 = t - q*b2;\n  \n      // 更新n和r的值，进行下一轮迭代\n      t = n;\n      n = r;\n      r = t % r;\n   }\n   \n   // 此时n就是gcd(x,y)\n   // 但我们需要确保乘法逆元b1在模y下是正数\n   // 因为b1可能是负数，所以加上y再取模y确保它在[0, y-1]范围内\n   a1 = (a1+y) % y;  // 虽然a1是x的系数，但这里也确保它在模y下\n   b1 = (b1+y) % y;  // 确保乘法逆元b1是正数\n   \n   // 将乘法逆元存入指针指向的变量\n   *pinverse = b1;\n   \n   // 返回gcd(x,y)\n   return n;\n}\n```\n","slug":"课程笔记/密码学复习","published":1,"updated":"2025-06-25T06:59:03.506Z","comments":1,"layout":"post","photos":[],"_id":"cmcbm7pqi002ie2qgbau5fu4s","content":"<h1 id=\"前期知识\"><a href=\"#前期知识\" class=\"headerlink\" title=\"前期知识\"></a>前期知识</h1><h2 id=\"数学基础\"><a href=\"#数学基础\" class=\"headerlink\" title=\"数学基础\"></a>数学基础</h2><h4 id=\"gcd相关定理\"><a href=\"#gcd相关定理\" class=\"headerlink\" title=\"gcd相关定理\"></a>gcd相关定理</h4><p>设a,b为整数且至少有一个不为0, 令d = gcd(a,b), 则一定存在整数x, y 有:</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.464ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"14.798ex\" height=\"2.034ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 6540.9 899\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(751.2,0)\"><path data-c=\"22C5\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1251.4,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2045.7,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3045.9,0)\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3697.1,0)\"><path data-c=\"22C5\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4197.3,0)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4965.1,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(6020.9,0)\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g></g></g></svg></mjx-container></p>\n<blockquote>\n<p>特别的,当a,b互素时一定存在整数x，y使得 上述的右式为1成立</p>\n</blockquote>\n<h4 id=\"扩展欧几里得法\"><a href=\"#扩展欧几里得法\" class=\"headerlink\" title=\"扩展欧几里得法\"></a>扩展欧几里得法</h4><p>对于一个整数a来说，如果它存在模n的乘法逆元<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.023ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"3.429ex\" height=\"1.909ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -833.9 1515.7 843.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mi\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(562,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></g></g></svg></mjx-container> , 那么这一充分必要条件是， a与n是互素的</p>\n<img lazyload=\"\" src=\"/images/loading.svg\" data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605200308734.png?imageSlim\">\n\n<h4 id=\"素数相关的定理\"><a href=\"#素数相关的定理\" class=\"headerlink\" title=\"素数相关的定理\"></a>素数相关的定理</h4><p>任意大于0的整数 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.023ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.197ex\" height=\"1.02ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -441 529 451\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g></g></g></svg></mjx-container> 都能唯一分解成素数的乘积：</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"17.671ex\" height=\"1.758ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -583 7810.5 777\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(806.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(1862.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3024.3,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(3746.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(4852.8,0)\"><path data-c=\"22EF\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(6247,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(6969.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g></g></g></g></svg></mjx-container></p>\n<h2 id=\"古典密码\"><a href=\"#古典密码\" class=\"headerlink\" title=\"古典密码\"></a>古典密码</h2><ul>\n<li>频率分析表可以对付单表密码</li>\n<li>仿射密码<ul>\n<li>以加密为例：<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24.563ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 10856.9 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(767.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1823.6,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2212.6,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3006.8,0)\"><path data-c=\"22C5\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(3507,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(554,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(4686.8,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(5687,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(554,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(6644.6,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mspace\" transform=\"translate(7033.6,0)\"></g><g data-mml-node=\"mi\" transform=\"translate(7867.2,0)\"><path data-c=\"6D\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\"></path><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(833,0)\"></path><path data-c=\"64\" d=\"M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z\" transform=\"translate(1333,0)\"></path></g><g data-mml-node=\"mstyle\" transform=\"translate(9756.2,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"mstyle\" transform=\"translate(9923.2,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"mi\" transform=\"translate(10256.9,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Vigenere\"><a href=\"#Vigenere\" class=\"headerlink\" title=\"Vigenere\"></a>Vigenere</h4><p>Vigenere是一种多表简单加法密码.</p>\n<ul>\n<li>明文为 m1,m2…mp; 密钥为 k1,k2…kq</li>\n<li>当q小于p时, 重复使用密钥;</li>\n<li>加密: <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20.09ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 8879.9 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(466,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1037.7,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2093.5,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(2482.5,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(911,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3909.7,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(4909.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(554,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(5757.9,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(6146.9,0)\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(7024.9,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(7509.9,0)\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mtext\" transform=\"translate(8029.9,0)\"><path data-c=\"A0\" d=\"\"></path></g><g data-mml-node=\"mi\" transform=\"translate(8279.9,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container></li>\n<li>解密: <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20.09ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 8879.9 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(911,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1482.7,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2538.5,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(2927.5,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(466,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3909.7,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(4909.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(554,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(5757.9,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(6146.9,0)\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(7024.9,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(7509.9,0)\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mtext\" transform=\"translate(8029.9,0)\"><path data-c=\"A0\" d=\"\"></path></g><g data-mml-node=\"mi\" transform=\"translate(8279.9,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container></li>\n</ul>\n<h3 id=\"Enigma\"><a href=\"#Enigma\" class=\"headerlink\" title=\"Enigma\"></a>Enigma</h3><p>流程图：</p>\n<img lazyload=\"\" src=\"/images/loading.svg\" data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefinedimage-20250310151647723.png?imageSlim\">\n\n<h2 id=\"Hash函数\"><a href=\"#Hash函数\" class=\"headerlink\" title=\"Hash函数\"></a>Hash函数</h2><h3 id=\"MD5\"><a href=\"#MD5\" class=\"headerlink\" title=\"MD5\"></a>MD5</h3><p>使用～加密的过程也被称作生成摘要的过程，相当于有损压缩</p>\n<ul>\n<li>报文的长度固定为128位</li>\n</ul>\n<p>md5是一种单向函数，意味着可能有多个输入对应相同的输出</p>\n<ul>\n<li>如果不同的报文计算得到的摘要相同，就称为发生了碰撞 collision</li>\n</ul>\n<h4 id=\"分块与填充\"><a href=\"#分块与填充\" class=\"headerlink\" title=\"分块与填充\"></a>分块与填充</h4><ul>\n<li>如果最后一块的大小正好是64字节，还需要额外填充一块</li>\n<li>1字节的 <code>0x80</code>以及8字节的 <code>count 是一定要填充的</code></li>\n<li>按照最后一块的大小，分为小于56与介于56和63字节之间2种情况</li>\n</ul>\n<h4 id=\"源代码分析\"><a href=\"#源代码分析\" class=\"headerlink\" title=\"源代码分析\"></a>源代码分析</h4><p><strong>结构体</strong></p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">_MD5_CTX</span></span><br><span class=\"line\">{</span><br><span class=\"line\">   ulong32  state[<span class=\"number\">4</span>]; <span class=\"comment\">/* 128位摘要 */</span></span><br><span class=\"line\">   ulong32  count[<span class=\"number\">2</span>]; <span class=\"comment\">/* 已处理的报文的二进制位数,最大值=2^64-1 */</span></span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">char</span>  data[<span class=\"number\">64</span>]; <span class=\"comment\">/* 64字节message块 */</span></span><br><span class=\"line\">} MD5_CTX;</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>此处的count计数的是比特位而不是字节！因此通过下面的方式计算字节数：</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bytes_left = (MD5_ctx-&gt;count[<span class=\"number\">0</span>] &gt;&gt; <span class=\"number\">3</span>) &amp; <span class=\"number\">0x3F</span>;</span><br></pre></td></tr></table></figure></div>\n\n<p><code>&amp;0x3F 等价于 %64</code> 也就是 和 n-bit的1进行与计算，相当于 mod <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.279ex\" height=\"1.528ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -675.5 1007.3 675.5\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(533,363) scale(0.707)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></g></svg></mjx-container></p>\n</blockquote>\n<p><strong>Update</strong></p>\n<p>每次不断向其中添加新数据，添加前需要补充的字节数如果小于buf_len，说明可以补齐为1个block来处理，否则进入else分支直接赋值</p>\n<h4 id=\"Final\"><a href=\"#Final\" class=\"headerlink\" title=\"Final\"></a>Final</h4><div class=\"code-container\" data-rel=\"C\"><figure class=\"iseeu highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Final_MD5</span><span class=\"params\">(MD5_CTX *MD5_ctx)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">   ulong32 bytes_left, pad_len;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">char</span> total_bits[<span class=\"number\">8</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// unsigned char * 进行强制类型转换, 使得8“位”实际上得到的是64bits, 也就是计数的全部内容.</span></span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"built_in\">memcpy</span>(total_bits, (<span class=\"type\">unsigned</span> <span class=\"type\">char</span> *)MD5_ctx-&gt;count, <span class=\"number\">8</span>); <span class=\"comment\">// total_bits=</span></span><br><span class=\"line\">                                                           <span class=\"comment\">// 已处理的报文的二进制位数</span></span><br><span class=\"line\">                                                           <span class=\"comment\">// (含data中剩余的字节)</span></span><br><span class=\"line\">                                                           <span class=\"comment\">// 后面补充的pad_stuff及</span></span><br><span class=\"line\">                                                           <span class=\"comment\">// total_bits本身不计在内</span></span><br><span class=\"line\">   bytes_left = (MD5_ctx-&gt;count[<span class=\"number\">0</span>] &gt;&gt; <span class=\"number\">3</span>) &amp; <span class=\"number\">0x3F</span>;</span><br><span class=\"line\">   pad_len = (bytes_left &lt; <span class=\"number\">56</span>) ? (<span class=\"number\">56</span> - bytes_left) : </span><br><span class=\"line\">               (<span class=\"number\">64</span> - bytes_left + <span class=\"number\">56</span>); <span class=\"comment\">// bytes_left==56时, 要补8+56=64字节</span></span><br><span class=\"line\">                                       <span class=\"comment\">// bytes_left==57时, 要补7+56=63字节</span></span><br><span class=\"line\">   Update_MD5(MD5_ctx, pad_stuff, pad_len); <span class=\"comment\">// 把pad_stuff加到data中计算</span></span><br><span class=\"line\">   Update_MD5(MD5_ctx, total_bits, <span class=\"number\">8</span>); <span class=\"comment\">// 把total_bits加到data中计算</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li>注意 <code>pad_len</code>在此处就是填充值的字节数，按照最后一个块的字节数的56划分</li>\n<li>count中，不包含填充值和本身，只是计数处理的字节数</li>\n</ul>\n<h4 id=\"彩虹表破解MD5\"><a href=\"#彩虹表破解MD5\" class=\"headerlink\" title=\"彩虹表破解MD5\"></a>彩虹表破解MD5</h4><p>以4个大写字母的彩虹表为例:</p>\n<ol>\n<li><p>生成随机数 n <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.09ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.509ex\" height=\"1.312ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -540 667 580\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"2208\" d=\"M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z\"></path></g></g></g></svg></mjx-container> [0, <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"7.147ex\" height=\"2.158ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -871.8 3159 953.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1033,393.1) scale(0.707)\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1658.8,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2659,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></svg></mjx-container>], 得到对应的字母 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.126ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 939.6 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g></g></g></g></svg></mjx-container></p>\n<blockquote>\n<p>比如 <code>AAAA</code> 对应 <code>0</code></p>\n</blockquote>\n</li>\n<li><p>计算 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"15.177ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 6708.3 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(911,-150) scale(0.707)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1592.3,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2648.1,0)\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3526.1,0)\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4046.1,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(4490.8,0)\"><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4990.8,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(5379.8,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(6319.3,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></p>\n<ol>\n<li>每次将得到的 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.986ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 878 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container>取模得到上述的 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.878ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 830 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g></g></g></svg></mjx-container>, 循环计算, 得到最后的一个 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.986ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 878 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container>;</li>\n<li>记录循环序列初始的 <code>n</code>与最后的 <code>m</code>.</li>\n</ol>\n</li>\n<li><p>循环上述操作 <code>k</code> 次, 得到 <code>k</code>对的值存入数据库, 然后用报文 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.378ex\" height=\"1.545ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -683 1051 683\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g></g></g></svg></mjx-container> 在数据库当中检索 <code>m</code>.</p>\n</li>\n<li><p>如果立即找到, 说明是这对键值对的 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"3.725ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 1646.7 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(536,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(1000,0)\"></path></g></g></g></g></g></svg></mjx-container>, 使用 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.357ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 600 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container>重新计算即可.</p>\n</li>\n<li><p>如果在数据库中找不到 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.378ex\" height=\"1.545ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -683 1051 683\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g></g></g></svg></mjx-container> 的值, 作以下的操作</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"28.714ex\" height=\"2.456ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -891.7 12691.6 1085.7\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g><g data-mml-node=\"mspace\" transform=\"translate(1051,0)\"></g><g data-mml-node=\"mi\" transform=\"translate(2217.7,0)\"><path data-c=\"6D\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\"></path><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(833,0)\"></path><path data-c=\"64\" d=\"M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z\" transform=\"translate(1333,0)\"></path></g><g data-mml-node=\"mstyle\" transform=\"translate(4106.7,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"mstyle\" transform=\"translate(4273.7,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"msup\" transform=\"translate(4607.3,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1033,413) scale(0.707)\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(6321.7,0)\"><path data-c=\"2192\" d=\"M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(7599.4,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(8477.2,0)\"><path data-c=\"2192\" d=\"M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(9755,0)\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(10535.8,0)\"><path data-c=\"2192\" d=\"M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(11813.6,0)\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container></p>\n<p>如果此时的 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.986ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 878 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container> 在数据库中存在, 那么说明此时的 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.378ex\" height=\"1.545ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -683 1051 683\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g></g></g></svg></mjx-container> 就是那一对 n与m计算序列中的 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.375ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"3.145ex\" height=\"1.375ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 1390.1 607.6\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(633,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"39\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\"></path><path data-c=\"39\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\" transform=\"translate(500,0)\"></path></g></g></g></g></g></svg></mjx-container>所对应的 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.926ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 1293.1 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(536,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"39\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\"></path><path data-c=\"39\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\" transform=\"translate(500,0)\"></path></g></g></g></g></g></svg></mjx-container> .</p>\n<blockquote>\n<p>如果继续找不到, 那么就循环上述的步骤.</p>\n</blockquote>\n</li>\n</ol>\n<p><strong>NOTICE：</strong></p>\n<ul>\n<li>生成一个随机数的<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.375ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.345ex\" height=\"1.375ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 1036.6 607.6\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g></g></g></g></svg></mjx-container>之后，计算其MD5值<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.375ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.974ex\" height=\"1.375ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 1314.6 607.6\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(911,-150) scale(0.707)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g></g></g></g></svg></mjx-container> , 然后将其赋值给<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.339ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.345ex\" height=\"1.339ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 1036.6 592\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></g></svg></mjx-container> （注意需要取模处理），迭代计算<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.339ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.974ex\" height=\"1.339ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 1314.6 592\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(911,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></g></svg></mjx-container>， 直至索引为100， 因此最后一个随机数计算得到的链上有101个MD5值</li>\n<li>数据库中只存储一开始的随机数（为了开始计算），以及链尾的MD5值（为了查询比较）</li>\n<li>如果初始的100个md5的值中存在对应的，就认为明文是对应的 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.375ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"3.945ex\" height=\"1.375ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 1743.7 607.6\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(633,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(1000,0)\"></path></g></g></g></g></g></svg></mjx-container>(然后转换为字母组合)；</li>\n<li>如果一开始查询不到，就按照下面的说法继续计算：</li>\n</ul>\n<img lazyload=\"\" src=\"/images/loading.svg\" data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609111021620.png?imageSlim\">\n\n<blockquote>\n<p>注意，是向前迭代，也就是说存储的都是0和100，比较的都是idx=100的md5值</p>\n</blockquote>\n<h3 id=\"SHA\"><a href=\"#SHA\" class=\"headerlink\" title=\"SHA\"></a>SHA</h3><ul>\n<li>sha-1得到的hash值是160位 = 20 字节<ul>\n<li>使用5个32位寄存器</li>\n</ul>\n</li>\n<li>～也是分块计算，每块64字节，不足64字节时按照与md5相同的方法填充</li>\n</ul>\n<h4 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h4><div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">_SHA1_CTX</span> </span><br><span class=\"line\">{</span><br><span class=\"line\">   ulong state[<span class=\"number\">5</span>];    <span class=\"comment\">// 5个32位寄存器，对应A,B,C,D,E</span></span><br><span class=\"line\">   <span class=\"keyword\">struct</span> {ulong hi, lo;} length;  <span class=\"comment\">// 64位消息长度计数器</span></span><br><span class=\"line\">   uchar data[<span class=\"number\">64</span>];    <span class=\"comment\">// 512位的消息块</span></span><br><span class=\"line\">} SHA1_CTX;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"ROL\"><a href=\"#ROL\" class=\"headerlink\" title=\"ROL\"></a>ROL</h4><blockquote>\n<p>循环左移</p>\n</blockquote>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> ulong <span class=\"title\">ROL</span><span class=\"params\">(ulong x, <span class=\"type\">int</span> number)</span> <span class=\"comment\">/* left circular shift number bits */</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">   <span class=\"keyword\">return</span> (x &lt;&lt; number) | (x &gt;&gt; (<span class=\"number\">32</span> - number));</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>在低位进行或运算，补充之前移出的位</p>\n</blockquote>\n<ul>\n<li><code>BigEndian</code> 将buf中的long转换成大端的存储格式</li>\n<li>final中：<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">BigEndian</span>(digest, <span class=\"number\">20</span>); </span><br><span class=\"line\"><span class=\"comment\">/*[%] 注意SHA1的hash值共5个state, 每个state为ulong类型, </span></span><br><span class=\"line\"><span class=\"comment\">      输出的时候,不可以把5个state当作连续的20个字节并以</span></span><br><span class=\"line\"><span class=\"comment\">      字节为单位按从左到右顺序输出, 而应该以ulong为单位</span></span><br><span class=\"line\"><span class=\"comment\">      分5次输出. 这是因为在Little-Endian的机器中, ulong</span></span><br><span class=\"line\"><span class=\"comment\">      是按低字节在前高字节在后的顺序存放在内存中的 , 若</span></span><br><span class=\"line\"><span class=\"comment\">      以字节为单位输出ulong , 则从左到右输出的4个字节与</span></span><br><span class=\"line\"><span class=\"comment\">      直接输出ulong所得的4字节顺序刚好是反的.</span></span><br><span class=\"line\"><span class=\"comment\">      这里为了达到以字节为单位按从左到右顺序输出的目的,</span></span><br><span class=\"line\"><span class=\"comment\">      特地调用BigEndian()这个函数对每个ulong所包含的4个</span></span><br><span class=\"line\"><span class=\"comment\">      字节颠倒顺序, 这样一来,  digest中包含的20字节摘要</span></span><br><span class=\"line\"><span class=\"comment\">      就可以按从左到右顺序输出了.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<h2 id=\"分组密码工作与流密码\"><a href=\"#分组密码工作与流密码\" class=\"headerlink\" title=\"分组密码工作与流密码\"></a>分组密码工作与流密码</h2><h3 id=\"分组密码\"><a href=\"#分组密码\" class=\"headerlink\" title=\"分组密码\"></a>分组密码</h3><h4 id=\"ECB\"><a href=\"#ECB\" class=\"headerlink\" title=\"ECB\"></a>ECB</h4><blockquote>\n<p>电子密码簿</p>\n</blockquote>\n<p>将明文分块, 分别用一个 <code>key</code>进行加密.</p>\n<ul>\n<li><strong>优点</strong>:  加密和解密都可以并行进行.</li>\n<li><strong>缺点</strong>: 块内依旧存在可能相同的密文块.</li>\n</ul>\n<img lazyload=\"\" src=\"/images/loading.svg\" data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609114145255.png?imageSlim\">\n\n<h4 id=\"CBC\"><a href=\"#CBC\" class=\"headerlink\" title=\"CBC\"></a>CBC</h4><blockquote>\n<p><strong>Cipher Block Chaining</strong> 密文块链接模式</p>\n</blockquote>\n<p>当前块的密文与前一块的密文有关:</p>\n<img lazyload=\"\" src=\"/images/loading.svg\" data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609114730540.png?imageSlim\">\n\n<p>加密过程<strong>只能串行处理</strong>：</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.666ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"18.554ex\" height=\"2.363ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 8201.1 1044.2\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(748,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1367.1,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(2422.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D438\" d=\"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(771,-150) scale(0.707)\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3612.3,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(4001.3,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(466,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(412,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1190,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(5934.5,0)\"><path data-c=\"2295\" d=\"M56 250Q56 394 156 488T384 583Q530 583 626 485T722 250Q722 110 625 14T390 -83Q249 -83 153 14T56 250ZM364 542Q308 539 251 509T148 418T96 278V270H369V542H364ZM681 278Q675 338 650 386T592 462T522 509T458 535T412 542H409V270H681V278ZM96 222Q104 150 139 95T219 12T302 -29T366 -42H369V230H96V222ZM681 222V230H409V-42H412Q429 -42 456 -36T521 -10T590 37T649 113T681 222Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(6934.7,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(7812.1,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></p>\n<p>解密过程可以并行处理：</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.666ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"18.435ex\" height=\"2.363ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 8148.1 1044.2\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(675,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1294.1,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(2349.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(861,-150) scale(0.707)\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3629.3,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(4018.3,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(466,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(4825.6,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(5436.8,0)\"><path data-c=\"2295\" d=\"M56 250Q56 394 156 488T384 583Q530 583 626 485T722 250Q722 110 625 14T390 -83Q249 -83 153 14T56 250ZM364 542Q308 539 251 509T148 418T96 278V270H369V542H364ZM681 278Q675 338 650 386T592 462T522 509T458 535T412 542H409V270H681V278ZM96 222Q104 150 139 95T219 12T302 -29T366 -42H369V230H96V222ZM681 222V230H409V-42H412Q429 -42 456 -36T521 -10T590 37T649 113T681 222Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(6437.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(466,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(412,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1190,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></g></g></svg></mjx-container></p>\n<h4 id=\"CFB\"><a href=\"#CFB\" class=\"headerlink\" title=\"CFB\"></a>CFB</h4><blockquote>\n<p><strong>Cipher feedback</strong> 密文反馈模式</p>\n</blockquote>\n<img lazyload=\"\" src=\"/images/loading.svg\" data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609131909707.png?imageSlim\">\n\n<p><strong>加密流程：</strong></p>\n<ul>\n<li>每次加密一个字节<ul>\n<li>取X的高8位用E加密，然后与明文8位异或</li>\n</ul>\n</li>\n<li>然后每字节加密结束之后, 将 x 左移一个字节, 然后用 <code>c[0]</code>填充右侧;</li>\n<li>循环上述, 注意每次都是用 <code>x[0]</code> 进行异或操作.</li>\n</ul>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.666ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"41.148ex\" height=\"2.363ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 18187.6 1044.2\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(748,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1367.1,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(2422.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(675,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3661.4,0)\"><path data-c=\"2295\" d=\"M56 250Q56 394 156 488T384 583Q530 583 626 485T722 250Q722 110 625 14T390 -83Q249 -83 153 14T56 250ZM364 542Q308 539 251 509T148 418T96 278V270H369V542H364ZM681 278Q675 338 650 386T592 462T522 509T458 535T412 542H409V270H681V278ZM96 222Q104 150 139 95T219 12T302 -29T366 -42H369V230H96V222ZM681 222V230H409V-42H412Q429 -42 456 -36T521 -10T590 37T649 113T681 222Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(4661.7,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D43F\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(714,-150) scale(0.707)\"><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(5779.2,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(6168.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D438\" d=\"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(771,-150) scale(0.707)\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(7357.6,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(7746.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(861,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(8948.9,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(9337.9,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mtext\" transform=\"translate(9726.9,0)\"><path data-c=\"A0\" d=\"\"></path></g><g data-mml-node=\"msub\" transform=\"translate(9976.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(861,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(11457,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(12512.8,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D445\" d=\"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(792,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"></path><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" transform=\"translate(500,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(14061.9,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(14450.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(861,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(15653.3,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mtext\" transform=\"translate(16042.3,0)\"><path data-c=\"A0\" d=\"\"></path></g><g data-mml-node=\"mo\" transform=\"translate(16292.3,0) translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(16570.3,0) translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g><g data-mml-node=\"mtext\" transform=\"translate(16848.3,0)\"><path data-c=\"A0\" d=\"\"></path></g><g data-mml-node=\"msub\" transform=\"translate(17098.3,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(748,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path></g></g></g></g></svg></mjx-container></p>\n<p><strong>解密流程：</strong></p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.666ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"41.976ex\" height=\"2.363ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 18553.3 1044.2\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(675,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1294.1,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(2349.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(466,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3379.4,0)\"><path data-c=\"2295\" d=\"M56 250Q56 394 156 488T384 583Q530 583 626 485T722 250Q722 110 625 14T390 -83Q249 -83 153 14T56 250ZM364 542Q308 539 251 509T148 418T96 278V270H369V542H364ZM681 278Q675 338 650 386T592 462T522 509T458 535T412 542H409V270H681V278ZM96 222Q104 150 139 95T219 12T302 -29T366 -42H369V230H96V222ZM681 222V230H409V-42H412Q429 -42 456 -36T521 -10T590 37T649 113T681 222Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(4379.7,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D43F\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(714,-150) scale(0.707)\"><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(5497.2,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(5886.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D438\" d=\"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(771,-150) scale(0.707)\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(7075.6,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(7464.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(861,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(8666.9,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(9055.9,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mtext\" transform=\"translate(9444.9,0)\"><path data-c=\"A0\" d=\"\"></path></g><g data-mml-node=\"msub\" transform=\"translate(9694.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(605,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(412,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1190,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(11822.7,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(12878.5,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D445\" d=\"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(792,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"></path><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" transform=\"translate(500,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(14427.6,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(14816.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(861,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(16018.9,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mtext\" transform=\"translate(16407.9,0)\"><path data-c=\"A0\" d=\"\"></path></g><g data-mml-node=\"mo\" transform=\"translate(16657.9,0) translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(16935.9,0) translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g><g data-mml-node=\"mtext\" transform=\"translate(17213.9,0)\"><path data-c=\"A0\" d=\"\"></path></g><g data-mml-node=\"msub\" transform=\"translate(17463.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(748,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path></g></g></g></g></svg></mjx-container></p>\n<p><strong>优点：</strong></p>\n<ul>\n<li>可以从密文传输的错误中恢复</li>\n</ul>\n<img lazyload=\"\" src=\"/images/loading.svg\" data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609131813736.png?imageSlim\">\n\n<h3 id=\"RC4\"><a href=\"#RC4\" class=\"headerlink\" title=\"RC4\"></a>RC4</h3><p>是一种对称加密算算法，使用相同的密钥来加密和解密</p>\n<h4 id=\"结构体-1\"><a href=\"#结构体-1\" class=\"headerlink\" title=\"结构体\"></a>结构体</h4><div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">rc4_key</span></span><br><span class=\"line\">{</span><br><span class=\"line\">     <span class=\"type\">unsigned</span> <span class=\"type\">char</span> state[<span class=\"number\">256</span>];  <span class=\"comment\">// 256字节的状态表</span></span><br><span class=\"line\">     <span class=\"type\">unsigned</span> <span class=\"type\">char</span> x;          <span class=\"comment\">// 状态表索引x</span></span><br><span class=\"line\">     <span class=\"type\">unsigned</span> <span class=\"type\">char</span> y;          <span class=\"comment\">// 状态表索引y</span></span><br><span class=\"line\">} rc4_key;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"密钥初始化\"><a href=\"#密钥初始化\" class=\"headerlink\" title=\"密钥初始化\"></a>密钥初始化</h4><div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">prepare_key</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span> *key_data_ptr, <span class=\"type\">int</span> key_data_len, rc4_key *key)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">   <span class=\"comment\">// 初始化状态表</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span>(counter = <span class=\"number\">0</span>; counter &lt; <span class=\"number\">256</span>; counter++)</span><br><span class=\"line\">      state[counter] = counter;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// 使用密钥打乱状态表</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span>(counter = <span class=\"number\">0</span>; counter &lt; <span class=\"number\">256</span>; counter++)</span><br><span class=\"line\">   {</span><br><span class=\"line\">       index2 = (key_data_ptr[index1] + state[counter] + index2) % <span class=\"number\">256</span>;</span><br><span class=\"line\">       <span class=\"built_in\">swap_byte</span>(&amp;state[counter], &amp;state[index2]);</span><br><span class=\"line\">       index1 = (index1 + <span class=\"number\">1</span>) % key_data_len;</span><br><span class=\"line\">   }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p><code>key_data_ptr</code> 为种子密钥；使用循环打乱state</p>\n</blockquote>\n<h4 id=\"加密-解密函数\"><a href=\"#加密-解密函数\" class=\"headerlink\" title=\"加密/解密函数\"></a>加密/解密函数</h4><div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">rc4</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span> *buffer_ptr, <span class=\"type\">int</span> buffer_len, rc4_key *key)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">   <span class=\"keyword\">for</span>(counter = <span class=\"number\">0</span>; counter &lt; buffer_len; counter ++)</span><br><span class=\"line\">   {</span><br><span class=\"line\">      x = (x + <span class=\"number\">1</span>) % <span class=\"number\">256</span>;</span><br><span class=\"line\">      y = (state[x] + y) % <span class=\"number\">256</span>;</span><br><span class=\"line\">      <span class=\"built_in\">swap_byte</span>(&amp;state[x], &amp;state[y]);</span><br><span class=\"line\">      xorIndex = (state[x] + state[y]) % <span class=\"number\">256</span>;</span><br><span class=\"line\">      buffer_ptr[counter] ^= state[xorIndex];</span><br><span class=\"line\">   }</span><br><span class=\"line\">   key-&gt;x = x; <span class=\"comment\">/* 保存x及y这两个state的下标, 使得下次rc4()调用与本次调用可以衔接 */</span></span><br><span class=\"line\">   key-&gt;y = y;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">main</span>()</span><br><span class=\"line\">{</span><br><span class=\"line\">   rc4_key k;</span><br><span class=\"line\">   <span class=\"type\">char</span> seed_key[] = <span class=\"string\">\"This is RC4 seed key.\"</span>;</span><br><span class=\"line\">   <span class=\"type\">char</span> plaintext[<span class=\"number\">100</span>] = <span class=\"string\">\"A quick brown fox jumps over the lazy dog.\"</span>;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// 初始化密钥</span></span><br><span class=\"line\">   <span class=\"built_in\">prepare_key</span>(seed_key, <span class=\"built_in\">strlen</span>(seed_key), &amp;k);</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// 加密</span></span><br><span class=\"line\">   <span class=\"built_in\">rc4</span>(buf, n, &amp;k);</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// 解密（重新初始化密钥后再次加密）</span></span><br><span class=\"line\">   <span class=\"built_in\">prepare_key</span>(seed_key, <span class=\"built_in\">strlen</span>(seed_key), &amp;k);</span><br><span class=\"line\">   <span class=\"built_in\">rc4</span>(buf, n, &amp;k);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></div>\n\n<h1 id=\"重要算法\"><a href=\"#重要算法\" class=\"headerlink\" title=\"重要算法\"></a>重要算法</h1><h2 id=\"DES\"><a href=\"#DES\" class=\"headerlink\" title=\"DES\"></a>DES</h2><h3 id=\"基本介绍\"><a href=\"#基本介绍\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h3><p>全称: <strong>Data Encryption Standard</strong></p>\n<p>流程示意图：</p>\n<img lazyload=\"\" src=\"/images/loading.svg\" data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefineddes.bmp?imageSlim\">\n\n<blockquote>\n<ol>\n<li>明文的L/R中交替加密，每轮没有改变的部分与K参与计算，将结果用于改变另一部分</li>\n<li>64位的key去除8位（经过打乱）后变为56位的Key，然后将左右两侧分别循环左移，16次循环迭代中分别得到一组，然后利用56-48的表得到48位的值</li>\n<li>查询sbox得到32位的结果，与L异或</li>\n</ol>\n</blockquote>\n<h3 id=\"步骤解析\"><a href=\"#步骤解析\" class=\"headerlink\" title=\"步骤解析\"></a>步骤解析</h3><h4 id=\"加密\"><a href=\"#加密\" class=\"headerlink\" title=\"加密\"></a>加密</h4><div class=\"code-container\" data-rel=\"C\"><figure class=\"iseeu highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">L[i] = L[i<span class=\"number\">-1</span>] ^ f(K[i], R[i<span class=\"number\">-1</span>]);</span><br><span class=\"line\">R[i] = R[i<span class=\"number\">-1</span>]</span><br></pre></td></tr></table></figure></div>\n\n<p>其中的 <code>f</code>为：</p>\n<div class=\"code-container\" data-rel=\"C\"><figure class=\"iseeu highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">long</span> <span class=\"title function_\">f</span><span class=\"params\">(K[i], D[i])</span>{</span><br><span class=\"line\">  K48 = shrink ( K[i]);</span><br><span class=\"line\">  D48 = expand( D[i]);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> query_sbox(K48 ^ D48);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li><code>shrink</code>表示从最低位开始, 交替取用1/2次 比如 0,0,1,2,2,3…</li>\n<li>为了将48位的数据展开成为数组, 我们将48位分为8组, 各组为 <strong>6</strong>bits 并且用 unsigned char来表示 —— <code>unsigned char s[8]</code>.<ul>\n<li><code>s[i]</code>仅仅使用低六位.</li>\n<li><code>sbox</code>恰好对应了8张表, 供 <code>s</code>进行查询, 且每次查询输入6位的输出是4位.</li>\n<li>因此, 8次查询的返回值一共是32位.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"sbox的查询\"><a href=\"#sbox的查询\" class=\"headerlink\" title=\"sbox的查询\"></a>sbox的查询</h4><p>由8个一维数组组成，分别对应48位分成的8组查询, 其中每个数组都是64位, 每行是0-15构成的不重复的16个数字, 共四行.</p>\n<img lazyload=\"\" src=\"/images/loading.svg\" data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefinedimage-20250331200402762.png?imageSlim\">\n\n<p>对于每组中的8位，实际的数据存储在低6位中，我们：</p>\n<ul>\n<li>提取首尾的2-bit合成查询的<strong>行号</strong>；</li>\n<li>提取中间的4-bit合成查询的<strong>列号</strong></li>\n</ul>\n<h4 id=\"disturb\"><a href=\"#disturb\" class=\"headerlink\" title=\"disturb\"></a>disturb</h4><p>将输入的64位进行<strong>位重排</strong> <code>permutation</code></p>\n<p><code>table</code>中64字节是1～64的排序（因此内部的数值以1为基数）：</p>\n<blockquote>\n<p>ip[0]=58  表示源数据中的第<strong>58</strong>位 <strong>(</strong> 实际是第58-1=57位)要转化成目标数据中的第0+1=1 位</p>\n</blockquote>\n<div class=\"code-container\" data-rel=\"C\"><figure class=\"iseeu highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">disturb</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span> table[<span class=\"number\">64</span>], <span class=\"type\">unsigned</span> <span class=\"type\">char</span> s[<span class=\"number\">8</span>], <span class=\"type\">unsigned</span> <span class=\"type\">char</span> t[<span class=\"number\">8</span>])</span></span><br><span class=\"line\">{</span><br><span class=\"line\">   <span class=\"type\">int</span> i;</span><br><span class=\"line\">   byte_num, bit_num;</span><br><span class=\"line\">   <span class=\"comment\">/* memset(t, 0, sizeof(t)); 错误 */</span></span><br><span class=\"line\">   <span class=\"built_in\">memset</span>(t, <span class=\"number\">0</span>, <span class=\"number\">8</span>); <span class=\"comment\">/* 正确 */</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">64</span>; i++)</span><br><span class=\"line\">   {</span><br><span class=\"line\">      byte_num = (table[i]<span class=\"number\">-1</span>) / <span class=\"number\">8</span>;</span><br><span class=\"line\">      bit_num = (table[i]<span class=\"number\">-1</span>) % <span class=\"number\">8</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果对应的位是0，就直接进行下一轮的迭代，因为初始化t的各位都是0</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(s[byte_num] &amp; (<span class=\"number\">0x80</span> &gt;&gt; bit_num)) <span class=\"comment\">/* 或 if(s[byte_num] &amp; (0x01 &lt;&lt; 7-bit_num)) */</span></span><br><span class=\"line\">         t[i/<span class=\"number\">8</span>] |= <span class=\"number\">0x80</span> &gt;&gt; i%<span class=\"number\">8</span>;</span><br><span class=\"line\">   }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li>每次循环取出table中的一个字节，并且通过 /8 与 %8的计算分别得到 <code>byte_num</code>, <code>bit_num</code>；</li>\n<li>一共需要迭代64次，因为一共有8x8位需要替换</li>\n</ul>\n<p><strong>什么时候打乱？</strong></p>\n<ul>\n<li>明文在加密之前——<code>ip</code></li>\n<li>明文加密之后——<code>fp</code></li>\n<li>sbox查询结果的32位数据）<code>sbox_perm_table</code><ul>\n<li>打乱之后再与“明文”异或</li>\n</ul>\n</li>\n<li>64位的密钥转换位56位 TODO——<code>key_perm_table</code></li>\n<li>56位的密钥循环左移之后取用48位 TODO</li>\n</ul>\n<h3 id=\"密钥的合成\"><a href=\"#密钥的合成\" class=\"headerlink\" title=\"密钥的合成\"></a>密钥的合成</h3><h4 id=\"56-2-48\"><a href=\"#56-2-48\" class=\"headerlink\" title=\"56 2 48\"></a>56 2 48</h4><div class=\"code-container\" data-rel=\"C\"><figure class=\"iseeu highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">for</span> (j=<span class=\"number\">0</span>; j&lt;<span class=\"number\">48</span>; j++) <span class=\"comment\">/* select bits individually */</span></span><br><span class=\"line\">   {                    <span class=\"comment\">/* [%] Select 48 bits from 56 bits.</span></span><br><span class=\"line\"><span class=\"comment\">                               j is the target bit number, and </span></span><br><span class=\"line\"><span class=\"comment\">                               key_56bit_to_48bit_table[j]-1 is </span></span><br><span class=\"line\"><span class=\"comment\">                               the source bit number */</span></span><br><span class=\"line\">      <span class=\"comment\">/* check bit that goes to kn[j] */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (pcr[key_56bit_to_48bit_table[j]<span class=\"number\">-1</span>]) <span class=\"comment\">/* [%] pcr[key_56bit_to_48bit_table[j]-1] is SourceBit, j is TargetBit */</span></span><br><span class=\"line\">      {</span><br><span class=\"line\">         <span class=\"comment\">/* mask it in if it's there */</span></span><br><span class=\"line\">         b = j % <span class=\"number\">6</span>;                     <span class=\"comment\">/*  same as bytebit[b+2] */</span></span><br><span class=\"line\">         kn[i][j/<span class=\"number\">6</span>] |= bytebit[b] &gt;&gt; <span class=\"number\">2</span>; <span class=\"comment\">/* [%] remove the trailing 2 bits</span></span><br><span class=\"line\"><span class=\"comment\">                                           j=0    1    2    3    4    5</span></span><br><span class=\"line\"><span class=\"comment\">                                  bytebit[b]=0x80 0x40 0x20 0x10 0x08 0x04</span></span><br><span class=\"line\"><span class=\"comment\">                               bytebit[b]&gt;&gt;2=0x20 0x10 0x08 0x04 0x02 0x01</span></span><br><span class=\"line\"><span class=\"comment\">                                         */</span></span><br><span class=\"line\">      }</span><br><span class=\"line\">   } <span class=\"comment\">/* [%] for (j=0; j&lt;48; j++) */</span></span><br><span class=\"line\">} <span class=\"comment\">/* [%] for (i=0; i&lt;16; i++) */</span></span><br></pre></td></tr></table></figure></div>\n\n<p>此处的 <code>bytebit</code>为：</p>\n<div class=\"code-container\" data-rel=\"C\"><figure class=\"iseeu highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> bytebit[<span class=\"number\">8</span>] = </span><br><span class=\"line\">{</span><br><span class=\"line\"><span class=\"comment\">/* bit0  bit1  bit2  bit3  bit4  bit5  bit6  bit7 */</span></span><br><span class=\"line\">   <span class=\"number\">0x80</span>, <span class=\"number\">0x40</span>, <span class=\"number\">0x20</span>, <span class=\"number\">0x10</span>, <span class=\"number\">0x08</span>, <span class=\"number\">0x04</span>, <span class=\"number\">0x02</span>, <span class=\"number\">0x01</span></span><br><span class=\"line\">};</span><br></pre></td></tr></table></figure></div>\n\n<p>也就是8bit中从最左侧为1开始，不断右移知道最右侧为1</p>\n<p>上述的 <code>bytebit[b</code>] &gt;&gt; 2 确保了1只可能只出现右侧的6位，因此实现了<strong>靠右对齐</strong></p>\n<p>6个为一组，构成8x6，i表示16轮迭代中的层数</p>\n<h3 id=\"操作汇总\"><a href=\"#操作汇总\" class=\"headerlink\" title=\"操作汇总\"></a>操作汇总</h3><h4 id=\"利用一维idx在二维数组中索引\"><a href=\"#利用一维idx在二维数组中索引\" class=\"headerlink\" title=\"利用一维idx在二维数组中索引\"></a>利用一维idx在二维数组中索引</h4><ul>\n<li><strong>要求</strong>：给定1-64范围内的idx，在8x8 i.e. 8个字节中索引对应的1bit：</li>\n<li>分析：<ul>\n<li>8x8分别用3bit去索引</li>\n</ul>\n</li>\n</ul>\n<p>disturb中的实现</p>\n<div class=\"code-container\" data-rel=\"C\"><figure class=\"iseeu highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">64</span>; i++)</span><br><span class=\"line\">{</span><br><span class=\"line\">    byte_num = (table[i]<span class=\"number\">-1</span>) / <span class=\"number\">8</span>;</span><br><span class=\"line\">    bit_num = (table[i]<span class=\"number\">-1</span>) % <span class=\"number\">8</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果对应的位是0，就直接进行下一轮的迭代，因为初始化t的各位都是0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s[byte_num] &amp; (<span class=\"number\">0x80</span> &gt;&gt; bit_num)) <span class=\"comment\">/* 或 if(s[byte_num] &amp; (0x01 &lt;&lt; 7-bit_num)) */</span></span><br><span class=\"line\">        t[i/<span class=\"number\">8</span>] |= <span class=\"number\">0x80</span> &gt;&gt; i%<span class=\"number\">8</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>/ 8 等价于 <code>&gt;&gt; 3</code> ； 同时 % 8等价于 <code>&amp;7</code></p>\n<p>注意利用结果对二维的数组进行赋值（此处就是替换）：<code>t[i/8] |= 0x80 &gt;&gt; i % 8</code></p>\n</blockquote>\n<p>下面的实现也是合理的：</p>\n<div class=\"code-container\" data-rel=\"C\"><figure class=\"iseeu highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (j=<span class=\"number\">0</span>; j&lt;<span class=\"number\">56</span>; j++) <span class=\"comment\">/* convert key_perm_table to bits of key */</span></span><br><span class=\"line\">{                    <span class=\"comment\">/* [%] j is the target bit number of key */</span></span><br><span class=\"line\">   b = key_perm_table[j] - <span class=\"number\">1</span>;   <span class=\"comment\">/* integer bit location */</span></span><br><span class=\"line\">                                <span class=\"comment\">/* [%] b is the source bit number of key, base 0 */</span></span><br><span class=\"line\">   m = b &amp; <span class=\"number\">7</span>;        <span class=\"comment\">/* [%] m = b % 8; */</span> <span class=\"comment\">/* find bit */</span> </span><br><span class=\"line\"></span><br><span class=\"line\">   pc1m[j]=(key[b&gt;&gt;<span class=\"number\">3</span>] &amp; bytebit[m]) ? <span class=\"number\">1</span> : <span class=\"number\">0</span>; <span class=\"comment\">/* find which key byte b is in */</span></span><br><span class=\"line\">                                             <span class=\"comment\">/* and which bit of that byte */</span></span><br><span class=\"line\">                                             <span class=\"comment\">/* and store 1-bit result */</span></span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>不同于第一个实现，此处的pclm就是一个一维的数组，因此可以直接赋值。</p>\n</blockquote>\n<h4 id=\"构建反查表\"><a href=\"#构建反查表\" class=\"headerlink\" title=\"构建反查表\"></a>构建反查表</h4><p>已知sbox打乱表，需要根据表格内容构建反查表</p>\n<ul>\n<li>先遍历取值范围</li>\n<li>然后遍历已知表的idx，直到idx在已知表中索引得到的值与外层的遍历值相同</li>\n<li>将外层的idx作为索引，用内层表的idx赋值给反查表</li>\n</ul>\n<div class=\"code-container\" data-rel=\"C\"><figure class=\"iseeu highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(p=<span class=\"number\">0</span>; p&lt;<span class=\"number\">32</span>; p++) <span class=\"comment\">/* [%] p=SourceBit */</span></span><br><span class=\"line\">{</span><br><span class=\"line\">   <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">32</span>; i++) <span class=\"comment\">/* [%] i=TargetBit */</span></span><br><span class=\"line\">   {</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(sbox_perm_table[i]<span class=\"number\">-1</span> == p) <span class=\"comment\">/* [%] sbox_perm_table[i] ranges within [1,32], so it is base 1, not base 0 */</span></span><br><span class=\"line\">      {</span><br><span class=\"line\">         sbox_perm_table_inverse[p] = i; <span class=\"comment\">/* [%] fill sbox_perm_table_inverse[p] with TargetBit=i */</span></span><br><span class=\"line\">         <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      }</span><br><span class=\"line\">   }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"循环右移与补偿\"><a href=\"#循环右移与补偿\" class=\"headerlink\" title=\"循环右移与补偿\"></a>循环右移与补偿</h4><p>方法1：循环左移与右移：</p>\n<div class=\"code-container\" data-rel=\"C\"><figure class=\"iseeu highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 循环左移n位</span></span><br><span class=\"line\">ulong <span class=\"title function_\">ROL</span><span class=\"params\">(ulong x, <span class=\"type\">int</span> n)</span>{</span><br><span class=\"line\">  n = n % <span class=\"number\">32</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (x &lt;&lt; n) | (x &gt;&gt; ( <span class=\"number\">32</span> - n));</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 循环右移</span></span><br><span class=\"line\">ulong <span class=\"title function_\">ROR</span><span class=\"params\">(ulong x, <span class=\"type\">int</span> n)</span>{</span><br><span class=\"line\">  n = n % <span class=\"number\">32</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (x &gt;&gt; n) | (x &lt;&lt; (<span class=\"number\">32</span> - n));</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></div>\n\n<p>方法2：循环右移一位的写法</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 循环右移，将r的最低位移到最高位，其他位向右移动一位</span></span><br><span class=\"line\"><span class=\"comment\">//  r &amp; 1用于判断移位前的最低位是否为1，如果是，需要在循环右移的结果补偿</span></span><br><span class=\"line\">rt = (r &gt;&gt; <span class=\"number\">1</span>) | ((r &amp; <span class=\"number\">1</span>) ? <span class=\"number\">0x80000000</span> : <span class=\"number\">0</span>); <span class=\"comment\">/* [%] rt = ROR(rt, 1); */</span></span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"循环左移\"><a href=\"#循环左移\" class=\"headerlink\" title=\"循环左移\"></a>循环左移</h4><ul>\n<li>分别将左右两侧分为28bit进行循环左移；</li>\n<li>用 <code>b</code>表示移位的位数，将pclm中的位赋值给pcr数组</li>\n<li>注意在高28位中是 <code>(j - 28 + xx) % 28 </code> 确保基数为1</li>\n</ul>\n<div class=\"code-container\" data-rel=\"C\"><figure class=\"iseeu highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>; j&lt;<span class=\"number\">28</span>; j++) <span class=\"comment\">/* [%] left half */</span></span><br><span class=\"line\">{</span><br><span class=\"line\">   b = (j+key_rol_steps[i]) % <span class=\"number\">28</span>;</span><br><span class=\"line\">   pcr[j] = pc1m[b];</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">for</span>(j=<span class=\"number\">28</span>; j&lt;<span class=\"number\">56</span>; j++) <span class=\"comment\">/* [%] right half */</span></span><br><span class=\"line\">{</span><br><span class=\"line\">   b = <span class=\"number\">28</span> + (j<span class=\"number\">-28</span>+key_rol_steps[i]) % <span class=\"number\">28</span>;</span><br><span class=\"line\">   pcr[j] = pc1m[b];</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"转换为16进制\"><a href=\"#转换为16进制\" class=\"headerlink\" title=\"转换为16进制\"></a>转换为16进制</h4><div class=\"code-container\" data-rel=\"C\"><figure class=\"iseeu highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;blocks*<span class=\"number\">8</span>; i++) <span class=\"comment\">// 转化成 16进制字符串</span></span><br><span class=\"line\">{</span><br><span class=\"line\"><span class=\"built_in\">sprintf</span>(hex+i*<span class=\"number\">2</span>, <span class=\"string\">\"%02X\"</span>, bufout[i]); <span class=\"comment\">// 2表示最少2位，0表示不足填充0，X表示用大写的16进制输出</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"三重DES\"><a href=\"#三重DES\" class=\"headerlink\" title=\"三重DES\"></a>三重DES</h4><p>由于存在一种称为<strong>中途相遇攻击</strong>（meet-in-the-middle attack）的技术，对双重DES加密构成了威胁，因此一般不使用双重DES，而是三重DES来多重加密</p>\n<p>给定3个长度为56比特的密钥与明文 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.294ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 572 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g></g></g></svg></mjx-container>，密文为：</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.954ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"31.527ex\" height=\"2.954ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -883.9 13935 1305.7\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(767.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1823.6,0)\"><path data-c=\"1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2651.6,0)\"><path data-c=\"1D438\" d=\"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(3415.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(646,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(554,-150) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></g></g></g><g data-mml-node=\"mo\" transform=\"translate(4788.6,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(5177.6,0)\"><path data-c=\"1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(6005.6,0)\"><path data-c=\"1D438\" d=\"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z\"></path></g><g data-mml-node=\"msubsup\" transform=\"translate(6769.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(729.6,413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"TeXAtom\" transform=\"translate(646,-315.7) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(554,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g></g></g><g data-mml-node=\"mo\" transform=\"translate(8452.9,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(8841.9,0)\"><path data-c=\"1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(9669.9,0)\"><path data-c=\"1D438\" d=\"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(10433.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(646,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(554,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></g><g data-mml-node=\"mo\" transform=\"translate(11807,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(12196,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(12768,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(13157,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(13546,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></p>\n<p>中间的密钥采取解密的形式加密，仅仅是为了可以<strong>利用三重DES对单重DES加密的数据进行解密</strong></p>\n<h2 id=\"AES\"><a href=\"#AES\" class=\"headerlink\" title=\"AES\"></a>AES</h2><p><strong>整体流程</strong></p>\n<ul>\n<li>bytesub 字节代替变换</li>\n<li>shiftrows 行移位变换</li>\n<li>mixcolumns 列混淆变换</li>\n</ul>\n<h3 id=\"MixColumn\"><a href=\"#MixColumn\" class=\"headerlink\" title=\"MixColumn\"></a>MixColumn</h3><img lazyload=\"\" src=\"/images/loading.svg\" data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefinedimage-20250428165716701.png?imageSlim\">\n\n<ul>\n<li>每次加密明文的一列.</li>\n<li>3112为底,不断循环左移一位得到另一行.<ul>\n<li>计算的时候是左列和右列诸位乘加. 和传统的矩阵乘法有所不同.</li>\n</ul>\n</li>\n<li>乘数的低位在前, 高位在后.</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MixColumn</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span> *p, <span class=\"type\">unsigned</span> <span class=\"type\">char</span> a[<span class=\"number\">4</span>], <span class=\"type\">int</span> do_mul)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">char</span> b[<span class=\"number\">4</span>];</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">char</span> t[<span class=\"number\">4</span>][<span class=\"number\">4</span>];</span><br><span class=\"line\">   <span class=\"type\">int</span> j;</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">4</span>; j++)</span><br><span class=\"line\">   {</span><br><span class=\"line\">      <span class=\"built_in\">get_column</span>(p, j, b);            <span class=\"comment\">/* 从p所指矩阵m中提取第j列, 保存到数组b中. */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (do_mul)                     <span class=\"comment\">/* 在加密最后一轮以及解密第一轮的MixColumn步骤中不需要做乘法; */</span></span><br><span class=\"line\">         <span class=\"built_in\">aes_polynomial_mul</span>(a, b, b); <span class=\"comment\">/* 其余轮都要做乘法: b = a*b mod (X^4+1); */</span></span><br><span class=\"line\">      <span class=\"built_in\">memcpy</span>(t[j], b, <span class=\"number\">4</span>);             <span class=\"comment\">/* 把乘法所得结果复制到t中第j行 */</span></span><br><span class=\"line\">   }</span><br><span class=\"line\">   <span class=\"built_in\">memcpy</span>(p, t, <span class=\"number\">4</span> * <span class=\"number\">4</span>); <span class=\"comment\">/* 复制t中矩阵到p, 替换掉p中原有矩阵 */</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></div>\n\n<p>对应的乘法：</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 有限域GF(2^8)多项式乘法 mod X^4 + 1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">aes_polynomial_mul</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span> x[<span class=\"number\">4</span>], <span class=\"type\">unsigned</span> <span class=\"type\">char</span> y[<span class=\"number\">4</span>], <span class=\"type\">unsigned</span> <span class=\"type\">char</span> z[<span class=\"number\">4</span>])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> temp[<span class=\"number\">8</span>] = {<span class=\"number\">0</span>};</span><br><span class=\"line\">    <span class=\"type\">int</span> i, j;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)</span><br><span class=\"line\">    {</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">4</span>; j++)</span><br><span class=\"line\">        {</span><br><span class=\"line\">            <span class=\"type\">unsigned</span> <span class=\"type\">char</span> product_coeff = <span class=\"built_in\">aes_8bit_mul_mod_0x11B</span>(x[<span class=\"number\">3</span> - i], y[j]);</span><br><span class=\"line\">            temp[i + j] ^= product_coeff;</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">    z[<span class=\"number\">0</span>] = temp[<span class=\"number\">0</span>] ^ temp[<span class=\"number\">4</span>];</span><br><span class=\"line\">    z[<span class=\"number\">1</span>] = temp[<span class=\"number\">1</span>] ^ temp[<span class=\"number\">5</span>];</span><br><span class=\"line\">    z[<span class=\"number\">2</span>] = temp[<span class=\"number\">2</span>] ^ temp[<span class=\"number\">6</span>];</span><br><span class=\"line\">    z[<span class=\"number\">3</span>] = temp[<span class=\"number\">3</span>] ^ temp[<span class=\"number\">7</span>];</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>由于原先矩阵中的低次系数均在前，我们希望计算0～3次之间相乘的结果，因此在两层的嵌套中，采取 <code>3-i</code> 与  <code>j</code> 并举的方式；</p>\n<p>i，j分别表示对应的阶数</p>\n</blockquote>\n<h3 id=\"密钥生成\"><a href=\"#密钥生成\" class=\"headerlink\" title=\"密钥生成\"></a>密钥生成</h3><p><strong>流程概述：</strong></p>\n<ol>\n<li><code>4i</code> 形式比较特殊，一组（4x4字节）的key都在前者的基础上得到</li>\n<li><code>4i的计算流程：</code><ol>\n<li><code>4i</code> 由 <code>4i-1</code> 临时赋值</li>\n<li>循环左移1位</li>\n<li>带入sbox替换查询</li>\n<li>利用4i计算轮常数r</li>\n<li>首字节与r异或</li>\n<li>4i 与 4(i-1) 作异或得到最终的4I</li>\n</ol>\n</li>\n<li>4i+1 =  4i ^ 4(i-1);</li>\n<li>4i+2 = 4i+1 ^ 4(i-1) + 1</li>\n<li>…</li>\n</ol>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pk[<span class=\"number\">0</span>] = pk[<span class=\"number\">-1</span>];</span><br><span class=\"line\">     <span class=\"built_in\">rol_a_row</span>(key + i * <span class=\"number\">4</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">     <span class=\"built_in\">ByteSub</span>(key + i * <span class=\"number\">4</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">     r = <span class=\"number\">1</span> &lt;&lt; ((i - step) / step);</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">// r较小的时候直接mod</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (r &lt;= <span class=\"number\">0x80</span>)</span><br><span class=\"line\">        r = <span class=\"built_in\">aes_8bit_mul_mod_0x11B</span>(r, <span class=\"number\">1</span>);</span><br><span class=\"line\">     <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"comment\">// r较大，为了避免处理大数，等价变换来优化</span></span><br><span class=\"line\">        r = <span class=\"built_in\">aes_8bit_mul_mod_0x11B</span>(r / <span class=\"number\">4</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">     key[i * <span class=\"number\">4</span>] ^= r;</span><br><span class=\"line\">     pk[<span class=\"number\">0</span>] ^= pk[-step];</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">for</span> (j = <span class=\"number\">1</span>; j &lt; step; j++) <span class=\"comment\">/* i+j是密钥k的下标, 当(i+j)%step != 0时, */</span></span><br><span class=\"line\">     {                          <span class=\"comment\">/* k[i+j]只需做简单的异或处理 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (...){}</span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"comment\">/* 当(i+j)%step != 0时, k[i+j]只需做以下异或处理 */</span></span><br><span class=\"line\">           pk[j] = pk[j - step] ^ pk[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">     }</span><br><span class=\"line\">     pk += step;</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>最后两组的轮常数因为 <strong>mod 0x11B</strong>的缘故与<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"3.915ex\" height=\"1.887ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -833.9 1730.6 833.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(345,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1123,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></g></g></svg></mjx-container>的值并不相等</p>\n<p>192和256位的密钥生成在上面的代码片段中被省略了</p>\n</blockquote>\n<h3 id=\"操作汇总-1\"><a href=\"#操作汇总-1\" class=\"headerlink\" title=\"操作汇总\"></a>操作汇总</h3><h4 id=\"农夫算法\"><a href=\"#农夫算法\" class=\"headerlink\" title=\"农夫算法\"></a>农夫算法</h4><p>核心思想：通过被乘数的左移和乘数的右移，同时提前求模来加速计算</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> p = <span class=\"number\">0</span> ;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">8</span> &amp;&amp; x &gt; <span class=\"number\">0</span> &amp;&amp; y &gt; <span class=\"number\">0</span>; i++){</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(y &amp; <span class=\"number\">1</span>){</span><br><span class=\"line\">    p ^= x;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  y &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">  x &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 通过迭代实现除法效果.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(x &gt;= <span class=\"number\">0x100</span>){</span><br><span class=\"line\">    x ^= <span class=\"number\">0x11B</span>;  <span class=\"comment\">/* x = x % 0x11B */</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>GF2的减法就是加法，加法也就是异或；多次异或直至结果小于0x100</p>\n</blockquote>\n<h2 id=\"RSA\"><a href=\"#RSA\" class=\"headerlink\" title=\"RSA\"></a>RSA</h2><p>属于公钥加密体制（非对称加密）</p>\n<p><strong>整体的流程：</strong></p>\n<ol>\n<li>选择不等的素数 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"3.185ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 1407.7 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(503,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(947.7,0)\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g></g></g></svg></mjx-container></li>\n<li>计算 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"8.188ex\" height=\"1.758ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -583 3619 777\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(877.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1933.6,0)\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2658.8,0)\"><path data-c=\"22C5\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3159,0)\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g></g></g></svg></mjx-container></li>\n<li>选择与 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"15.127ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 6686.3 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(389,0)\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1114.2,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2114.4,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2614.4,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3225.7,0)\"><path data-c=\"22C5\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3725.9,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4114.9,0)\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4797.1,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(5797.3,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(6297.3,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container> 互素的数 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.054ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 466 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path></g></g></g></svg></mjx-container></li>\n<li>计算<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.054ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 466 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path></g></g></g></svg></mjx-container>在模<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"15.127ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 6686.3 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(389,0)\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1114.2,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2114.4,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2614.4,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3225.7,0)\"><path data-c=\"22C5\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3725.9,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4114.9,0)\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4797.1,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(5797.3,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(6297.3,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container>下的乘法逆元 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.023ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.176ex\" height=\"1.593ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 520 704\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g></g></g></svg></mjx-container></li>\n<li>公开公钥：<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"5.178ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 2288.7 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(389,0)\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(855,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1299.7,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1899.7,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></li>\n<li>保存私钥：<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"5.3ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 2342.7 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(389,0)\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(909,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1353.7,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1953.7,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></li>\n</ol>\n<p>加密与解密：</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"33.292ex\" height=\"2.23ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -903.7 14715 985.7\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(710.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(1766.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(911,413) scale(0.707)\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path></g></g><g data-mml-node=\"mspace\" transform=\"translate(3057.1,0)\"></g><g data-mml-node=\"mi\" transform=\"translate(4223.7,0)\"><path data-c=\"6D\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\"></path><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(833,0)\"></path><path data-c=\"64\" d=\"M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z\" transform=\"translate(1333,0)\"></path></g><g data-mml-node=\"mstyle\" transform=\"translate(6112.7,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"mstyle\" transform=\"translate(6279.7,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"mi\" transform=\"translate(6613.4,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mtext\" transform=\"translate(7213.4,0)\"><path data-c=\"A0\" d=\"\"></path></g><g data-mml-node=\"mi\" transform=\"translate(7463.4,0)\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(8619.2,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(9675,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(466,413) scale(0.707)\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g></g><g data-mml-node=\"mspace\" transform=\"translate(10558.7,0)\"></g><g data-mml-node=\"mi\" transform=\"translate(11725.3,0)\"><path data-c=\"6D\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\"></path><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(833,0)\"></path><path data-c=\"64\" d=\"M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z\" transform=\"translate(1333,0)\"></path></g><g data-mml-node=\"mstyle\" transform=\"translate(13614.3,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"mstyle\" transform=\"translate(13781.3,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"mi\" transform=\"translate(14115,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container></p>\n<h3 id=\"Euler函数\"><a href=\"#Euler函数\" class=\"headerlink\" title=\"Euler函数\"></a>Euler函数</h3><ul>\n<li><p>定义：<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.466ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 1974 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D719\" d=\"M409 688Q413 694 421 694H429H442Q448 688 448 686Q448 679 418 563Q411 535 404 504T392 458L388 442Q388 441 397 441T429 435T477 418Q521 397 550 357T579 260T548 151T471 65T374 11T279 -10H275L251 -105Q245 -128 238 -160Q230 -192 227 -198T215 -205H209Q189 -205 189 -198Q189 -193 211 -103L234 -11Q234 -10 226 -10Q221 -10 206 -8T161 6T107 36T62 89T43 171Q43 231 76 284T157 370T254 422T342 441Q347 441 348 445L378 567Q409 686 409 688ZM122 150Q122 116 134 91T167 53T203 35T237 27H244L337 404Q333 404 326 403T297 395T255 379T211 350T170 304Q152 276 137 237Q122 191 122 150ZM500 282Q500 320 484 347T444 385T405 400T381 404H378L332 217L284 29Q284 27 285 27Q293 27 317 33T357 47Q400 66 431 100T475 170T494 234T500 282Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(596,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(985,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1585,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container> ：小于n且与n互素的整数的个数</p>\n</li>\n<li><p>对应的定理：</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"33.79ex\" height=\"2.7ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -943.3 14935.2 1193.3\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"67\" d=\"M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z\"></path><path data-c=\"63\" d=\"M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z\" transform=\"translate(500,0)\"></path><path data-c=\"64\" d=\"M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z\" transform=\"translate(944,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1500,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1889,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2461,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2905.7,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3505.7,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4172.4,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(5228.2,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(6006,0)\"><path data-c=\"21D2\" d=\"M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(7283.8,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(605,413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D719\" d=\"M409 688Q413 694 421 694H429H442Q448 688 448 686Q448 679 418 563Q411 535 404 504T392 458L388 442Q388 441 397 441T429 435T477 418Q521 397 550 357T579 260T548 151T471 65T374 11T279 -10H275L251 -105Q245 -128 238 -160Q230 -192 227 -198T215 -205H209Q189 -205 189 -198Q189 -193 211 -103L234 -11Q234 -10 226 -10Q221 -10 206 -8T161 6T107 36T62 89T43 171Q43 231 76 284T157 370T254 422T342 441Q347 441 348 445L378 567Q409 686 409 688ZM122 150Q122 116 134 91T167 53T203 35T237 27H244L337 404Q333 404 326 403T297 395T255 379T211 350T170 304Q152 276 137 237Q122 191 122 150ZM500 282Q500 320 484 347T444 385T405 400T381 404H378L332 217L284 29Q284 27 285 27Q293 27 317 33T357 47Q400 66 431 100T475 170T494 234T500 282Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(596,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(985,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1585,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(9612.4,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(10668.2,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(11168.2,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mtext\" transform=\"translate(11557.2,0)\"><path data-c=\"A0\" d=\"\"></path><path data-c=\"6D\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\" transform=\"translate(250,0)\"></path><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(1083,0)\"></path><path data-c=\"64\" d=\"M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z\" transform=\"translate(1583,0)\"></path><path data-c=\"A0\" d=\"\" transform=\"translate(2139,0)\"></path></g><g data-mml-node=\"mi\" transform=\"translate(13946.2,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(14546.2,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></p>\n<p>特别的，如果<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.138ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 503 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g></g></g></svg></mjx-container>是素数的话，有 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.247ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 1877 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D719\" d=\"M409 688Q413 694 421 694H429H442Q448 688 448 686Q448 679 418 563Q411 535 404 504T392 458L388 442Q388 441 397 441T429 435T477 418Q521 397 550 357T579 260T548 151T471 65T374 11T279 -10H275L251 -105Q245 -128 238 -160Q230 -192 227 -198T215 -205H209Q189 -205 189 -198Q189 -193 211 -103L234 -11Q234 -10 226 -10Q221 -10 206 -8T161 6T107 36T62 89T43 171Q43 231 76 284T157 370T254 422T342 441Q347 441 348 445L378 567Q409 686 409 688ZM122 150Q122 116 134 91T167 53T203 35T237 27H244L337 404Q333 404 326 403T297 395T255 379T211 350T170 304Q152 276 137 237Q122 191 122 150ZM500 282Q500 320 484 347T444 385T405 400T381 404H378L332 217L284 29Q284 27 285 27Q293 27 317 33T357 47Q400 66 431 100T475 170T494 234T500 282Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(596,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(985,0)\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1488,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container> = <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"5.035ex\" height=\"1.946ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -666 2225.4 860\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(725.2,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1725.4,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></svg></mjx-container> ，推知 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16.783ex\" height=\"2.452ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -833.9 7417.9 1083.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(605,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(503,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1281,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(2192.1,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(3247.9,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3747.9,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mtext\" transform=\"translate(4136.9,0)\"><path data-c=\"A0\" d=\"\"></path><path data-c=\"6D\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\" transform=\"translate(250,0)\"></path><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(1083,0)\"></path><path data-c=\"64\" d=\"M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z\" transform=\"translate(1583,0)\"></path><path data-c=\"A0\" d=\"\" transform=\"translate(2139,0)\"></path></g><g data-mml-node=\"mi\" transform=\"translate(6525.9,0)\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(7028.9,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></p>\n</li>\n</ul>\n<h4 id=\"中国剩余定理\"><a href=\"#中国剩余定理\" class=\"headerlink\" title=\"中国剩余定理\"></a>中国剩余定理</h4><p>对于同余方程组：</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"33.604ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 14853 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(849.8,0)\"><path data-c=\"2261\" d=\"M56 444Q56 457 70 464H707Q722 456 722 444Q722 430 706 424H72Q56 429 56 444ZM56 237T56 250T70 270H707Q722 262 722 250T707 230H70Q56 237 56 250ZM56 56Q56 71 72 76H706Q722 70 722 56Q722 44 707 36H70Q56 43 56 56Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(1905.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(562,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(2761.5,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mspace\" transform=\"translate(3150.5,0)\"></g><g data-mml-node=\"mi\" transform=\"translate(4150.5,0)\"><path data-c=\"6D\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\"></path><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(833,0)\"></path><path data-c=\"64\" d=\"M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z\" transform=\"translate(1333,0)\"></path></g><g data-mml-node=\"mstyle\" transform=\"translate(6039.5,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"mstyle\" transform=\"translate(6206.5,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"msub\" transform=\"translate(6540.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(911,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(7745.1,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(8134.1,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mtext\" transform=\"translate(8578.8,0)\"><path data-c=\"A0\" d=\"\"></path></g><g data-mml-node=\"mi\" transform=\"translate(8828.8,0)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(9451.6,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(10507.3,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(11007.3,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(11452,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(11952,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(12396.7,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(13063.3,0)\"><path data-c=\"2026\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(14402,0)\"><path data-c=\"1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container></p>\n<p>其中 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.357ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.726ex\" height=\"1.357ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 1205 599.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(911,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g></g></g></svg></mjx-container> 两两之间互素，并且令 ：</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -1.909ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"21.817ex\" height=\"4.984ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -1359 9643 2202.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1328.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2384.6,0)\"><path data-c=\"3A0\" d=\"M128 619Q121 626 117 628T101 631T58 634H25V680H724V634H691Q651 633 640 631T622 619V61Q628 51 639 49T691 46H724V0H713Q692 3 569 3Q434 3 425 0H414V46H447Q489 47 498 49T517 61V634H232V348L233 61Q239 51 250 49T302 46H335V0H324Q303 3 180 3Q45 3 36 0H25V46H58Q100 47 109 49T128 61V619Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3134.6,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(3523.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(911,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(4728.5,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mtext\" transform=\"translate(5117.5,0)\"><path data-c=\"A0\" d=\"\"></path></g><g data-mml-node=\"msub\" transform=\"translate(5367.5,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1003,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(6942.2,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mfrac\" transform=\"translate(7998,0)\"><g data-mml-node=\"mi\" transform=\"translate(297,676)\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(220,-686)\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(911,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g><rect width=\"1405\" height=\"60\" x=\"120\" y=\"220\"></rect></g></g></g></svg></mjx-container></p>\n<p>此时，<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.294ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 572 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g></g></g></svg></mjx-container> 模 M的唯一解为：</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -2.819ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"46.046ex\" height=\"6.354ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -1562.5 20352.4 2808.5\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(849.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"munderover\" transform=\"translate(1905.6,0)\"><g data-mml-node=\"mo\"><path data-c=\"2211\" d=\"M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(148.2,-1087.9) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(345,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1123,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mi\" transform=\"translate(562.5,1150) scale(0.707)\"><path data-c=\"1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"msub\" transform=\"translate(3516.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(562,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(4594.4,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(5594.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1003,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(7113.8,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(8114,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msubsup\" transform=\"translate(8503,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1138,413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mi\" transform=\"translate(1003,-292.4) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"mspace\" transform=\"translate(10594.7,0)\"></g><g data-mml-node=\"mi\" transform=\"translate(11761.4,0)\"><path data-c=\"6D\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\"></path><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(833,0)\"></path><path data-c=\"64\" d=\"M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z\" transform=\"translate(1333,0)\"></path></g><g data-mml-node=\"mstyle\" transform=\"translate(13650.4,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"mstyle\" transform=\"translate(13817.4,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"msub\" transform=\"translate(14151.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(911,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(15356,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mspace\" transform=\"translate(15745,0)\"></g><g data-mml-node=\"mi\" transform=\"translate(16911.7,0)\"><path data-c=\"6D\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\"></path><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(833,0)\"></path><path data-c=\"64\" d=\"M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z\" transform=\"translate(1333,0)\"></path></g><g data-mml-node=\"mstyle\" transform=\"translate(18800.7,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"mstyle\" transform=\"translate(18967.7,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"mi\" transform=\"translate(19301.4,0)\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g></g></g></svg></mjx-container></p>\n<blockquote>\n<p>其中逆元可以根据辗转相除法得到</p>\n</blockquote>\n<p>e.g.</p>\n<img lazyload=\"\" src=\"/images/loading.svg\" data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250623191409827.png?imageSlim\">\n\n<img lazyload=\"\" src=\"/images/loading.svg\" data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250623191422549.png?imageSlim\">\n\n<h4 id=\"Euler函数的拓展性质\"><a href=\"#Euler函数的拓展性质\" class=\"headerlink\" title=\"Euler函数的拓展性质\"></a>Euler函数的拓展性质</h4><ul>\n<li><p>乘法性质：</p>\n<p>$$<br>n_1, n_2 互素 \\Longrightarrow \\phi(n_1<em>n_2) = \\phi(n_1)</em>\\phi(n_2)<br>$$</p>\n</li>\n<li><p>乘积公式：</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -1.991ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20.465ex\" height=\"5.027ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -1342 9045.4 2222\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D719\" d=\"M409 688Q413 694 421 694H429H442Q448 688 448 686Q448 679 418 563Q411 535 404 504T392 458L388 442Q388 441 397 441T429 435T477 418Q521 397 550 357T579 260T548 151T471 65T374 11T279 -10H275L251 -105Q245 -128 238 -160Q230 -192 227 -198T215 -205H209Q189 -205 189 -198Q189 -193 211 -103L234 -11Q234 -10 226 -10Q221 -10 206 -8T161 6T107 36T62 89T43 171Q43 231 76 284T157 370T254 422T342 441Q347 441 348 445L378 567Q409 686 409 688ZM122 150Q122 116 134 91T167 53T203 35T237 27H244L337 404Q333 404 326 403T297 395T255 379T211 350T170 304Q152 276 137 237Q122 191 122 150ZM500 282Q500 320 484 347T444 385T405 400T381 404H378L332 217L284 29Q284 27 285 27Q293 27 317 33T357 47Q400 66 431 100T475 170T494 234T500 282Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(596,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(985,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1585,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2251.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3307.6,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4129.8,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4852,0)\"><path data-c=\"3A0\" d=\"M128 619Q121 626 117 628T101 631T58 634H25V680H724V634H691Q651 633 640 631T622 619V61Q628 51 639 49T691 46H724V0H713Q692 3 569 3Q434 3 425 0H414V46H447Q489 47 498 49T517 61V634H232V348L233 61Q239 51 250 49T302 46H335V0H324Q303 3 180 3Q45 3 36 0H25V46H58Q100 47 109 49T128 61V619Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(5602,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(5991,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(6713.2,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mfrac\" transform=\"translate(7713.4,0)\"><g data-mml-node=\"mn\" transform=\"translate(221.5,676)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(220,-686)\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><rect width=\"703\" height=\"60\" x=\"120\" y=\"220\"></rect></g><g data-mml-node=\"mo\" transform=\"translate(8656.4,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></p>\n<blockquote>\n<p>其中，<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.564ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"3.124ex\" height=\"2.26ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -749.5 1381 999\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(503,0) translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(781,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container>且 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.138ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 503 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g></g></g></svg></mjx-container>为素数， 由对 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.357ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 600 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container> 的质因数分解得到</p>\n</blockquote>\n</li>\n</ul>\n<p>e.g.</p>\n<img lazyload=\"\" src=\"/images/loading.svg\" data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250623184937218.png?imageSlim\">\n\n<h3 id=\"签名\"><a href=\"#签名\" class=\"headerlink\" title=\"签名\"></a>签名</h3><p>加密：A将一封信发送给B</p>\n<ul>\n<li>A将信件内容用B的公钥进行RSA的加密</li>\n<li>B收到内容后使用自己的私钥解密，得到的结果就是A信件的内容</li>\n</ul>\n<p>签名：为了验证信件内容确实来自于A</p>\n<ul>\n<li>A对信件内容计算摘要，以MD5算法为例：M = MD5（L）</li>\n<li>然后用A的私钥对M加密： M’ = RSA（M， A的私钥）</li>\n<li>A将M’与L一起发送给B</li>\n<li>B利用A的公钥计算 M‘’ = RSA（M’，A的公钥），同时计算MD5（L）<ul>\n<li>如果后者的结果 = M‘’， 说明验证正确</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>注意A无法得到B的私钥，因此此处RSA加密解密涉及的都是A的密钥</p>\n</blockquote>\n<h2 id=\"ECC\"><a href=\"#ECC\" class=\"headerlink\" title=\"ECC\"></a>ECC</h2><blockquote>\n<p>直接参考pdf文档</p>\n</blockquote>\n<h4 id=\"常用ecc函数\"><a href=\"#常用ecc函数\" class=\"headerlink\" title=\"常用ecc函数\"></a>常用ecc函数</h4><img lazyload=\"\" src=\"/images/loading.svg\" data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605193427122.png?imageSlim\">\n\n<blockquote>\n<p>注意0表示计算得到的y是偶数</p>\n</blockquote>\n<h1 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h1><p>AES算法的明文长度和密文长度都是16字节，密钥长度分为16、24、32字节三种</p>\n<p>请看调整后的表格，其中包含了ECC算法的特点：</p>\n<table>\n<thead>\n<tr>\n<th><strong>算法</strong></th>\n<th><strong>加密模式</strong></th>\n<th><strong>明文-密文长度</strong></th>\n<th><strong>密钥关系</strong></th>\n<th><strong>备注</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>DES</td>\n<td>ECB, CBC, CFB</td>\n<td>明文64位，密文64位</td>\n<td>64位密钥（实际56位用于加密，8位用于奇偶校验）</td>\n<td>三重DES是为了对抗中途相遇攻击，增加安全性</td>\n</tr>\n<tr>\n<td>AES</td>\n<td>ECB, CBC, CFB (未在文中明确提及，但通常支持)</td>\n<td>明文16字节，密文16字节</td>\n<td>密钥长度可为16、24、32字节</td>\n<td>具有字节代替、行移位、列混淆等变换</td>\n</tr>\n<tr>\n<td>RSA</td>\n<td>不适用（非对称加密算法）</td>\n<td>明文长度需小于n，密文长度等于n</td>\n<td>公钥(e,n)，私钥(d,n)； e与ϕ(n)互素，d为e模ϕ(n)的乘法逆元</td>\n<td>基于大数分解的困难性；可用于加密和数字签名</td>\n</tr>\n<tr>\n<td>ECC</td>\n<td>不适用（非对称加密算法）</td>\n<td>与所选椭圆曲线参数相关</td>\n<td>基于椭圆曲线离散对数难题</td>\n<td>相比RSA，在相同安全强度下密钥长度更短，计算效率更高</td>\n</tr>\n</tbody></table>\n<h4 id=\"xgcd\"><a href=\"#xgcd\" class=\"headerlink\" title=\"xgcd\"></a>xgcd</h4><div class=\"code-container\" data-rel=\"C\"><figure class=\"iseeu highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 扩展欧几里得算法实现</span></span><br><span class=\"line\"><span class=\"comment\"> * 计算gcd(x,y)以及x mod y的乘法逆元</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @param x 第一个整数</span></span><br><span class=\"line\"><span class=\"comment\"> * @param y 第二个整数</span></span><br><span class=\"line\"><span class=\"comment\"> * @param pinverse 用于存储x mod y的乘法逆元的指针</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 返回gcd(x,y)</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 示例:</span></span><br><span class=\"line\"><span class=\"comment\"> * xgcd(3, 20, &amp;inv)返回1，inv被赋值为7，因为3 * 7 ≡ 1 mod 20</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">xgcd</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y, <span class=\"type\">int</span> *pinverse)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">   <span class=\"comment\">// 初始化扩展欧几里得算法所需的变量</span></span><br><span class=\"line\">   <span class=\"comment\">// a1, b1用于跟踪第一个方程: x = a1*x + b1*y</span></span><br><span class=\"line\">   <span class=\"comment\">// a2, b2用于跟踪第二个方程: y = a2*x + b2*y</span></span><br><span class=\"line\">   <span class=\"type\">int</span> a1=<span class=\"number\">1</span>, b1=<span class=\"number\">0</span>, a2=<span class=\"number\">0</span>, b2=<span class=\"number\">1</span>;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// q是商，r是余数</span></span><br><span class=\"line\">   <span class=\"type\">int</span> q, r, t;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// n和old_n用于跟踪当前的被除数和除数</span></span><br><span class=\"line\">   <span class=\"type\">int</span> old_n;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// 确保x &lt;= y，如果不是则交换它们</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span>(x &gt; y)</span><br><span class=\"line\">   {</span><br><span class=\"line\">      t = x;</span><br><span class=\"line\">      x = y;</span><br><span class=\"line\">      y = t;</span><br><span class=\"line\">   }</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// 初始化n和r</span></span><br><span class=\"line\">   <span class=\"comment\">// n初始为较大的数y，r初始为较小的数x</span></span><br><span class=\"line\">   n = y;</span><br><span class=\"line\">   r = x;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// 当余数r不为0时继续循环</span></span><br><span class=\"line\">   <span class=\"keyword\">while</span>(r != <span class=\"number\">0</span>)</span><br><span class=\"line\">   {</span><br><span class=\"line\">      <span class=\"comment\">// 计算商q = n / r</span></span><br><span class=\"line\">      q = n / r;</span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"comment\">// 更新a1和a2的值</span></span><br><span class=\"line\">      <span class=\"comment\">// 这是扩展欧几里得算法的核心部分，同时计算系数</span></span><br><span class=\"line\">      t = a1;</span><br><span class=\"line\">      a1 = a2;</span><br><span class=\"line\">      a2 = t - q*a2;</span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"comment\">// 更新b1和b2的值</span></span><br><span class=\"line\">      t = b1;</span><br><span class=\"line\">      b1 = b2;</span><br><span class=\"line\">      b2 = t - q*b2;</span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"comment\">// 更新n和r的值，进行下一轮迭代</span></span><br><span class=\"line\">      t = n;</span><br><span class=\"line\">      n = r;</span><br><span class=\"line\">      r = t % r;</span><br><span class=\"line\">   }</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// 此时n就是gcd(x,y)</span></span><br><span class=\"line\">   <span class=\"comment\">// 但我们需要确保乘法逆元b1在模y下是正数</span></span><br><span class=\"line\">   <span class=\"comment\">// 因为b1可能是负数，所以加上y再取模y确保它在[0, y-1]范围内</span></span><br><span class=\"line\">   a1 = (a1+y) % y;  <span class=\"comment\">// 虽然a1是x的系数，但这里也确保它在模y下</span></span><br><span class=\"line\">   b1 = (b1+y) % y;  <span class=\"comment\">// 确保乘法逆元b1是正数</span></span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// 将乘法逆元存入指针指向的变量</span></span><br><span class=\"line\">   *pinverse = b1;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// 返回gcd(x,y)</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></div>\n","more":"<h1 id=\"前期知识\"><a href=\"#前期知识\" class=\"headerlink\" title=\"前期知识\"></a>前期知识</h1><h2 id=\"数学基础\"><a href=\"#数学基础\" class=\"headerlink\" title=\"数学基础\"></a>数学基础</h2><h4 id=\"gcd相关定理\"><a href=\"#gcd相关定理\" class=\"headerlink\" title=\"gcd相关定理\"></a>gcd相关定理</h4><p>设a,b为整数且至少有一个不为0, 令d = gcd(a,b), 则一定存在整数x, y 有:</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.464ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"14.798ex\" height=\"2.034ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 6540.9 899\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(751.2,0)\"><path data-c=\"22C5\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1251.4,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2045.7,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3045.9,0)\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3697.1,0)\"><path data-c=\"22C5\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4197.3,0)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4965.1,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(6020.9,0)\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g></g></g></svg></mjx-container></p>\n<blockquote>\n<p>特别的,当a,b互素时一定存在整数x，y使得 上述的右式为1成立</p>\n</blockquote>\n<h4 id=\"扩展欧几里得法\"><a href=\"#扩展欧几里得法\" class=\"headerlink\" title=\"扩展欧几里得法\"></a>扩展欧几里得法</h4><p>对于一个整数a来说，如果它存在模n的乘法逆元<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.023ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"3.429ex\" height=\"1.909ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -833.9 1515.7 843.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mi\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(562,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></g></g></svg></mjx-container> , 那么这一充分必要条件是， a与n是互素的</p>\n<img lazyload=\"\" src=\"/images/loading.svg\" data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605200308734.png?imageSlim\">\n\n<h4 id=\"素数相关的定理\"><a href=\"#素数相关的定理\" class=\"headerlink\" title=\"素数相关的定理\"></a>素数相关的定理</h4><p>任意大于0的整数 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.023ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.197ex\" height=\"1.02ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -441 529 451\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g></g></g></svg></mjx-container> 都能唯一分解成素数的乘积：</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"17.671ex\" height=\"1.758ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -583 7810.5 777\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(806.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(1862.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3024.3,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(3746.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(4852.8,0)\"><path data-c=\"22EF\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(6247,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(6969.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g></g></g></g></svg></mjx-container></p>\n<h2 id=\"古典密码\"><a href=\"#古典密码\" class=\"headerlink\" title=\"古典密码\"></a>古典密码</h2><ul>\n<li>频率分析表可以对付单表密码</li>\n<li>仿射密码<ul>\n<li>以加密为例：<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24.563ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 10856.9 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(767.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1823.6,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2212.6,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3006.8,0)\"><path data-c=\"22C5\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(3507,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(554,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(4686.8,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(5687,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(554,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(6644.6,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mspace\" transform=\"translate(7033.6,0)\"></g><g data-mml-node=\"mi\" transform=\"translate(7867.2,0)\"><path data-c=\"6D\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\"></path><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(833,0)\"></path><path data-c=\"64\" d=\"M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z\" transform=\"translate(1333,0)\"></path></g><g data-mml-node=\"mstyle\" transform=\"translate(9756.2,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"mstyle\" transform=\"translate(9923.2,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"mi\" transform=\"translate(10256.9,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Vigenere\"><a href=\"#Vigenere\" class=\"headerlink\" title=\"Vigenere\"></a>Vigenere</h4><p>Vigenere是一种多表简单加法密码.</p>\n<ul>\n<li>明文为 m1,m2…mp; 密钥为 k1,k2…kq</li>\n<li>当q小于p时, 重复使用密钥;</li>\n<li>加密: <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20.09ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 8879.9 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(466,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1037.7,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2093.5,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(2482.5,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(911,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3909.7,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(4909.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(554,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(5757.9,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(6146.9,0)\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(7024.9,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(7509.9,0)\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mtext\" transform=\"translate(8029.9,0)\"><path data-c=\"A0\" d=\"\"></path></g><g data-mml-node=\"mi\" transform=\"translate(8279.9,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container></li>\n<li>解密: <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20.09ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 8879.9 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(911,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1482.7,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2538.5,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(2927.5,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(466,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3909.7,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(4909.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(554,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(5757.9,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(6146.9,0)\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(7024.9,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(7509.9,0)\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mtext\" transform=\"translate(8029.9,0)\"><path data-c=\"A0\" d=\"\"></path></g><g data-mml-node=\"mi\" transform=\"translate(8279.9,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container></li>\n</ul>\n<h3 id=\"Enigma\"><a href=\"#Enigma\" class=\"headerlink\" title=\"Enigma\"></a>Enigma</h3><p>流程图：</p>\n<img lazyload=\"\" src=\"/images/loading.svg\" data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefinedimage-20250310151647723.png?imageSlim\">\n\n<h2 id=\"Hash函数\"><a href=\"#Hash函数\" class=\"headerlink\" title=\"Hash函数\"></a>Hash函数</h2><h3 id=\"MD5\"><a href=\"#MD5\" class=\"headerlink\" title=\"MD5\"></a>MD5</h3><p>使用～加密的过程也被称作生成摘要的过程，相当于有损压缩</p>\n<ul>\n<li>报文的长度固定为128位</li>\n</ul>\n<p>md5是一种单向函数，意味着可能有多个输入对应相同的输出</p>\n<ul>\n<li>如果不同的报文计算得到的摘要相同，就称为发生了碰撞 collision</li>\n</ul>\n<h4 id=\"分块与填充\"><a href=\"#分块与填充\" class=\"headerlink\" title=\"分块与填充\"></a>分块与填充</h4><ul>\n<li>如果最后一块的大小正好是64字节，还需要额外填充一块</li>\n<li>1字节的 <code>0x80</code>以及8字节的 <code>count 是一定要填充的</code></li>\n<li>按照最后一块的大小，分为小于56与介于56和63字节之间2种情况</li>\n</ul>\n<h4 id=\"源代码分析\"><a href=\"#源代码分析\" class=\"headerlink\" title=\"源代码分析\"></a>源代码分析</h4><p><strong>结构体</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">_MD5_CTX</span></span><br><span class=\"line\">{</span><br><span class=\"line\">   ulong32  state[<span class=\"number\">4</span>]; <span class=\"comment\">/* 128位摘要 */</span></span><br><span class=\"line\">   ulong32  count[<span class=\"number\">2</span>]; <span class=\"comment\">/* 已处理的报文的二进制位数,最大值=2^64-1 */</span></span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">char</span>  data[<span class=\"number\">64</span>]; <span class=\"comment\">/* 64字节message块 */</span></span><br><span class=\"line\">} MD5_CTX;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>此处的count计数的是比特位而不是字节！因此通过下面的方式计算字节数：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bytes_left = (MD5_ctx-&gt;count[<span class=\"number\">0</span>] &gt;&gt; <span class=\"number\">3</span>) &amp; <span class=\"number\">0x3F</span>;</span><br></pre></td></tr></table></figure>\n\n<p><code>&amp;0x3F 等价于 %64</code> 也就是 和 n-bit的1进行与计算，相当于 mod <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.279ex\" height=\"1.528ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -675.5 1007.3 675.5\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(533,363) scale(0.707)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></g></svg></mjx-container></p>\n</blockquote>\n<p><strong>Update</strong></p>\n<p>每次不断向其中添加新数据，添加前需要补充的字节数如果小于buf_len，说明可以补齐为1个block来处理，否则进入else分支直接赋值</p>\n<h4 id=\"Final\"><a href=\"#Final\" class=\"headerlink\" title=\"Final\"></a>Final</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Final_MD5</span><span class=\"params\">(MD5_CTX *MD5_ctx)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">   ulong32 bytes_left, pad_len;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">char</span> total_bits[<span class=\"number\">8</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// unsigned char * 进行强制类型转换, 使得8“位”实际上得到的是64bits, 也就是计数的全部内容.</span></span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"built_in\">memcpy</span>(total_bits, (<span class=\"type\">unsigned</span> <span class=\"type\">char</span> *)MD5_ctx-&gt;count, <span class=\"number\">8</span>); <span class=\"comment\">// total_bits=</span></span><br><span class=\"line\">                                                           <span class=\"comment\">// 已处理的报文的二进制位数</span></span><br><span class=\"line\">                                                           <span class=\"comment\">// (含data中剩余的字节)</span></span><br><span class=\"line\">                                                           <span class=\"comment\">// 后面补充的pad_stuff及</span></span><br><span class=\"line\">                                                           <span class=\"comment\">// total_bits本身不计在内</span></span><br><span class=\"line\">   bytes_left = (MD5_ctx-&gt;count[<span class=\"number\">0</span>] &gt;&gt; <span class=\"number\">3</span>) &amp; <span class=\"number\">0x3F</span>;</span><br><span class=\"line\">   pad_len = (bytes_left &lt; <span class=\"number\">56</span>) ? (<span class=\"number\">56</span> - bytes_left) : </span><br><span class=\"line\">               (<span class=\"number\">64</span> - bytes_left + <span class=\"number\">56</span>); <span class=\"comment\">// bytes_left==56时, 要补8+56=64字节</span></span><br><span class=\"line\">                                       <span class=\"comment\">// bytes_left==57时, 要补7+56=63字节</span></span><br><span class=\"line\">   Update_MD5(MD5_ctx, pad_stuff, pad_len); <span class=\"comment\">// 把pad_stuff加到data中计算</span></span><br><span class=\"line\">   Update_MD5(MD5_ctx, total_bits, <span class=\"number\">8</span>); <span class=\"comment\">// 把total_bits加到data中计算</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注意 <code>pad_len</code>在此处就是填充值的字节数，按照最后一个块的字节数的56划分</li>\n<li>count中，不包含填充值和本身，只是计数处理的字节数</li>\n</ul>\n<h4 id=\"彩虹表破解MD5\"><a href=\"#彩虹表破解MD5\" class=\"headerlink\" title=\"彩虹表破解MD5\"></a>彩虹表破解MD5</h4><p>以4个大写字母的彩虹表为例:</p>\n<ol>\n<li><p>生成随机数 n <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.09ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.509ex\" height=\"1.312ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -540 667 580\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"2208\" d=\"M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z\"></path></g></g></g></svg></mjx-container> [0, <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"7.147ex\" height=\"2.158ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -871.8 3159 953.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1033,393.1) scale(0.707)\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1658.8,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2659,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></svg></mjx-container>], 得到对应的字母 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.126ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 939.6 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g></g></g></g></svg></mjx-container></p>\n<blockquote>\n<p>比如 <code>AAAA</code> 对应 <code>0</code></p>\n</blockquote>\n</li>\n<li><p>计算 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"15.177ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 6708.3 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(911,-150) scale(0.707)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1592.3,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2648.1,0)\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3526.1,0)\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4046.1,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(4490.8,0)\"><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4990.8,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(5379.8,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(6319.3,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></p>\n<ol>\n<li>每次将得到的 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.986ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 878 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container>取模得到上述的 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.878ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 830 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g></g></g></svg></mjx-container>, 循环计算, 得到最后的一个 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.986ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 878 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container>;</li>\n<li>记录循环序列初始的 <code>n</code>与最后的 <code>m</code>.</li>\n</ol>\n</li>\n<li><p>循环上述操作 <code>k</code> 次, 得到 <code>k</code>对的值存入数据库, 然后用报文 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.378ex\" height=\"1.545ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -683 1051 683\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g></g></g></svg></mjx-container> 在数据库当中检索 <code>m</code>.</p>\n</li>\n<li><p>如果立即找到, 说明是这对键值对的 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"3.725ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 1646.7 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(536,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(1000,0)\"></path></g></g></g></g></g></svg></mjx-container>, 使用 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.357ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 600 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container>重新计算即可.</p>\n</li>\n<li><p>如果在数据库中找不到 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.378ex\" height=\"1.545ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -683 1051 683\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g></g></g></svg></mjx-container> 的值, 作以下的操作</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"28.714ex\" height=\"2.456ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -891.7 12691.6 1085.7\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g><g data-mml-node=\"mspace\" transform=\"translate(1051,0)\"></g><g data-mml-node=\"mi\" transform=\"translate(2217.7,0)\"><path data-c=\"6D\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\"></path><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(833,0)\"></path><path data-c=\"64\" d=\"M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z\" transform=\"translate(1333,0)\"></path></g><g data-mml-node=\"mstyle\" transform=\"translate(4106.7,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"mstyle\" transform=\"translate(4273.7,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"msup\" transform=\"translate(4607.3,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1033,413) scale(0.707)\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(6321.7,0)\"><path data-c=\"2192\" d=\"M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(7599.4,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(8477.2,0)\"><path data-c=\"2192\" d=\"M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(9755,0)\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(10535.8,0)\"><path data-c=\"2192\" d=\"M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(11813.6,0)\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container></p>\n<p>如果此时的 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.986ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 878 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container> 在数据库中存在, 那么说明此时的 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.378ex\" height=\"1.545ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -683 1051 683\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g></g></g></svg></mjx-container> 就是那一对 n与m计算序列中的 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.375ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"3.145ex\" height=\"1.375ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 1390.1 607.6\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(633,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"39\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\"></path><path data-c=\"39\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\" transform=\"translate(500,0)\"></path></g></g></g></g></g></svg></mjx-container>所对应的 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.926ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 1293.1 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(536,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"39\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\"></path><path data-c=\"39\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\" transform=\"translate(500,0)\"></path></g></g></g></g></g></svg></mjx-container> .</p>\n<blockquote>\n<p>如果继续找不到, 那么就循环上述的步骤.</p>\n</blockquote>\n</li>\n</ol>\n<p><strong>NOTICE：</strong></p>\n<ul>\n<li>生成一个随机数的<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.375ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.345ex\" height=\"1.375ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 1036.6 607.6\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g></g></g></g></svg></mjx-container>之后，计算其MD5值<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.375ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.974ex\" height=\"1.375ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 1314.6 607.6\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(911,-150) scale(0.707)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g></g></g></g></svg></mjx-container> , 然后将其赋值给<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.339ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.345ex\" height=\"1.339ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 1036.6 592\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></g></svg></mjx-container> （注意需要取模处理），迭代计算<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.339ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.974ex\" height=\"1.339ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 1314.6 592\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(911,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></g></svg></mjx-container>， 直至索引为100， 因此最后一个随机数计算得到的链上有101个MD5值</li>\n<li>数据库中只存储一开始的随机数（为了开始计算），以及链尾的MD5值（为了查询比较）</li>\n<li>如果初始的100个md5的值中存在对应的，就认为明文是对应的 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.375ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"3.945ex\" height=\"1.375ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 1743.7 607.6\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(633,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(1000,0)\"></path></g></g></g></g></g></svg></mjx-container>(然后转换为字母组合)；</li>\n<li>如果一开始查询不到，就按照下面的说法继续计算：</li>\n</ul>\n<img lazyload=\"\" src=\"/images/loading.svg\" data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609111021620.png?imageSlim\">\n\n<blockquote>\n<p>注意，是向前迭代，也就是说存储的都是0和100，比较的都是idx=100的md5值</p>\n</blockquote>\n<h3 id=\"SHA\"><a href=\"#SHA\" class=\"headerlink\" title=\"SHA\"></a>SHA</h3><ul>\n<li>sha-1得到的hash值是160位 = 20 字节<ul>\n<li>使用5个32位寄存器</li>\n</ul>\n</li>\n<li>～也是分块计算，每块64字节，不足64字节时按照与md5相同的方法填充</li>\n</ul>\n<h4 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">_SHA1_CTX</span> </span><br><span class=\"line\">{</span><br><span class=\"line\">   ulong state[<span class=\"number\">5</span>];    <span class=\"comment\">// 5个32位寄存器，对应A,B,C,D,E</span></span><br><span class=\"line\">   <span class=\"keyword\">struct</span> {ulong hi, lo;} length;  <span class=\"comment\">// 64位消息长度计数器</span></span><br><span class=\"line\">   uchar data[<span class=\"number\">64</span>];    <span class=\"comment\">// 512位的消息块</span></span><br><span class=\"line\">} SHA1_CTX;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ROL\"><a href=\"#ROL\" class=\"headerlink\" title=\"ROL\"></a>ROL</h4><blockquote>\n<p>循环左移</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> ulong <span class=\"title\">ROL</span><span class=\"params\">(ulong x, <span class=\"type\">int</span> number)</span> <span class=\"comment\">/* left circular shift number bits */</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">   <span class=\"keyword\">return</span> (x &lt;&lt; number) | (x &gt;&gt; (<span class=\"number\">32</span> - number));</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在低位进行或运算，补充之前移出的位</p>\n</blockquote>\n<ul>\n<li><code>BigEndian</code> 将buf中的long转换成大端的存储格式</li>\n<li>final中：<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">BigEndian</span>(digest, <span class=\"number\">20</span>); </span><br><span class=\"line\"><span class=\"comment\">/*[%] 注意SHA1的hash值共5个state, 每个state为ulong类型, </span></span><br><span class=\"line\"><span class=\"comment\">      输出的时候,不可以把5个state当作连续的20个字节并以</span></span><br><span class=\"line\"><span class=\"comment\">      字节为单位按从左到右顺序输出, 而应该以ulong为单位</span></span><br><span class=\"line\"><span class=\"comment\">      分5次输出. 这是因为在Little-Endian的机器中, ulong</span></span><br><span class=\"line\"><span class=\"comment\">      是按低字节在前高字节在后的顺序存放在内存中的 , 若</span></span><br><span class=\"line\"><span class=\"comment\">      以字节为单位输出ulong , 则从左到右输出的4个字节与</span></span><br><span class=\"line\"><span class=\"comment\">      直接输出ulong所得的4字节顺序刚好是反的.</span></span><br><span class=\"line\"><span class=\"comment\">      这里为了达到以字节为单位按从左到右顺序输出的目的,</span></span><br><span class=\"line\"><span class=\"comment\">      特地调用BigEndian()这个函数对每个ulong所包含的4个</span></span><br><span class=\"line\"><span class=\"comment\">      字节颠倒顺序, 这样一来,  digest中包含的20字节摘要</span></span><br><span class=\"line\"><span class=\"comment\">      就可以按从左到右顺序输出了.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"分组密码工作与流密码\"><a href=\"#分组密码工作与流密码\" class=\"headerlink\" title=\"分组密码工作与流密码\"></a>分组密码工作与流密码</h2><h3 id=\"分组密码\"><a href=\"#分组密码\" class=\"headerlink\" title=\"分组密码\"></a>分组密码</h3><h4 id=\"ECB\"><a href=\"#ECB\" class=\"headerlink\" title=\"ECB\"></a>ECB</h4><blockquote>\n<p>电子密码簿</p>\n</blockquote>\n<p>将明文分块, 分别用一个 <code>key</code>进行加密.</p>\n<ul>\n<li><strong>优点</strong>:  加密和解密都可以并行进行.</li>\n<li><strong>缺点</strong>: 块内依旧存在可能相同的密文块.</li>\n</ul>\n<img lazyload=\"\" src=\"/images/loading.svg\" data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609114145255.png?imageSlim\">\n\n<h4 id=\"CBC\"><a href=\"#CBC\" class=\"headerlink\" title=\"CBC\"></a>CBC</h4><blockquote>\n<p><strong>Cipher Block Chaining</strong> 密文块链接模式</p>\n</blockquote>\n<p>当前块的密文与前一块的密文有关:</p>\n<img lazyload=\"\" src=\"/images/loading.svg\" data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609114730540.png?imageSlim\">\n\n<p>加密过程<strong>只能串行处理</strong>：</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.666ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"18.554ex\" height=\"2.363ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 8201.1 1044.2\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(748,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1367.1,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(2422.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D438\" d=\"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(771,-150) scale(0.707)\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3612.3,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(4001.3,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(466,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(412,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1190,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(5934.5,0)\"><path data-c=\"2295\" d=\"M56 250Q56 394 156 488T384 583Q530 583 626 485T722 250Q722 110 625 14T390 -83Q249 -83 153 14T56 250ZM364 542Q308 539 251 509T148 418T96 278V270H369V542H364ZM681 278Q675 338 650 386T592 462T522 509T458 535T412 542H409V270H681V278ZM96 222Q104 150 139 95T219 12T302 -29T366 -42H369V230H96V222ZM681 222V230H409V-42H412Q429 -42 456 -36T521 -10T590 37T649 113T681 222Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(6934.7,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(7812.1,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></p>\n<p>解密过程可以并行处理：</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.666ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"18.435ex\" height=\"2.363ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 8148.1 1044.2\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(675,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1294.1,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(2349.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(861,-150) scale(0.707)\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3629.3,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(4018.3,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(466,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(4825.6,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(5436.8,0)\"><path data-c=\"2295\" d=\"M56 250Q56 394 156 488T384 583Q530 583 626 485T722 250Q722 110 625 14T390 -83Q249 -83 153 14T56 250ZM364 542Q308 539 251 509T148 418T96 278V270H369V542H364ZM681 278Q675 338 650 386T592 462T522 509T458 535T412 542H409V270H681V278ZM96 222Q104 150 139 95T219 12T302 -29T366 -42H369V230H96V222ZM681 222V230H409V-42H412Q429 -42 456 -36T521 -10T590 37T649 113T681 222Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(6437.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(466,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(412,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1190,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></g></g></svg></mjx-container></p>\n<h4 id=\"CFB\"><a href=\"#CFB\" class=\"headerlink\" title=\"CFB\"></a>CFB</h4><blockquote>\n<p><strong>Cipher feedback</strong> 密文反馈模式</p>\n</blockquote>\n<img lazyload=\"\" src=\"/images/loading.svg\" data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609131909707.png?imageSlim\">\n\n<p><strong>加密流程：</strong></p>\n<ul>\n<li>每次加密一个字节<ul>\n<li>取X的高8位用E加密，然后与明文8位异或</li>\n</ul>\n</li>\n<li>然后每字节加密结束之后, 将 x 左移一个字节, 然后用 <code>c[0]</code>填充右侧;</li>\n<li>循环上述, 注意每次都是用 <code>x[0]</code> 进行异或操作.</li>\n</ul>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.666ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"41.148ex\" height=\"2.363ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 18187.6 1044.2\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(748,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1367.1,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(2422.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(675,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3661.4,0)\"><path data-c=\"2295\" d=\"M56 250Q56 394 156 488T384 583Q530 583 626 485T722 250Q722 110 625 14T390 -83Q249 -83 153 14T56 250ZM364 542Q308 539 251 509T148 418T96 278V270H369V542H364ZM681 278Q675 338 650 386T592 462T522 509T458 535T412 542H409V270H681V278ZM96 222Q104 150 139 95T219 12T302 -29T366 -42H369V230H96V222ZM681 222V230H409V-42H412Q429 -42 456 -36T521 -10T590 37T649 113T681 222Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(4661.7,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D43F\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(714,-150) scale(0.707)\"><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(5779.2,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(6168.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D438\" d=\"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(771,-150) scale(0.707)\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(7357.6,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(7746.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(861,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(8948.9,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(9337.9,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mtext\" transform=\"translate(9726.9,0)\"><path data-c=\"A0\" d=\"\"></path></g><g data-mml-node=\"msub\" transform=\"translate(9976.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(861,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(11457,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(12512.8,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D445\" d=\"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(792,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"></path><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" transform=\"translate(500,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(14061.9,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(14450.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(861,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(15653.3,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mtext\" transform=\"translate(16042.3,0)\"><path data-c=\"A0\" d=\"\"></path></g><g data-mml-node=\"mo\" transform=\"translate(16292.3,0) translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(16570.3,0) translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g><g data-mml-node=\"mtext\" transform=\"translate(16848.3,0)\"><path data-c=\"A0\" d=\"\"></path></g><g data-mml-node=\"msub\" transform=\"translate(17098.3,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(748,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path></g></g></g></g></svg></mjx-container></p>\n<p><strong>解密流程：</strong></p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.666ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"41.976ex\" height=\"2.363ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 18553.3 1044.2\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(675,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1294.1,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(2349.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(466,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3379.4,0)\"><path data-c=\"2295\" d=\"M56 250Q56 394 156 488T384 583Q530 583 626 485T722 250Q722 110 625 14T390 -83Q249 -83 153 14T56 250ZM364 542Q308 539 251 509T148 418T96 278V270H369V542H364ZM681 278Q675 338 650 386T592 462T522 509T458 535T412 542H409V270H681V278ZM96 222Q104 150 139 95T219 12T302 -29T366 -42H369V230H96V222ZM681 222V230H409V-42H412Q429 -42 456 -36T521 -10T590 37T649 113T681 222Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(4379.7,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D43F\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(714,-150) scale(0.707)\"><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(5497.2,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(5886.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D438\" d=\"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(771,-150) scale(0.707)\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(7075.6,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(7464.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(861,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(8666.9,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(9055.9,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mtext\" transform=\"translate(9444.9,0)\"><path data-c=\"A0\" d=\"\"></path></g><g data-mml-node=\"msub\" transform=\"translate(9694.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(605,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(412,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1190,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(11822.7,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(12878.5,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D445\" d=\"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(792,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"></path><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" transform=\"translate(500,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(14427.6,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(14816.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(861,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(16018.9,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mtext\" transform=\"translate(16407.9,0)\"><path data-c=\"A0\" d=\"\"></path></g><g data-mml-node=\"mo\" transform=\"translate(16657.9,0) translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(16935.9,0) translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g><g data-mml-node=\"mtext\" transform=\"translate(17213.9,0)\"><path data-c=\"A0\" d=\"\"></path></g><g data-mml-node=\"msub\" transform=\"translate(17463.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(748,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path></g></g></g></g></svg></mjx-container></p>\n<p><strong>优点：</strong></p>\n<ul>\n<li>可以从密文传输的错误中恢复</li>\n</ul>\n<img lazyload=\"\" src=\"/images/loading.svg\" data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609131813736.png?imageSlim\">\n\n<h3 id=\"RC4\"><a href=\"#RC4\" class=\"headerlink\" title=\"RC4\"></a>RC4</h3><p>是一种对称加密算算法，使用相同的密钥来加密和解密</p>\n<h4 id=\"结构体-1\"><a href=\"#结构体-1\" class=\"headerlink\" title=\"结构体\"></a>结构体</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">rc4_key</span></span><br><span class=\"line\">{</span><br><span class=\"line\">     <span class=\"type\">unsigned</span> <span class=\"type\">char</span> state[<span class=\"number\">256</span>];  <span class=\"comment\">// 256字节的状态表</span></span><br><span class=\"line\">     <span class=\"type\">unsigned</span> <span class=\"type\">char</span> x;          <span class=\"comment\">// 状态表索引x</span></span><br><span class=\"line\">     <span class=\"type\">unsigned</span> <span class=\"type\">char</span> y;          <span class=\"comment\">// 状态表索引y</span></span><br><span class=\"line\">} rc4_key;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"密钥初始化\"><a href=\"#密钥初始化\" class=\"headerlink\" title=\"密钥初始化\"></a>密钥初始化</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">prepare_key</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span> *key_data_ptr, <span class=\"type\">int</span> key_data_len, rc4_key *key)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">   <span class=\"comment\">// 初始化状态表</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span>(counter = <span class=\"number\">0</span>; counter &lt; <span class=\"number\">256</span>; counter++)</span><br><span class=\"line\">      state[counter] = counter;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// 使用密钥打乱状态表</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span>(counter = <span class=\"number\">0</span>; counter &lt; <span class=\"number\">256</span>; counter++)</span><br><span class=\"line\">   {</span><br><span class=\"line\">       index2 = (key_data_ptr[index1] + state[counter] + index2) % <span class=\"number\">256</span>;</span><br><span class=\"line\">       <span class=\"built_in\">swap_byte</span>(&amp;state[counter], &amp;state[index2]);</span><br><span class=\"line\">       index1 = (index1 + <span class=\"number\">1</span>) % key_data_len;</span><br><span class=\"line\">   }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>key_data_ptr</code> 为种子密钥；使用循环打乱state</p>\n</blockquote>\n<h4 id=\"加密-解密函数\"><a href=\"#加密-解密函数\" class=\"headerlink\" title=\"加密/解密函数\"></a>加密/解密函数</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">rc4</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span> *buffer_ptr, <span class=\"type\">int</span> buffer_len, rc4_key *key)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">   <span class=\"keyword\">for</span>(counter = <span class=\"number\">0</span>; counter &lt; buffer_len; counter ++)</span><br><span class=\"line\">   {</span><br><span class=\"line\">      x = (x + <span class=\"number\">1</span>) % <span class=\"number\">256</span>;</span><br><span class=\"line\">      y = (state[x] + y) % <span class=\"number\">256</span>;</span><br><span class=\"line\">      <span class=\"built_in\">swap_byte</span>(&amp;state[x], &amp;state[y]);</span><br><span class=\"line\">      xorIndex = (state[x] + state[y]) % <span class=\"number\">256</span>;</span><br><span class=\"line\">      buffer_ptr[counter] ^= state[xorIndex];</span><br><span class=\"line\">   }</span><br><span class=\"line\">   key-&gt;x = x; <span class=\"comment\">/* 保存x及y这两个state的下标, 使得下次rc4()调用与本次调用可以衔接 */</span></span><br><span class=\"line\">   key-&gt;y = y;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">main</span>()</span><br><span class=\"line\">{</span><br><span class=\"line\">   rc4_key k;</span><br><span class=\"line\">   <span class=\"type\">char</span> seed_key[] = <span class=\"string\">\"This is RC4 seed key.\"</span>;</span><br><span class=\"line\">   <span class=\"type\">char</span> plaintext[<span class=\"number\">100</span>] = <span class=\"string\">\"A quick brown fox jumps over the lazy dog.\"</span>;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// 初始化密钥</span></span><br><span class=\"line\">   <span class=\"built_in\">prepare_key</span>(seed_key, <span class=\"built_in\">strlen</span>(seed_key), &amp;k);</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// 加密</span></span><br><span class=\"line\">   <span class=\"built_in\">rc4</span>(buf, n, &amp;k);</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// 解密（重新初始化密钥后再次加密）</span></span><br><span class=\"line\">   <span class=\"built_in\">prepare_key</span>(seed_key, <span class=\"built_in\">strlen</span>(seed_key), &amp;k);</span><br><span class=\"line\">   <span class=\"built_in\">rc4</span>(buf, n, &amp;k);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"重要算法\"><a href=\"#重要算法\" class=\"headerlink\" title=\"重要算法\"></a>重要算法</h1><h2 id=\"DES\"><a href=\"#DES\" class=\"headerlink\" title=\"DES\"></a>DES</h2><h3 id=\"基本介绍\"><a href=\"#基本介绍\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h3><p>全称: <strong>Data Encryption Standard</strong></p>\n<p>流程示意图：</p>\n<img lazyload=\"\" src=\"/images/loading.svg\" data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefineddes.bmp?imageSlim\">\n\n<blockquote>\n<ol>\n<li>明文的L/R中交替加密，每轮没有改变的部分与K参与计算，将结果用于改变另一部分</li>\n<li>64位的key去除8位（经过打乱）后变为56位的Key，然后将左右两侧分别循环左移，16次循环迭代中分别得到一组，然后利用56-48的表得到48位的值</li>\n<li>查询sbox得到32位的结果，与L异或</li>\n</ol>\n</blockquote>\n<h3 id=\"步骤解析\"><a href=\"#步骤解析\" class=\"headerlink\" title=\"步骤解析\"></a>步骤解析</h3><h4 id=\"加密\"><a href=\"#加密\" class=\"headerlink\" title=\"加密\"></a>加密</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">L[i] = L[i<span class=\"number\">-1</span>] ^ f(K[i], R[i<span class=\"number\">-1</span>]);</span><br><span class=\"line\">R[i] = R[i<span class=\"number\">-1</span>]</span><br></pre></td></tr></table></figure>\n\n<p>其中的 <code>f</code>为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">long</span> <span class=\"title function_\">f</span><span class=\"params\">(K[i], D[i])</span>{</span><br><span class=\"line\">  K48 = shrink ( K[i]);</span><br><span class=\"line\">  D48 = expand( D[i]);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> query_sbox(K48 ^ D48);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>shrink</code>表示从最低位开始, 交替取用1/2次 比如 0,0,1,2,2,3…</li>\n<li>为了将48位的数据展开成为数组, 我们将48位分为8组, 各组为 <strong>6</strong>bits 并且用 unsigned char来表示 —— <code>unsigned char s[8]</code>.<ul>\n<li><code>s[i]</code>仅仅使用低六位.</li>\n<li><code>sbox</code>恰好对应了8张表, 供 <code>s</code>进行查询, 且每次查询输入6位的输出是4位.</li>\n<li>因此, 8次查询的返回值一共是32位.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"sbox的查询\"><a href=\"#sbox的查询\" class=\"headerlink\" title=\"sbox的查询\"></a>sbox的查询</h4><p>由8个一维数组组成，分别对应48位分成的8组查询, 其中每个数组都是64位, 每行是0-15构成的不重复的16个数字, 共四行.</p>\n<img lazyload=\"\" src=\"/images/loading.svg\" data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefinedimage-20250331200402762.png?imageSlim\">\n\n<p>对于每组中的8位，实际的数据存储在低6位中，我们：</p>\n<ul>\n<li>提取首尾的2-bit合成查询的<strong>行号</strong>；</li>\n<li>提取中间的4-bit合成查询的<strong>列号</strong></li>\n</ul>\n<h4 id=\"disturb\"><a href=\"#disturb\" class=\"headerlink\" title=\"disturb\"></a>disturb</h4><p>将输入的64位进行<strong>位重排</strong> <code>permutation</code></p>\n<p><code>table</code>中64字节是1～64的排序（因此内部的数值以1为基数）：</p>\n<blockquote>\n<p>ip[0]=58  表示源数据中的第<strong>58</strong>位 <strong>(</strong> 实际是第58-1=57位)要转化成目标数据中的第0+1=1 位</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">disturb</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span> table[<span class=\"number\">64</span>], <span class=\"type\">unsigned</span> <span class=\"type\">char</span> s[<span class=\"number\">8</span>], <span class=\"type\">unsigned</span> <span class=\"type\">char</span> t[<span class=\"number\">8</span>])</span></span><br><span class=\"line\">{</span><br><span class=\"line\">   <span class=\"type\">int</span> i;</span><br><span class=\"line\">   byte_num, bit_num;</span><br><span class=\"line\">   <span class=\"comment\">/* memset(t, 0, sizeof(t)); 错误 */</span></span><br><span class=\"line\">   <span class=\"built_in\">memset</span>(t, <span class=\"number\">0</span>, <span class=\"number\">8</span>); <span class=\"comment\">/* 正确 */</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">64</span>; i++)</span><br><span class=\"line\">   {</span><br><span class=\"line\">      byte_num = (table[i]<span class=\"number\">-1</span>) / <span class=\"number\">8</span>;</span><br><span class=\"line\">      bit_num = (table[i]<span class=\"number\">-1</span>) % <span class=\"number\">8</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果对应的位是0，就直接进行下一轮的迭代，因为初始化t的各位都是0</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(s[byte_num] &amp; (<span class=\"number\">0x80</span> &gt;&gt; bit_num)) <span class=\"comment\">/* 或 if(s[byte_num] &amp; (0x01 &lt;&lt; 7-bit_num)) */</span></span><br><span class=\"line\">         t[i/<span class=\"number\">8</span>] |= <span class=\"number\">0x80</span> &gt;&gt; i%<span class=\"number\">8</span>;</span><br><span class=\"line\">   }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>每次循环取出table中的一个字节，并且通过 /8 与 %8的计算分别得到 <code>byte_num</code>, <code>bit_num</code>；</li>\n<li>一共需要迭代64次，因为一共有8x8位需要替换</li>\n</ul>\n<p><strong>什么时候打乱？</strong></p>\n<ul>\n<li>明文在加密之前——<code>ip</code></li>\n<li>明文加密之后——<code>fp</code></li>\n<li>sbox查询结果的32位数据）<code>sbox_perm_table</code><ul>\n<li>打乱之后再与“明文”异或</li>\n</ul>\n</li>\n<li>64位的密钥转换位56位 TODO——<code>key_perm_table</code></li>\n<li>56位的密钥循环左移之后取用48位 TODO</li>\n</ul>\n<h3 id=\"密钥的合成\"><a href=\"#密钥的合成\" class=\"headerlink\" title=\"密钥的合成\"></a>密钥的合成</h3><h4 id=\"56-2-48\"><a href=\"#56-2-48\" class=\"headerlink\" title=\"56 2 48\"></a>56 2 48</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">for</span> (j=<span class=\"number\">0</span>; j&lt;<span class=\"number\">48</span>; j++) <span class=\"comment\">/* select bits individually */</span></span><br><span class=\"line\">   {                    <span class=\"comment\">/* [%] Select 48 bits from 56 bits.</span></span><br><span class=\"line\"><span class=\"comment\">                               j is the target bit number, and </span></span><br><span class=\"line\"><span class=\"comment\">                               key_56bit_to_48bit_table[j]-1 is </span></span><br><span class=\"line\"><span class=\"comment\">                               the source bit number */</span></span><br><span class=\"line\">      <span class=\"comment\">/* check bit that goes to kn[j] */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (pcr[key_56bit_to_48bit_table[j]<span class=\"number\">-1</span>]) <span class=\"comment\">/* [%] pcr[key_56bit_to_48bit_table[j]-1] is SourceBit, j is TargetBit */</span></span><br><span class=\"line\">      {</span><br><span class=\"line\">         <span class=\"comment\">/* mask it in if it's there */</span></span><br><span class=\"line\">         b = j % <span class=\"number\">6</span>;                     <span class=\"comment\">/*  same as bytebit[b+2] */</span></span><br><span class=\"line\">         kn[i][j/<span class=\"number\">6</span>] |= bytebit[b] &gt;&gt; <span class=\"number\">2</span>; <span class=\"comment\">/* [%] remove the trailing 2 bits</span></span><br><span class=\"line\"><span class=\"comment\">                                           j=0    1    2    3    4    5</span></span><br><span class=\"line\"><span class=\"comment\">                                  bytebit[b]=0x80 0x40 0x20 0x10 0x08 0x04</span></span><br><span class=\"line\"><span class=\"comment\">                               bytebit[b]&gt;&gt;2=0x20 0x10 0x08 0x04 0x02 0x01</span></span><br><span class=\"line\"><span class=\"comment\">                                         */</span></span><br><span class=\"line\">      }</span><br><span class=\"line\">   } <span class=\"comment\">/* [%] for (j=0; j&lt;48; j++) */</span></span><br><span class=\"line\">} <span class=\"comment\">/* [%] for (i=0; i&lt;16; i++) */</span></span><br></pre></td></tr></table></figure>\n\n<p>此处的 <code>bytebit</code>为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> bytebit[<span class=\"number\">8</span>] = </span><br><span class=\"line\">{</span><br><span class=\"line\"><span class=\"comment\">/* bit0  bit1  bit2  bit3  bit4  bit5  bit6  bit7 */</span></span><br><span class=\"line\">   <span class=\"number\">0x80</span>, <span class=\"number\">0x40</span>, <span class=\"number\">0x20</span>, <span class=\"number\">0x10</span>, <span class=\"number\">0x08</span>, <span class=\"number\">0x04</span>, <span class=\"number\">0x02</span>, <span class=\"number\">0x01</span></span><br><span class=\"line\">};</span><br></pre></td></tr></table></figure>\n\n<p>也就是8bit中从最左侧为1开始，不断右移知道最右侧为1</p>\n<p>上述的 <code>bytebit[b</code>] &gt;&gt; 2 确保了1只可能只出现右侧的6位，因此实现了<strong>靠右对齐</strong></p>\n<p>6个为一组，构成8x6，i表示16轮迭代中的层数</p>\n<h3 id=\"操作汇总\"><a href=\"#操作汇总\" class=\"headerlink\" title=\"操作汇总\"></a>操作汇总</h3><h4 id=\"利用一维idx在二维数组中索引\"><a href=\"#利用一维idx在二维数组中索引\" class=\"headerlink\" title=\"利用一维idx在二维数组中索引\"></a>利用一维idx在二维数组中索引</h4><ul>\n<li><strong>要求</strong>：给定1-64范围内的idx，在8x8 i.e. 8个字节中索引对应的1bit：</li>\n<li>分析：<ul>\n<li>8x8分别用3bit去索引</li>\n</ul>\n</li>\n</ul>\n<p>disturb中的实现</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">64</span>; i++)</span><br><span class=\"line\">{</span><br><span class=\"line\">    byte_num = (table[i]<span class=\"number\">-1</span>) / <span class=\"number\">8</span>;</span><br><span class=\"line\">    bit_num = (table[i]<span class=\"number\">-1</span>) % <span class=\"number\">8</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果对应的位是0，就直接进行下一轮的迭代，因为初始化t的各位都是0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s[byte_num] &amp; (<span class=\"number\">0x80</span> &gt;&gt; bit_num)) <span class=\"comment\">/* 或 if(s[byte_num] &amp; (0x01 &lt;&lt; 7-bit_num)) */</span></span><br><span class=\"line\">        t[i/<span class=\"number\">8</span>] |= <span class=\"number\">0x80</span> &gt;&gt; i%<span class=\"number\">8</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>/ 8 等价于 <code>&gt;&gt; 3</code> ； 同时 % 8等价于 <code>&amp;7</code></p>\n<p>注意利用结果对二维的数组进行赋值（此处就是替换）：<code>t[i/8] |= 0x80 &gt;&gt; i % 8</code></p>\n</blockquote>\n<p>下面的实现也是合理的：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (j=<span class=\"number\">0</span>; j&lt;<span class=\"number\">56</span>; j++) <span class=\"comment\">/* convert key_perm_table to bits of key */</span></span><br><span class=\"line\">{                    <span class=\"comment\">/* [%] j is the target bit number of key */</span></span><br><span class=\"line\">   b = key_perm_table[j] - <span class=\"number\">1</span>;   <span class=\"comment\">/* integer bit location */</span></span><br><span class=\"line\">                                <span class=\"comment\">/* [%] b is the source bit number of key, base 0 */</span></span><br><span class=\"line\">   m = b &amp; <span class=\"number\">7</span>;        <span class=\"comment\">/* [%] m = b % 8; */</span> <span class=\"comment\">/* find bit */</span> </span><br><span class=\"line\"></span><br><span class=\"line\">   pc1m[j]=(key[b&gt;&gt;<span class=\"number\">3</span>] &amp; bytebit[m]) ? <span class=\"number\">1</span> : <span class=\"number\">0</span>; <span class=\"comment\">/* find which key byte b is in */</span></span><br><span class=\"line\">                                             <span class=\"comment\">/* and which bit of that byte */</span></span><br><span class=\"line\">                                             <span class=\"comment\">/* and store 1-bit result */</span></span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>不同于第一个实现，此处的pclm就是一个一维的数组，因此可以直接赋值。</p>\n</blockquote>\n<h4 id=\"构建反查表\"><a href=\"#构建反查表\" class=\"headerlink\" title=\"构建反查表\"></a>构建反查表</h4><p>已知sbox打乱表，需要根据表格内容构建反查表</p>\n<ul>\n<li>先遍历取值范围</li>\n<li>然后遍历已知表的idx，直到idx在已知表中索引得到的值与外层的遍历值相同</li>\n<li>将外层的idx作为索引，用内层表的idx赋值给反查表</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(p=<span class=\"number\">0</span>; p&lt;<span class=\"number\">32</span>; p++) <span class=\"comment\">/* [%] p=SourceBit */</span></span><br><span class=\"line\">{</span><br><span class=\"line\">   <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">32</span>; i++) <span class=\"comment\">/* [%] i=TargetBit */</span></span><br><span class=\"line\">   {</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(sbox_perm_table[i]<span class=\"number\">-1</span> == p) <span class=\"comment\">/* [%] sbox_perm_table[i] ranges within [1,32], so it is base 1, not base 0 */</span></span><br><span class=\"line\">      {</span><br><span class=\"line\">         sbox_perm_table_inverse[p] = i; <span class=\"comment\">/* [%] fill sbox_perm_table_inverse[p] with TargetBit=i */</span></span><br><span class=\"line\">         <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      }</span><br><span class=\"line\">   }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"循环右移与补偿\"><a href=\"#循环右移与补偿\" class=\"headerlink\" title=\"循环右移与补偿\"></a>循环右移与补偿</h4><p>方法1：循环左移与右移：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 循环左移n位</span></span><br><span class=\"line\">ulong <span class=\"title function_\">ROL</span><span class=\"params\">(ulong x, <span class=\"type\">int</span> n)</span>{</span><br><span class=\"line\">  n = n % <span class=\"number\">32</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (x &lt;&lt; n) | (x &gt;&gt; ( <span class=\"number\">32</span> - n));</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 循环右移</span></span><br><span class=\"line\">ulong <span class=\"title function_\">ROR</span><span class=\"params\">(ulong x, <span class=\"type\">int</span> n)</span>{</span><br><span class=\"line\">  n = n % <span class=\"number\">32</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (x &gt;&gt; n) | (x &lt;&lt; (<span class=\"number\">32</span> - n));</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n<p>方法2：循环右移一位的写法</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 循环右移，将r的最低位移到最高位，其他位向右移动一位</span></span><br><span class=\"line\"><span class=\"comment\">//  r &amp; 1用于判断移位前的最低位是否为1，如果是，需要在循环右移的结果补偿</span></span><br><span class=\"line\">rt = (r &gt;&gt; <span class=\"number\">1</span>) | ((r &amp; <span class=\"number\">1</span>) ? <span class=\"number\">0x80000000</span> : <span class=\"number\">0</span>); <span class=\"comment\">/* [%] rt = ROR(rt, 1); */</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"循环左移\"><a href=\"#循环左移\" class=\"headerlink\" title=\"循环左移\"></a>循环左移</h4><ul>\n<li>分别将左右两侧分为28bit进行循环左移；</li>\n<li>用 <code>b</code>表示移位的位数，将pclm中的位赋值给pcr数组</li>\n<li>注意在高28位中是 <code>(j - 28 + xx) % 28 </code> 确保基数为1</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>; j&lt;<span class=\"number\">28</span>; j++) <span class=\"comment\">/* [%] left half */</span></span><br><span class=\"line\">{</span><br><span class=\"line\">   b = (j+key_rol_steps[i]) % <span class=\"number\">28</span>;</span><br><span class=\"line\">   pcr[j] = pc1m[b];</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">for</span>(j=<span class=\"number\">28</span>; j&lt;<span class=\"number\">56</span>; j++) <span class=\"comment\">/* [%] right half */</span></span><br><span class=\"line\">{</span><br><span class=\"line\">   b = <span class=\"number\">28</span> + (j<span class=\"number\">-28</span>+key_rol_steps[i]) % <span class=\"number\">28</span>;</span><br><span class=\"line\">   pcr[j] = pc1m[b];</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"转换为16进制\"><a href=\"#转换为16进制\" class=\"headerlink\" title=\"转换为16进制\"></a>转换为16进制</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;blocks*<span class=\"number\">8</span>; i++) <span class=\"comment\">// 转化成 16进制字符串</span></span><br><span class=\"line\">{</span><br><span class=\"line\"><span class=\"built_in\">sprintf</span>(hex+i*<span class=\"number\">2</span>, <span class=\"string\">\"%02X\"</span>, bufout[i]); <span class=\"comment\">// 2表示最少2位，0表示不足填充0，X表示用大写的16进制输出</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"三重DES\"><a href=\"#三重DES\" class=\"headerlink\" title=\"三重DES\"></a>三重DES</h4><p>由于存在一种称为<strong>中途相遇攻击</strong>（meet-in-the-middle attack）的技术，对双重DES加密构成了威胁，因此一般不使用双重DES，而是三重DES来多重加密</p>\n<p>给定3个长度为56比特的密钥与明文 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.294ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 572 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g></g></g></svg></mjx-container>，密文为：</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.954ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"31.527ex\" height=\"2.954ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -883.9 13935 1305.7\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(767.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1823.6,0)\"><path data-c=\"1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2651.6,0)\"><path data-c=\"1D438\" d=\"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(3415.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(646,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(554,-150) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></g></g></g><g data-mml-node=\"mo\" transform=\"translate(4788.6,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(5177.6,0)\"><path data-c=\"1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(6005.6,0)\"><path data-c=\"1D438\" d=\"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z\"></path></g><g data-mml-node=\"msubsup\" transform=\"translate(6769.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(729.6,413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"TeXAtom\" transform=\"translate(646,-315.7) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(554,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g></g></g><g data-mml-node=\"mo\" transform=\"translate(8452.9,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(8841.9,0)\"><path data-c=\"1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(9669.9,0)\"><path data-c=\"1D438\" d=\"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(10433.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(646,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(554,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></g><g data-mml-node=\"mo\" transform=\"translate(11807,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(12196,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(12768,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(13157,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(13546,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></p>\n<p>中间的密钥采取解密的形式加密，仅仅是为了可以<strong>利用三重DES对单重DES加密的数据进行解密</strong></p>\n<h2 id=\"AES\"><a href=\"#AES\" class=\"headerlink\" title=\"AES\"></a>AES</h2><p><strong>整体流程</strong></p>\n<ul>\n<li>bytesub 字节代替变换</li>\n<li>shiftrows 行移位变换</li>\n<li>mixcolumns 列混淆变换</li>\n</ul>\n<h3 id=\"MixColumn\"><a href=\"#MixColumn\" class=\"headerlink\" title=\"MixColumn\"></a>MixColumn</h3><img lazyload=\"\" src=\"/images/loading.svg\" data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefinedimage-20250428165716701.png?imageSlim\">\n\n<ul>\n<li>每次加密明文的一列.</li>\n<li>3112为底,不断循环左移一位得到另一行.<ul>\n<li>计算的时候是左列和右列诸位乘加. 和传统的矩阵乘法有所不同.</li>\n</ul>\n</li>\n<li>乘数的低位在前, 高位在后.</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MixColumn</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span> *p, <span class=\"type\">unsigned</span> <span class=\"type\">char</span> a[<span class=\"number\">4</span>], <span class=\"type\">int</span> do_mul)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">char</span> b[<span class=\"number\">4</span>];</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">char</span> t[<span class=\"number\">4</span>][<span class=\"number\">4</span>];</span><br><span class=\"line\">   <span class=\"type\">int</span> j;</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">4</span>; j++)</span><br><span class=\"line\">   {</span><br><span class=\"line\">      <span class=\"built_in\">get_column</span>(p, j, b);            <span class=\"comment\">/* 从p所指矩阵m中提取第j列, 保存到数组b中. */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (do_mul)                     <span class=\"comment\">/* 在加密最后一轮以及解密第一轮的MixColumn步骤中不需要做乘法; */</span></span><br><span class=\"line\">         <span class=\"built_in\">aes_polynomial_mul</span>(a, b, b); <span class=\"comment\">/* 其余轮都要做乘法: b = a*b mod (X^4+1); */</span></span><br><span class=\"line\">      <span class=\"built_in\">memcpy</span>(t[j], b, <span class=\"number\">4</span>);             <span class=\"comment\">/* 把乘法所得结果复制到t中第j行 */</span></span><br><span class=\"line\">   }</span><br><span class=\"line\">   <span class=\"built_in\">memcpy</span>(p, t, <span class=\"number\">4</span> * <span class=\"number\">4</span>); <span class=\"comment\">/* 复制t中矩阵到p, 替换掉p中原有矩阵 */</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n<p>对应的乘法：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 有限域GF(2^8)多项式乘法 mod X^4 + 1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">aes_polynomial_mul</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span> x[<span class=\"number\">4</span>], <span class=\"type\">unsigned</span> <span class=\"type\">char</span> y[<span class=\"number\">4</span>], <span class=\"type\">unsigned</span> <span class=\"type\">char</span> z[<span class=\"number\">4</span>])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> temp[<span class=\"number\">8</span>] = {<span class=\"number\">0</span>};</span><br><span class=\"line\">    <span class=\"type\">int</span> i, j;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)</span><br><span class=\"line\">    {</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">4</span>; j++)</span><br><span class=\"line\">        {</span><br><span class=\"line\">            <span class=\"type\">unsigned</span> <span class=\"type\">char</span> product_coeff = <span class=\"built_in\">aes_8bit_mul_mod_0x11B</span>(x[<span class=\"number\">3</span> - i], y[j]);</span><br><span class=\"line\">            temp[i + j] ^= product_coeff;</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">    z[<span class=\"number\">0</span>] = temp[<span class=\"number\">0</span>] ^ temp[<span class=\"number\">4</span>];</span><br><span class=\"line\">    z[<span class=\"number\">1</span>] = temp[<span class=\"number\">1</span>] ^ temp[<span class=\"number\">5</span>];</span><br><span class=\"line\">    z[<span class=\"number\">2</span>] = temp[<span class=\"number\">2</span>] ^ temp[<span class=\"number\">6</span>];</span><br><span class=\"line\">    z[<span class=\"number\">3</span>] = temp[<span class=\"number\">3</span>] ^ temp[<span class=\"number\">7</span>];</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>由于原先矩阵中的低次系数均在前，我们希望计算0～3次之间相乘的结果，因此在两层的嵌套中，采取 <code>3-i</code> 与  <code>j</code> 并举的方式；</p>\n<p>i，j分别表示对应的阶数</p>\n</blockquote>\n<h3 id=\"密钥生成\"><a href=\"#密钥生成\" class=\"headerlink\" title=\"密钥生成\"></a>密钥生成</h3><p><strong>流程概述：</strong></p>\n<ol>\n<li><code>4i</code> 形式比较特殊，一组（4x4字节）的key都在前者的基础上得到</li>\n<li><code>4i的计算流程：</code><ol>\n<li><code>4i</code> 由 <code>4i-1</code> 临时赋值</li>\n<li>循环左移1位</li>\n<li>带入sbox替换查询</li>\n<li>利用4i计算轮常数r</li>\n<li>首字节与r异或</li>\n<li>4i 与 4(i-1) 作异或得到最终的4I</li>\n</ol>\n</li>\n<li>4i+1 =  4i ^ 4(i-1);</li>\n<li>4i+2 = 4i+1 ^ 4(i-1) + 1</li>\n<li>…</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pk[<span class=\"number\">0</span>] = pk[<span class=\"number\">-1</span>];</span><br><span class=\"line\">     <span class=\"built_in\">rol_a_row</span>(key + i * <span class=\"number\">4</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">     <span class=\"built_in\">ByteSub</span>(key + i * <span class=\"number\">4</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">     r = <span class=\"number\">1</span> &lt;&lt; ((i - step) / step);</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">// r较小的时候直接mod</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (r &lt;= <span class=\"number\">0x80</span>)</span><br><span class=\"line\">        r = <span class=\"built_in\">aes_8bit_mul_mod_0x11B</span>(r, <span class=\"number\">1</span>);</span><br><span class=\"line\">     <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"comment\">// r较大，为了避免处理大数，等价变换来优化</span></span><br><span class=\"line\">        r = <span class=\"built_in\">aes_8bit_mul_mod_0x11B</span>(r / <span class=\"number\">4</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">     key[i * <span class=\"number\">4</span>] ^= r;</span><br><span class=\"line\">     pk[<span class=\"number\">0</span>] ^= pk[-step];</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">for</span> (j = <span class=\"number\">1</span>; j &lt; step; j++) <span class=\"comment\">/* i+j是密钥k的下标, 当(i+j)%step != 0时, */</span></span><br><span class=\"line\">     {                          <span class=\"comment\">/* k[i+j]只需做简单的异或处理 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (...){}</span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"comment\">/* 当(i+j)%step != 0时, k[i+j]只需做以下异或处理 */</span></span><br><span class=\"line\">           pk[j] = pk[j - step] ^ pk[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">     }</span><br><span class=\"line\">     pk += step;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>最后两组的轮常数因为 <strong>mod 0x11B</strong>的缘故与<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"3.915ex\" height=\"1.887ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -833.9 1730.6 833.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(345,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1123,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></g></g></svg></mjx-container>的值并不相等</p>\n<p>192和256位的密钥生成在上面的代码片段中被省略了</p>\n</blockquote>\n<h3 id=\"操作汇总-1\"><a href=\"#操作汇总-1\" class=\"headerlink\" title=\"操作汇总\"></a>操作汇总</h3><h4 id=\"农夫算法\"><a href=\"#农夫算法\" class=\"headerlink\" title=\"农夫算法\"></a>农夫算法</h4><p>核心思想：通过被乘数的左移和乘数的右移，同时提前求模来加速计算</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> p = <span class=\"number\">0</span> ;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">8</span> &amp;&amp; x &gt; <span class=\"number\">0</span> &amp;&amp; y &gt; <span class=\"number\">0</span>; i++){</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(y &amp; <span class=\"number\">1</span>){</span><br><span class=\"line\">    p ^= x;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  y &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">  x &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 通过迭代实现除法效果.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(x &gt;= <span class=\"number\">0x100</span>){</span><br><span class=\"line\">    x ^= <span class=\"number\">0x11B</span>;  <span class=\"comment\">/* x = x % 0x11B */</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>GF2的减法就是加法，加法也就是异或；多次异或直至结果小于0x100</p>\n</blockquote>\n<h2 id=\"RSA\"><a href=\"#RSA\" class=\"headerlink\" title=\"RSA\"></a>RSA</h2><p>属于公钥加密体制（非对称加密）</p>\n<p><strong>整体的流程：</strong></p>\n<ol>\n<li>选择不等的素数 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"3.185ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 1407.7 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(503,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(947.7,0)\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g></g></g></svg></mjx-container></li>\n<li>计算 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"8.188ex\" height=\"1.758ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -583 3619 777\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(877.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1933.6,0)\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2658.8,0)\"><path data-c=\"22C5\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3159,0)\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g></g></g></svg></mjx-container></li>\n<li>选择与 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"15.127ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 6686.3 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(389,0)\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1114.2,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2114.4,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2614.4,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3225.7,0)\"><path data-c=\"22C5\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3725.9,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4114.9,0)\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4797.1,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(5797.3,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(6297.3,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container> 互素的数 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.054ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 466 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path></g></g></g></svg></mjx-container></li>\n<li>计算<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.054ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 466 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path></g></g></g></svg></mjx-container>在模<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"15.127ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 6686.3 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(389,0)\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1114.2,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2114.4,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2614.4,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3225.7,0)\"><path data-c=\"22C5\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3725.9,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4114.9,0)\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4797.1,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(5797.3,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(6297.3,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container>下的乘法逆元 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.023ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.176ex\" height=\"1.593ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 520 704\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g></g></g></svg></mjx-container></li>\n<li>公开公钥：<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"5.178ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 2288.7 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(389,0)\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(855,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1299.7,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1899.7,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></li>\n<li>保存私钥：<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"5.3ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 2342.7 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(389,0)\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(909,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1353.7,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1953.7,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></li>\n</ol>\n<p>加密与解密：</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"33.292ex\" height=\"2.23ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -903.7 14715 985.7\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(710.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(1766.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(911,413) scale(0.707)\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path></g></g><g data-mml-node=\"mspace\" transform=\"translate(3057.1,0)\"></g><g data-mml-node=\"mi\" transform=\"translate(4223.7,0)\"><path data-c=\"6D\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\"></path><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(833,0)\"></path><path data-c=\"64\" d=\"M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z\" transform=\"translate(1333,0)\"></path></g><g data-mml-node=\"mstyle\" transform=\"translate(6112.7,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"mstyle\" transform=\"translate(6279.7,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"mi\" transform=\"translate(6613.4,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mtext\" transform=\"translate(7213.4,0)\"><path data-c=\"A0\" d=\"\"></path></g><g data-mml-node=\"mi\" transform=\"translate(7463.4,0)\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(8619.2,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(9675,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(466,413) scale(0.707)\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g></g><g data-mml-node=\"mspace\" transform=\"translate(10558.7,0)\"></g><g data-mml-node=\"mi\" transform=\"translate(11725.3,0)\"><path data-c=\"6D\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\"></path><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(833,0)\"></path><path data-c=\"64\" d=\"M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z\" transform=\"translate(1333,0)\"></path></g><g data-mml-node=\"mstyle\" transform=\"translate(13614.3,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"mstyle\" transform=\"translate(13781.3,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"mi\" transform=\"translate(14115,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container></p>\n<h3 id=\"Euler函数\"><a href=\"#Euler函数\" class=\"headerlink\" title=\"Euler函数\"></a>Euler函数</h3><ul>\n<li><p>定义：<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.466ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 1974 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D719\" d=\"M409 688Q413 694 421 694H429H442Q448 688 448 686Q448 679 418 563Q411 535 404 504T392 458L388 442Q388 441 397 441T429 435T477 418Q521 397 550 357T579 260T548 151T471 65T374 11T279 -10H275L251 -105Q245 -128 238 -160Q230 -192 227 -198T215 -205H209Q189 -205 189 -198Q189 -193 211 -103L234 -11Q234 -10 226 -10Q221 -10 206 -8T161 6T107 36T62 89T43 171Q43 231 76 284T157 370T254 422T342 441Q347 441 348 445L378 567Q409 686 409 688ZM122 150Q122 116 134 91T167 53T203 35T237 27H244L337 404Q333 404 326 403T297 395T255 379T211 350T170 304Q152 276 137 237Q122 191 122 150ZM500 282Q500 320 484 347T444 385T405 400T381 404H378L332 217L284 29Q284 27 285 27Q293 27 317 33T357 47Q400 66 431 100T475 170T494 234T500 282Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(596,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(985,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1585,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container> ：小于n且与n互素的整数的个数</p>\n</li>\n<li><p>对应的定理：</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"33.79ex\" height=\"2.7ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -943.3 14935.2 1193.3\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"67\" d=\"M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z\"></path><path data-c=\"63\" d=\"M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z\" transform=\"translate(500,0)\"></path><path data-c=\"64\" d=\"M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z\" transform=\"translate(944,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1500,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1889,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2461,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2905.7,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3505.7,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4172.4,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(5228.2,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(6006,0)\"><path data-c=\"21D2\" d=\"M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(7283.8,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(605,413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D719\" d=\"M409 688Q413 694 421 694H429H442Q448 688 448 686Q448 679 418 563Q411 535 404 504T392 458L388 442Q388 441 397 441T429 435T477 418Q521 397 550 357T579 260T548 151T471 65T374 11T279 -10H275L251 -105Q245 -128 238 -160Q230 -192 227 -198T215 -205H209Q189 -205 189 -198Q189 -193 211 -103L234 -11Q234 -10 226 -10Q221 -10 206 -8T161 6T107 36T62 89T43 171Q43 231 76 284T157 370T254 422T342 441Q347 441 348 445L378 567Q409 686 409 688ZM122 150Q122 116 134 91T167 53T203 35T237 27H244L337 404Q333 404 326 403T297 395T255 379T211 350T170 304Q152 276 137 237Q122 191 122 150ZM500 282Q500 320 484 347T444 385T405 400T381 404H378L332 217L284 29Q284 27 285 27Q293 27 317 33T357 47Q400 66 431 100T475 170T494 234T500 282Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(596,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(985,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1585,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(9612.4,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(10668.2,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(11168.2,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mtext\" transform=\"translate(11557.2,0)\"><path data-c=\"A0\" d=\"\"></path><path data-c=\"6D\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\" transform=\"translate(250,0)\"></path><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(1083,0)\"></path><path data-c=\"64\" d=\"M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z\" transform=\"translate(1583,0)\"></path><path data-c=\"A0\" d=\"\" transform=\"translate(2139,0)\"></path></g><g data-mml-node=\"mi\" transform=\"translate(13946.2,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(14546.2,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></p>\n<p>特别的，如果<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.138ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 503 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g></g></g></svg></mjx-container>是素数的话，有 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.247ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 1877 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D719\" d=\"M409 688Q413 694 421 694H429H442Q448 688 448 686Q448 679 418 563Q411 535 404 504T392 458L388 442Q388 441 397 441T429 435T477 418Q521 397 550 357T579 260T548 151T471 65T374 11T279 -10H275L251 -105Q245 -128 238 -160Q230 -192 227 -198T215 -205H209Q189 -205 189 -198Q189 -193 211 -103L234 -11Q234 -10 226 -10Q221 -10 206 -8T161 6T107 36T62 89T43 171Q43 231 76 284T157 370T254 422T342 441Q347 441 348 445L378 567Q409 686 409 688ZM122 150Q122 116 134 91T167 53T203 35T237 27H244L337 404Q333 404 326 403T297 395T255 379T211 350T170 304Q152 276 137 237Q122 191 122 150ZM500 282Q500 320 484 347T444 385T405 400T381 404H378L332 217L284 29Q284 27 285 27Q293 27 317 33T357 47Q400 66 431 100T475 170T494 234T500 282Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(596,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(985,0)\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1488,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container> = <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"5.035ex\" height=\"1.946ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -666 2225.4 860\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(725.2,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1725.4,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></svg></mjx-container> ，推知 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16.783ex\" height=\"2.452ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -833.9 7417.9 1083.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(605,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(503,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1281,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(2192.1,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(3247.9,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3747.9,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mtext\" transform=\"translate(4136.9,0)\"><path data-c=\"A0\" d=\"\"></path><path data-c=\"6D\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\" transform=\"translate(250,0)\"></path><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(1083,0)\"></path><path data-c=\"64\" d=\"M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z\" transform=\"translate(1583,0)\"></path><path data-c=\"A0\" d=\"\" transform=\"translate(2139,0)\"></path></g><g data-mml-node=\"mi\" transform=\"translate(6525.9,0)\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(7028.9,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></p>\n</li>\n</ul>\n<h4 id=\"中国剩余定理\"><a href=\"#中国剩余定理\" class=\"headerlink\" title=\"中国剩余定理\"></a>中国剩余定理</h4><p>对于同余方程组：</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"33.604ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 14853 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(849.8,0)\"><path data-c=\"2261\" d=\"M56 444Q56 457 70 464H707Q722 456 722 444Q722 430 706 424H72Q56 429 56 444ZM56 237T56 250T70 270H707Q722 262 722 250T707 230H70Q56 237 56 250ZM56 56Q56 71 72 76H706Q722 70 722 56Q722 44 707 36H70Q56 43 56 56Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(1905.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(562,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(2761.5,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mspace\" transform=\"translate(3150.5,0)\"></g><g data-mml-node=\"mi\" transform=\"translate(4150.5,0)\"><path data-c=\"6D\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\"></path><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(833,0)\"></path><path data-c=\"64\" d=\"M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z\" transform=\"translate(1333,0)\"></path></g><g data-mml-node=\"mstyle\" transform=\"translate(6039.5,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"mstyle\" transform=\"translate(6206.5,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"msub\" transform=\"translate(6540.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(911,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(7745.1,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(8134.1,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mtext\" transform=\"translate(8578.8,0)\"><path data-c=\"A0\" d=\"\"></path></g><g data-mml-node=\"mi\" transform=\"translate(8828.8,0)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(9451.6,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(10507.3,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(11007.3,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(11452,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(11952,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(12396.7,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(13063.3,0)\"><path data-c=\"2026\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(14402,0)\"><path data-c=\"1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container></p>\n<p>其中 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.357ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.726ex\" height=\"1.357ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 1205 599.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(911,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g></g></g></svg></mjx-container> 两两之间互素，并且令 ：</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -1.909ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"21.817ex\" height=\"4.984ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -1359 9643 2202.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1328.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2384.6,0)\"><path data-c=\"3A0\" d=\"M128 619Q121 626 117 628T101 631T58 634H25V680H724V634H691Q651 633 640 631T622 619V61Q628 51 639 49T691 46H724V0H713Q692 3 569 3Q434 3 425 0H414V46H447Q489 47 498 49T517 61V634H232V348L233 61Q239 51 250 49T302 46H335V0H324Q303 3 180 3Q45 3 36 0H25V46H58Q100 47 109 49T128 61V619Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3134.6,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(3523.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(911,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(4728.5,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mtext\" transform=\"translate(5117.5,0)\"><path data-c=\"A0\" d=\"\"></path></g><g data-mml-node=\"msub\" transform=\"translate(5367.5,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1003,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(6942.2,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mfrac\" transform=\"translate(7998,0)\"><g data-mml-node=\"mi\" transform=\"translate(297,676)\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(220,-686)\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(911,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g><rect width=\"1405\" height=\"60\" x=\"120\" y=\"220\"></rect></g></g></g></svg></mjx-container></p>\n<p>此时，<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.294ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 572 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g></g></g></svg></mjx-container> 模 M的唯一解为：</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -2.819ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"46.046ex\" height=\"6.354ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -1562.5 20352.4 2808.5\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(849.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"munderover\" transform=\"translate(1905.6,0)\"><g data-mml-node=\"mo\"><path data-c=\"2211\" d=\"M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(148.2,-1087.9) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(345,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1123,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mi\" transform=\"translate(562.5,1150) scale(0.707)\"><path data-c=\"1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"msub\" transform=\"translate(3516.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(562,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(4594.4,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(5594.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1003,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(7113.8,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(8114,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msubsup\" transform=\"translate(8503,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1138,413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mi\" transform=\"translate(1003,-292.4) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"mspace\" transform=\"translate(10594.7,0)\"></g><g data-mml-node=\"mi\" transform=\"translate(11761.4,0)\"><path data-c=\"6D\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\"></path><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(833,0)\"></path><path data-c=\"64\" d=\"M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z\" transform=\"translate(1333,0)\"></path></g><g data-mml-node=\"mstyle\" transform=\"translate(13650.4,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"mstyle\" transform=\"translate(13817.4,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"msub\" transform=\"translate(14151.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(911,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(15356,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mspace\" transform=\"translate(15745,0)\"></g><g data-mml-node=\"mi\" transform=\"translate(16911.7,0)\"><path data-c=\"6D\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\"></path><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(833,0)\"></path><path data-c=\"64\" d=\"M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z\" transform=\"translate(1333,0)\"></path></g><g data-mml-node=\"mstyle\" transform=\"translate(18800.7,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"mstyle\" transform=\"translate(18967.7,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"mi\" transform=\"translate(19301.4,0)\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g></g></g></svg></mjx-container></p>\n<blockquote>\n<p>其中逆元可以根据辗转相除法得到</p>\n</blockquote>\n<p>e.g.</p>\n<img lazyload=\"\" src=\"/images/loading.svg\" data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250623191409827.png?imageSlim\">\n\n<img lazyload=\"\" src=\"/images/loading.svg\" data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250623191422549.png?imageSlim\">\n\n<h4 id=\"Euler函数的拓展性质\"><a href=\"#Euler函数的拓展性质\" class=\"headerlink\" title=\"Euler函数的拓展性质\"></a>Euler函数的拓展性质</h4><ul>\n<li><p>乘法性质：</p>\n<p>$$<br>n_1, n_2 互素 \\Longrightarrow \\phi(n_1<em>n_2) = \\phi(n_1)</em>\\phi(n_2)<br>$$</p>\n</li>\n<li><p>乘积公式：</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -1.991ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20.465ex\" height=\"5.027ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -1342 9045.4 2222\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D719\" d=\"M409 688Q413 694 421 694H429H442Q448 688 448 686Q448 679 418 563Q411 535 404 504T392 458L388 442Q388 441 397 441T429 435T477 418Q521 397 550 357T579 260T548 151T471 65T374 11T279 -10H275L251 -105Q245 -128 238 -160Q230 -192 227 -198T215 -205H209Q189 -205 189 -198Q189 -193 211 -103L234 -11Q234 -10 226 -10Q221 -10 206 -8T161 6T107 36T62 89T43 171Q43 231 76 284T157 370T254 422T342 441Q347 441 348 445L378 567Q409 686 409 688ZM122 150Q122 116 134 91T167 53T203 35T237 27H244L337 404Q333 404 326 403T297 395T255 379T211 350T170 304Q152 276 137 237Q122 191 122 150ZM500 282Q500 320 484 347T444 385T405 400T381 404H378L332 217L284 29Q284 27 285 27Q293 27 317 33T357 47Q400 66 431 100T475 170T494 234T500 282Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(596,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(985,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1585,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2251.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3307.6,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4129.8,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4852,0)\"><path data-c=\"3A0\" d=\"M128 619Q121 626 117 628T101 631T58 634H25V680H724V634H691Q651 633 640 631T622 619V61Q628 51 639 49T691 46H724V0H713Q692 3 569 3Q434 3 425 0H414V46H447Q489 47 498 49T517 61V634H232V348L233 61Q239 51 250 49T302 46H335V0H324Q303 3 180 3Q45 3 36 0H25V46H58Q100 47 109 49T128 61V619Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(5602,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(5991,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(6713.2,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mfrac\" transform=\"translate(7713.4,0)\"><g data-mml-node=\"mn\" transform=\"translate(221.5,676)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(220,-686)\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><rect width=\"703\" height=\"60\" x=\"120\" y=\"220\"></rect></g><g data-mml-node=\"mo\" transform=\"translate(8656.4,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></p>\n<blockquote>\n<p>其中，<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.564ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"3.124ex\" height=\"2.26ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -749.5 1381 999\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(503,0) translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(781,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container>且 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.138ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 503 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g></g></g></svg></mjx-container>为素数， 由对 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.357ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 600 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container> 的质因数分解得到</p>\n</blockquote>\n</li>\n</ul>\n<p>e.g.</p>\n<img lazyload=\"\" src=\"/images/loading.svg\" data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250623184937218.png?imageSlim\">\n\n<h3 id=\"签名\"><a href=\"#签名\" class=\"headerlink\" title=\"签名\"></a>签名</h3><p>加密：A将一封信发送给B</p>\n<ul>\n<li>A将信件内容用B的公钥进行RSA的加密</li>\n<li>B收到内容后使用自己的私钥解密，得到的结果就是A信件的内容</li>\n</ul>\n<p>签名：为了验证信件内容确实来自于A</p>\n<ul>\n<li>A对信件内容计算摘要，以MD5算法为例：M = MD5（L）</li>\n<li>然后用A的私钥对M加密： M’ = RSA（M， A的私钥）</li>\n<li>A将M’与L一起发送给B</li>\n<li>B利用A的公钥计算 M‘’ = RSA（M’，A的公钥），同时计算MD5（L）<ul>\n<li>如果后者的结果 = M‘’， 说明验证正确</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>注意A无法得到B的私钥，因此此处RSA加密解密涉及的都是A的密钥</p>\n</blockquote>\n<h2 id=\"ECC\"><a href=\"#ECC\" class=\"headerlink\" title=\"ECC\"></a>ECC</h2><blockquote>\n<p>直接参考pdf文档</p>\n</blockquote>\n<h4 id=\"常用ecc函数\"><a href=\"#常用ecc函数\" class=\"headerlink\" title=\"常用ecc函数\"></a>常用ecc函数</h4><img lazyload=\"\" src=\"/images/loading.svg\" data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605193427122.png?imageSlim\">\n\n<blockquote>\n<p>注意0表示计算得到的y是偶数</p>\n</blockquote>\n<h1 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h1><p>AES算法的明文长度和密文长度都是16字节，密钥长度分为16、24、32字节三种</p>\n<p>请看调整后的表格，其中包含了ECC算法的特点：</p>\n<table>\n<thead>\n<tr>\n<th><strong>算法</strong></th>\n<th><strong>加密模式</strong></th>\n<th><strong>明文-密文长度</strong></th>\n<th><strong>密钥关系</strong></th>\n<th><strong>备注</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>DES</td>\n<td>ECB, CBC, CFB</td>\n<td>明文64位，密文64位</td>\n<td>64位密钥（实际56位用于加密，8位用于奇偶校验）</td>\n<td>三重DES是为了对抗中途相遇攻击，增加安全性</td>\n</tr>\n<tr>\n<td>AES</td>\n<td>ECB, CBC, CFB (未在文中明确提及，但通常支持)</td>\n<td>明文16字节，密文16字节</td>\n<td>密钥长度可为16、24、32字节</td>\n<td>具有字节代替、行移位、列混淆等变换</td>\n</tr>\n<tr>\n<td>RSA</td>\n<td>不适用（非对称加密算法）</td>\n<td>明文长度需小于n，密文长度等于n</td>\n<td>公钥(e,n)，私钥(d,n)； e与ϕ(n)互素，d为e模ϕ(n)的乘法逆元</td>\n<td>基于大数分解的困难性；可用于加密和数字签名</td>\n</tr>\n<tr>\n<td>ECC</td>\n<td>不适用（非对称加密算法）</td>\n<td>与所选椭圆曲线参数相关</td>\n<td>基于椭圆曲线离散对数难题</td>\n<td>相比RSA，在相同安全强度下密钥长度更短，计算效率更高</td>\n</tr>\n</tbody></table>\n<h4 id=\"xgcd\"><a href=\"#xgcd\" class=\"headerlink\" title=\"xgcd\"></a>xgcd</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 扩展欧几里得算法实现</span></span><br><span class=\"line\"><span class=\"comment\"> * 计算gcd(x,y)以及x mod y的乘法逆元</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @param x 第一个整数</span></span><br><span class=\"line\"><span class=\"comment\"> * @param y 第二个整数</span></span><br><span class=\"line\"><span class=\"comment\"> * @param pinverse 用于存储x mod y的乘法逆元的指针</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 返回gcd(x,y)</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 示例:</span></span><br><span class=\"line\"><span class=\"comment\"> * xgcd(3, 20, &amp;inv)返回1，inv被赋值为7，因为3 * 7 ≡ 1 mod 20</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">xgcd</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y, <span class=\"type\">int</span> *pinverse)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">   <span class=\"comment\">// 初始化扩展欧几里得算法所需的变量</span></span><br><span class=\"line\">   <span class=\"comment\">// a1, b1用于跟踪第一个方程: x = a1*x + b1*y</span></span><br><span class=\"line\">   <span class=\"comment\">// a2, b2用于跟踪第二个方程: y = a2*x + b2*y</span></span><br><span class=\"line\">   <span class=\"type\">int</span> a1=<span class=\"number\">1</span>, b1=<span class=\"number\">0</span>, a2=<span class=\"number\">0</span>, b2=<span class=\"number\">1</span>;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// q是商，r是余数</span></span><br><span class=\"line\">   <span class=\"type\">int</span> q, r, t;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// n和old_n用于跟踪当前的被除数和除数</span></span><br><span class=\"line\">   <span class=\"type\">int</span> old_n;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// 确保x &lt;= y，如果不是则交换它们</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span>(x &gt; y)</span><br><span class=\"line\">   {</span><br><span class=\"line\">      t = x;</span><br><span class=\"line\">      x = y;</span><br><span class=\"line\">      y = t;</span><br><span class=\"line\">   }</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// 初始化n和r</span></span><br><span class=\"line\">   <span class=\"comment\">// n初始为较大的数y，r初始为较小的数x</span></span><br><span class=\"line\">   n = y;</span><br><span class=\"line\">   r = x;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// 当余数r不为0时继续循环</span></span><br><span class=\"line\">   <span class=\"keyword\">while</span>(r != <span class=\"number\">0</span>)</span><br><span class=\"line\">   {</span><br><span class=\"line\">      <span class=\"comment\">// 计算商q = n / r</span></span><br><span class=\"line\">      q = n / r;</span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"comment\">// 更新a1和a2的值</span></span><br><span class=\"line\">      <span class=\"comment\">// 这是扩展欧几里得算法的核心部分，同时计算系数</span></span><br><span class=\"line\">      t = a1;</span><br><span class=\"line\">      a1 = a2;</span><br><span class=\"line\">      a2 = t - q*a2;</span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"comment\">// 更新b1和b2的值</span></span><br><span class=\"line\">      t = b1;</span><br><span class=\"line\">      b1 = b2;</span><br><span class=\"line\">      b2 = t - q*b2;</span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"comment\">// 更新n和r的值，进行下一轮迭代</span></span><br><span class=\"line\">      t = n;</span><br><span class=\"line\">      n = r;</span><br><span class=\"line\">      r = t % r;</span><br><span class=\"line\">   }</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// 此时n就是gcd(x,y)</span></span><br><span class=\"line\">   <span class=\"comment\">// 但我们需要确保乘法逆元b1在模y下是正数</span></span><br><span class=\"line\">   <span class=\"comment\">// 因为b1可能是负数，所以加上y再取模y确保它在[0, y-1]范围内</span></span><br><span class=\"line\">   a1 = (a1+y) % y;  <span class=\"comment\">// 虽然a1是x的系数，但这里也确保它在模y下</span></span><br><span class=\"line\">   b1 = (b1+y) % y;  <span class=\"comment\">// 确保乘法逆元b1是正数</span></span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// 将乘法逆元存入指针指向的变量</span></span><br><span class=\"line\">   *pinverse = b1;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// 返回gcd(x,y)</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n","_processedHighlight":true},{"title":"数据库系统复习","date":"2025-06-21T11:03:07.000Z","excerpt":"复习阶段整理的db笔记，对核心知识进行了梳理，参考了范围比较广的复习资料与习题，最后针对没有主观题的考试形式对课程ppt的边角点进行了知识梳理","thumbnail":"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250625145641439.png?imageSlim","_content":"# 知识点梳理\n\n### DML\n\n- `select`得到的结果通过 `distinct`关键字来去重\n- `union all`可以保留并集中的重复元组\n- 注意 `case`与 `update`组合使用时，分段更新\n\n#### 聚合函数&NULL\n\n除了 `count`之外的聚合函数, 会忽略集合属性上有 `null`的元组, 而 `count`则会计算包括空值在内的元组个数.\n\n**Special case**: 如果所有的聚合属性都是空值:\n\n- `count`: 返回0;\n- 其他聚合函数: 返回 **null**.\n\n#### lateral\n\n外层的查询可以直接使用内部查询的关系名, 但是内部的子查询无法向外直接使用其重命名的关系名.\n\n然而, 如果在子查询的前面声明关键字 `lateral`则可以实现:\n\n```sql\nSELECT name, salary, avg_salary\nFROM instructor I1,\n     LATERAL (SELECT avg(salary) AS avg_salary\n              FROM instructor I2\n              WHERE I2.dept_name = I1.dept_name) AS AvgDeptSalary;\n```\n\n#### 嵌套查询顺序\n\nfrom ; where; group by ; having; select; distinct; order by\n\n#### 映射基数约束\n\n采取 `l...h`的形式来表示复杂的约束关系：\n\n* `0..*` 表示最少参与0次, 最多没有限制, 可见 ..对多的关系, 部分参与;\n* `1..1`表示恰好参与1次, 表示一对..的关系, **完全参与**\n\n比如下面的实际上是***many-to-one***的关系：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefinedimage-20250329153241821.png?imageSlim\"/>\n\n### ER模型和范式\n\n#### 从ER模型得到schema\n\n从ER模型得到schema的核心规则：\n\n- **关系类型**：\n  - 1:1 ：在参与关系的实体类型中，选择一个schema增加一个FK，指向另一个实体对应的schema的PK，**不需要额外建模**；\n  - 1:N: 在多端对应的schema中，增加1端对应的PK作为FK。此时，关系也蕴含在这个外键的约束关系中，**不需要额外建模**；\n  - M:N: 此时，我们需要**将关系建模为一个新的schema**——将参与关系的实体类型的主键作为外键，然后加上关系本身的属性，组成为schema的属性\n- 弱实体类型：强实体的PK + 弱实体自身的分辨符 = 对应schema的主键，然后补充弱实体的剩余属性\n- 多值属性：需要为多值属性构建一个新的schema\n  - 将对应的实体的PK和多值属性自身作为schema的PK\n\n#### 属性集闭包\n\n注意，属性的闭包包括自身的属性集\n\n**作用：**\n\n- 判断是否为主键：如果闭包包含了关系中的所有属性，那么就是～\n- 验证函数依赖是否成立\n- 计算整个关系模式的闭包$F ^+$: 计算每一个属性的闭包\n\n#### 正则覆盖\n\n- 目标：简化给出的函数依赖\n- 尝试化简属性A时，如果去除的是 $\\alpha \\rightarrow \\beta$中的：\n  - 左侧：判断去除之后左侧剩余属性的闭包是否包含了右侧属性\n  - 右侧：判断此时的左侧属性闭包中是否含有去除的属性\n- 我们可以进一步用公式来讲解上述的分析：\n  - 判断$\\alpha$中的属性A是否多余：\n    - 计算$(\\alpha-A)^+$是否包含了$\\beta$\n  - 判断$\\beta$中的属性A是否多余：\n    - 根据 $(F-\\{\\alpha \\rightarrow \\beta\\}\\  \\cup \\ \\{\\alpha \\rightarrow (\\beta - A)\\})$ 的依赖关系，计算 $\\alpha^+$\n    - 如果对应的属性闭包包括了A，那么就可以去除\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250528134923287.png?imageSlim\"/>\n\n一个简单的例子来说明如何推导：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250528135223937.png?imageSlim\"/>\n\n**NOTICE：**\n\n- 实际情况下，可能比较难推导，需要更多的经验和灵感）\n- 虽然我们要求左侧的属性唯一，但是在推导的过程中，可能尝试将类似于 $A \\rightarrow BC$先拆解为两条，然后判断其中的某条属性是否多余；最后将左侧属性合并\n\n#### 范式的验证\n\n- BCNF：\n  - 如果F中没有违背BCNF原则的函数依赖，那么F的闭包中也没有\n- 3NF：\n  - 注意，属性A可以来自不同的CK集合\n  - 只需要对已有的FD进行判断\n\n### 存储结构\n\n> 似乎不是经常考，了解概念\n\n## 文件结构\n\n- 面向列的存储可以在现代CPU中实现向量处理\n\n#### 定长与变长的记录\n\n- 如果是**定长记录**，为了避免删除记录时调整结构的较大时间成本，可以为维护一个**空表**，将删除之后的空间通过链表的方式连接，之后插入的时候，首先插入到空表中，如果没有空余的位置，再插入到文件的末尾\n- 如果记录是变长的，在定长和变长之间存在一个**空位图：**\n\n  - 位数 = 变长记录的个数\n  - 某个记录为空时 ==> 对应的bit为 1\n  - 定长的信息包含：\n\n    - 变长属性的定长属性信息（开始的偏移量+长度）\n    - 定长属性的值\n\n  <img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250529152608718.png?imageSlim\"/>\n\n### B+树相关\n\n#### 索引的block大小\n\n假设指针和search-key的大小分别是a，b 那么block的扇出n ( ***fan-out rate*** )就是：\n\n$$\nn = \\lfloor \\frac{B-a}{a+b} \\rfloor + 1\n$$\n\n> 注意最左侧存在一个单独的指针，然后是一系列的键值对；\n>\n> 扇出也就是B+树的阶数\n\n#### children的关系\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250529182824693.png?imageSlim\"/>\n\n> 此处的 `n`就是之前计算得到的扇出；\n>\n> 对于内部节点，最小值的估计是**孩子而非关键字**的个数！关键字key的个数是孩子数（指针）- 1\n>\n> 注意叶子节点根据索引值指向对应物理地址的记录，所以是n-1个孩子\n>\n> 叶子节点的最右侧的指针用于串联叶子节点的链表\n\n非叶子节点类似于多级、稀疏索引。\n\n#### 高度的估计\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250529184340241.png?imageSlim\"/>\n\n> 高度最大估计如上所示；当叶子节点都满时，有最小高度 $ h = \\lceil \\log_n(K) \\rceil)$.\n\n#### 操作相关\n\n**删除：**\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250529185626454.png?imageSlim\"/>\n\n#### 计算高度\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250529192439172.png?imageSlim\"/>\n\n> 根节点最少有2个子节点\n\n- B+树的范围查找：\n\n  - 如果是查找 <= x, 直接从第一个叶子节点开始按照链表遍历；\n  - 反之，从根节点开始寻找第一个满足条件的叶子节点，然后遍历到底\n- \n- 如果B+树的索引是字符串等变长的，可以采取前缀的方式来压缩索引项的大小，从而增大扇出n\n\n#### bottom-up\n\n1. 如果记录已经存在，可以从叶子节点开始自底向上构造（首先排序）\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250529200732757.png?imageSlim\"/>\n\n> 这种技术也用在了**LSM**的的构建上--当底层的L满了的时候，将其融合并自底向上构建\n\n2. 如果要批量插入，也可以先排序然后一起插入，可以有效减少访问的block数量\n\n***TODO***：分析成本的估计\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250529201122223.png?imageSlim\"/>\n\n### 其他结构\n\n#### LSM\n\n- 将对数据的修改增量保存在内存中，达到一定的限制后批量写入磁盘，提升了写性能；\n- 但是因此降低了一定的读性能\n\n#### Buffer Tree\n\n为节点增加内部的缓冲区:\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250531114954357.png?imageSlim\"/>\n\n- 插入: 如果缓冲区有空闲, 优先插入缓冲区中;\n  - 如果发生了节点的分裂, 注意同时管理缓冲区的转移;\n  - 缓冲区内部也是有序的.\n- 查询: 需要在缓冲区中进一步查找\n\n#### Bitmap\n\n将**Record**标号, 然后为**每个属性**都建立一个 bitmap, `0`表示对应的位置不是当前的属性, `1` 表示符合当前属性.\n\n- bitmap使得两个属性通过 `and` 操作就找到对应的record.\n\n<img src=\"https://note.noughtq.top/system/db/images/lec10/20.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n### Index\n\n- 顺序索引分为了稠密和稀疏两类，后者只能用于顺序文件，因为只有部分的search-key存在索引\n  - 如果搜索键没有重复的，那么稠密的顺序索引就包含了所有的搜索键的index；否则对于每一个搜索键，我们只需要一个开始的index，然后可以线性搜索得到\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250529165232766.png?imageSlim\"/>\n\n#### 辅助索引\n\n> i.e. secondary key， 与primary-key（顺序）有所区别\n\n当数据文件中的记录顺序和索引文件中的索引项的顺序不一致时：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250529165410618.png?imageSlim\"/>\n\n> 可以看到，辅助索引首先指向了一个bucket，bucket中存在二级索引\n\n#### 散列索引\n\n选择索引，利用哈希函数计算K到B的映射，哈希值相同的索引项放在了一个bucket中\n\n- ***overflow chaining***：如果某个bucket内部的项太多了，系统将分配一个～，用于存储额外的索引项（bucket本身也是一个链表）\n- 为了减少上述桶溢出发生的概率，我们可以如此设置桶的数量$n_b$：\n\n  $$\n  n_b = \\frac{n_r}{f_r} \\cdot (1+d)\n  $$\n\n  > 其中，分子和分母分别表示记录总数和每个桶的记录数量；d称为***fudge factor***，通常设置为0.2\n  >\n\n## Query Processing\n\n- 整体思想: 先选择、再投影、最后连接和输出\n\n成本估计：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250607230145795.png?imageSlim\"/>\n\n### Join-cost\n\n#### 嵌套循环\n\n| join方式          | 块传输次数             | 寻道次数       | 备注                                                            |\n| ----------------- | ---------------------- | -------------- | --------------------------------------------------------------- |\n| Nested-Loop       | $b_r + n_r\\cdot b_s$ | $b_r + n_r$  |                                                                 |\n| Block Nested-Loop | $b_r + b_r\\cdot b_s$ | $2\\cdot b_r$ | s的block顺序存储，对于每个$b_r$寻道s的block起点，然后顺序读取 |\n| Index Nested-Loop | TODO                   |                | 条件：inner在连接属性上具有index                                |\n\n> 在最好的情况下，嵌套和块嵌套的循环，内存可以装下两个关系，因此块传输次数为block的个数，寻道次数均为2\n\n由于上述的计算是基于每次都读取外层关系1个block，我们可以继续改进上述的方法，让其每次读取M-2个block，留下2个block分别用于读取s的block和输出所用的空间\n\n> 其中 $M$ 为内存大小的block块数；每次读取r中一连串的block之后，读取s的block，并将s的record逐个与前者的记录比较\n\n此时，块嵌套的块传输次数和寻道次数分别为：\n\n$$\nb_r + \\lceil\\frac{b_r}{M-2}\\rceil \\cdot b_s \\text{ 与 } 2\\cdot\\lceil\\frac{b_r}{M-2}\\rceil\n$$\n\n#### merge join\n\n- 要求关系按照连接属性有序排列，否则优先sort\n- \n\n### Hash join\n\n- 利用哈希函数，将连接属性具有相同哈希值的元组放在一个集合/划分\n- 对两个关系分别计算哈希值并划分后，我们只需要考虑对应划分对$s_i$,$r_i$\n- 之后，我们在上述的每个划分对，使用索引嵌套循环连接：\n  - 为inner关系***build***一个哈希索引，从outer关系中***probe***查找对应的元组\n  - 分别称r，s为探测输入和构建输入\n  - 构建哈希索引的哈希函数必须和第一步的哈希函数不同\n- 如果构建关系包含$b_s$个块，每个划分的大小不超过$M$，则划分的数量至少为$\\lceil \\frac{b_s}{M}\\rceil$\n\n实际进行划分之后，我们需要将较小的关系作为 **build** 所用的关系;\n\n哈希函数的值域决定了分区n的大小, 为了使得si均能存放在mem中,要求 :\n\n$$\nn_h \\geq \\lceil b_s / M \\rceil \\cdot f\n$$\n\n> 其中的 $f$ 被称为修正系数, 一般设置为 1. 2\n\n#### 递归划分\n\n> **Recursive partitioning**  required if number of partitions n is greater than number of pages *M* of memory.\n\n不需要递归划分的条件:\n\n$$\nM > n_h + 1 \\\\M > b_s / M + 1 \\\\ \\text{近似于} M > \\sqrt{b_s}\n$$\n\n#### 成本分析\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609150516608.png?imageSlim\"/>\n\n> 为输入和输出分配缓冲块个数的提示：\n>\n> ***two buffer pages are available for each partition during the hash partitioning phase.***\n>\n> 此时的$b_b$ = 2\n\n### 外排序\n\ncost分析:\n\n- 块传输\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250607155431473.png?imageSlim\"/>\n\n- seek\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250607155511090.png?imageSlim\"/>\n\n### 物化与流水线\n\n- **物化**：按照顺序对表达式求值，将中间的计算结果物化为临时关系，并且需要将临时关系表写入disk\n\n<img src=\"https://note.noughtq.top/system/db/images/lec11/7.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n- **流水线**：同时对多个表达时求值，将表达式的运算结果立即传入需要的表达式，无需将中间结果写入disk\n  - **生产驱动型流水线.**\n    - 从下往上主动生成元组.\n  - **需求驱动型流水线.**\n    - 从最上层的输出, 递归调用下层的函数 `next()`, 直到最底层为 `close()`\n    - 向流水线顶端的操作请求元组\n\n## Query Optimization\n\n主要参考ppt的习题\n\n## 并发控制\n\n- 可串行化调度\n- **前驱图（优先图）**\n  - 注意绘制需要根据给出的schedule，从上往下看是否存在冲突\n  - 将事务作为节点, 存在冲突的事务之间建立边,  $T_i\\rightarrow T_j$表示冲突之中，前者的操作先发生，后者的操作后发生；\n- ***recoverable schedule*** 可恢复调度\n  - 依赖于T1写入的数据的T2，需要在前者commit之后，后者才能**commit**\n- ***Cascadeless Schedules*** 无级联调度\n  - 每一对存在冲突的事务, 前者事务的提交先于后者数据对的读取\n  - 无级联调度都是可恢复的.\n- **等待图**\n  - 边 $T_i\\rightarrow T_j$ 表示事务i正在等待后者释放有关数据的锁； 当后者释放这个锁时，将这条边删除\n  - 当且仅当等待图中存在环时，系统中就**出现了死锁**\n\n#### 两阶段锁协议\n\n- 无法保证解决死锁的问题\n  - 但是按照排序关系来获得锁可以避免产生死锁\n  - Two phase locking can not avoid deadlock.To acquire locks **in partial order** of the data can avoid deadlock.\n- **strict two-phase locking**\n  - 每个事务保持exclusive锁直到结束；\n  - 可以解决级联回滚和不可恢复的问题\n- 根据～得到的调度**一定是冲突可序列化**的，这意味着如果前驱图存在环，一定不是由～得到的调度\n  - 按照所有事务的**lock point** （当前事务得到最后一个lock的时间点）排序，即可得到串行化顺序\n\n#### 避免死锁\n\n发生冲突的锁请求之间：\n\n- `wait-die`： 如果后者的时间戳更小，i.e. 更早开始 `begin`, 那么后者可以等待，否则回滚后者的操作；\n- `wound-wait`:反之，后者 `begin`开始得较晚时，可以等待，否则回滚 `<u>`前者 `</u>`（前者被后者击伤）\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250515154634003.png?imageSlim\"/>\n\n## 错误恢复\n\n### 普通恢复\n\n#### 简单流程\n\n- redo：\n  - 正向遍历，重做；\n  - 如果碰到了新的事务就将其加入undo-list\n  - 如果碰到了事务的commit/abort，就将其从undo-list中移除\n- undo：\n  - 从末尾开始逆向遍历\n  - undo的时候产生undo日志（注意区分逻辑操作）\n  - 碰到了undo-list中的事务才undo，并且碰到了对应的start写入对应的abort日志\n  - 所有的undo事务都写入了abort后结束\n\n#### checkpoint\n\n- 普通的checkpoint：在写入checkpoint的log之前，此前的活跃事务停止更新，直到将buffer里的修改全部flush到disk，才写入checkpoint的log表示更新完毕，然后继续执行\n  - 这样可以确保，在checkpoint之前commit的事务，其更新一定反应到了disk当中；\n- fuzzy-checkpoint：\n  - 为了避免上述的阻塞而设计，允许写入checkpoint的log之后，可以继续执行日志，同时将先前的修改写到disk\n  - 但是这样伴随了一个问题，可能有的修改正在写入就发生了crash，我们需要一个机制确保处理这种情况；\n- ***last-checkpoint***：将最后一个完成的检查点记录在日志中的位置存储在硬盘上的一个固定位置，即最后检查点。系统在写入检查点记录时不会更新此信息。相反，在写入检查点记录之前，它创建一个包含所有已修改缓存块的列表。只有当列表中的所有缓冲区块都已输出到磁盘后，才会更新最后检查点信息。\n\n#### undo产生的日志\n\n在逻辑操作中，如果逻辑操作已经完成和逻辑操作未完成，面临回滚时的日志类型不同：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250530190917480.png?imageSlim\"/>\n\n> **为什么需要operation-abort的信号？**\n>\n> 让operation-abort的信号在undo阶段被发现时，直接跳到对应的begin，避免已经在redo期间执行的操作被再次执行\n\n### Aries恢复\n\n- 使用LSN标注日志\n- 使用dirty page table避免不必要的redo\n- RecLSN：**第一次**变成脏页对应的LSN\n\n#### 流程\n\n- 相比之前的恢复算法，多了第一步的分析阶段：\n  - 分析dirty table，取RecLSN的最小值作为**Redo**的起点（如果不存在就取checkpoint的LSN）\n  - 分析阶段本身是从检查点开始正向遍历的\n  - 分析阶段同样需要更新dirty table和活跃事务表\n  - **分析的时候，只会分析log，但是不会读取数据文件page，也就是不会读取page**\n- redo的阶段与普通恢复整体相同：\n  - 发现更新记录的时候，如果不在脏页表中的page之列，or  更新记录的LSN小于页面的RecLSN，就忽略；\n    - 否则，我们需要读取page，然后再比较pageLSN与log LSN；\n    - 如果log LSN 大于 页面的pageLSN就redo\n- undo阶段\n  - 为了撤销undo-list中的事务，利用分析阶段得到的lastLSN(选择**最大值**作为起点)，开始反向遍历重做\n  - 重做的时候也会生成仅重做日志的CLR，但是不同之处在于：\n    - ARIES算法的CLR还会在字段**UndoNextLSN**中记录该事务当前LSN的**prevLSN**\n    - 这是为了应对undo过程中crash情景：可以利用CLR知道下一条undo的LSN后，继续undo\n  - 实际上做题的时候，往往不会呈现上述的 `xxLSN`,而是类似于普通恢复的仅重做日志，类似于：\n    ```\n    <T4, 102.1, 62>\n    <T4, abort>\n    ```\n  - 符合下列条件的记录可以跳过：\n    - ***TODO***\n\n#### 简单的例子\n\n演示了xxLSN的作用：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250526233737314.png?imageSlim\"/>\n\n> **TODO**：教材中声明了脏页表储存了pageLSN，如果DirtyPageTable已经包含了pageLSN，为什么还要从disk中读取page再比较pageLSN和当前log LSN？\n>\n> 因此在redo阶段，需要首先比较当前LSN与RecLSN，如果可能需要修改，就读取对应page，然后比较其pageLSN与当前LSN的大小\n\n#### 课本的例子\n\n演示了算法的具体流程：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined1748309403783.png?imageSlim\"/>\n\nCLR不需要写abort\n\n在事务commit的时候，不一定需要将数据都flush到内存中\n\n- 事务总是可以写log\n- flush的时候，先将日志flush到内存中，然后将数据flush到内存中\n\nundo产生日志的时候，也是一条一条产生仅重做日志的，不会从末端沿着prevLSN直接回溯到最开始）比如：\n\n```\n<T3, 8002.1, 66>\n<T3, 8002.1, 55>\n<T3, abort>\n```\n\n# 习题\n\n### SQL练习\n\n- 使用聚合函数时不一定需要 `group by`；\n- 注意符号：不等于 `<>`\n\n#### 练习1\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250527153731212.png?imageSlim\"/>\n\n主要关注第四题：\n\n```sql\nselect title from movie\nexcept\nselect title from movie\nwhere exists(select *\n\tfrom comment A, comment B\n\twhere A.title = movie.title and A.user_name = B.user_name\n\tand B.titel = 'the avenger'\n\tand A.grade <= B.grade\n)\n```\n\n> - 题目的意思是：找出给xx打分的都比给 `the avenger`打分高的xx（电影title）\n> - 考虑使用 `except`，涉及到单表之间的比较，因此将2个comment作笛卡尔积\n> - 利用title确保与外表相连接；利用user_name确保2个内表讨论的是同一个用户的打分\n\n#### 练习2\n\n题目：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250527155632148.png?imageSlim\"/>\n\n第一问：将给出的SQL查询转换为不包含嵌套子查询的版本\n\n```sql\nSELECT DISTINCT C.cno, C.name -- 使用 DISTINCT 是为了避免同一张 CS 卡因有多笔交易符合条件而被多次列出\nFROM card AS C\nJOIN detail AS D1 ON C.cno = D1.cno -- 将 card 与其消费记录 D1 连接\nJOIN detail AS D2 ON D1.cdate = D2.cdate AND D1.pno = D2.pno -- 将 D1 的消费记录与 D2 的消费记录连接，条件是时间和地点相同\nWHERE C.depart = 'CS' -- 过滤 CS 部门的卡\n  AND D2.cno = 'c0002'; -- 过滤 D2，使其只包含卡 'c0002' 的消费记录\n```\n\n第二问：转换为代数表达式：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250527160740028.png?imageSlim\"/>\n\n第三问：编写SQL语句，找出2018年仅在一个校园中使用的卡片\n\n```sql\nselect cno\nfrom detail natural join pos\nwhere year(detail.cdate) = 2018\ngroup by cno\nhaving count(distinct campus) = 1;\n```\n\n- 注意 `detail`中就有cno的信息，因此不需要和card表join\n\n第四问：写一个SQL语句，找出2018年“紫金港”校园中具有最大卡消费总量的pos。\n\n- 使用 `having`子句的版本\n\n  ```sql\n  select pno\n  from detail natural join pos\n  where pos.campus=’紫金港’ and year（detail.cdate）=2018\n  group by pno\n  having sum(amount) >= all ( -- 注意这里的比较\n      select sum(amount)\n      from detail natural join pos\n      where pos.campus='紫金港' and year(detail.cdate) = 2018\n      group by pno\n  )\n  ```\n- 也可以搭配 `order`和 `limit 1`直接筛选：\n\n  ```sql\n  select pno\n  from detail natural join pos\n  where pos.campus=’紫金港’ and year（detail.cdate）=2018\n  group by pno\n  order by sum(amount) desc -- 注意这里是 sum(amount)\n  limit 1\n  ```\n\n  > 这种操作带来的差异是，如果存在多个相同的最大值，还是只会选择一个，所以比起使用嵌套子查询还是有劣势\n  >\n\n第五问：编写一系列SQL语句来完成以下事务：卡片“c0002”在pos“p001”处消费20，时间为2018-07-02 08:08:08\n\n```sql\nupdate card set \nbalance = balance - 20\nwhere cno = 'c0002';\n\ninsert into detail(cno,pno,cdate,ctime,amount)\n\tvalues('c0002','p001','2018-07-02','08:08:08',20);\n\ncommit;\n```\n\n- 注意需要同步更新card；\n- 需要commit\n\n### 范式相关\n\n#### 无损分解\n\n- 课本的定义：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250528142319738.png?imageSlim\"/>\n\n> 具体的验证，可以采取计算属性闭包的方式来推导\n\n- 一个简单的例子：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250528142533000.png?imageSlim\"/>\n\n> 如果分解的结果不是两个，而是多个关系，并且给出了分解的过程（可能是自己推的），那么可以每次对中间结果判断一下是否满足无损分解，如果都满足就认为整体是无损分解的；\n\n#### dependency-preserving\n\n回顾课本的定义：\n\n- the set $F_i$ of all functional dependencies in $F^+$ that include only attributes of Ri\n- 也即是将R进行分解为Ri之后, Fi是F的闭包中存在于Ri相关属性的部分.\n- 因此, **Fi不一定是F的部分**.\n\n我们定义 上述的 $F_i$ 的并集为 F', 如果满足:\n\n$$\nF'^+ = F^+\n$$\n\n也就是, 如果F'的闭包等于F的闭包, 则称上述的R的分解为 `dependency-preserving decomposition`\n\n---\n\n由此可见，我们判断一个分解是否为依赖保留的分解时，只需要计算对应$F_i$的并集的闭包，然后判断是否与原本的F的闭包相等即可。\n\n- 一个简单的例子：判断上述的分解是否为～\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250528142949091.png?imageSlim\"/>\n\n> 上述的F1还包含了 BC -> A （根据F条件下的属性闭包计算得到）\n\n#### BCNF分解\n\n根据无损分解的定义，满足BCNF范式的分解就满足了**无损分解**的要求。（但是不一定满足依赖保留）\n\n- 一个简单的例子：将上述的例子转换为无损分解的BCNF分解\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250528143530426.png?imageSlim\"/>\n\n注意，判断是否满足BCNF的时候 ,  $F_i$ 也来自于 $F^+$中，参考下面的具体说明：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefinedad580709cdfb24b1ec265bc375880ad5.png?imageSlim\"/>\n\n#### 满足3NF的分解\n\n3NF在BCNF的基础上多了一条，也就是右侧的属性是候选键的部分。因此，我们需要先借助FD来推导候选键有哪些。\n\n标准的分析流程：\n\n* **计算F的一个最小覆盖 F_min。满足三个条件：**\n\n  * **F_min 与 F 是等价的（即它们逻辑蕴含相同的 FD 集合）。**\n  * **F_min 中没有任何冗余的 FD（移除任何一条 FD 都会改变 F_min 的闭包）。**\n  * **F_min 中每个 FD X -> Y 的右边 Y 是单属性的，且没有任何冗余的属性**\n* **根据 F_min 构建关系模式：**\n\n  * 对于 F_min 中的每一个 FD X -> Y，创建一个关系模式 Ri，其属性集为 X ∪ {Y}。\n* **检查是否包含原始关系模式的候选码。检查是否存在某个 Ri 的属性包含了候选键**\n\n  * **如果存在**这样的 Ri，则步骤 2 生成的关系模式集合 {R1, R2, ..., Rm} 就是最终的分解结果。\n  * **如果不存在**这样的 Ri，则需要额外创建一个关系模式 R_{m+1}，其属性集就是 K。将这个 R_{m+1} 加入到分解结果中。\n\n一个简单的例子：将上述的分解转换为满足3NF、无损和依赖保留的分解\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250528145420786.png?imageSlim\"/>\n\n> 此处的题目给出的F已经是最小覆盖的Fc，因此可以直接用于分解\n\n### ER模型练习\n\n#### 根据描述绘制ER图\n\n- 题干将会给出主要的实体集，我们需要根据描述推导**蕴含的关系**\n- 同时需要注意其中的**数据类型**，比如多值和复合等的格式\n\n一个简单的例子：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250528163711386.png?imageSlim\"/>\n\n第一问：绘制对应的ER图\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250528163909905.png?imageSlim\"/>\n\n> 此处的多值属性（电话）由 `{}`包裹。\n\n#### 由ER图得到schema\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined2025-05-28_17-13-08-0.png?imageSlim\"/>\n\n对应的schema：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined2025-05-28_17-12-36-0.png?imageSlim\"/>\n\n> 注意：此处的关系中，1对N的belong没有新建schema\n>\n> 修正： `player`中的属性应该增加 `team_name`作为team的外键\n\n### B+树练习\n\n#### 计算B+树的高度\n\n- 通过**计算不同高度的最值**，来得出最终的高度：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250529192439172.png?imageSlim\"/>\n\n此处计算block并没有作用，实际上是比较索引项 $10^6$\n\n> 关键是记住：\n>\n> - 叶子节点的key范围是 $\\lceil \\frac{n-1}{2} \\rceil $ ~ $(n-1)$\n> - 内部节点的～是 $\\lceil \\frac{n}{2} \\rceil$ ~ $n$ ， 并且根节点的最小值是2\n\n- 我们也可以**通过扇出n以及索引项来直接利用对数计算进行估计**\n\n> 关键是理解左右两侧的含义：\n>\n> - 计算**最小高度**时，我们自底向上地构建全满的B+树，先将k个value按照n-1的规模打包，然后每层n个，因此是\n>\n>   $$\n>   \\lceil \\log_n{\\lceil{k\\ /\\ (n-1)\\rceil}} \\rceil + 1\n>   $$\n> - - 其中左侧是迭代的次数，因此需要+1补充底层的层数；\n> - 计算**最大高度**时，我们自顶向下地构建半满的B+树，并且在一开始将根节点特殊处理——只分配两个child，所以我们从第二层开始计算，需要迭代的次数为 $\\lceil \\log_{n/2}\\frac{K/2}{（n-1）/2} \\rceil$, 同理需要+1得到从第二层到叶子层的高度数，最后+1加入根节点的高度：\n>\n>   $$\n>   \\lfloor \\log_{\\lceil n/2 \\rceil}\\frac{K/2}{\\lceil(n-1)/2\\rceil} \\rfloor + 2  \\approx \\lfloor \\log_{\\lceil n/2 \\rceil}\\frac{K}{\\lceil(n-1)\\rceil} \\rfloor + 2\n>   $$\n\n对于上述的推导，我们可以结合第一种方法来给出第二个证明：\n\n$$\n2\\cdot \\lceil \\frac{n}{2} \\rceil^ {h-2} \\cdot  \\lceil \\frac{n-1}{2} \\rceil \\leq K(h) \\leq n^{h-1} \\cdot (n-1)\n$$\n\n取左侧计算得到：\n\n$$\nh \\leq \\lfloor \\log_{\\lceil n/2 \\rceil}\\frac{K/2}{\\lceil(n-1)/2\\rfloor} \\rceil + 2\n$$\n\n> 为了满足不等式的条件，应当向下取整\n\n    取右侧计算得到：\n\n$$\n\\lceil \\log_n{k/(n-1)} \\rceil + 1 \\leq h\n$$\n\n直接利用给定的高度h计算size：\n\nmax:\n\n$$\nN^{h-1}\\cdot (N-1)\n$$\n\nmin:\n\n$$\n2\\cdot \\lceil\\frac{N}{2}\\rceil ^{h-2} \\cdot \\lceil \\frac{N-1}{2}\\rceil\n$$\n\n然后利用题目给出的索引项个数建立不等式\n\n---\n\n实际上，我们在**估算**的时候可以忽略常数的影响，比如：\n\n$$\n\\text{minimal height} = \\lceil{\\log_N(k)} \\rceil \\\\ \\text{max height} = \\lfloor{\\log_{N/2}(k/2) + 1}\\rfloor\n$$\n\n#### 根据索引项估计节点数量\n\n关键：利用扇出n估计最后一层的节点数量，然后倒推\n\n- 估计最少值时，由$\\lceil \\frac{k}{n-1} \\rceil$计算得到叶子节点的数量N，然后逐步倒推 $\\lceil N/n \\rceil$,直到加数为1到达根节点（过程中的计算结果**向上取整，因为小数部分的节点数无法再纳入其他节点**）\n- 估计最大值时，将上述的除数都换成对应的最小值 $\\lceil (n-1)/2 \\rceil$ 与 $\\lceil n/2 \\rceil$，但是注意**将每次的计算结果向下取整！因为小数部分的节点数表示无法满足最少个数的要求，无法独立构成节点**\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250530105135776.png?imageSlim\"/>\n\n> **注意取整方向的差异**：估计最少向上取整；估计最大向下取整\n>\n> 上面的例题中，max估计的63应为**62**\n\n#### 计算块传输的次数\n\n题目可能给出一个现有的B+树结构以及一系列的访问操作，结合一定的replacer策略，让我们计算块传输的次数，需要注意的是：\n\n- 如果题目明确说了是 ***blocks transferred to buffer***  那么我们就不需要考虑将block写回到disk的次数\n\n一个简单的例子：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250530113134018.png?imageSlim\"/>\n\n> 注意此处内部节点的指针数和key数量\n\n#### 删除操作\n\n一般来说，分裂时默认左侧的节点元素不少于右侧节点包含的元素个数，可能题目会具体说明右侧不少于左侧。\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605160249126.png?imageSlim\"/>\n\n> 重组 合并 发现需要分裂\n\n#### LSM的成本估计\n\n问题：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609141542719.png?imageSlim\"/>\n\n（3）对应的B+树：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609141603785.png?imageSlim\"/>\n\nans：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609141705099.png?imageSlim\"/>\n\n> ***TODO***：（2）是什么意思？\n\n- 题目说maximize size  = 13， 根据 1 + 3 + 9 = 13， 推知最多有3层高\n- 查找某个index，可能的范围分别是主存以及disk中的两棵树，分别计算对应的成本，然后加权求和：\n\n  - 根据上一步计算得到的B+树的高度，如果在主存中，块传输和寻道的成本都是0；如果在第一棵树就是3+3， 在第二棵树就是前面成本的两倍\n  - 因此整体是 (0 + 3 + 6) / 3 = 3（块传输和seek）\n- ***为什么不需要计算从叶子节点到disk的额外寻道和块传输？***\n\n  - 因为题目声明了：***look up an index entry ....***\n  - 这意味着，我们只需要检查某个index是否在叶子节点中包含，所以只需要查找到叶子节点层，不需要根据叶子节点中的指针访问disk中的数据页\n\n### 查询处理练习\n\n#### join的成本估计\n\n> 这里什么都没有哦～\n\n### 查询优化练习\n\n如果题目只是给出了两个关系，让我们计算对应的join成本，我们应该先计算关系各自的block数量，然后选择块较少的作为外层关系\n\n- 这是因为此时对应的块传输次数和寻道次数分别为：\n  $$\n  b_r + \\lceil\\frac{b_r}{M-2}\\rceil \\cdot b_s \\text{ 与 } 2\\cdot\\lceil\\frac{b_r}{M-2}\\rceil\n  $$\n\n如果给出了缓存区的buffer大小$M$，应该考虑使用上述的计算方法，否则认为M = 3带入公式\n\n#### 习题1\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250601191021519.png?imageSlim\"/>\n\n> 具体解答参考：\n>\n> <img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefinedimage-20250506101133270.png?imageSlim\"/>\n>\n> * `where`中包含了join的条件, 因此此处的join属性实际上是 `pno` 和 `cdate`, 计算对应的V.\n>\n>   1. 实际上是一组复合的属性, post有100个, cdate有365个可能的取值. 因此估计对应的值域空间是100*365.\n>   2. `/4`对应了where中最后一个时间的约束, 是整体的1/4.\n> * 1个block的尺寸是4096bytes, 除以每条记录的尺寸, 得到每个block对应的记录数量. 然后据此计算table对应的block数量.\n> * `cno`的bytes是5, 根据题意==> pointer的大小是4bytes, 那么每一对键值对是5+4=9bytes.\n> * 计算 fan-out-rate n = 455，然后根据公式算出高度为2（注意是建立在cno的索引，不同的cno有10000 = K个，据此计算！）\n> * 根据detail的记录数量, 估算每个card对应的记录数量. 然后根据detail的block的容量, 计算每个card对应的记录的block数量.\n>\n>   1. 根据 `V(name,card)` = 5000 我们可以知道, 因为card中一共有10k条记录, 所以每个名字平均对应2个card.\n>   2. 参考\n>\n>   <img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined13b156083431e6cbe7e2beac4e070542.png?imageSlim\"/>\n\n#### 习题2\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250601185929781.png?imageSlim\"/>\n\n（2）：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250601190117419.png?imageSlim\"/>\n\n> 优化的分配是：1块给输出，1块给内关系，剩下都分配给外关系\n\n（3）：***TODO***\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250601190657172.png?imageSlim\"/>\n\n> ***SOLUTION：***\n>\n> K = 5000， n = 60，计算得到高度为 3（答案中max的估计公式有问题，并且应该是向下取整）\n>\n> 注意此处题目说了为root准备了一个buffer，在每次的遍历中原本的h+1 = 4的成本 减去1次，只需要在一开始存入（最后+1）\n>\n> 公式 $b_r\\cdot(t_T+t_S) + n_r \\cdot c$ 中的$n_r$需要除以500，因为$\\sigma$确定了director（一共有500位不同的～），或者我们可以从成本估计的角度解释：\n>\n> $$\n> \\frac{n_{Movie}\\cdot n_{Comment}}{V(title,Movie) \\cdot V(director,Movie)}\n> $$\n\n#### 归并排序练习\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250607150028129.png?imageSlim\"/>\n\n> 此处的buffer容量是针对于run的, 也就是output存在2个block; 可以计算得到 (10-2) /2  = 4 ,每次将4个run归并\n\n***SOLUTION***: 如何计算seek?\n\n分析:\n\n- 此处为每个input row 提供了  **2 buffer block**意味着我们每次seek之后可以直接读取2个blcok而非1个(优化), 从而减少了seek的次数;\n- 利用每次归并4个runs, 得到总共的pass数量\n- 注意题目说最终需要写回到disk\n\n解答: (ljm同学的珍贵手稿)\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined8b4b347f51b2175cfce8ba89bb825dcf.jpg?imageSlim\"/>\n\n> 可以直接运用公式， 此处的$b_b$ = 2, $M $ = 10, $b_r$  = 160:\n>\n> $$\n> t_T = b_r \\cdot (2\\lceil\\log_{\\lfloor\\frac{M}{b_b}-1\\rfloor} (\\frac{b_r}{M})\\rceil+1 \\textcolor{red}{+1}) \\\\ t_S = 2\\cdot \\lceil \\frac{b_r}{M} \\rceil + \\lceil \\frac{b_r}{b_b}\\rceil\\cdot (2\\lceil\\log_{\\lfloor\\frac{M}{b_b}-1\\rfloor} (\\frac{b_r}{M})\\rceil - 1   \\textcolor{red}{+1})\n> $$\n>\n> 其中加红的，表示需要写回disk的额外成本，如果题目没有明确声明，就不需要加入计算\n\n## 并发控制练习\n\n#### 绘制前驱图\n\n可以根据数据项分组，从当前向下查看：\n\n习题和解答：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250601193315102.png?imageSlim\"/>\n\n> 判断是否为无级联回滚的调度也很简单，只需要保证读取在提交之后即可，比如：\n>\n> ```\n> T1           | T2           | T3\n> -------------|--------------|-------------\n> Read(A)      |              |\n> Read(B)      |              |\n> Write(B)     |              |\n> Commit       |              |\n>              | Read(B)      |\n>              | Read(A)      |\n>              | Write(A)     |\n>              | Commit       |\n>                           | Read(A)\n> ```\n>\n> 两阶段锁协议无法解决死锁的问题\n\n#### 等待图与死锁\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609153157189.png?imageSlim\"/>\n\n> 注意题目说了，此时还没有事务释放锁；T3没有指向T1的边，因为此时T1没有对B成功加锁\n\n## 错误恢复练习\n\n#### 脏页表的更新\n\n| PageID | PageLSN | RecLSN |\n| ------ | ------- | ------ |\n\n- 如果有新的页面被更新了，加入脏页表，同时设置对应的PageLSN, RecLSN等于当前的log LSN\n- 只有flush的时候才会清除脏页表中的page entry（我们无法知道什么时候flush到disk，因此一般只增不减）\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602161156079.png?imageSlim\"/>\n\n# 补充\n\n#### 不同的范式\n\n**第一范式**  表中的每个字段都是不可再分的最小数据单位，即字段具有原子性；\n\n- 如果存在多值属性，需要将其分割位多个单独的\n\n**第二范式** 消除非PK属性对于key的部分函数依赖\n\n- `A->B` : B 依赖于A\n- 如果主键是复合的，确保所有非PK属性完全依赖于整个主键，而不是主键的一部分\n\n第三范式 消除非PK对于key的传递函数依赖\n\n- 确保所有非PK属性都直接依赖于PK\n\nBCNF范式 消除PK对于key的部分与传递函数依赖\n\n> TODO：补充与理解\n>\n> SOLUTION：书上没有啊？\n\n#### Columnar Representation\n\n列式存储在数据查询方面表现更好，但是在事务处理方面表现较差\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605153636800.png?imageSlim\"/>\n\n> **hybrid row/column store**： 支持行列两种存储方式的数据库\n>\n> 根据drawback, **Reduced** cost of tuple deletion and update的说法是错误的\n\n#### 线性搜索与index\n\n我们根据比较运算符来判断是否需要使用index：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605161903742.png?imageSlim\"/>\n\n#### 冲突可序列化与2PL\n\n- 遵循2PL的事务调度一定是冲突可序列化的；\n  - 所有在树协议下合法的调度也是冲突可序列化的\n- 但是满足冲突可序列化的事务调度不一定遵循两阶段锁协议\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609134908791.png?imageSlim\"/>\n\n#### 范围查找\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609190041270.png?imageSlim\"/>\n\n#### redo-list\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613211455502.png?imageSlim\"/>\n\n> **abort**的事务也应该被排除在redo-list之外\n\n# 小贴士\n\n- 计算B+树的扇出时，键的大小是按照search-key，也就是PK的大小来计算的，不要将关系中的所有属性相加😇\n- 绘制B+树的示意图时，记得在叶子层补充链表结构\n- 进行结果集大小估计时，发生**在候选键上的等值查找**，结果集大小应当为0或1\n- 给出记录数量、每条记录的size以及block的大小时，应该先计算每个block所包含的记录数量（向下取整），然后计算所需的block数量（向上取整）\n  - 直接利用总数量计算总容量然后计算block数量有误，因为这样导致了不同block之间可能存储了同一条记录（的部分）\n- ACID：\n  - **原子性** (atomicity)\n    - 恢复系统\n  - **一致性** (consistency）\n    - 由ADI和合适的约束条件（触发器等）实现\n  - **隔离性** (isolation)\n    - 并发控制\n  - **持久性** (durability)\n    - 恢复系统\n- relation：行， relationship：表\n- **Access time**： The time it takes from when a read or write request is issued to when data **transfer begins**\n  - = seek + rotation time\n- **steal策略**：checkpoint之前的修改都已经反应到了disk（无论对应的事务是否commit）\n  - 无法确定checkpoint之后发生的修改是否flush到了disk\n- 不能对辅助索引使用稀疏的策略！\n  - 辅助索引对应的search-key一般不是文件排列的顺序；\n  - 如果只是对部分的记录建立辅助索引，那么无法通过相邻的辅助索引来index得到没有建立索引的记录\n  - 只能对primary/clustering key使用稀疏索引\n- 因此我们有两个结论：\n  - **稀疏索引只能用于顺序文件**\n  - **辅助索引只能用于密集索引**\n\n# PPT回顾\n\n- Simple checkpoint **stops all active transactions**, write out all the updated pages, and restart transactions after completing\n\n## 导论与基础\n\n#### 数据库系统的目的\n\n**直接建立在文件系统上的数据库应用导致：**\n\n- Data redundancy（数据冗余）and inconsistency（不一致）\n- Data isolation（数据孤立，数据孤岛）— multiple files and formats\n- Difficulty in accessing data（存取数据困难）\n- Integrity problems（完整性问题）\n- Atomicity problems（原子性问题）\n- Concurrent access anomalies（并发访问异常）\n- Security problems（安全性问题）\n\n#### 数据库的特征\n\ndata persistence（数据持久性）\nconvenience in accessing data（数据访问便利性）\ndata integrity（数据完整性）\nconcurrency control for multiple users（多用户并发控制）\nfailure recovery（故障恢复）\nsecurity control（安全控制）\n\n#### view of data\n\n分为了视图、逻辑和物理模式：\n\n- 视图模式：隐藏了数据类型的细节，也可能出于安全性的考虑而隐藏数据的信息等\n- 逻辑模式：描述数据和关系\n- 物理模式：描述记录如何被存储\n\n> 不同模式之间存在对应的映射 mapping\n\n#### DDL\n\n**数据字典**：DDL compiler generates a set of table templates stored in a **data dictionary**\n\n数据字典包含了元数据：\n\n- schema\n- 完整性约束\n- 主键\n- 参照完整性\n- **权限**\n\n#### DML\n\n两种数据操作语言：\n\n- 过程式 procedural：描述如何获得信息\n- 陈述式 declaretive：只声明需要的数据，但是不说明如何获取\n\n> SQL是流行的、**陈述式**的语言\n\n正因如此，SQL不支持直接通过network来交互，相关的计算和交互需要写在宿主语言 host language 中实现\n\n应用可以通过API或者嵌套的SQL语句来访问数据库（需要宿主语言的支持）\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250610160235137.png?imageSlim\"/>\n\n#### DBA\n\n> 数据库管理员\n\nDBA的指责：范式的定义、权限的管理、日常的维护（根据表现进行微调、定期将数据备份、确保充分的disk空间）\n\n### 数据库系统的历史\n\n#### NoSQL\n\n> not only SQL\n\n提供了一种存储和检索数据的机制，这些数据使用比传统关系数据库**更松散的一致性模型**，以实现横向扩展和更高的可用性。\n\n当数据的性质不需要关系模型时，NoSQL数据库系统在处理**大量数据**（尤其是大数据）时很有用。\n\n常用的NoSQL DBMs：MongoDB，Cassandra, HBase\n\n#### NewSQL\n\n寻求为OLTP工作负载提供与NoSQL系统相同的可扩展性能，同时仍然保持传统数据库系统NewSQL的ACID保证：\n\n## 关系模型\n\n参照完整性：要求参照表中的外键属性一定在被参照表中的至少一个元组中存在\n\nUnion要求：\n\n- 两个关系的属性个数 **arity**相同；\n- 对应列的属性的domain / type 一致\n\n> **TODO**：属性个数一致？\n\n### 连接\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250610162646687.png?imageSlim\"/>\n\n#### Semijoin\n\n半连接：只会将满足连接条件的元组，保留来自指定关系的属性，也就是在theta join的结果取projection\n\n- 比如左半连接，将会得到左侧关系的匹配元组\n\nnull 表示值处于unknown状态 或者 不存在\n\n#### Outer join\n\n外连接：在自然连接的基础上，保留特定关系不匹配的元组\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250610162843165.png?imageSlim\"/>\n\n#### 使用joins组合外连接\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250610163400510.png?imageSlim\"/>\n\n**numeric（3,1）**  总共3位，且小数点后1位\n\n> numeric 是 fixed point number， 与浮点数相区分\n\n**float（n）** 表示至少有n位\n\n**primary** key declaration on an attribute automatically ensures **not null**\n\n> 主键自动具有非空的约束条件\n\n#### unique\n\n使用 `unique`来测试子查询是否含有多个元组\n\n> 当子查询返回的元组个数是**0**或者1时，\n\n简单的例子：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250610170428452.png?imageSlim\"/>\n\n#### with\n\n简单的例子：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250610170548309.png?imageSlim\"/>\n\n> 关键词：`with` 和  `as`\n\n### user-defined types\n\n`type`和 `domain`都是用于自定义的数据类型, 二者十分相似. 区别在于: 后者可以声明约束 `constraints`.\n\n#### Type\n\n- 语法\n\n  ```sql\n  create type type_name\n  as data_type\n  [ (precision, scale) ]\n  [ not null ]\n  [ final | instantiable | abstract ];\n  ```\n\n  > **`final | instantiable | abstract`**:\n  >\n  > 用于指定类型的继承属性。\n  >\n  > - `final`：表示该类型不能被继承。\n  > - `instantiable`：表示可以创建该类型的实例。\n  > - `abstract`：表示该类型是抽象的，不能创建实例。\n  >\n- e.g.\n\n  ```sql\n  create type dollars\n  as numeric(12, 2)\n  final;\n\n  create table department (\n      dept_name varchar(20),\n      building varchar(15),\n      budget dollars\n  );\n  ```\n\n#### Domain\n\n当某些列需要限制其取值范围, 也就是具有一定的约束条件时, 如果每次创建类似的列都重复书写, 工作量较大.\n\n`domain`可以理解为对数据类型的**扩展定义**，它允许我们**创建自定义**的数据类型，并且可以为其指定约束条件。使用 domain 可以确保数据的一致性，\n\n- 基本语法\n\n```sql\nCREATE DOMAIN 域名 数据类型\n[DEFAULT 默认值]\n[CONSTRAINT 约束名称]\n[CHECK (约束条件)];\n```\n\n- e.g.\n\n  - ```sql\n    -- 创建一个表示年龄的域\n    CREATE DOMAIN age_type INTEGER\n    CONSTRAINT valid_age\n    CHECK (VALUE >= 0 AND VALUE <= 150);\n    ```\n\n#### Large-Object Types\n\nMySQL **BLOB datatypes**:\n\n- TinyBlob : **0 ~ 255** bytes.\n- Blob: **0 ~ 64K** bytes.\n- MediumBlob : **0 ~ 16M** bytes.\n- LargeBlob : **0 ~ 4G** bytes.\n\n> 上限以$2^8$的规模递增\n\n候选键CK可以为null，但是主键PK不能为空\n\n> 因此，unique构成组成的属性集合可以称为构成了一组超键，但是不能称为CK，因为CK可以为空\n\n#### assertion\n\ne.g.\n\n```sql\ncreate assertion credits_constaint check (\n    not exists(\n        select *\n        from student S\n        where total_cred <> (\n            select sum(credits)\n            from takes natural join course\n            where takes.ID = S.ID \n                and grade is not null \n                and grade <> 'F'\n        )\n    )\n)\n\n```\n\n使用下面的命令来阻止数据库对SQL的隐式commit：\n\n```bash\nset autocommit = 0\n...\ncommit;\n```\n\n#### 授权\n\n四种权限：增删改查\n\n- insert不允许修改现有的数据；\n- update不允许删除现有的数据\n\n五种修改数据库范式的权限：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250611192659291.png?imageSlim\"/>\n\n> 范式的创建、修改、删除，以及index和view相关的操作\n\n#### Authorization\n\n- **授予权限：**\n\n```sql\ngrant <privilege_list> \non <relation_name or view_name> \nto <user_list>\n```\n\n这里的 `<user_list>`既可以是具体的用户名，也可以是关键字 `PUBLIC`（表示授权给所有用户）。\n\n特别地，当我们需要允许用户具有转授权的能力时，可以在授权语句末尾添加 `WITH GRANT OPTION`子句。\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250611193159249.png?imageSlim\"/>\n\n- **权限回收：**\n\n```sql\nrevoke <privilege_list> \non <relation_name> \nfrom <user_list> [restrict|cascade]\n```\n\n> - 其中 `RESTRICT`表示仅回收**直接授予**的权限，而 `CASCADE`则会同时回收该用户**转授给其他**用户的权限(级\n>\n> * 可以在权限列表中声明 `all` 表示回收所有的特权;\n> * 可以在用户列表声明 `public`表示回收的范围是正常访问的普通成员, 但是不会回收指定的成员的特权\n\n* 如果同一个用户被不同的授权者先后授予了2次**相同**的权限, 那么一次的回收权限之后, ta的权限可能依旧存在.\n* **权限的依赖性**: 如果回收的权限会导致具有依赖关系的权限的失效, 那么涉及的权限**也会被回收**:\n\n**创建外键约束的权限**\n\n```sql\ngrant reference (dept_name) \non department \nto Mariano;\n```\n\n#### 数据库设计的流程\n\n1. requirement specification\n2. conceptual-design： **E-R diagram**\n3. logical-design：logical schema\n4. physical-design： physical schema\n\n设计范式的时候，主要避免两个问题：\n\n- redundancy\n- incompleteness\n\n**entity：** an object that **exists** and is distinguishable from other objects\n\n#### 三元关系与箭头\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612113854619.png?imageSlim\"/>\n\n#### Armstrong's\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612114509016.png?imageSlim\"/>\n\n以及对应的推论：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612114622053.png?imageSlim\"/>\n\n按照BCNF分解：\n\n- 一定是无损分解\n- 但不一定是满足依赖保留的\n\n> 按照3NF分解，可以同时满足上面两条\n\n### MVD\n\n#### 定义\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612115633330.png?imageSlim\"/>\n\n#### 相关定理与4NF\n\n- 任何函数依赖一定也是多值依赖\n- D的闭包D+是逻辑上由D隐含的所有功能和多值依赖项的集合；\n- 如果一个关系范式满足下面的要求，就称为满足4NF，对于函数和多值依赖D，如果其D+中的所有多值依赖都只存在下面两种情况之一；\n  - 平凡的（右侧包含在左侧属性，或者二者的并集是R）\n  - 左侧属性是R的超键\n\n> 4NF类似于普通关系的BCNF\n\n## 物理存储系统\n\n#### 存储级别\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612130754780.png?imageSlim\"/>\n\n访问时间 = 寻道时间 + 旋转延迟\n\n**disk-block访问的优化：**\n\n- buffering\n- prefetch\n- disk-arm-scheduling：使用算法重排block的请求\n- 非易失性写缓存\n  - non-volatile RAM: battery backed up RAM or flash memory\n- log disk 日志磁盘\n\n#### Flash storage\n\nNAND flash\n\n- page-at-a-time read\n- 在erased之前 一个page只能被write一次\n\nSSD：splid state disk\n\n通过flash translation table将逻辑页地址转换成物理页地址\n\n在分槽页中，记录指针不是直接指向记录，而是指向对应entry的header\n\n**文件中记录的组织形式：**\n\n- heap：记录可以存放在文件的任意位置；\n- sequential：根据search-key线性存储记录\n- hashing：利用哈希函数计算search-key，然后存储到对应的block中\n- multitable clustering file organization：将不同关系的记录存放在同一个文件中\n  - 可以为同一个关系的记录之间增加指针，形成pointer chains 指针链\n- table partitioning：将一个关系中的记录分成更小的关系，分别存储\n  - 相当于上一种形式的对立\n- data dictionary storage\n  - 也称为system catalog\n  - 存储metadata\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612133220908.png?imageSlim\"/>\n\n#### Buffer-Replacement Policies\n\n- LRU\n- Toss-immediate strategy：只要一个block的最后一个元组的数据被处理结束，就释放这个block\n- MRU：刚处理结束的block是最可能被替换的对象\n- clock：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250614233253499.png?imageSlim\"/>\n\n#### Column-Oriented Storage\n\n> 也被称为 **columnar representation**\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612134217630.png?imageSlim\"/>\n\n> 列：决策支持；\n>\n> 行：事务处理\n\n**ORC 优化行列存储**\n\n- Apache ORC 和 Apache Parquet\n- 流行处理**big-data**的应用\n\n索引顺序文件：根据主索引排序的有序文件\n\n稠密索引——对建立索引的属性，每一个值都有自己的指针；\n\n- 稀疏索引：只有部分search-key的索引，因此要求记录必须按照搜索键来排序\n\n如果主索引无法存储在memory中，需要将disk上的主索引看成线性文件，建立外层的稀疏索引\n\n#### B+复杂度与占用率\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612140204662.png?imageSlim\"/>\n\n针对写密集型的B+树的策略：\n\n- LSM tree\n- buffer tree\n  - 更少的查询开销\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612141430631.png?imageSlim\"/>\n\nbitmap indices：\n\n- 取属性的值域的大小作为行数\n- 有记录的个数那么多列，如果对应位置的属性匹配，bit就是1\n\n#### index on flash\n\n> todo：ch14-51\n\n> ppt的A4‘有问题，参考书本的定义\n\n如果查询的比较条件是 <= ，就不要使用index，直接使用线性查找\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612174914814.png?imageSlim\"/>\n\n#### merge成本最小化\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612175152335.png?imageSlim\"/>\n\n#### 混合的归并合并\n\n- 使用前提：\n  - 第一个关系是有序的；\n  - 第二个关系在连接属性上具有B+树的index，方便根据属性查找\n- 流程概述：\n  - 顺序扫描第一个关系；\n  - 对于第一个关系中的每一个元组，利用连接属性在第二个属性中使用索引查找得到对应的叶子节点，然后将第一个关系的元组合并到叶子节点中\n  - 此时第二个关系的B+树叶子节点具有实际物理地址和第一个关系的元组，将其按照自身的物理地址排序\n  - 然后，我们得到按照地址排序的叶子节点，可以顺序扫描，然后构造合并结果（用第二个关系的元组来替代物理地址）\n- 上述流程的关键就在于，通过先根据物理地址排序，然后顺序扫描，降低了随机访问导致的大量的寻道时间\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612180300474.png?imageSlim\"/>\n\n**估计交集的成本时：**\n\n- 如果连接属性是其中的外键-主键关系，成本是确定的——引用关系的元组数；\n- 如果是平凡的关系，那么就利用V计算，取最后估计结果较小（V较大的）\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612222936423.png?imageSlim\"/>\n\n外连接的成本估计 = 自然连接的结果+对应属性的元组个数\n\n#### cost-based optimizer\n\n为每个操作选择cheapest的算法（贪心）可能不会产生最优的整体效果，比如：\n\n- 合并连接可能比哈希连接成本更高，但是有序的输出可能为外层的算法提供便利；\n- 嵌套循环可以为流水线提供机会\n\nn个关系连接时，具有 $\\frac{(2n-2)!}{(n-1)!} $种不同的连接顺序\n\n> 我们不需要一次性对所有的关系采取套用上述的公式，可以采取**动态规划**的思想：\n>\n> 从较小的子集开始取用，计算小规模的不同关系的所有连接成本，存储在数组中，在较大规模的计算中直接取用即可\n\n**best join tree**\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612225738211.png?imageSlim\"/>\n\n复杂度：\n\n| 方法                 | 时间复杂度       | 空间复杂度 |\n| -------------------- | ---------------- | ---------- |\n| 动态规划             | $O(3^n)$       | $O(2^n)$ |\n| only left-deep trees | $O(n\\cdot2^n)$ | $O(2^n)$ |\n\n#### 启发式优化\n\n**策略**\n\n- **Perform selection early**(reduces the number of tuples)\n- **Perform projection early**(reduces the number of attributes)\n- **Perform most restrictive selection and join operations** (i.e. with smallest result size) before other similar operations.\n- **Perform left-deep join order**\n\n#### 物化视图的增量更新\n\n对于选择, join可以直接在原来的结果上:\n\n- insert ==> 并集;\n- delete ==> 差\n- 对于avg, max, min等统计属性, 采取之前的中间结果来辅助实现增量更新.\n- 方差也可以用增量更新来维护.\n\n$$\n\\mathrm{Var}(X)=\\frac{\\sum x_i^2}{n}-\\left(\\frac{\\sum x_i}{n}\\right)^2\n$$\n\n因此, 只需要维护各个元素的和, 平方和 以及计数 `n`, 就可以实现快速的增量更新.\n\n## 并发控制\n\n#### 2PL\n\n- 两阶段锁协议 2PL 可以保证冲突可序列化\n\n  - 将事务的执行顺序按照lock points排序\n  - 但是**冲突可序列化的调度不一定满足2PL协议**，也就是说2PL不是冲突可序列化的必要条件\n  - 不保证排除死锁\n- 严格2PL：事务必须保持自身的exclusive locks直到其commits / aborts\n\n  - 确保可恢复性\n  - 避免了级联回滚\n- 强2PL（rigorous）：事务必须保持自身的所有lock，直到其commits / aborts\n\n  - 可以按照事务提交的顺序来构建序列\n\n#### Lock Conversions\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613101316974.png?imageSlim\"/>\n\n#### Lock table\n\n> usually implemented as an **in-memory hash table** indexed on the **name of the data item** being locked\n\n- 新的请求添加到队列的末尾，并且检查是否与先前的lock相同，如果相同就grant\n  - 请求删除的时候同时unlock 对应的requests，并检查pending的lock是否可以被granted\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613101931029.png?imageSlim\"/>\n\n#### Tree Protocol\n\n是图协议的一种，适用于对数据访问的次序具有偏序结构理解的情况\n\n> 中译中：了解访问特定的数据项之前必须经过的中间节点\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613105351613.png?imageSlim\"/>\n\n特点：\n\n- 树协议可以保证冲突可序列化并**排除死锁 (deadlock-free)**\n  - 避免了回滚\n- 缺点：\n  - 不能保证无级联和可恢复性\n  - 可能 l**ock more data items than needed**， 从而降低了并行性，同时提高了额外的等待时间\n\nSchedules not possible under two-phase locking are possible under tree protocol, and **vice versa**.\n\n#### Granularity Hierarchy\n\n从高到低，以整个数据库系统为根节点，分别划分为不同大小的区域，直到叶子节点包含单个记录的信息\n\n为了在高层级快速判断底层节点是否被加了 S / X锁引入 **intention locks：**\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613111106318.png?imageSlim\"/>\n\n> 如果直接加X-lock，表示可以直接修改内部的节点\n\n对应的**相容矩阵**：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613111445682.png?imageSlim\"/>\n\n> X与任意锁都不相容；除了IS和X，都只跟自己相容；IS与X之外的锁相容\n\n对于插入和删除记录，如果只是在对应的记录上加锁，可能导致幽灵现象和死锁问题\n\n- 可以直接在表层级加锁，但是降低了并行性\n- 可以引入谓词锁，来准确判断影响的记录范围，但是在实现上比较困难\n- 另一种更好的解决方法是：**Index Locking Protocol**\n\n#### Index Locking Protocol\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613113138037.png?imageSlim\"/>\n\n> 可以避免幽灵现象的发生\n\n一个例子：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613113215006.png?imageSlim\"/>\n\n> 注意范围查询，导致10所在的叶子节点也具有了S-lock\n\n上述的策略会将entire leaf给lock，为了提高并行性，我们可以针对某个key来lock，同时为了确保可以发现潜在的幽灵现象，需要引入一定的限制条件，这就是：**Next-Key Locking**\n\n#### Next-Key Locking\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613114355171.png?imageSlim\"/>\n\n# TODO\n\n#### B+-height\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250530114132354.png?imageSlim\"/>\n\n**SOLUTION**：\n\n此处的height确实是从1开始的，比如计算max时前面的4个4是n, 最后一个是叶子层的叶子块内部的n-1，所以高度为h, 计算size时存在的因数个数也是h\n","source":"_posts/课程笔记/数据库复习.md","raw":"---\ntitle: 数据库系统复习\ndate: 2025-06-21 19:03:07\ntags:\n- sql\n- CS课程\ncategories: \n- 课程笔记\nexcerpt: 复习阶段整理的db笔记，对核心知识进行了梳理，参考了范围比较广的复习资料与习题，最后针对没有主观题的考试形式对课程ppt的边角点进行了知识梳理\nthumbnail: https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250625145641439.png?imageSlim\n---\n# 知识点梳理\n\n### DML\n\n- `select`得到的结果通过 `distinct`关键字来去重\n- `union all`可以保留并集中的重复元组\n- 注意 `case`与 `update`组合使用时，分段更新\n\n#### 聚合函数&NULL\n\n除了 `count`之外的聚合函数, 会忽略集合属性上有 `null`的元组, 而 `count`则会计算包括空值在内的元组个数.\n\n**Special case**: 如果所有的聚合属性都是空值:\n\n- `count`: 返回0;\n- 其他聚合函数: 返回 **null**.\n\n#### lateral\n\n外层的查询可以直接使用内部查询的关系名, 但是内部的子查询无法向外直接使用其重命名的关系名.\n\n然而, 如果在子查询的前面声明关键字 `lateral`则可以实现:\n\n```sql\nSELECT name, salary, avg_salary\nFROM instructor I1,\n     LATERAL (SELECT avg(salary) AS avg_salary\n              FROM instructor I2\n              WHERE I2.dept_name = I1.dept_name) AS AvgDeptSalary;\n```\n\n#### 嵌套查询顺序\n\nfrom ; where; group by ; having; select; distinct; order by\n\n#### 映射基数约束\n\n采取 `l...h`的形式来表示复杂的约束关系：\n\n* `0..*` 表示最少参与0次, 最多没有限制, 可见 ..对多的关系, 部分参与;\n* `1..1`表示恰好参与1次, 表示一对..的关系, **完全参与**\n\n比如下面的实际上是***many-to-one***的关系：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefinedimage-20250329153241821.png?imageSlim\"/>\n\n### ER模型和范式\n\n#### 从ER模型得到schema\n\n从ER模型得到schema的核心规则：\n\n- **关系类型**：\n  - 1:1 ：在参与关系的实体类型中，选择一个schema增加一个FK，指向另一个实体对应的schema的PK，**不需要额外建模**；\n  - 1:N: 在多端对应的schema中，增加1端对应的PK作为FK。此时，关系也蕴含在这个外键的约束关系中，**不需要额外建模**；\n  - M:N: 此时，我们需要**将关系建模为一个新的schema**——将参与关系的实体类型的主键作为外键，然后加上关系本身的属性，组成为schema的属性\n- 弱实体类型：强实体的PK + 弱实体自身的分辨符 = 对应schema的主键，然后补充弱实体的剩余属性\n- 多值属性：需要为多值属性构建一个新的schema\n  - 将对应的实体的PK和多值属性自身作为schema的PK\n\n#### 属性集闭包\n\n注意，属性的闭包包括自身的属性集\n\n**作用：**\n\n- 判断是否为主键：如果闭包包含了关系中的所有属性，那么就是～\n- 验证函数依赖是否成立\n- 计算整个关系模式的闭包$F ^+$: 计算每一个属性的闭包\n\n#### 正则覆盖\n\n- 目标：简化给出的函数依赖\n- 尝试化简属性A时，如果去除的是 $\\alpha \\rightarrow \\beta$中的：\n  - 左侧：判断去除之后左侧剩余属性的闭包是否包含了右侧属性\n  - 右侧：判断此时的左侧属性闭包中是否含有去除的属性\n- 我们可以进一步用公式来讲解上述的分析：\n  - 判断$\\alpha$中的属性A是否多余：\n    - 计算$(\\alpha-A)^+$是否包含了$\\beta$\n  - 判断$\\beta$中的属性A是否多余：\n    - 根据 $(F-\\{\\alpha \\rightarrow \\beta\\}\\  \\cup \\ \\{\\alpha \\rightarrow (\\beta - A)\\})$ 的依赖关系，计算 $\\alpha^+$\n    - 如果对应的属性闭包包括了A，那么就可以去除\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250528134923287.png?imageSlim\"/>\n\n一个简单的例子来说明如何推导：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250528135223937.png?imageSlim\"/>\n\n**NOTICE：**\n\n- 实际情况下，可能比较难推导，需要更多的经验和灵感）\n- 虽然我们要求左侧的属性唯一，但是在推导的过程中，可能尝试将类似于 $A \\rightarrow BC$先拆解为两条，然后判断其中的某条属性是否多余；最后将左侧属性合并\n\n#### 范式的验证\n\n- BCNF：\n  - 如果F中没有违背BCNF原则的函数依赖，那么F的闭包中也没有\n- 3NF：\n  - 注意，属性A可以来自不同的CK集合\n  - 只需要对已有的FD进行判断\n\n### 存储结构\n\n> 似乎不是经常考，了解概念\n\n## 文件结构\n\n- 面向列的存储可以在现代CPU中实现向量处理\n\n#### 定长与变长的记录\n\n- 如果是**定长记录**，为了避免删除记录时调整结构的较大时间成本，可以为维护一个**空表**，将删除之后的空间通过链表的方式连接，之后插入的时候，首先插入到空表中，如果没有空余的位置，再插入到文件的末尾\n- 如果记录是变长的，在定长和变长之间存在一个**空位图：**\n\n  - 位数 = 变长记录的个数\n  - 某个记录为空时 ==> 对应的bit为 1\n  - 定长的信息包含：\n\n    - 变长属性的定长属性信息（开始的偏移量+长度）\n    - 定长属性的值\n\n  <img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250529152608718.png?imageSlim\"/>\n\n### B+树相关\n\n#### 索引的block大小\n\n假设指针和search-key的大小分别是a，b 那么block的扇出n ( ***fan-out rate*** )就是：\n\n$$\nn = \\lfloor \\frac{B-a}{a+b} \\rfloor + 1\n$$\n\n> 注意最左侧存在一个单独的指针，然后是一系列的键值对；\n>\n> 扇出也就是B+树的阶数\n\n#### children的关系\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250529182824693.png?imageSlim\"/>\n\n> 此处的 `n`就是之前计算得到的扇出；\n>\n> 对于内部节点，最小值的估计是**孩子而非关键字**的个数！关键字key的个数是孩子数（指针）- 1\n>\n> 注意叶子节点根据索引值指向对应物理地址的记录，所以是n-1个孩子\n>\n> 叶子节点的最右侧的指针用于串联叶子节点的链表\n\n非叶子节点类似于多级、稀疏索引。\n\n#### 高度的估计\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250529184340241.png?imageSlim\"/>\n\n> 高度最大估计如上所示；当叶子节点都满时，有最小高度 $ h = \\lceil \\log_n(K) \\rceil)$.\n\n#### 操作相关\n\n**删除：**\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250529185626454.png?imageSlim\"/>\n\n#### 计算高度\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250529192439172.png?imageSlim\"/>\n\n> 根节点最少有2个子节点\n\n- B+树的范围查找：\n\n  - 如果是查找 <= x, 直接从第一个叶子节点开始按照链表遍历；\n  - 反之，从根节点开始寻找第一个满足条件的叶子节点，然后遍历到底\n- \n- 如果B+树的索引是字符串等变长的，可以采取前缀的方式来压缩索引项的大小，从而增大扇出n\n\n#### bottom-up\n\n1. 如果记录已经存在，可以从叶子节点开始自底向上构造（首先排序）\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250529200732757.png?imageSlim\"/>\n\n> 这种技术也用在了**LSM**的的构建上--当底层的L满了的时候，将其融合并自底向上构建\n\n2. 如果要批量插入，也可以先排序然后一起插入，可以有效减少访问的block数量\n\n***TODO***：分析成本的估计\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250529201122223.png?imageSlim\"/>\n\n### 其他结构\n\n#### LSM\n\n- 将对数据的修改增量保存在内存中，达到一定的限制后批量写入磁盘，提升了写性能；\n- 但是因此降低了一定的读性能\n\n#### Buffer Tree\n\n为节点增加内部的缓冲区:\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250531114954357.png?imageSlim\"/>\n\n- 插入: 如果缓冲区有空闲, 优先插入缓冲区中;\n  - 如果发生了节点的分裂, 注意同时管理缓冲区的转移;\n  - 缓冲区内部也是有序的.\n- 查询: 需要在缓冲区中进一步查找\n\n#### Bitmap\n\n将**Record**标号, 然后为**每个属性**都建立一个 bitmap, `0`表示对应的位置不是当前的属性, `1` 表示符合当前属性.\n\n- bitmap使得两个属性通过 `and` 操作就找到对应的record.\n\n<img src=\"https://note.noughtq.top/system/db/images/lec10/20.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n### Index\n\n- 顺序索引分为了稠密和稀疏两类，后者只能用于顺序文件，因为只有部分的search-key存在索引\n  - 如果搜索键没有重复的，那么稠密的顺序索引就包含了所有的搜索键的index；否则对于每一个搜索键，我们只需要一个开始的index，然后可以线性搜索得到\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250529165232766.png?imageSlim\"/>\n\n#### 辅助索引\n\n> i.e. secondary key， 与primary-key（顺序）有所区别\n\n当数据文件中的记录顺序和索引文件中的索引项的顺序不一致时：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250529165410618.png?imageSlim\"/>\n\n> 可以看到，辅助索引首先指向了一个bucket，bucket中存在二级索引\n\n#### 散列索引\n\n选择索引，利用哈希函数计算K到B的映射，哈希值相同的索引项放在了一个bucket中\n\n- ***overflow chaining***：如果某个bucket内部的项太多了，系统将分配一个～，用于存储额外的索引项（bucket本身也是一个链表）\n- 为了减少上述桶溢出发生的概率，我们可以如此设置桶的数量$n_b$：\n\n  $$\n  n_b = \\frac{n_r}{f_r} \\cdot (1+d)\n  $$\n\n  > 其中，分子和分母分别表示记录总数和每个桶的记录数量；d称为***fudge factor***，通常设置为0.2\n  >\n\n## Query Processing\n\n- 整体思想: 先选择、再投影、最后连接和输出\n\n成本估计：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250607230145795.png?imageSlim\"/>\n\n### Join-cost\n\n#### 嵌套循环\n\n| join方式          | 块传输次数             | 寻道次数       | 备注                                                            |\n| ----------------- | ---------------------- | -------------- | --------------------------------------------------------------- |\n| Nested-Loop       | $b_r + n_r\\cdot b_s$ | $b_r + n_r$  |                                                                 |\n| Block Nested-Loop | $b_r + b_r\\cdot b_s$ | $2\\cdot b_r$ | s的block顺序存储，对于每个$b_r$寻道s的block起点，然后顺序读取 |\n| Index Nested-Loop | TODO                   |                | 条件：inner在连接属性上具有index                                |\n\n> 在最好的情况下，嵌套和块嵌套的循环，内存可以装下两个关系，因此块传输次数为block的个数，寻道次数均为2\n\n由于上述的计算是基于每次都读取外层关系1个block，我们可以继续改进上述的方法，让其每次读取M-2个block，留下2个block分别用于读取s的block和输出所用的空间\n\n> 其中 $M$ 为内存大小的block块数；每次读取r中一连串的block之后，读取s的block，并将s的record逐个与前者的记录比较\n\n此时，块嵌套的块传输次数和寻道次数分别为：\n\n$$\nb_r + \\lceil\\frac{b_r}{M-2}\\rceil \\cdot b_s \\text{ 与 } 2\\cdot\\lceil\\frac{b_r}{M-2}\\rceil\n$$\n\n#### merge join\n\n- 要求关系按照连接属性有序排列，否则优先sort\n- \n\n### Hash join\n\n- 利用哈希函数，将连接属性具有相同哈希值的元组放在一个集合/划分\n- 对两个关系分别计算哈希值并划分后，我们只需要考虑对应划分对$s_i$,$r_i$\n- 之后，我们在上述的每个划分对，使用索引嵌套循环连接：\n  - 为inner关系***build***一个哈希索引，从outer关系中***probe***查找对应的元组\n  - 分别称r，s为探测输入和构建输入\n  - 构建哈希索引的哈希函数必须和第一步的哈希函数不同\n- 如果构建关系包含$b_s$个块，每个划分的大小不超过$M$，则划分的数量至少为$\\lceil \\frac{b_s}{M}\\rceil$\n\n实际进行划分之后，我们需要将较小的关系作为 **build** 所用的关系;\n\n哈希函数的值域决定了分区n的大小, 为了使得si均能存放在mem中,要求 :\n\n$$\nn_h \\geq \\lceil b_s / M \\rceil \\cdot f\n$$\n\n> 其中的 $f$ 被称为修正系数, 一般设置为 1. 2\n\n#### 递归划分\n\n> **Recursive partitioning**  required if number of partitions n is greater than number of pages *M* of memory.\n\n不需要递归划分的条件:\n\n$$\nM > n_h + 1 \\\\M > b_s / M + 1 \\\\ \\text{近似于} M > \\sqrt{b_s}\n$$\n\n#### 成本分析\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609150516608.png?imageSlim\"/>\n\n> 为输入和输出分配缓冲块个数的提示：\n>\n> ***two buffer pages are available for each partition during the hash partitioning phase.***\n>\n> 此时的$b_b$ = 2\n\n### 外排序\n\ncost分析:\n\n- 块传输\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250607155431473.png?imageSlim\"/>\n\n- seek\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250607155511090.png?imageSlim\"/>\n\n### 物化与流水线\n\n- **物化**：按照顺序对表达式求值，将中间的计算结果物化为临时关系，并且需要将临时关系表写入disk\n\n<img src=\"https://note.noughtq.top/system/db/images/lec11/7.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n- **流水线**：同时对多个表达时求值，将表达式的运算结果立即传入需要的表达式，无需将中间结果写入disk\n  - **生产驱动型流水线.**\n    - 从下往上主动生成元组.\n  - **需求驱动型流水线.**\n    - 从最上层的输出, 递归调用下层的函数 `next()`, 直到最底层为 `close()`\n    - 向流水线顶端的操作请求元组\n\n## Query Optimization\n\n主要参考ppt的习题\n\n## 并发控制\n\n- 可串行化调度\n- **前驱图（优先图）**\n  - 注意绘制需要根据给出的schedule，从上往下看是否存在冲突\n  - 将事务作为节点, 存在冲突的事务之间建立边,  $T_i\\rightarrow T_j$表示冲突之中，前者的操作先发生，后者的操作后发生；\n- ***recoverable schedule*** 可恢复调度\n  - 依赖于T1写入的数据的T2，需要在前者commit之后，后者才能**commit**\n- ***Cascadeless Schedules*** 无级联调度\n  - 每一对存在冲突的事务, 前者事务的提交先于后者数据对的读取\n  - 无级联调度都是可恢复的.\n- **等待图**\n  - 边 $T_i\\rightarrow T_j$ 表示事务i正在等待后者释放有关数据的锁； 当后者释放这个锁时，将这条边删除\n  - 当且仅当等待图中存在环时，系统中就**出现了死锁**\n\n#### 两阶段锁协议\n\n- 无法保证解决死锁的问题\n  - 但是按照排序关系来获得锁可以避免产生死锁\n  - Two phase locking can not avoid deadlock.To acquire locks **in partial order** of the data can avoid deadlock.\n- **strict two-phase locking**\n  - 每个事务保持exclusive锁直到结束；\n  - 可以解决级联回滚和不可恢复的问题\n- 根据～得到的调度**一定是冲突可序列化**的，这意味着如果前驱图存在环，一定不是由～得到的调度\n  - 按照所有事务的**lock point** （当前事务得到最后一个lock的时间点）排序，即可得到串行化顺序\n\n#### 避免死锁\n\n发生冲突的锁请求之间：\n\n- `wait-die`： 如果后者的时间戳更小，i.e. 更早开始 `begin`, 那么后者可以等待，否则回滚后者的操作；\n- `wound-wait`:反之，后者 `begin`开始得较晚时，可以等待，否则回滚 `<u>`前者 `</u>`（前者被后者击伤）\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250515154634003.png?imageSlim\"/>\n\n## 错误恢复\n\n### 普通恢复\n\n#### 简单流程\n\n- redo：\n  - 正向遍历，重做；\n  - 如果碰到了新的事务就将其加入undo-list\n  - 如果碰到了事务的commit/abort，就将其从undo-list中移除\n- undo：\n  - 从末尾开始逆向遍历\n  - undo的时候产生undo日志（注意区分逻辑操作）\n  - 碰到了undo-list中的事务才undo，并且碰到了对应的start写入对应的abort日志\n  - 所有的undo事务都写入了abort后结束\n\n#### checkpoint\n\n- 普通的checkpoint：在写入checkpoint的log之前，此前的活跃事务停止更新，直到将buffer里的修改全部flush到disk，才写入checkpoint的log表示更新完毕，然后继续执行\n  - 这样可以确保，在checkpoint之前commit的事务，其更新一定反应到了disk当中；\n- fuzzy-checkpoint：\n  - 为了避免上述的阻塞而设计，允许写入checkpoint的log之后，可以继续执行日志，同时将先前的修改写到disk\n  - 但是这样伴随了一个问题，可能有的修改正在写入就发生了crash，我们需要一个机制确保处理这种情况；\n- ***last-checkpoint***：将最后一个完成的检查点记录在日志中的位置存储在硬盘上的一个固定位置，即最后检查点。系统在写入检查点记录时不会更新此信息。相反，在写入检查点记录之前，它创建一个包含所有已修改缓存块的列表。只有当列表中的所有缓冲区块都已输出到磁盘后，才会更新最后检查点信息。\n\n#### undo产生的日志\n\n在逻辑操作中，如果逻辑操作已经完成和逻辑操作未完成，面临回滚时的日志类型不同：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250530190917480.png?imageSlim\"/>\n\n> **为什么需要operation-abort的信号？**\n>\n> 让operation-abort的信号在undo阶段被发现时，直接跳到对应的begin，避免已经在redo期间执行的操作被再次执行\n\n### Aries恢复\n\n- 使用LSN标注日志\n- 使用dirty page table避免不必要的redo\n- RecLSN：**第一次**变成脏页对应的LSN\n\n#### 流程\n\n- 相比之前的恢复算法，多了第一步的分析阶段：\n  - 分析dirty table，取RecLSN的最小值作为**Redo**的起点（如果不存在就取checkpoint的LSN）\n  - 分析阶段本身是从检查点开始正向遍历的\n  - 分析阶段同样需要更新dirty table和活跃事务表\n  - **分析的时候，只会分析log，但是不会读取数据文件page，也就是不会读取page**\n- redo的阶段与普通恢复整体相同：\n  - 发现更新记录的时候，如果不在脏页表中的page之列，or  更新记录的LSN小于页面的RecLSN，就忽略；\n    - 否则，我们需要读取page，然后再比较pageLSN与log LSN；\n    - 如果log LSN 大于 页面的pageLSN就redo\n- undo阶段\n  - 为了撤销undo-list中的事务，利用分析阶段得到的lastLSN(选择**最大值**作为起点)，开始反向遍历重做\n  - 重做的时候也会生成仅重做日志的CLR，但是不同之处在于：\n    - ARIES算法的CLR还会在字段**UndoNextLSN**中记录该事务当前LSN的**prevLSN**\n    - 这是为了应对undo过程中crash情景：可以利用CLR知道下一条undo的LSN后，继续undo\n  - 实际上做题的时候，往往不会呈现上述的 `xxLSN`,而是类似于普通恢复的仅重做日志，类似于：\n    ```\n    <T4, 102.1, 62>\n    <T4, abort>\n    ```\n  - 符合下列条件的记录可以跳过：\n    - ***TODO***\n\n#### 简单的例子\n\n演示了xxLSN的作用：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250526233737314.png?imageSlim\"/>\n\n> **TODO**：教材中声明了脏页表储存了pageLSN，如果DirtyPageTable已经包含了pageLSN，为什么还要从disk中读取page再比较pageLSN和当前log LSN？\n>\n> 因此在redo阶段，需要首先比较当前LSN与RecLSN，如果可能需要修改，就读取对应page，然后比较其pageLSN与当前LSN的大小\n\n#### 课本的例子\n\n演示了算法的具体流程：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined1748309403783.png?imageSlim\"/>\n\nCLR不需要写abort\n\n在事务commit的时候，不一定需要将数据都flush到内存中\n\n- 事务总是可以写log\n- flush的时候，先将日志flush到内存中，然后将数据flush到内存中\n\nundo产生日志的时候，也是一条一条产生仅重做日志的，不会从末端沿着prevLSN直接回溯到最开始）比如：\n\n```\n<T3, 8002.1, 66>\n<T3, 8002.1, 55>\n<T3, abort>\n```\n\n# 习题\n\n### SQL练习\n\n- 使用聚合函数时不一定需要 `group by`；\n- 注意符号：不等于 `<>`\n\n#### 练习1\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250527153731212.png?imageSlim\"/>\n\n主要关注第四题：\n\n```sql\nselect title from movie\nexcept\nselect title from movie\nwhere exists(select *\n\tfrom comment A, comment B\n\twhere A.title = movie.title and A.user_name = B.user_name\n\tand B.titel = 'the avenger'\n\tand A.grade <= B.grade\n)\n```\n\n> - 题目的意思是：找出给xx打分的都比给 `the avenger`打分高的xx（电影title）\n> - 考虑使用 `except`，涉及到单表之间的比较，因此将2个comment作笛卡尔积\n> - 利用title确保与外表相连接；利用user_name确保2个内表讨论的是同一个用户的打分\n\n#### 练习2\n\n题目：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250527155632148.png?imageSlim\"/>\n\n第一问：将给出的SQL查询转换为不包含嵌套子查询的版本\n\n```sql\nSELECT DISTINCT C.cno, C.name -- 使用 DISTINCT 是为了避免同一张 CS 卡因有多笔交易符合条件而被多次列出\nFROM card AS C\nJOIN detail AS D1 ON C.cno = D1.cno -- 将 card 与其消费记录 D1 连接\nJOIN detail AS D2 ON D1.cdate = D2.cdate AND D1.pno = D2.pno -- 将 D1 的消费记录与 D2 的消费记录连接，条件是时间和地点相同\nWHERE C.depart = 'CS' -- 过滤 CS 部门的卡\n  AND D2.cno = 'c0002'; -- 过滤 D2，使其只包含卡 'c0002' 的消费记录\n```\n\n第二问：转换为代数表达式：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250527160740028.png?imageSlim\"/>\n\n第三问：编写SQL语句，找出2018年仅在一个校园中使用的卡片\n\n```sql\nselect cno\nfrom detail natural join pos\nwhere year(detail.cdate) = 2018\ngroup by cno\nhaving count(distinct campus) = 1;\n```\n\n- 注意 `detail`中就有cno的信息，因此不需要和card表join\n\n第四问：写一个SQL语句，找出2018年“紫金港”校园中具有最大卡消费总量的pos。\n\n- 使用 `having`子句的版本\n\n  ```sql\n  select pno\n  from detail natural join pos\n  where pos.campus=’紫金港’ and year（detail.cdate）=2018\n  group by pno\n  having sum(amount) >= all ( -- 注意这里的比较\n      select sum(amount)\n      from detail natural join pos\n      where pos.campus='紫金港' and year(detail.cdate) = 2018\n      group by pno\n  )\n  ```\n- 也可以搭配 `order`和 `limit 1`直接筛选：\n\n  ```sql\n  select pno\n  from detail natural join pos\n  where pos.campus=’紫金港’ and year（detail.cdate）=2018\n  group by pno\n  order by sum(amount) desc -- 注意这里是 sum(amount)\n  limit 1\n  ```\n\n  > 这种操作带来的差异是，如果存在多个相同的最大值，还是只会选择一个，所以比起使用嵌套子查询还是有劣势\n  >\n\n第五问：编写一系列SQL语句来完成以下事务：卡片“c0002”在pos“p001”处消费20，时间为2018-07-02 08:08:08\n\n```sql\nupdate card set \nbalance = balance - 20\nwhere cno = 'c0002';\n\ninsert into detail(cno,pno,cdate,ctime,amount)\n\tvalues('c0002','p001','2018-07-02','08:08:08',20);\n\ncommit;\n```\n\n- 注意需要同步更新card；\n- 需要commit\n\n### 范式相关\n\n#### 无损分解\n\n- 课本的定义：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250528142319738.png?imageSlim\"/>\n\n> 具体的验证，可以采取计算属性闭包的方式来推导\n\n- 一个简单的例子：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250528142533000.png?imageSlim\"/>\n\n> 如果分解的结果不是两个，而是多个关系，并且给出了分解的过程（可能是自己推的），那么可以每次对中间结果判断一下是否满足无损分解，如果都满足就认为整体是无损分解的；\n\n#### dependency-preserving\n\n回顾课本的定义：\n\n- the set $F_i$ of all functional dependencies in $F^+$ that include only attributes of Ri\n- 也即是将R进行分解为Ri之后, Fi是F的闭包中存在于Ri相关属性的部分.\n- 因此, **Fi不一定是F的部分**.\n\n我们定义 上述的 $F_i$ 的并集为 F', 如果满足:\n\n$$\nF'^+ = F^+\n$$\n\n也就是, 如果F'的闭包等于F的闭包, 则称上述的R的分解为 `dependency-preserving decomposition`\n\n---\n\n由此可见，我们判断一个分解是否为依赖保留的分解时，只需要计算对应$F_i$的并集的闭包，然后判断是否与原本的F的闭包相等即可。\n\n- 一个简单的例子：判断上述的分解是否为～\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250528142949091.png?imageSlim\"/>\n\n> 上述的F1还包含了 BC -> A （根据F条件下的属性闭包计算得到）\n\n#### BCNF分解\n\n根据无损分解的定义，满足BCNF范式的分解就满足了**无损分解**的要求。（但是不一定满足依赖保留）\n\n- 一个简单的例子：将上述的例子转换为无损分解的BCNF分解\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250528143530426.png?imageSlim\"/>\n\n注意，判断是否满足BCNF的时候 ,  $F_i$ 也来自于 $F^+$中，参考下面的具体说明：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefinedad580709cdfb24b1ec265bc375880ad5.png?imageSlim\"/>\n\n#### 满足3NF的分解\n\n3NF在BCNF的基础上多了一条，也就是右侧的属性是候选键的部分。因此，我们需要先借助FD来推导候选键有哪些。\n\n标准的分析流程：\n\n* **计算F的一个最小覆盖 F_min。满足三个条件：**\n\n  * **F_min 与 F 是等价的（即它们逻辑蕴含相同的 FD 集合）。**\n  * **F_min 中没有任何冗余的 FD（移除任何一条 FD 都会改变 F_min 的闭包）。**\n  * **F_min 中每个 FD X -> Y 的右边 Y 是单属性的，且没有任何冗余的属性**\n* **根据 F_min 构建关系模式：**\n\n  * 对于 F_min 中的每一个 FD X -> Y，创建一个关系模式 Ri，其属性集为 X ∪ {Y}。\n* **检查是否包含原始关系模式的候选码。检查是否存在某个 Ri 的属性包含了候选键**\n\n  * **如果存在**这样的 Ri，则步骤 2 生成的关系模式集合 {R1, R2, ..., Rm} 就是最终的分解结果。\n  * **如果不存在**这样的 Ri，则需要额外创建一个关系模式 R_{m+1}，其属性集就是 K。将这个 R_{m+1} 加入到分解结果中。\n\n一个简单的例子：将上述的分解转换为满足3NF、无损和依赖保留的分解\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250528145420786.png?imageSlim\"/>\n\n> 此处的题目给出的F已经是最小覆盖的Fc，因此可以直接用于分解\n\n### ER模型练习\n\n#### 根据描述绘制ER图\n\n- 题干将会给出主要的实体集，我们需要根据描述推导**蕴含的关系**\n- 同时需要注意其中的**数据类型**，比如多值和复合等的格式\n\n一个简单的例子：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250528163711386.png?imageSlim\"/>\n\n第一问：绘制对应的ER图\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250528163909905.png?imageSlim\"/>\n\n> 此处的多值属性（电话）由 `{}`包裹。\n\n#### 由ER图得到schema\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined2025-05-28_17-13-08-0.png?imageSlim\"/>\n\n对应的schema：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined2025-05-28_17-12-36-0.png?imageSlim\"/>\n\n> 注意：此处的关系中，1对N的belong没有新建schema\n>\n> 修正： `player`中的属性应该增加 `team_name`作为team的外键\n\n### B+树练习\n\n#### 计算B+树的高度\n\n- 通过**计算不同高度的最值**，来得出最终的高度：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250529192439172.png?imageSlim\"/>\n\n此处计算block并没有作用，实际上是比较索引项 $10^6$\n\n> 关键是记住：\n>\n> - 叶子节点的key范围是 $\\lceil \\frac{n-1}{2} \\rceil $ ~ $(n-1)$\n> - 内部节点的～是 $\\lceil \\frac{n}{2} \\rceil$ ~ $n$ ， 并且根节点的最小值是2\n\n- 我们也可以**通过扇出n以及索引项来直接利用对数计算进行估计**\n\n> 关键是理解左右两侧的含义：\n>\n> - 计算**最小高度**时，我们自底向上地构建全满的B+树，先将k个value按照n-1的规模打包，然后每层n个，因此是\n>\n>   $$\n>   \\lceil \\log_n{\\lceil{k\\ /\\ (n-1)\\rceil}} \\rceil + 1\n>   $$\n> - - 其中左侧是迭代的次数，因此需要+1补充底层的层数；\n> - 计算**最大高度**时，我们自顶向下地构建半满的B+树，并且在一开始将根节点特殊处理——只分配两个child，所以我们从第二层开始计算，需要迭代的次数为 $\\lceil \\log_{n/2}\\frac{K/2}{（n-1）/2} \\rceil$, 同理需要+1得到从第二层到叶子层的高度数，最后+1加入根节点的高度：\n>\n>   $$\n>   \\lfloor \\log_{\\lceil n/2 \\rceil}\\frac{K/2}{\\lceil(n-1)/2\\rceil} \\rfloor + 2  \\approx \\lfloor \\log_{\\lceil n/2 \\rceil}\\frac{K}{\\lceil(n-1)\\rceil} \\rfloor + 2\n>   $$\n\n对于上述的推导，我们可以结合第一种方法来给出第二个证明：\n\n$$\n2\\cdot \\lceil \\frac{n}{2} \\rceil^ {h-2} \\cdot  \\lceil \\frac{n-1}{2} \\rceil \\leq K(h) \\leq n^{h-1} \\cdot (n-1)\n$$\n\n取左侧计算得到：\n\n$$\nh \\leq \\lfloor \\log_{\\lceil n/2 \\rceil}\\frac{K/2}{\\lceil(n-1)/2\\rfloor} \\rceil + 2\n$$\n\n> 为了满足不等式的条件，应当向下取整\n\n    取右侧计算得到：\n\n$$\n\\lceil \\log_n{k/(n-1)} \\rceil + 1 \\leq h\n$$\n\n直接利用给定的高度h计算size：\n\nmax:\n\n$$\nN^{h-1}\\cdot (N-1)\n$$\n\nmin:\n\n$$\n2\\cdot \\lceil\\frac{N}{2}\\rceil ^{h-2} \\cdot \\lceil \\frac{N-1}{2}\\rceil\n$$\n\n然后利用题目给出的索引项个数建立不等式\n\n---\n\n实际上，我们在**估算**的时候可以忽略常数的影响，比如：\n\n$$\n\\text{minimal height} = \\lceil{\\log_N(k)} \\rceil \\\\ \\text{max height} = \\lfloor{\\log_{N/2}(k/2) + 1}\\rfloor\n$$\n\n#### 根据索引项估计节点数量\n\n关键：利用扇出n估计最后一层的节点数量，然后倒推\n\n- 估计最少值时，由$\\lceil \\frac{k}{n-1} \\rceil$计算得到叶子节点的数量N，然后逐步倒推 $\\lceil N/n \\rceil$,直到加数为1到达根节点（过程中的计算结果**向上取整，因为小数部分的节点数无法再纳入其他节点**）\n- 估计最大值时，将上述的除数都换成对应的最小值 $\\lceil (n-1)/2 \\rceil$ 与 $\\lceil n/2 \\rceil$，但是注意**将每次的计算结果向下取整！因为小数部分的节点数表示无法满足最少个数的要求，无法独立构成节点**\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250530105135776.png?imageSlim\"/>\n\n> **注意取整方向的差异**：估计最少向上取整；估计最大向下取整\n>\n> 上面的例题中，max估计的63应为**62**\n\n#### 计算块传输的次数\n\n题目可能给出一个现有的B+树结构以及一系列的访问操作，结合一定的replacer策略，让我们计算块传输的次数，需要注意的是：\n\n- 如果题目明确说了是 ***blocks transferred to buffer***  那么我们就不需要考虑将block写回到disk的次数\n\n一个简单的例子：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250530113134018.png?imageSlim\"/>\n\n> 注意此处内部节点的指针数和key数量\n\n#### 删除操作\n\n一般来说，分裂时默认左侧的节点元素不少于右侧节点包含的元素个数，可能题目会具体说明右侧不少于左侧。\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605160249126.png?imageSlim\"/>\n\n> 重组 合并 发现需要分裂\n\n#### LSM的成本估计\n\n问题：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609141542719.png?imageSlim\"/>\n\n（3）对应的B+树：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609141603785.png?imageSlim\"/>\n\nans：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609141705099.png?imageSlim\"/>\n\n> ***TODO***：（2）是什么意思？\n\n- 题目说maximize size  = 13， 根据 1 + 3 + 9 = 13， 推知最多有3层高\n- 查找某个index，可能的范围分别是主存以及disk中的两棵树，分别计算对应的成本，然后加权求和：\n\n  - 根据上一步计算得到的B+树的高度，如果在主存中，块传输和寻道的成本都是0；如果在第一棵树就是3+3， 在第二棵树就是前面成本的两倍\n  - 因此整体是 (0 + 3 + 6) / 3 = 3（块传输和seek）\n- ***为什么不需要计算从叶子节点到disk的额外寻道和块传输？***\n\n  - 因为题目声明了：***look up an index entry ....***\n  - 这意味着，我们只需要检查某个index是否在叶子节点中包含，所以只需要查找到叶子节点层，不需要根据叶子节点中的指针访问disk中的数据页\n\n### 查询处理练习\n\n#### join的成本估计\n\n> 这里什么都没有哦～\n\n### 查询优化练习\n\n如果题目只是给出了两个关系，让我们计算对应的join成本，我们应该先计算关系各自的block数量，然后选择块较少的作为外层关系\n\n- 这是因为此时对应的块传输次数和寻道次数分别为：\n  $$\n  b_r + \\lceil\\frac{b_r}{M-2}\\rceil \\cdot b_s \\text{ 与 } 2\\cdot\\lceil\\frac{b_r}{M-2}\\rceil\n  $$\n\n如果给出了缓存区的buffer大小$M$，应该考虑使用上述的计算方法，否则认为M = 3带入公式\n\n#### 习题1\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250601191021519.png?imageSlim\"/>\n\n> 具体解答参考：\n>\n> <img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefinedimage-20250506101133270.png?imageSlim\"/>\n>\n> * `where`中包含了join的条件, 因此此处的join属性实际上是 `pno` 和 `cdate`, 计算对应的V.\n>\n>   1. 实际上是一组复合的属性, post有100个, cdate有365个可能的取值. 因此估计对应的值域空间是100*365.\n>   2. `/4`对应了where中最后一个时间的约束, 是整体的1/4.\n> * 1个block的尺寸是4096bytes, 除以每条记录的尺寸, 得到每个block对应的记录数量. 然后据此计算table对应的block数量.\n> * `cno`的bytes是5, 根据题意==> pointer的大小是4bytes, 那么每一对键值对是5+4=9bytes.\n> * 计算 fan-out-rate n = 455，然后根据公式算出高度为2（注意是建立在cno的索引，不同的cno有10000 = K个，据此计算！）\n> * 根据detail的记录数量, 估算每个card对应的记录数量. 然后根据detail的block的容量, 计算每个card对应的记录的block数量.\n>\n>   1. 根据 `V(name,card)` = 5000 我们可以知道, 因为card中一共有10k条记录, 所以每个名字平均对应2个card.\n>   2. 参考\n>\n>   <img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined13b156083431e6cbe7e2beac4e070542.png?imageSlim\"/>\n\n#### 习题2\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250601185929781.png?imageSlim\"/>\n\n（2）：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250601190117419.png?imageSlim\"/>\n\n> 优化的分配是：1块给输出，1块给内关系，剩下都分配给外关系\n\n（3）：***TODO***\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250601190657172.png?imageSlim\"/>\n\n> ***SOLUTION：***\n>\n> K = 5000， n = 60，计算得到高度为 3（答案中max的估计公式有问题，并且应该是向下取整）\n>\n> 注意此处题目说了为root准备了一个buffer，在每次的遍历中原本的h+1 = 4的成本 减去1次，只需要在一开始存入（最后+1）\n>\n> 公式 $b_r\\cdot(t_T+t_S) + n_r \\cdot c$ 中的$n_r$需要除以500，因为$\\sigma$确定了director（一共有500位不同的～），或者我们可以从成本估计的角度解释：\n>\n> $$\n> \\frac{n_{Movie}\\cdot n_{Comment}}{V(title,Movie) \\cdot V(director,Movie)}\n> $$\n\n#### 归并排序练习\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250607150028129.png?imageSlim\"/>\n\n> 此处的buffer容量是针对于run的, 也就是output存在2个block; 可以计算得到 (10-2) /2  = 4 ,每次将4个run归并\n\n***SOLUTION***: 如何计算seek?\n\n分析:\n\n- 此处为每个input row 提供了  **2 buffer block**意味着我们每次seek之后可以直接读取2个blcok而非1个(优化), 从而减少了seek的次数;\n- 利用每次归并4个runs, 得到总共的pass数量\n- 注意题目说最终需要写回到disk\n\n解答: (ljm同学的珍贵手稿)\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined8b4b347f51b2175cfce8ba89bb825dcf.jpg?imageSlim\"/>\n\n> 可以直接运用公式， 此处的$b_b$ = 2, $M $ = 10, $b_r$  = 160:\n>\n> $$\n> t_T = b_r \\cdot (2\\lceil\\log_{\\lfloor\\frac{M}{b_b}-1\\rfloor} (\\frac{b_r}{M})\\rceil+1 \\textcolor{red}{+1}) \\\\ t_S = 2\\cdot \\lceil \\frac{b_r}{M} \\rceil + \\lceil \\frac{b_r}{b_b}\\rceil\\cdot (2\\lceil\\log_{\\lfloor\\frac{M}{b_b}-1\\rfloor} (\\frac{b_r}{M})\\rceil - 1   \\textcolor{red}{+1})\n> $$\n>\n> 其中加红的，表示需要写回disk的额外成本，如果题目没有明确声明，就不需要加入计算\n\n## 并发控制练习\n\n#### 绘制前驱图\n\n可以根据数据项分组，从当前向下查看：\n\n习题和解答：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250601193315102.png?imageSlim\"/>\n\n> 判断是否为无级联回滚的调度也很简单，只需要保证读取在提交之后即可，比如：\n>\n> ```\n> T1           | T2           | T3\n> -------------|--------------|-------------\n> Read(A)      |              |\n> Read(B)      |              |\n> Write(B)     |              |\n> Commit       |              |\n>              | Read(B)      |\n>              | Read(A)      |\n>              | Write(A)     |\n>              | Commit       |\n>                           | Read(A)\n> ```\n>\n> 两阶段锁协议无法解决死锁的问题\n\n#### 等待图与死锁\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609153157189.png?imageSlim\"/>\n\n> 注意题目说了，此时还没有事务释放锁；T3没有指向T1的边，因为此时T1没有对B成功加锁\n\n## 错误恢复练习\n\n#### 脏页表的更新\n\n| PageID | PageLSN | RecLSN |\n| ------ | ------- | ------ |\n\n- 如果有新的页面被更新了，加入脏页表，同时设置对应的PageLSN, RecLSN等于当前的log LSN\n- 只有flush的时候才会清除脏页表中的page entry（我们无法知道什么时候flush到disk，因此一般只增不减）\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602161156079.png?imageSlim\"/>\n\n# 补充\n\n#### 不同的范式\n\n**第一范式**  表中的每个字段都是不可再分的最小数据单位，即字段具有原子性；\n\n- 如果存在多值属性，需要将其分割位多个单独的\n\n**第二范式** 消除非PK属性对于key的部分函数依赖\n\n- `A->B` : B 依赖于A\n- 如果主键是复合的，确保所有非PK属性完全依赖于整个主键，而不是主键的一部分\n\n第三范式 消除非PK对于key的传递函数依赖\n\n- 确保所有非PK属性都直接依赖于PK\n\nBCNF范式 消除PK对于key的部分与传递函数依赖\n\n> TODO：补充与理解\n>\n> SOLUTION：书上没有啊？\n\n#### Columnar Representation\n\n列式存储在数据查询方面表现更好，但是在事务处理方面表现较差\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605153636800.png?imageSlim\"/>\n\n> **hybrid row/column store**： 支持行列两种存储方式的数据库\n>\n> 根据drawback, **Reduced** cost of tuple deletion and update的说法是错误的\n\n#### 线性搜索与index\n\n我们根据比较运算符来判断是否需要使用index：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605161903742.png?imageSlim\"/>\n\n#### 冲突可序列化与2PL\n\n- 遵循2PL的事务调度一定是冲突可序列化的；\n  - 所有在树协议下合法的调度也是冲突可序列化的\n- 但是满足冲突可序列化的事务调度不一定遵循两阶段锁协议\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609134908791.png?imageSlim\"/>\n\n#### 范围查找\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609190041270.png?imageSlim\"/>\n\n#### redo-list\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613211455502.png?imageSlim\"/>\n\n> **abort**的事务也应该被排除在redo-list之外\n\n# 小贴士\n\n- 计算B+树的扇出时，键的大小是按照search-key，也就是PK的大小来计算的，不要将关系中的所有属性相加😇\n- 绘制B+树的示意图时，记得在叶子层补充链表结构\n- 进行结果集大小估计时，发生**在候选键上的等值查找**，结果集大小应当为0或1\n- 给出记录数量、每条记录的size以及block的大小时，应该先计算每个block所包含的记录数量（向下取整），然后计算所需的block数量（向上取整）\n  - 直接利用总数量计算总容量然后计算block数量有误，因为这样导致了不同block之间可能存储了同一条记录（的部分）\n- ACID：\n  - **原子性** (atomicity)\n    - 恢复系统\n  - **一致性** (consistency）\n    - 由ADI和合适的约束条件（触发器等）实现\n  - **隔离性** (isolation)\n    - 并发控制\n  - **持久性** (durability)\n    - 恢复系统\n- relation：行， relationship：表\n- **Access time**： The time it takes from when a read or write request is issued to when data **transfer begins**\n  - = seek + rotation time\n- **steal策略**：checkpoint之前的修改都已经反应到了disk（无论对应的事务是否commit）\n  - 无法确定checkpoint之后发生的修改是否flush到了disk\n- 不能对辅助索引使用稀疏的策略！\n  - 辅助索引对应的search-key一般不是文件排列的顺序；\n  - 如果只是对部分的记录建立辅助索引，那么无法通过相邻的辅助索引来index得到没有建立索引的记录\n  - 只能对primary/clustering key使用稀疏索引\n- 因此我们有两个结论：\n  - **稀疏索引只能用于顺序文件**\n  - **辅助索引只能用于密集索引**\n\n# PPT回顾\n\n- Simple checkpoint **stops all active transactions**, write out all the updated pages, and restart transactions after completing\n\n## 导论与基础\n\n#### 数据库系统的目的\n\n**直接建立在文件系统上的数据库应用导致：**\n\n- Data redundancy（数据冗余）and inconsistency（不一致）\n- Data isolation（数据孤立，数据孤岛）— multiple files and formats\n- Difficulty in accessing data（存取数据困难）\n- Integrity problems（完整性问题）\n- Atomicity problems（原子性问题）\n- Concurrent access anomalies（并发访问异常）\n- Security problems（安全性问题）\n\n#### 数据库的特征\n\ndata persistence（数据持久性）\nconvenience in accessing data（数据访问便利性）\ndata integrity（数据完整性）\nconcurrency control for multiple users（多用户并发控制）\nfailure recovery（故障恢复）\nsecurity control（安全控制）\n\n#### view of data\n\n分为了视图、逻辑和物理模式：\n\n- 视图模式：隐藏了数据类型的细节，也可能出于安全性的考虑而隐藏数据的信息等\n- 逻辑模式：描述数据和关系\n- 物理模式：描述记录如何被存储\n\n> 不同模式之间存在对应的映射 mapping\n\n#### DDL\n\n**数据字典**：DDL compiler generates a set of table templates stored in a **data dictionary**\n\n数据字典包含了元数据：\n\n- schema\n- 完整性约束\n- 主键\n- 参照完整性\n- **权限**\n\n#### DML\n\n两种数据操作语言：\n\n- 过程式 procedural：描述如何获得信息\n- 陈述式 declaretive：只声明需要的数据，但是不说明如何获取\n\n> SQL是流行的、**陈述式**的语言\n\n正因如此，SQL不支持直接通过network来交互，相关的计算和交互需要写在宿主语言 host language 中实现\n\n应用可以通过API或者嵌套的SQL语句来访问数据库（需要宿主语言的支持）\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250610160235137.png?imageSlim\"/>\n\n#### DBA\n\n> 数据库管理员\n\nDBA的指责：范式的定义、权限的管理、日常的维护（根据表现进行微调、定期将数据备份、确保充分的disk空间）\n\n### 数据库系统的历史\n\n#### NoSQL\n\n> not only SQL\n\n提供了一种存储和检索数据的机制，这些数据使用比传统关系数据库**更松散的一致性模型**，以实现横向扩展和更高的可用性。\n\n当数据的性质不需要关系模型时，NoSQL数据库系统在处理**大量数据**（尤其是大数据）时很有用。\n\n常用的NoSQL DBMs：MongoDB，Cassandra, HBase\n\n#### NewSQL\n\n寻求为OLTP工作负载提供与NoSQL系统相同的可扩展性能，同时仍然保持传统数据库系统NewSQL的ACID保证：\n\n## 关系模型\n\n参照完整性：要求参照表中的外键属性一定在被参照表中的至少一个元组中存在\n\nUnion要求：\n\n- 两个关系的属性个数 **arity**相同；\n- 对应列的属性的domain / type 一致\n\n> **TODO**：属性个数一致？\n\n### 连接\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250610162646687.png?imageSlim\"/>\n\n#### Semijoin\n\n半连接：只会将满足连接条件的元组，保留来自指定关系的属性，也就是在theta join的结果取projection\n\n- 比如左半连接，将会得到左侧关系的匹配元组\n\nnull 表示值处于unknown状态 或者 不存在\n\n#### Outer join\n\n外连接：在自然连接的基础上，保留特定关系不匹配的元组\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250610162843165.png?imageSlim\"/>\n\n#### 使用joins组合外连接\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250610163400510.png?imageSlim\"/>\n\n**numeric（3,1）**  总共3位，且小数点后1位\n\n> numeric 是 fixed point number， 与浮点数相区分\n\n**float（n）** 表示至少有n位\n\n**primary** key declaration on an attribute automatically ensures **not null**\n\n> 主键自动具有非空的约束条件\n\n#### unique\n\n使用 `unique`来测试子查询是否含有多个元组\n\n> 当子查询返回的元组个数是**0**或者1时，\n\n简单的例子：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250610170428452.png?imageSlim\"/>\n\n#### with\n\n简单的例子：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250610170548309.png?imageSlim\"/>\n\n> 关键词：`with` 和  `as`\n\n### user-defined types\n\n`type`和 `domain`都是用于自定义的数据类型, 二者十分相似. 区别在于: 后者可以声明约束 `constraints`.\n\n#### Type\n\n- 语法\n\n  ```sql\n  create type type_name\n  as data_type\n  [ (precision, scale) ]\n  [ not null ]\n  [ final | instantiable | abstract ];\n  ```\n\n  > **`final | instantiable | abstract`**:\n  >\n  > 用于指定类型的继承属性。\n  >\n  > - `final`：表示该类型不能被继承。\n  > - `instantiable`：表示可以创建该类型的实例。\n  > - `abstract`：表示该类型是抽象的，不能创建实例。\n  >\n- e.g.\n\n  ```sql\n  create type dollars\n  as numeric(12, 2)\n  final;\n\n  create table department (\n      dept_name varchar(20),\n      building varchar(15),\n      budget dollars\n  );\n  ```\n\n#### Domain\n\n当某些列需要限制其取值范围, 也就是具有一定的约束条件时, 如果每次创建类似的列都重复书写, 工作量较大.\n\n`domain`可以理解为对数据类型的**扩展定义**，它允许我们**创建自定义**的数据类型，并且可以为其指定约束条件。使用 domain 可以确保数据的一致性，\n\n- 基本语法\n\n```sql\nCREATE DOMAIN 域名 数据类型\n[DEFAULT 默认值]\n[CONSTRAINT 约束名称]\n[CHECK (约束条件)];\n```\n\n- e.g.\n\n  - ```sql\n    -- 创建一个表示年龄的域\n    CREATE DOMAIN age_type INTEGER\n    CONSTRAINT valid_age\n    CHECK (VALUE >= 0 AND VALUE <= 150);\n    ```\n\n#### Large-Object Types\n\nMySQL **BLOB datatypes**:\n\n- TinyBlob : **0 ~ 255** bytes.\n- Blob: **0 ~ 64K** bytes.\n- MediumBlob : **0 ~ 16M** bytes.\n- LargeBlob : **0 ~ 4G** bytes.\n\n> 上限以$2^8$的规模递增\n\n候选键CK可以为null，但是主键PK不能为空\n\n> 因此，unique构成组成的属性集合可以称为构成了一组超键，但是不能称为CK，因为CK可以为空\n\n#### assertion\n\ne.g.\n\n```sql\ncreate assertion credits_constaint check (\n    not exists(\n        select *\n        from student S\n        where total_cred <> (\n            select sum(credits)\n            from takes natural join course\n            where takes.ID = S.ID \n                and grade is not null \n                and grade <> 'F'\n        )\n    )\n)\n\n```\n\n使用下面的命令来阻止数据库对SQL的隐式commit：\n\n```bash\nset autocommit = 0\n...\ncommit;\n```\n\n#### 授权\n\n四种权限：增删改查\n\n- insert不允许修改现有的数据；\n- update不允许删除现有的数据\n\n五种修改数据库范式的权限：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250611192659291.png?imageSlim\"/>\n\n> 范式的创建、修改、删除，以及index和view相关的操作\n\n#### Authorization\n\n- **授予权限：**\n\n```sql\ngrant <privilege_list> \non <relation_name or view_name> \nto <user_list>\n```\n\n这里的 `<user_list>`既可以是具体的用户名，也可以是关键字 `PUBLIC`（表示授权给所有用户）。\n\n特别地，当我们需要允许用户具有转授权的能力时，可以在授权语句末尾添加 `WITH GRANT OPTION`子句。\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250611193159249.png?imageSlim\"/>\n\n- **权限回收：**\n\n```sql\nrevoke <privilege_list> \non <relation_name> \nfrom <user_list> [restrict|cascade]\n```\n\n> - 其中 `RESTRICT`表示仅回收**直接授予**的权限，而 `CASCADE`则会同时回收该用户**转授给其他**用户的权限(级\n>\n> * 可以在权限列表中声明 `all` 表示回收所有的特权;\n> * 可以在用户列表声明 `public`表示回收的范围是正常访问的普通成员, 但是不会回收指定的成员的特权\n\n* 如果同一个用户被不同的授权者先后授予了2次**相同**的权限, 那么一次的回收权限之后, ta的权限可能依旧存在.\n* **权限的依赖性**: 如果回收的权限会导致具有依赖关系的权限的失效, 那么涉及的权限**也会被回收**:\n\n**创建外键约束的权限**\n\n```sql\ngrant reference (dept_name) \non department \nto Mariano;\n```\n\n#### 数据库设计的流程\n\n1. requirement specification\n2. conceptual-design： **E-R diagram**\n3. logical-design：logical schema\n4. physical-design： physical schema\n\n设计范式的时候，主要避免两个问题：\n\n- redundancy\n- incompleteness\n\n**entity：** an object that **exists** and is distinguishable from other objects\n\n#### 三元关系与箭头\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612113854619.png?imageSlim\"/>\n\n#### Armstrong's\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612114509016.png?imageSlim\"/>\n\n以及对应的推论：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612114622053.png?imageSlim\"/>\n\n按照BCNF分解：\n\n- 一定是无损分解\n- 但不一定是满足依赖保留的\n\n> 按照3NF分解，可以同时满足上面两条\n\n### MVD\n\n#### 定义\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612115633330.png?imageSlim\"/>\n\n#### 相关定理与4NF\n\n- 任何函数依赖一定也是多值依赖\n- D的闭包D+是逻辑上由D隐含的所有功能和多值依赖项的集合；\n- 如果一个关系范式满足下面的要求，就称为满足4NF，对于函数和多值依赖D，如果其D+中的所有多值依赖都只存在下面两种情况之一；\n  - 平凡的（右侧包含在左侧属性，或者二者的并集是R）\n  - 左侧属性是R的超键\n\n> 4NF类似于普通关系的BCNF\n\n## 物理存储系统\n\n#### 存储级别\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612130754780.png?imageSlim\"/>\n\n访问时间 = 寻道时间 + 旋转延迟\n\n**disk-block访问的优化：**\n\n- buffering\n- prefetch\n- disk-arm-scheduling：使用算法重排block的请求\n- 非易失性写缓存\n  - non-volatile RAM: battery backed up RAM or flash memory\n- log disk 日志磁盘\n\n#### Flash storage\n\nNAND flash\n\n- page-at-a-time read\n- 在erased之前 一个page只能被write一次\n\nSSD：splid state disk\n\n通过flash translation table将逻辑页地址转换成物理页地址\n\n在分槽页中，记录指针不是直接指向记录，而是指向对应entry的header\n\n**文件中记录的组织形式：**\n\n- heap：记录可以存放在文件的任意位置；\n- sequential：根据search-key线性存储记录\n- hashing：利用哈希函数计算search-key，然后存储到对应的block中\n- multitable clustering file organization：将不同关系的记录存放在同一个文件中\n  - 可以为同一个关系的记录之间增加指针，形成pointer chains 指针链\n- table partitioning：将一个关系中的记录分成更小的关系，分别存储\n  - 相当于上一种形式的对立\n- data dictionary storage\n  - 也称为system catalog\n  - 存储metadata\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612133220908.png?imageSlim\"/>\n\n#### Buffer-Replacement Policies\n\n- LRU\n- Toss-immediate strategy：只要一个block的最后一个元组的数据被处理结束，就释放这个block\n- MRU：刚处理结束的block是最可能被替换的对象\n- clock：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250614233253499.png?imageSlim\"/>\n\n#### Column-Oriented Storage\n\n> 也被称为 **columnar representation**\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612134217630.png?imageSlim\"/>\n\n> 列：决策支持；\n>\n> 行：事务处理\n\n**ORC 优化行列存储**\n\n- Apache ORC 和 Apache Parquet\n- 流行处理**big-data**的应用\n\n索引顺序文件：根据主索引排序的有序文件\n\n稠密索引——对建立索引的属性，每一个值都有自己的指针；\n\n- 稀疏索引：只有部分search-key的索引，因此要求记录必须按照搜索键来排序\n\n如果主索引无法存储在memory中，需要将disk上的主索引看成线性文件，建立外层的稀疏索引\n\n#### B+复杂度与占用率\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612140204662.png?imageSlim\"/>\n\n针对写密集型的B+树的策略：\n\n- LSM tree\n- buffer tree\n  - 更少的查询开销\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612141430631.png?imageSlim\"/>\n\nbitmap indices：\n\n- 取属性的值域的大小作为行数\n- 有记录的个数那么多列，如果对应位置的属性匹配，bit就是1\n\n#### index on flash\n\n> todo：ch14-51\n\n> ppt的A4‘有问题，参考书本的定义\n\n如果查询的比较条件是 <= ，就不要使用index，直接使用线性查找\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612174914814.png?imageSlim\"/>\n\n#### merge成本最小化\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612175152335.png?imageSlim\"/>\n\n#### 混合的归并合并\n\n- 使用前提：\n  - 第一个关系是有序的；\n  - 第二个关系在连接属性上具有B+树的index，方便根据属性查找\n- 流程概述：\n  - 顺序扫描第一个关系；\n  - 对于第一个关系中的每一个元组，利用连接属性在第二个属性中使用索引查找得到对应的叶子节点，然后将第一个关系的元组合并到叶子节点中\n  - 此时第二个关系的B+树叶子节点具有实际物理地址和第一个关系的元组，将其按照自身的物理地址排序\n  - 然后，我们得到按照地址排序的叶子节点，可以顺序扫描，然后构造合并结果（用第二个关系的元组来替代物理地址）\n- 上述流程的关键就在于，通过先根据物理地址排序，然后顺序扫描，降低了随机访问导致的大量的寻道时间\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612180300474.png?imageSlim\"/>\n\n**估计交集的成本时：**\n\n- 如果连接属性是其中的外键-主键关系，成本是确定的——引用关系的元组数；\n- 如果是平凡的关系，那么就利用V计算，取最后估计结果较小（V较大的）\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612222936423.png?imageSlim\"/>\n\n外连接的成本估计 = 自然连接的结果+对应属性的元组个数\n\n#### cost-based optimizer\n\n为每个操作选择cheapest的算法（贪心）可能不会产生最优的整体效果，比如：\n\n- 合并连接可能比哈希连接成本更高，但是有序的输出可能为外层的算法提供便利；\n- 嵌套循环可以为流水线提供机会\n\nn个关系连接时，具有 $\\frac{(2n-2)!}{(n-1)!} $种不同的连接顺序\n\n> 我们不需要一次性对所有的关系采取套用上述的公式，可以采取**动态规划**的思想：\n>\n> 从较小的子集开始取用，计算小规模的不同关系的所有连接成本，存储在数组中，在较大规模的计算中直接取用即可\n\n**best join tree**\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612225738211.png?imageSlim\"/>\n\n复杂度：\n\n| 方法                 | 时间复杂度       | 空间复杂度 |\n| -------------------- | ---------------- | ---------- |\n| 动态规划             | $O(3^n)$       | $O(2^n)$ |\n| only left-deep trees | $O(n\\cdot2^n)$ | $O(2^n)$ |\n\n#### 启发式优化\n\n**策略**\n\n- **Perform selection early**(reduces the number of tuples)\n- **Perform projection early**(reduces the number of attributes)\n- **Perform most restrictive selection and join operations** (i.e. with smallest result size) before other similar operations.\n- **Perform left-deep join order**\n\n#### 物化视图的增量更新\n\n对于选择, join可以直接在原来的结果上:\n\n- insert ==> 并集;\n- delete ==> 差\n- 对于avg, max, min等统计属性, 采取之前的中间结果来辅助实现增量更新.\n- 方差也可以用增量更新来维护.\n\n$$\n\\mathrm{Var}(X)=\\frac{\\sum x_i^2}{n}-\\left(\\frac{\\sum x_i}{n}\\right)^2\n$$\n\n因此, 只需要维护各个元素的和, 平方和 以及计数 `n`, 就可以实现快速的增量更新.\n\n## 并发控制\n\n#### 2PL\n\n- 两阶段锁协议 2PL 可以保证冲突可序列化\n\n  - 将事务的执行顺序按照lock points排序\n  - 但是**冲突可序列化的调度不一定满足2PL协议**，也就是说2PL不是冲突可序列化的必要条件\n  - 不保证排除死锁\n- 严格2PL：事务必须保持自身的exclusive locks直到其commits / aborts\n\n  - 确保可恢复性\n  - 避免了级联回滚\n- 强2PL（rigorous）：事务必须保持自身的所有lock，直到其commits / aborts\n\n  - 可以按照事务提交的顺序来构建序列\n\n#### Lock Conversions\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613101316974.png?imageSlim\"/>\n\n#### Lock table\n\n> usually implemented as an **in-memory hash table** indexed on the **name of the data item** being locked\n\n- 新的请求添加到队列的末尾，并且检查是否与先前的lock相同，如果相同就grant\n  - 请求删除的时候同时unlock 对应的requests，并检查pending的lock是否可以被granted\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613101931029.png?imageSlim\"/>\n\n#### Tree Protocol\n\n是图协议的一种，适用于对数据访问的次序具有偏序结构理解的情况\n\n> 中译中：了解访问特定的数据项之前必须经过的中间节点\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613105351613.png?imageSlim\"/>\n\n特点：\n\n- 树协议可以保证冲突可序列化并**排除死锁 (deadlock-free)**\n  - 避免了回滚\n- 缺点：\n  - 不能保证无级联和可恢复性\n  - 可能 l**ock more data items than needed**， 从而降低了并行性，同时提高了额外的等待时间\n\nSchedules not possible under two-phase locking are possible under tree protocol, and **vice versa**.\n\n#### Granularity Hierarchy\n\n从高到低，以整个数据库系统为根节点，分别划分为不同大小的区域，直到叶子节点包含单个记录的信息\n\n为了在高层级快速判断底层节点是否被加了 S / X锁引入 **intention locks：**\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613111106318.png?imageSlim\"/>\n\n> 如果直接加X-lock，表示可以直接修改内部的节点\n\n对应的**相容矩阵**：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613111445682.png?imageSlim\"/>\n\n> X与任意锁都不相容；除了IS和X，都只跟自己相容；IS与X之外的锁相容\n\n对于插入和删除记录，如果只是在对应的记录上加锁，可能导致幽灵现象和死锁问题\n\n- 可以直接在表层级加锁，但是降低了并行性\n- 可以引入谓词锁，来准确判断影响的记录范围，但是在实现上比较困难\n- 另一种更好的解决方法是：**Index Locking Protocol**\n\n#### Index Locking Protocol\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613113138037.png?imageSlim\"/>\n\n> 可以避免幽灵现象的发生\n\n一个例子：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613113215006.png?imageSlim\"/>\n\n> 注意范围查询，导致10所在的叶子节点也具有了S-lock\n\n上述的策略会将entire leaf给lock，为了提高并行性，我们可以针对某个key来lock，同时为了确保可以发现潜在的幽灵现象，需要引入一定的限制条件，这就是：**Next-Key Locking**\n\n#### Next-Key Locking\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613114355171.png?imageSlim\"/>\n\n# TODO\n\n#### B+-height\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250530114132354.png?imageSlim\"/>\n\n**SOLUTION**：\n\n此处的height确实是从1开始的，比如计算max时前面的4个4是n, 最后一个是叶子层的叶子块内部的n-1，所以高度为h, 计算size时存在的因数个数也是h\n","slug":"课程笔记/数据库复习","published":1,"updated":"2025-06-25T07:06:54.898Z","comments":1,"layout":"post","photos":[],"_id":"cmcbm7pqj002ne2qg6fwo7u1k","content":"<h1 id=\"知识点梳理\"><a href=\"#知识点梳理\" class=\"headerlink\" title=\"知识点梳理\"></a>知识点梳理</h1><h3 id=\"DML\"><a href=\"#DML\" class=\"headerlink\" title=\"DML\"></a>DML</h3><ul>\n<li><code>select</code>得到的结果通过 <code>distinct</code>关键字来去重</li>\n<li><code>union all</code>可以保留并集中的重复元组</li>\n<li>注意 <code>case</code>与 <code>update</code>组合使用时，分段更新</li>\n</ul>\n<h4 id=\"聚合函数-NULL\"><a href=\"#聚合函数-NULL\" class=\"headerlink\" title=\"聚合函数&amp;NULL\"></a>聚合函数&amp;NULL</h4><p>除了 <code>count</code>之外的聚合函数, 会忽略集合属性上有 <code>null</code>的元组, 而 <code>count</code>则会计算包括空值在内的元组个数.</p>\n<p><strong>Special case</strong>: 如果所有的聚合属性都是空值:</p>\n<ul>\n<li><code>count</code>: 返回0;</li>\n<li>其他聚合函数: 返回 <strong>null</strong>.</li>\n</ul>\n<h4 id=\"lateral\"><a href=\"#lateral\" class=\"headerlink\" title=\"lateral\"></a>lateral</h4><p>外层的查询可以直接使用内部查询的关系名, 但是内部的子查询无法向外直接使用其重命名的关系名.</p>\n<p>然而, 如果在子查询的前面声明关键字 <code>lateral</code>则可以实现:</p>\n<div class=\"code-container\" data-rel=\"Sql\"><figure class=\"iseeu highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> name, salary, avg_salary</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> instructor I1,</span><br><span class=\"line\">     <span class=\"keyword\">LATERAL</span> (<span class=\"keyword\">SELECT</span> <span class=\"built_in\">avg</span>(salary) <span class=\"keyword\">AS</span> avg_salary</span><br><span class=\"line\">              <span class=\"keyword\">FROM</span> instructor I2</span><br><span class=\"line\">              <span class=\"keyword\">WHERE</span> I2.dept_name <span class=\"operator\">=</span> I1.dept_name) <span class=\"keyword\">AS</span> AvgDeptSalary;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"嵌套查询顺序\"><a href=\"#嵌套查询顺序\" class=\"headerlink\" title=\"嵌套查询顺序\"></a>嵌套查询顺序</h4><p>from ; where; group by ; having; select; distinct; order by</p>\n<h4 id=\"映射基数约束\"><a href=\"#映射基数约束\" class=\"headerlink\" title=\"映射基数约束\"></a>映射基数约束</h4><p>采取 <code>l...h</code>的形式来表示复杂的约束关系：</p>\n<ul>\n<li><code>0..*</code> 表示最少参与0次, 最多没有限制, 可见 ..对多的关系, 部分参与;</li>\n<li><code>1..1</code>表示恰好参与1次, 表示一对..的关系, <strong>完全参与</strong></li>\n</ul>\n<p>比如下面的实际上是<em><strong>many-to-one</strong></em>的关系：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefinedimage-20250329153241821.png?imageSlim\"\n                     \n                >\n\n<h3 id=\"ER模型和范式\"><a href=\"#ER模型和范式\" class=\"headerlink\" title=\"ER模型和范式\"></a>ER模型和范式</h3><h4 id=\"从ER模型得到schema\"><a href=\"#从ER模型得到schema\" class=\"headerlink\" title=\"从ER模型得到schema\"></a>从ER模型得到schema</h4><p>从ER模型得到schema的核心规则：</p>\n<ul>\n<li><strong>关系类型</strong>：<ul>\n<li>1:1 ：在参与关系的实体类型中，选择一个schema增加一个FK，指向另一个实体对应的schema的PK，<strong>不需要额外建模</strong>；</li>\n<li>1:N: 在多端对应的schema中，增加1端对应的PK作为FK。此时，关系也蕴含在这个外键的约束关系中，<strong>不需要额外建模</strong>；</li>\n<li>M:N: 此时，我们需要<strong>将关系建模为一个新的schema</strong>——将参与关系的实体类型的主键作为外键，然后加上关系本身的属性，组成为schema的属性</li>\n</ul>\n</li>\n<li>弱实体类型：强实体的PK + 弱实体自身的分辨符 &#x3D; 对应schema的主键，然后补充弱实体的剩余属性</li>\n<li>多值属性：需要为多值属性构建一个新的schema<ul>\n<li>将对应的实体的PK和多值属性自身作为schema的PK</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"属性集闭包\"><a href=\"#属性集闭包\" class=\"headerlink\" title=\"属性集闭包\"></a>属性集闭包</h4><p>注意，属性的闭包包括自身的属性集</p>\n<p><strong>作用：</strong></p>\n<ul>\n<li>判断是否为主键：如果闭包包含了关系中的所有属性，那么就是～</li>\n<li>验证函数依赖是否成立</li>\n<li>计算整个关系模式的闭包$F ^+$: 计算每一个属性的闭包</li>\n</ul>\n<h4 id=\"正则覆盖\"><a href=\"#正则覆盖\" class=\"headerlink\" title=\"正则覆盖\"></a>正则覆盖</h4><ul>\n<li>目标：简化给出的函数依赖</li>\n<li>尝试化简属性A时，如果去除的是 $\\alpha \\rightarrow \\beta$中的：<ul>\n<li>左侧：判断去除之后左侧剩余属性的闭包是否包含了右侧属性</li>\n<li>右侧：判断此时的左侧属性闭包中是否含有去除的属性</li>\n</ul>\n</li>\n<li>我们可以进一步用公式来讲解上述的分析：<ul>\n<li>判断$\\alpha$中的属性A是否多余：<ul>\n<li>计算$(\\alpha-A)^+$是否包含了$\\beta$</li>\n</ul>\n</li>\n<li>判断$\\beta$中的属性A是否多余：<ul>\n<li>根据 $(F-{\\alpha \\rightarrow \\beta}\\  \\cup \\ {\\alpha \\rightarrow (\\beta - A)})$ 的依赖关系，计算 $\\alpha^+$</li>\n<li>如果对应的属性闭包包括了A，那么就可以去除</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250528134923287.png?imageSlim\"\n                     \n                >\n\n<p>一个简单的例子来说明如何推导：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250528135223937.png?imageSlim\"\n                     \n                >\n\n<p><strong>NOTICE：</strong></p>\n<ul>\n<li>实际情况下，可能比较难推导，需要更多的经验和灵感）</li>\n<li>虽然我们要求左侧的属性唯一，但是在推导的过程中，可能尝试将类似于 $A \\rightarrow BC$先拆解为两条，然后判断其中的某条属性是否多余；最后将左侧属性合并</li>\n</ul>\n<h4 id=\"范式的验证\"><a href=\"#范式的验证\" class=\"headerlink\" title=\"范式的验证\"></a>范式的验证</h4><ul>\n<li>BCNF：<ul>\n<li>如果F中没有违背BCNF原则的函数依赖，那么F的闭包中也没有</li>\n</ul>\n</li>\n<li>3NF：<ul>\n<li>注意，属性A可以来自不同的CK集合</li>\n<li>只需要对已有的FD进行判断</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"存储结构\"><a href=\"#存储结构\" class=\"headerlink\" title=\"存储结构\"></a>存储结构</h3><blockquote>\n<p>似乎不是经常考，了解概念</p>\n</blockquote>\n<h2 id=\"文件结构\"><a href=\"#文件结构\" class=\"headerlink\" title=\"文件结构\"></a>文件结构</h2><ul>\n<li>面向列的存储可以在现代CPU中实现向量处理</li>\n</ul>\n<h4 id=\"定长与变长的记录\"><a href=\"#定长与变长的记录\" class=\"headerlink\" title=\"定长与变长的记录\"></a>定长与变长的记录</h4><ul>\n<li><p>如果是<strong>定长记录</strong>，为了避免删除记录时调整结构的较大时间成本，可以为维护一个<strong>空表</strong>，将删除之后的空间通过链表的方式连接，之后插入的时候，首先插入到空表中，如果没有空余的位置，再插入到文件的末尾</p>\n</li>\n<li><p>如果记录是变长的，在定长和变长之间存在一个<strong>空位图：</strong></p>\n<ul>\n<li><p>位数 &#x3D; 变长记录的个数</p>\n</li>\n<li><p>某个记录为空时 &#x3D;&#x3D;&gt; 对应的bit为 1</p>\n</li>\n<li><p>定长的信息包含：</p>\n<ul>\n<li>变长属性的定长属性信息（开始的偏移量+长度）</li>\n<li>定长属性的值</li>\n</ul>\n</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250529152608718.png?imageSlim\"\n                     \n                ></li>\n</ul>\n<h3 id=\"B-树相关\"><a href=\"#B-树相关\" class=\"headerlink\" title=\"B+树相关\"></a>B+树相关</h3><h4 id=\"索引的block大小\"><a href=\"#索引的block大小\" class=\"headerlink\" title=\"索引的block大小\"></a>索引的block大小</h4><p>假设指针和search-key的大小分别是a，b 那么block的扇出n ( <em><strong>fan-out rate</strong></em> )就是：</p>\n<p>$$<br>n &#x3D; \\lfloor \\frac{B-a}{a+b} \\rfloor + 1<br>$$</p>\n<blockquote>\n<p>注意最左侧存在一个单独的指针，然后是一系列的键值对；</p>\n<p>扇出也就是B+树的阶数</p>\n</blockquote>\n<h4 id=\"children的关系\"><a href=\"#children的关系\" class=\"headerlink\" title=\"children的关系\"></a>children的关系</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250529182824693.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>此处的 <code>n</code>就是之前计算得到的扇出；</p>\n<p>对于内部节点，最小值的估计是<strong>孩子而非关键字</strong>的个数！关键字key的个数是孩子数（指针）- 1</p>\n<p>注意叶子节点根据索引值指向对应物理地址的记录，所以是n-1个孩子</p>\n<p>叶子节点的最右侧的指针用于串联叶子节点的链表</p>\n</blockquote>\n<p>非叶子节点类似于多级、稀疏索引。</p>\n<h4 id=\"高度的估计\"><a href=\"#高度的估计\" class=\"headerlink\" title=\"高度的估计\"></a>高度的估计</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250529184340241.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>高度最大估计如上所示；当叶子节点都满时，有最小高度 $ h &#x3D; \\lceil \\log_n(K) \\rceil)$.</p>\n</blockquote>\n<h4 id=\"操作相关\"><a href=\"#操作相关\" class=\"headerlink\" title=\"操作相关\"></a>操作相关</h4><p><strong>删除：</strong></p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250529185626454.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"计算高度\"><a href=\"#计算高度\" class=\"headerlink\" title=\"计算高度\"></a>计算高度</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250529192439172.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>根节点最少有2个子节点</p>\n</blockquote>\n<ul>\n<li><p>B+树的范围查找：</p>\n<ul>\n<li>如果是查找 &lt;&#x3D; x, 直接从第一个叶子节点开始按照链表遍历；</li>\n<li>反之，从根节点开始寻找第一个满足条件的叶子节点，然后遍历到底</li>\n</ul>\n</li>\n<li></li>\n<li><p>如果B+树的索引是字符串等变长的，可以采取前缀的方式来压缩索引项的大小，从而增大扇出n</p>\n</li>\n</ul>\n<h4 id=\"bottom-up\"><a href=\"#bottom-up\" class=\"headerlink\" title=\"bottom-up\"></a>bottom-up</h4><ol>\n<li>如果记录已经存在，可以从叶子节点开始自底向上构造（首先排序）</li>\n</ol>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250529200732757.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>这种技术也用在了<strong>LSM</strong>的的构建上–当底层的L满了的时候，将其融合并自底向上构建</p>\n</blockquote>\n<ol start=\"2\">\n<li>如果要批量插入，也可以先排序然后一起插入，可以有效减少访问的block数量</li>\n</ol>\n<p><em><strong>TODO</strong></em>：分析成本的估计</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250529201122223.png?imageSlim\"\n                     \n                >\n\n<h3 id=\"其他结构\"><a href=\"#其他结构\" class=\"headerlink\" title=\"其他结构\"></a>其他结构</h3><h4 id=\"LSM\"><a href=\"#LSM\" class=\"headerlink\" title=\"LSM\"></a>LSM</h4><ul>\n<li>将对数据的修改增量保存在内存中，达到一定的限制后批量写入磁盘，提升了写性能；</li>\n<li>但是因此降低了一定的读性能</li>\n</ul>\n<h4 id=\"Buffer-Tree\"><a href=\"#Buffer-Tree\" class=\"headerlink\" title=\"Buffer Tree\"></a>Buffer Tree</h4><p>为节点增加内部的缓冲区:</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250531114954357.png?imageSlim\"\n                     \n                >\n\n<ul>\n<li>插入: 如果缓冲区有空闲, 优先插入缓冲区中;<ul>\n<li>如果发生了节点的分裂, 注意同时管理缓冲区的转移;</li>\n<li>缓冲区内部也是有序的.</li>\n</ul>\n</li>\n<li>查询: 需要在缓冲区中进一步查找</li>\n</ul>\n<h4 id=\"Bitmap\"><a href=\"#Bitmap\" class=\"headerlink\" title=\"Bitmap\"></a>Bitmap</h4><p>将<strong>Record</strong>标号, 然后为<strong>每个属性</strong>都建立一个 bitmap, <code>0</code>表示对应的位置不是当前的属性, <code>1</code> 表示符合当前属性.</p>\n<ul>\n<li>bitmap使得两个属性通过 <code>and</code> 操作就找到对应的record.</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://note.noughtq.top/system/db/images/lec10/20.png\"\n                      alt=\"img\" style=\"zoom:50%;\" \n                >\n\n<h3 id=\"Index\"><a href=\"#Index\" class=\"headerlink\" title=\"Index\"></a>Index</h3><ul>\n<li>顺序索引分为了稠密和稀疏两类，后者只能用于顺序文件，因为只有部分的search-key存在索引<ul>\n<li>如果搜索键没有重复的，那么稠密的顺序索引就包含了所有的搜索键的index；否则对于每一个搜索键，我们只需要一个开始的index，然后可以线性搜索得到</li>\n</ul>\n</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250529165232766.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"辅助索引\"><a href=\"#辅助索引\" class=\"headerlink\" title=\"辅助索引\"></a>辅助索引</h4><blockquote>\n<p>i.e. secondary key， 与primary-key（顺序）有所区别</p>\n</blockquote>\n<p>当数据文件中的记录顺序和索引文件中的索引项的顺序不一致时：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250529165410618.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>可以看到，辅助索引首先指向了一个bucket，bucket中存在二级索引</p>\n</blockquote>\n<h4 id=\"散列索引\"><a href=\"#散列索引\" class=\"headerlink\" title=\"散列索引\"></a>散列索引</h4><p>选择索引，利用哈希函数计算K到B的映射，哈希值相同的索引项放在了一个bucket中</p>\n<ul>\n<li><p><em><strong>overflow chaining</strong></em>：如果某个bucket内部的项太多了，系统将分配一个～，用于存储额外的索引项（bucket本身也是一个链表）</p>\n</li>\n<li><p>为了减少上述桶溢出发生的概率，我们可以如此设置桶的数量$n_b$：</p>\n<p>$$<br>n_b &#x3D; \\frac{n_r}{f_r} \\cdot (1+d)<br>$$</p>\n<blockquote>\n<p>其中，分子和分母分别表示记录总数和每个桶的记录数量；d称为<em><strong>fudge factor</strong></em>，通常设置为0.2</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"Query-Processing\"><a href=\"#Query-Processing\" class=\"headerlink\" title=\"Query Processing\"></a>Query Processing</h2><ul>\n<li>整体思想: 先选择、再投影、最后连接和输出</li>\n</ul>\n<p>成本估计：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250607230145795.png?imageSlim\"\n                     \n                >\n\n<h3 id=\"Join-cost\"><a href=\"#Join-cost\" class=\"headerlink\" title=\"Join-cost\"></a>Join-cost</h3><h4 id=\"嵌套循环\"><a href=\"#嵌套循环\" class=\"headerlink\" title=\"嵌套循环\"></a>嵌套循环</h4><table>\n<thead>\n<tr>\n<th>join方式</th>\n<th>块传输次数</th>\n<th>寻道次数</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Nested-Loop</td>\n<td>$b_r + n_r\\cdot b_s$</td>\n<td>$b_r + n_r$</td>\n<td></td>\n</tr>\n<tr>\n<td>Block Nested-Loop</td>\n<td>$b_r + b_r\\cdot b_s$</td>\n<td>$2\\cdot b_r$</td>\n<td>s的block顺序存储，对于每个$b_r$寻道s的block起点，然后顺序读取</td>\n</tr>\n<tr>\n<td>Index Nested-Loop</td>\n<td>TODO</td>\n<td></td>\n<td>条件：inner在连接属性上具有index</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>在最好的情况下，嵌套和块嵌套的循环，内存可以装下两个关系，因此块传输次数为block的个数，寻道次数均为2</p>\n</blockquote>\n<p>由于上述的计算是基于每次都读取外层关系1个block，我们可以继续改进上述的方法，让其每次读取M-2个block，留下2个block分别用于读取s的block和输出所用的空间</p>\n<blockquote>\n<p>其中 $M$ 为内存大小的block块数；每次读取r中一连串的block之后，读取s的block，并将s的record逐个与前者的记录比较</p>\n</blockquote>\n<p>此时，块嵌套的块传输次数和寻道次数分别为：</p>\n<p>$$<br>b_r + \\lceil\\frac{b_r}{M-2}\\rceil \\cdot b_s \\text{ 与 } 2\\cdot\\lceil\\frac{b_r}{M-2}\\rceil<br>$$</p>\n<h4 id=\"merge-join\"><a href=\"#merge-join\" class=\"headerlink\" title=\"merge join\"></a>merge join</h4><ul>\n<li>要求关系按照连接属性有序排列，否则优先sort</li>\n<li></li>\n</ul>\n<h3 id=\"Hash-join\"><a href=\"#Hash-join\" class=\"headerlink\" title=\"Hash join\"></a>Hash join</h3><ul>\n<li>利用哈希函数，将连接属性具有相同哈希值的元组放在一个集合&#x2F;划分</li>\n<li>对两个关系分别计算哈希值并划分后，我们只需要考虑对应划分对$s_i$,$r_i$</li>\n<li>之后，我们在上述的每个划分对，使用索引嵌套循环连接：<ul>\n<li>为inner关系<em><strong>build</strong></em>一个哈希索引，从outer关系中<em><strong>probe</strong></em>查找对应的元组</li>\n<li>分别称r，s为探测输入和构建输入</li>\n<li>构建哈希索引的哈希函数必须和第一步的哈希函数不同</li>\n</ul>\n</li>\n<li>如果构建关系包含$b_s$个块，每个划分的大小不超过$M$，则划分的数量至少为$\\lceil \\frac{b_s}{M}\\rceil$</li>\n</ul>\n<p>实际进行划分之后，我们需要将较小的关系作为 <strong>build</strong> 所用的关系;</p>\n<p>哈希函数的值域决定了分区n的大小, 为了使得si均能存放在mem中,要求 :</p>\n<p>$$<br>n_h \\geq \\lceil b_s &#x2F; M \\rceil \\cdot f<br>$$</p>\n<blockquote>\n<p>其中的 $f$ 被称为修正系数, 一般设置为 1. 2</p>\n</blockquote>\n<h4 id=\"递归划分\"><a href=\"#递归划分\" class=\"headerlink\" title=\"递归划分\"></a>递归划分</h4><blockquote>\n<p><strong>Recursive partitioning</strong>  required if number of partitions n is greater than number of pages <em>M</em> of memory.</p>\n</blockquote>\n<p>不需要递归划分的条件:</p>\n<p>$$<br>M &gt; n_h + 1 \\M &gt; b_s &#x2F; M + 1 \\ \\text{近似于} M &gt; \\sqrt{b_s}<br>$$</p>\n<h4 id=\"成本分析\"><a href=\"#成本分析\" class=\"headerlink\" title=\"成本分析\"></a>成本分析</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609150516608.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>为输入和输出分配缓冲块个数的提示：</p>\n<p><em><strong>two buffer pages are available for each partition during the hash partitioning phase.</strong></em></p>\n<p>此时的$b_b$ &#x3D; 2</p>\n</blockquote>\n<h3 id=\"外排序\"><a href=\"#外排序\" class=\"headerlink\" title=\"外排序\"></a>外排序</h3><p>cost分析:</p>\n<ul>\n<li>块传输</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250607155431473.png?imageSlim\"\n                     \n                >\n\n<ul>\n<li>seek</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250607155511090.png?imageSlim\"\n                     \n                >\n\n<h3 id=\"物化与流水线\"><a href=\"#物化与流水线\" class=\"headerlink\" title=\"物化与流水线\"></a>物化与流水线</h3><ul>\n<li><strong>物化</strong>：按照顺序对表达式求值，将中间的计算结果物化为临时关系，并且需要将临时关系表写入disk</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://note.noughtq.top/system/db/images/lec11/7.png\"\n                      alt=\"img\" style=\"zoom:50%;\" \n                >\n\n<ul>\n<li><strong>流水线</strong>：同时对多个表达时求值，将表达式的运算结果立即传入需要的表达式，无需将中间结果写入disk<ul>\n<li><strong>生产驱动型流水线.</strong><ul>\n<li>从下往上主动生成元组.</li>\n</ul>\n</li>\n<li><strong>需求驱动型流水线.</strong><ul>\n<li>从最上层的输出, 递归调用下层的函数 <code>next()</code>, 直到最底层为 <code>close()</code></li>\n<li>向流水线顶端的操作请求元组</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Query-Optimization\"><a href=\"#Query-Optimization\" class=\"headerlink\" title=\"Query Optimization\"></a>Query Optimization</h2><p>主要参考ppt的习题</p>\n<h2 id=\"并发控制\"><a href=\"#并发控制\" class=\"headerlink\" title=\"并发控制\"></a>并发控制</h2><ul>\n<li>可串行化调度</li>\n<li><strong>前驱图（优先图）</strong><ul>\n<li>注意绘制需要根据给出的schedule，从上往下看是否存在冲突</li>\n<li>将事务作为节点, 存在冲突的事务之间建立边,  $T_i\\rightarrow T_j$表示冲突之中，前者的操作先发生，后者的操作后发生；</li>\n</ul>\n</li>\n<li><em><strong>recoverable schedule</strong></em> 可恢复调度<ul>\n<li>依赖于T1写入的数据的T2，需要在前者commit之后，后者才能<strong>commit</strong></li>\n</ul>\n</li>\n<li><em><strong>Cascadeless Schedules</strong></em> 无级联调度<ul>\n<li>每一对存在冲突的事务, 前者事务的提交先于后者数据对的读取</li>\n<li>无级联调度都是可恢复的.</li>\n</ul>\n</li>\n<li><strong>等待图</strong><ul>\n<li>边 $T_i\\rightarrow T_j$ 表示事务i正在等待后者释放有关数据的锁； 当后者释放这个锁时，将这条边删除</li>\n<li>当且仅当等待图中存在环时，系统中就<strong>出现了死锁</strong></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"两阶段锁协议\"><a href=\"#两阶段锁协议\" class=\"headerlink\" title=\"两阶段锁协议\"></a>两阶段锁协议</h4><ul>\n<li>无法保证解决死锁的问题<ul>\n<li>但是按照排序关系来获得锁可以避免产生死锁</li>\n<li>Two phase locking can not avoid deadlock.To acquire locks <strong>in partial order</strong> of the data can avoid deadlock.</li>\n</ul>\n</li>\n<li><strong>strict two-phase locking</strong><ul>\n<li>每个事务保持exclusive锁直到结束；</li>\n<li>可以解决级联回滚和不可恢复的问题</li>\n</ul>\n</li>\n<li>根据～得到的调度<strong>一定是冲突可序列化</strong>的，这意味着如果前驱图存在环，一定不是由～得到的调度<ul>\n<li>按照所有事务的<strong>lock point</strong> （当前事务得到最后一个lock的时间点）排序，即可得到串行化顺序</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"避免死锁\"><a href=\"#避免死锁\" class=\"headerlink\" title=\"避免死锁\"></a>避免死锁</h4><p>发生冲突的锁请求之间：</p>\n<ul>\n<li><code>wait-die</code>： 如果后者的时间戳更小，i.e. 更早开始 <code>begin</code>, 那么后者可以等待，否则回滚后者的操作；</li>\n<li><code>wound-wait</code>:反之，后者 <code>begin</code>开始得较晚时，可以等待，否则回滚 <code>&lt;u&gt;</code>前者 <code>&lt;/u&gt;</code>（前者被后者击伤）</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250515154634003.png?imageSlim\"\n                     \n                >\n\n<h2 id=\"错误恢复\"><a href=\"#错误恢复\" class=\"headerlink\" title=\"错误恢复\"></a>错误恢复</h2><h3 id=\"普通恢复\"><a href=\"#普通恢复\" class=\"headerlink\" title=\"普通恢复\"></a>普通恢复</h3><h4 id=\"简单流程\"><a href=\"#简单流程\" class=\"headerlink\" title=\"简单流程\"></a>简单流程</h4><ul>\n<li>redo：<ul>\n<li>正向遍历，重做；</li>\n<li>如果碰到了新的事务就将其加入undo-list</li>\n<li>如果碰到了事务的commit&#x2F;abort，就将其从undo-list中移除</li>\n</ul>\n</li>\n<li>undo：<ul>\n<li>从末尾开始逆向遍历</li>\n<li>undo的时候产生undo日志（注意区分逻辑操作）</li>\n<li>碰到了undo-list中的事务才undo，并且碰到了对应的start写入对应的abort日志</li>\n<li>所有的undo事务都写入了abort后结束</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"checkpoint\"><a href=\"#checkpoint\" class=\"headerlink\" title=\"checkpoint\"></a>checkpoint</h4><ul>\n<li>普通的checkpoint：在写入checkpoint的log之前，此前的活跃事务停止更新，直到将buffer里的修改全部flush到disk，才写入checkpoint的log表示更新完毕，然后继续执行<ul>\n<li>这样可以确保，在checkpoint之前commit的事务，其更新一定反应到了disk当中；</li>\n</ul>\n</li>\n<li>fuzzy-checkpoint：<ul>\n<li>为了避免上述的阻塞而设计，允许写入checkpoint的log之后，可以继续执行日志，同时将先前的修改写到disk</li>\n<li>但是这样伴随了一个问题，可能有的修改正在写入就发生了crash，我们需要一个机制确保处理这种情况；</li>\n</ul>\n</li>\n<li><em><strong>last-checkpoint</strong></em>：将最后一个完成的检查点记录在日志中的位置存储在硬盘上的一个固定位置，即最后检查点。系统在写入检查点记录时不会更新此信息。相反，在写入检查点记录之前，它创建一个包含所有已修改缓存块的列表。只有当列表中的所有缓冲区块都已输出到磁盘后，才会更新最后检查点信息。</li>\n</ul>\n<h4 id=\"undo产生的日志\"><a href=\"#undo产生的日志\" class=\"headerlink\" title=\"undo产生的日志\"></a>undo产生的日志</h4><p>在逻辑操作中，如果逻辑操作已经完成和逻辑操作未完成，面临回滚时的日志类型不同：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250530190917480.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p><strong>为什么需要operation-abort的信号？</strong></p>\n<p>让operation-abort的信号在undo阶段被发现时，直接跳到对应的begin，避免已经在redo期间执行的操作被再次执行</p>\n</blockquote>\n<h3 id=\"Aries恢复\"><a href=\"#Aries恢复\" class=\"headerlink\" title=\"Aries恢复\"></a>Aries恢复</h3><ul>\n<li>使用LSN标注日志</li>\n<li>使用dirty page table避免不必要的redo</li>\n<li>RecLSN：<strong>第一次</strong>变成脏页对应的LSN</li>\n</ul>\n<h4 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h4><ul>\n<li>相比之前的恢复算法，多了第一步的分析阶段：<ul>\n<li>分析dirty table，取RecLSN的最小值作为<strong>Redo</strong>的起点（如果不存在就取checkpoint的LSN）</li>\n<li>分析阶段本身是从检查点开始正向遍历的</li>\n<li>分析阶段同样需要更新dirty table和活跃事务表</li>\n<li><strong>分析的时候，只会分析log，但是不会读取数据文件page，也就是不会读取page</strong></li>\n</ul>\n</li>\n<li>redo的阶段与普通恢复整体相同：<ul>\n<li>发现更新记录的时候，如果不在脏页表中的page之列，or  更新记录的LSN小于页面的RecLSN，就忽略；<ul>\n<li>否则，我们需要读取page，然后再比较pageLSN与log LSN；</li>\n<li>如果log LSN 大于 页面的pageLSN就redo</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>undo阶段<ul>\n<li>为了撤销undo-list中的事务，利用分析阶段得到的lastLSN(选择<strong>最大值</strong>作为起点)，开始反向遍历重做</li>\n<li>重做的时候也会生成仅重做日志的CLR，但是不同之处在于：<ul>\n<li>ARIES算法的CLR还会在字段<strong>UndoNextLSN</strong>中记录该事务当前LSN的<strong>prevLSN</strong></li>\n<li>这是为了应对undo过程中crash情景：可以利用CLR知道下一条undo的LSN后，继续undo</li>\n</ul>\n</li>\n<li>实际上做题的时候，往往不会呈现上述的 <code>xxLSN</code>,而是类似于普通恢复的仅重做日志，类似于：<div class=\"code-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;T4, 102.1, 62&gt;</span><br><span class=\"line\">&lt;T4, abort&gt;</span><br></pre></td></tr></table></figure></div></li>\n<li>符合下列条件的记录可以跳过：<ul>\n<li><em><strong>TODO</strong></em></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"简单的例子\"><a href=\"#简单的例子\" class=\"headerlink\" title=\"简单的例子\"></a>简单的例子</h4><p>演示了xxLSN的作用：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250526233737314.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p><strong>TODO</strong>：教材中声明了脏页表储存了pageLSN，如果DirtyPageTable已经包含了pageLSN，为什么还要从disk中读取page再比较pageLSN和当前log LSN？</p>\n<p>因此在redo阶段，需要首先比较当前LSN与RecLSN，如果可能需要修改，就读取对应page，然后比较其pageLSN与当前LSN的大小</p>\n</blockquote>\n<h4 id=\"课本的例子\"><a href=\"#课本的例子\" class=\"headerlink\" title=\"课本的例子\"></a>课本的例子</h4><p>演示了算法的具体流程：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined1748309403783.png?imageSlim\"\n                     \n                >\n\n<p>CLR不需要写abort</p>\n<p>在事务commit的时候，不一定需要将数据都flush到内存中</p>\n<ul>\n<li>事务总是可以写log</li>\n<li>flush的时候，先将日志flush到内存中，然后将数据flush到内存中</li>\n</ul>\n<p>undo产生日志的时候，也是一条一条产生仅重做日志的，不会从末端沿着prevLSN直接回溯到最开始）比如：</p>\n<div class=\"code-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;T3, 8002.1, 66&gt;</span><br><span class=\"line\">&lt;T3, 8002.1, 55&gt;</span><br><span class=\"line\">&lt;T3, abort&gt;</span><br></pre></td></tr></table></figure></div>\n\n<h1 id=\"习题\"><a href=\"#习题\" class=\"headerlink\" title=\"习题\"></a>习题</h1><h3 id=\"SQL练习\"><a href=\"#SQL练习\" class=\"headerlink\" title=\"SQL练习\"></a>SQL练习</h3><ul>\n<li>使用聚合函数时不一定需要 <code>group by</code>；</li>\n<li>注意符号：不等于 <code>&lt;&gt;</code></li>\n</ul>\n<h4 id=\"练习1\"><a href=\"#练习1\" class=\"headerlink\" title=\"练习1\"></a>练习1</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250527153731212.png?imageSlim\"\n                     \n                >\n\n<p>主要关注第四题：</p>\n<div class=\"code-container\" data-rel=\"Sql\"><figure class=\"iseeu highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> title <span class=\"keyword\">from</span> movie</span><br><span class=\"line\"><span class=\"keyword\">except</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> title <span class=\"keyword\">from</span> movie</span><br><span class=\"line\"><span class=\"keyword\">where</span> <span class=\"keyword\">exists</span>(<span class=\"keyword\">select</span> <span class=\"operator\">*</span></span><br><span class=\"line\">\t<span class=\"keyword\">from</span> comment A, comment B</span><br><span class=\"line\">\t<span class=\"keyword\">where</span> A.title <span class=\"operator\">=</span> movie.title <span class=\"keyword\">and</span> A.user_name <span class=\"operator\">=</span> B.user_name</span><br><span class=\"line\">\t<span class=\"keyword\">and</span> B.titel <span class=\"operator\">=</span> <span class=\"string\">&#x27;the avenger&#x27;</span></span><br><span class=\"line\">\t<span class=\"keyword\">and</span> A.grade <span class=\"operator\">&lt;=</span> B.grade</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<ul>\n<li>题目的意思是：找出给xx打分的都比给 <code>the avenger</code>打分高的xx（电影title）</li>\n<li>考虑使用 <code>except</code>，涉及到单表之间的比较，因此将2个comment作笛卡尔积</li>\n<li>利用title确保与外表相连接；利用user_name确保2个内表讨论的是同一个用户的打分</li>\n</ul>\n</blockquote>\n<h4 id=\"练习2\"><a href=\"#练习2\" class=\"headerlink\" title=\"练习2\"></a>练习2</h4><p>题目：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250527155632148.png?imageSlim\"\n                     \n                >\n\n<p>第一问：将给出的SQL查询转换为不包含嵌套子查询的版本</p>\n<div class=\"code-container\" data-rel=\"Sql\"><figure class=\"iseeu highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> C.cno, C.name <span class=\"comment\">-- 使用 DISTINCT 是为了避免同一张 CS 卡因有多笔交易符合条件而被多次列出</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> card <span class=\"keyword\">AS</span> C</span><br><span class=\"line\"><span class=\"keyword\">JOIN</span> detail <span class=\"keyword\">AS</span> D1 <span class=\"keyword\">ON</span> C.cno <span class=\"operator\">=</span> D1.cno <span class=\"comment\">-- 将 card 与其消费记录 D1 连接</span></span><br><span class=\"line\"><span class=\"keyword\">JOIN</span> detail <span class=\"keyword\">AS</span> D2 <span class=\"keyword\">ON</span> D1.cdate <span class=\"operator\">=</span> D2.cdate <span class=\"keyword\">AND</span> D1.pno <span class=\"operator\">=</span> D2.pno <span class=\"comment\">-- 将 D1 的消费记录与 D2 的消费记录连接，条件是时间和地点相同</span></span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> C.depart <span class=\"operator\">=</span> <span class=\"string\">&#x27;CS&#x27;</span> <span class=\"comment\">-- 过滤 CS 部门的卡</span></span><br><span class=\"line\">  <span class=\"keyword\">AND</span> D2.cno <span class=\"operator\">=</span> <span class=\"string\">&#x27;c0002&#x27;</span>; <span class=\"comment\">-- 过滤 D2，使其只包含卡 &#x27;c0002&#x27; 的消费记录</span></span><br></pre></td></tr></table></figure></div>\n\n<p>第二问：转换为代数表达式：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250527160740028.png?imageSlim\"\n                     \n                >\n\n<p>第三问：编写SQL语句，找出2018年仅在一个校园中使用的卡片</p>\n<div class=\"code-container\" data-rel=\"Sql\"><figure class=\"iseeu highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> cno</span><br><span class=\"line\"><span class=\"keyword\">from</span> detail <span class=\"keyword\">natural</span> <span class=\"keyword\">join</span> pos</span><br><span class=\"line\"><span class=\"keyword\">where</span> <span class=\"keyword\">year</span>(detail.cdate) <span class=\"operator\">=</span> <span class=\"number\">2018</span></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> cno</span><br><span class=\"line\"><span class=\"keyword\">having</span> <span class=\"built_in\">count</span>(<span class=\"keyword\">distinct</span> campus) <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li>注意 <code>detail</code>中就有cno的信息，因此不需要和card表join</li>\n</ul>\n<p>第四问：写一个SQL语句，找出2018年“紫金港”校园中具有最大卡消费总量的pos。</p>\n<ul>\n<li><p>使用 <code>having</code>子句的版本</p>\n<div class=\"code-container\" data-rel=\"Sql\"><figure class=\"iseeu highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> pno</span><br><span class=\"line\"><span class=\"keyword\">from</span> detail <span class=\"keyword\">natural</span> <span class=\"keyword\">join</span> pos</span><br><span class=\"line\"><span class=\"keyword\">where</span> pos.campus<span class=\"operator\">=</span>’紫金港’ <span class=\"keyword\">and</span> <span class=\"keyword\">year</span>（detail.cdate）<span class=\"operator\">=</span><span class=\"number\">2018</span></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> pno</span><br><span class=\"line\"><span class=\"keyword\">having</span> <span class=\"built_in\">sum</span>(amount) <span class=\"operator\">&gt;=</span> <span class=\"keyword\">all</span> ( <span class=\"comment\">-- 注意这里的比较</span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> <span class=\"built_in\">sum</span>(amount)</span><br><span class=\"line\">    <span class=\"keyword\">from</span> detail <span class=\"keyword\">natural</span> <span class=\"keyword\">join</span> pos</span><br><span class=\"line\">    <span class=\"keyword\">where</span> pos.campus<span class=\"operator\">=</span><span class=\"string\">&#x27;紫金港&#x27;</span> <span class=\"keyword\">and</span> <span class=\"keyword\">year</span>(detail.cdate) <span class=\"operator\">=</span> <span class=\"number\">2018</span></span><br><span class=\"line\">    <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> pno</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></div></li>\n<li><p>也可以搭配 <code>order</code>和 <code>limit 1</code>直接筛选：</p>\n<div class=\"code-container\" data-rel=\"Sql\"><figure class=\"iseeu highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> pno</span><br><span class=\"line\"><span class=\"keyword\">from</span> detail <span class=\"keyword\">natural</span> <span class=\"keyword\">join</span> pos</span><br><span class=\"line\"><span class=\"keyword\">where</span> pos.campus<span class=\"operator\">=</span>’紫金港’ <span class=\"keyword\">and</span> <span class=\"keyword\">year</span>（detail.cdate）<span class=\"operator\">=</span><span class=\"number\">2018</span></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> pno</span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> <span class=\"built_in\">sum</span>(amount) <span class=\"keyword\">desc</span> <span class=\"comment\">-- 注意这里是 sum(amount)</span></span><br><span class=\"line\">limit <span class=\"number\">1</span></span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>这种操作带来的差异是，如果存在多个相同的最大值，还是只会选择一个，所以比起使用嵌套子查询还是有劣势</p>\n</blockquote>\n</li>\n</ul>\n<p>第五问：编写一系列SQL语句来完成以下事务：卡片“c0002”在pos“p001”处消费20，时间为2018-07-02 08:08:08</p>\n<div class=\"code-container\" data-rel=\"Sql\"><figure class=\"iseeu highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">update</span> card <span class=\"keyword\">set</span> </span><br><span class=\"line\">balance <span class=\"operator\">=</span> balance <span class=\"operator\">-</span> <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"keyword\">where</span> cno <span class=\"operator\">=</span> <span class=\"string\">&#x27;c0002&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert into</span> detail(cno,pno,cdate,ctime,amount)</span><br><span class=\"line\">\t<span class=\"keyword\">values</span>(<span class=\"string\">&#x27;c0002&#x27;</span>,<span class=\"string\">&#x27;p001&#x27;</span>,<span class=\"string\">&#x27;2018-07-02&#x27;</span>,<span class=\"string\">&#x27;08:08:08&#x27;</span>,<span class=\"number\">20</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">commit</span>;</span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li>注意需要同步更新card；</li>\n<li>需要commit</li>\n</ul>\n<h3 id=\"范式相关\"><a href=\"#范式相关\" class=\"headerlink\" title=\"范式相关\"></a>范式相关</h3><h4 id=\"无损分解\"><a href=\"#无损分解\" class=\"headerlink\" title=\"无损分解\"></a>无损分解</h4><ul>\n<li>课本的定义：</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250528142319738.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>具体的验证，可以采取计算属性闭包的方式来推导</p>\n</blockquote>\n<ul>\n<li>一个简单的例子：</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250528142533000.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>如果分解的结果不是两个，而是多个关系，并且给出了分解的过程（可能是自己推的），那么可以每次对中间结果判断一下是否满足无损分解，如果都满足就认为整体是无损分解的；</p>\n</blockquote>\n<h4 id=\"dependency-preserving\"><a href=\"#dependency-preserving\" class=\"headerlink\" title=\"dependency-preserving\"></a>dependency-preserving</h4><p>回顾课本的定义：</p>\n<ul>\n<li>the set $F_i$ of all functional dependencies in $F^+$ that include only attributes of Ri</li>\n<li>也即是将R进行分解为Ri之后, Fi是F的闭包中存在于Ri相关属性的部分.</li>\n<li>因此, <strong>Fi不一定是F的部分</strong>.</li>\n</ul>\n<p>我们定义 上述的 $F_i$ 的并集为 F’, 如果满足:</p>\n<p>$$<br>F’^+ &#x3D; F^+<br>$$</p>\n<p>也就是, 如果F’的闭包等于F的闭包, 则称上述的R的分解为 <code>dependency-preserving decomposition</code></p>\n<hr>\n<p>由此可见，我们判断一个分解是否为依赖保留的分解时，只需要计算对应$F_i$的并集的闭包，然后判断是否与原本的F的闭包相等即可。</p>\n<ul>\n<li>一个简单的例子：判断上述的分解是否为～</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250528142949091.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>上述的F1还包含了 BC -&gt; A （根据F条件下的属性闭包计算得到）</p>\n</blockquote>\n<h4 id=\"BCNF分解\"><a href=\"#BCNF分解\" class=\"headerlink\" title=\"BCNF分解\"></a>BCNF分解</h4><p>根据无损分解的定义，满足BCNF范式的分解就满足了<strong>无损分解</strong>的要求。（但是不一定满足依赖保留）</p>\n<ul>\n<li>一个简单的例子：将上述的例子转换为无损分解的BCNF分解</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250528143530426.png?imageSlim\"\n                     \n                >\n\n<p>注意，判断是否满足BCNF的时候 ,  $F_i$ 也来自于 $F^+$中，参考下面的具体说明：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefinedad580709cdfb24b1ec265bc375880ad5.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"满足3NF的分解\"><a href=\"#满足3NF的分解\" class=\"headerlink\" title=\"满足3NF的分解\"></a>满足3NF的分解</h4><p>3NF在BCNF的基础上多了一条，也就是右侧的属性是候选键的部分。因此，我们需要先借助FD来推导候选键有哪些。</p>\n<p>标准的分析流程：</p>\n<ul>\n<li><p><strong>计算F的一个最小覆盖 F_min。满足三个条件：</strong></p>\n<ul>\n<li><strong>F_min 与 F 是等价的（即它们逻辑蕴含相同的 FD 集合）。</strong></li>\n<li><strong>F_min 中没有任何冗余的 FD（移除任何一条 FD 都会改变 F_min 的闭包）。</strong></li>\n<li><strong>F_min 中每个 FD X -&gt; Y 的右边 Y 是单属性的，且没有任何冗余的属性</strong></li>\n</ul>\n</li>\n<li><p><strong>根据 F_min 构建关系模式：</strong></p>\n<ul>\n<li>对于 F_min 中的每一个 FD X -&gt; Y，创建一个关系模式 Ri，其属性集为 X ∪ {Y}。</li>\n</ul>\n</li>\n<li><p><strong>检查是否包含原始关系模式的候选码。检查是否存在某个 Ri 的属性包含了候选键</strong></p>\n<ul>\n<li><strong>如果存在</strong>这样的 Ri，则步骤 2 生成的关系模式集合 {R1, R2, …, Rm} 就是最终的分解结果。</li>\n<li><strong>如果不存在</strong>这样的 Ri，则需要额外创建一个关系模式 R_{m+1}，其属性集就是 K。将这个 R_{m+1} 加入到分解结果中。</li>\n</ul>\n</li>\n</ul>\n<p>一个简单的例子：将上述的分解转换为满足3NF、无损和依赖保留的分解</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250528145420786.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>此处的题目给出的F已经是最小覆盖的Fc，因此可以直接用于分解</p>\n</blockquote>\n<h3 id=\"ER模型练习\"><a href=\"#ER模型练习\" class=\"headerlink\" title=\"ER模型练习\"></a>ER模型练习</h3><h4 id=\"根据描述绘制ER图\"><a href=\"#根据描述绘制ER图\" class=\"headerlink\" title=\"根据描述绘制ER图\"></a>根据描述绘制ER图</h4><ul>\n<li>题干将会给出主要的实体集，我们需要根据描述推导<strong>蕴含的关系</strong></li>\n<li>同时需要注意其中的<strong>数据类型</strong>，比如多值和复合等的格式</li>\n</ul>\n<p>一个简单的例子：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250528163711386.png?imageSlim\"\n                     \n                >\n\n<p>第一问：绘制对应的ER图</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250528163909905.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>此处的多值属性（电话）由 <code>&#123;&#125;</code>包裹。</p>\n</blockquote>\n<h4 id=\"由ER图得到schema\"><a href=\"#由ER图得到schema\" class=\"headerlink\" title=\"由ER图得到schema\"></a>由ER图得到schema</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined2025-05-28_17-13-08-0.png?imageSlim\"\n                     \n                >\n\n<p>对应的schema：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined2025-05-28_17-12-36-0.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>注意：此处的关系中，1对N的belong没有新建schema</p>\n<p>修正： <code>player</code>中的属性应该增加 <code>team_name</code>作为team的外键</p>\n</blockquote>\n<h3 id=\"B-树练习\"><a href=\"#B-树练习\" class=\"headerlink\" title=\"B+树练习\"></a>B+树练习</h3><h4 id=\"计算B-树的高度\"><a href=\"#计算B-树的高度\" class=\"headerlink\" title=\"计算B+树的高度\"></a>计算B+树的高度</h4><ul>\n<li>通过<strong>计算不同高度的最值</strong>，来得出最终的高度：</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250529192439172.png?imageSlim\"\n                     \n                >\n\n<p>此处计算block并没有作用，实际上是比较索引项 $10^6$</p>\n<blockquote>\n<p>关键是记住：</p>\n<ul>\n<li>叶子节点的key范围是 $\\lceil \\frac{n-1}{2} \\rceil $ ~ $(n-1)$</li>\n<li>内部节点的～是 $\\lceil \\frac{n}{2} \\rceil$ ~ $n$ ， 并且根节点的最小值是2</li>\n</ul>\n</blockquote>\n<ul>\n<li>我们也可以<strong>通过扇出n以及索引项来直接利用对数计算进行估计</strong></li>\n</ul>\n<blockquote>\n<p>关键是理解左右两侧的含义：</p>\n<ul>\n<li><p>计算<strong>最小高度</strong>时，我们自底向上地构建全满的B+树，先将k个value按照n-1的规模打包，然后每层n个，因此是</p>\n<p>$$<br>\\lceil \\log_n{\\lceil{k\\ &#x2F;\\ (n-1)\\rceil}} \\rceil + 1<br>$$</p>\n</li>\n<li><ul>\n<li>其中左侧是迭代的次数，因此需要+1补充底层的层数；</li>\n</ul>\n</li>\n<li><p>计算<strong>最大高度</strong>时，我们自顶向下地构建半满的B+树，并且在一开始将根节点特殊处理——只分配两个child，所以我们从第二层开始计算，需要迭代的次数为 $\\lceil \\log_{n&#x2F;2}\\frac{K&#x2F;2}{（n-1）&#x2F;2} \\rceil$, 同理需要+1得到从第二层到叶子层的高度数，最后+1加入根节点的高度：</p>\n<p>$$<br>\\lfloor \\log_{\\lceil n&#x2F;2 \\rceil}\\frac{K&#x2F;2}{\\lceil(n-1)&#x2F;2\\rceil} \\rfloor + 2  \\approx \\lfloor \\log_{\\lceil n&#x2F;2 \\rceil}\\frac{K}{\\lceil(n-1)\\rceil} \\rfloor + 2<br>$$</p>\n</li>\n</ul>\n</blockquote>\n<p>对于上述的推导，我们可以结合第一种方法来给出第二个证明：</p>\n<p>$$<br>2\\cdot \\lceil \\frac{n}{2} \\rceil^ {h-2} \\cdot  \\lceil \\frac{n-1}{2} \\rceil \\leq K(h) \\leq n^{h-1} \\cdot (n-1)<br>$$</p>\n<p>取左侧计算得到：</p>\n<p>$$<br>h \\leq \\lfloor \\log_{\\lceil n&#x2F;2 \\rceil}\\frac{K&#x2F;2}{\\lceil(n-1)&#x2F;2\\rfloor} \\rceil + 2<br>$$</p>\n<blockquote>\n<p>为了满足不等式的条件，应当向下取整</p>\n</blockquote>\n<pre><code>取右侧计算得到：\n</code></pre>\n<p>$$<br>\\lceil \\log_n{k&#x2F;(n-1)} \\rceil + 1 \\leq h<br>$$</p>\n<p>直接利用给定的高度h计算size：</p>\n<p>max:</p>\n<p>$$<br>N^{h-1}\\cdot (N-1)<br>$$</p>\n<p>min:</p>\n<p>$$<br>2\\cdot \\lceil\\frac{N}{2}\\rceil ^{h-2} \\cdot \\lceil \\frac{N-1}{2}\\rceil<br>$$</p>\n<p>然后利用题目给出的索引项个数建立不等式</p>\n<hr>\n<p>实际上，我们在<strong>估算</strong>的时候可以忽略常数的影响，比如：</p>\n<p>$$<br>\\text{minimal height} &#x3D; \\lceil{\\log_N(k)} \\rceil \\ \\text{max height} &#x3D; \\lfloor{\\log_{N&#x2F;2}(k&#x2F;2) + 1}\\rfloor<br>$$</p>\n<h4 id=\"根据索引项估计节点数量\"><a href=\"#根据索引项估计节点数量\" class=\"headerlink\" title=\"根据索引项估计节点数量\"></a>根据索引项估计节点数量</h4><p>关键：利用扇出n估计最后一层的节点数量，然后倒推</p>\n<ul>\n<li>估计最少值时，由$\\lceil \\frac{k}{n-1} \\rceil$计算得到叶子节点的数量N，然后逐步倒推 $\\lceil N&#x2F;n \\rceil$,直到加数为1到达根节点（过程中的计算结果<strong>向上取整，因为小数部分的节点数无法再纳入其他节点</strong>）</li>\n<li>估计最大值时，将上述的除数都换成对应的最小值 $\\lceil (n-1)&#x2F;2 \\rceil$ 与 $\\lceil n&#x2F;2 \\rceil$，但是注意<strong>将每次的计算结果向下取整！因为小数部分的节点数表示无法满足最少个数的要求，无法独立构成节点</strong></li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250530105135776.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p><strong>注意取整方向的差异</strong>：估计最少向上取整；估计最大向下取整</p>\n<p>上面的例题中，max估计的63应为<strong>62</strong></p>\n</blockquote>\n<h4 id=\"计算块传输的次数\"><a href=\"#计算块传输的次数\" class=\"headerlink\" title=\"计算块传输的次数\"></a>计算块传输的次数</h4><p>题目可能给出一个现有的B+树结构以及一系列的访问操作，结合一定的replacer策略，让我们计算块传输的次数，需要注意的是：</p>\n<ul>\n<li>如果题目明确说了是 <em><strong>blocks transferred to buffer</strong></em>  那么我们就不需要考虑将block写回到disk的次数</li>\n</ul>\n<p>一个简单的例子：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250530113134018.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>注意此处内部节点的指针数和key数量</p>\n</blockquote>\n<h4 id=\"删除操作\"><a href=\"#删除操作\" class=\"headerlink\" title=\"删除操作\"></a>删除操作</h4><p>一般来说，分裂时默认左侧的节点元素不少于右侧节点包含的元素个数，可能题目会具体说明右侧不少于左侧。</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605160249126.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>重组 合并 发现需要分裂</p>\n</blockquote>\n<h4 id=\"LSM的成本估计\"><a href=\"#LSM的成本估计\" class=\"headerlink\" title=\"LSM的成本估计\"></a>LSM的成本估计</h4><p>问题：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609141542719.png?imageSlim\"\n                     \n                >\n\n<p>（3）对应的B+树：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609141603785.png?imageSlim\"\n                     \n                >\n\n<p>ans：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609141705099.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p><em><strong>TODO</strong></em>：（2）是什么意思？</p>\n</blockquote>\n<ul>\n<li><p>题目说maximize size  &#x3D; 13， 根据 1 + 3 + 9 &#x3D; 13， 推知最多有3层高</p>\n</li>\n<li><p>查找某个index，可能的范围分别是主存以及disk中的两棵树，分别计算对应的成本，然后加权求和：</p>\n<ul>\n<li>根据上一步计算得到的B+树的高度，如果在主存中，块传输和寻道的成本都是0；如果在第一棵树就是3+3， 在第二棵树就是前面成本的两倍</li>\n<li>因此整体是 (0 + 3 + 6) &#x2F; 3 &#x3D; 3（块传输和seek）</li>\n</ul>\n</li>\n<li><p><em><strong>为什么不需要计算从叶子节点到disk的额外寻道和块传输？</strong></em></p>\n<ul>\n<li>因为题目声明了：<em><strong>look up an index entry ….</strong></em></li>\n<li>这意味着，我们只需要检查某个index是否在叶子节点中包含，所以只需要查找到叶子节点层，不需要根据叶子节点中的指针访问disk中的数据页</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"查询处理练习\"><a href=\"#查询处理练习\" class=\"headerlink\" title=\"查询处理练习\"></a>查询处理练习</h3><h4 id=\"join的成本估计\"><a href=\"#join的成本估计\" class=\"headerlink\" title=\"join的成本估计\"></a>join的成本估计</h4><blockquote>\n<p>这里什么都没有哦～</p>\n</blockquote>\n<h3 id=\"查询优化练习\"><a href=\"#查询优化练习\" class=\"headerlink\" title=\"查询优化练习\"></a>查询优化练习</h3><p>如果题目只是给出了两个关系，让我们计算对应的join成本，我们应该先计算关系各自的block数量，然后选择块较少的作为外层关系</p>\n<ul>\n<li>这是因为此时对应的块传输次数和寻道次数分别为：<br>$$<br>b_r + \\lceil\\frac{b_r}{M-2}\\rceil \\cdot b_s \\text{ 与 } 2\\cdot\\lceil\\frac{b_r}{M-2}\\rceil<br>$$</li>\n</ul>\n<p>如果给出了缓存区的buffer大小$M$，应该考虑使用上述的计算方法，否则认为M &#x3D; 3带入公式</p>\n<h4 id=\"习题1\"><a href=\"#习题1\" class=\"headerlink\" title=\"习题1\"></a>习题1</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250601191021519.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>具体解答参考：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefinedimage-20250506101133270.png?imageSlim\"\n                     \n                >\n\n<ul>\n<li><p><code>where</code>中包含了join的条件, 因此此处的join属性实际上是 <code>pno</code> 和 <code>cdate</code>, 计算对应的V.</p>\n<ol>\n<li>实际上是一组复合的属性, post有100个, cdate有365个可能的取值. 因此估计对应的值域空间是100*365.</li>\n<li><code>/4</code>对应了where中最后一个时间的约束, 是整体的1&#x2F;4.</li>\n</ol>\n</li>\n<li><p>1个block的尺寸是4096bytes, 除以每条记录的尺寸, 得到每个block对应的记录数量. 然后据此计算table对应的block数量.</p>\n</li>\n<li><p><code>cno</code>的bytes是5, 根据题意&#x3D;&#x3D;&gt; pointer的大小是4bytes, 那么每一对键值对是5+4&#x3D;9bytes.</p>\n</li>\n<li><p>计算 fan-out-rate n &#x3D; 455，然后根据公式算出高度为2（注意是建立在cno的索引，不同的cno有10000 &#x3D; K个，据此计算！）</p>\n</li>\n<li><p>根据detail的记录数量, 估算每个card对应的记录数量. 然后根据detail的block的容量, 计算每个card对应的记录的block数量.</p>\n<ol>\n<li>根据 <code>V(name,card)</code> &#x3D; 5000 我们可以知道, 因为card中一共有10k条记录, 所以每个名字平均对应2个card.</li>\n<li>参考</li>\n</ol>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined13b156083431e6cbe7e2beac4e070542.png?imageSlim\"\n                     \n                ></li>\n</ul>\n</blockquote>\n<h4 id=\"习题2\"><a href=\"#习题2\" class=\"headerlink\" title=\"习题2\"></a>习题2</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250601185929781.png?imageSlim\"\n                     \n                >\n\n<p>（2）：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250601190117419.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>优化的分配是：1块给输出，1块给内关系，剩下都分配给外关系</p>\n</blockquote>\n<p>（3）：<em><strong>TODO</strong></em></p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250601190657172.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p><em><strong>SOLUTION：</strong></em></p>\n<p>K &#x3D; 5000， n &#x3D; 60，计算得到高度为 3（答案中max的估计公式有问题，并且应该是向下取整）</p>\n<p>注意此处题目说了为root准备了一个buffer，在每次的遍历中原本的h+1 &#x3D; 4的成本 减去1次，只需要在一开始存入（最后+1）</p>\n<p>公式 $b_r\\cdot(t_T+t_S) + n_r \\cdot c$ 中的$n_r$需要除以500，因为$\\sigma$确定了director（一共有500位不同的～），或者我们可以从成本估计的角度解释：</p>\n<p>$$<br>\\frac{n_{Movie}\\cdot n_{Comment}}{V(title,Movie) \\cdot V(director,Movie)}<br>$$</p>\n</blockquote>\n<h4 id=\"归并排序练习\"><a href=\"#归并排序练习\" class=\"headerlink\" title=\"归并排序练习\"></a>归并排序练习</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250607150028129.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>此处的buffer容量是针对于run的, 也就是output存在2个block; 可以计算得到 (10-2) &#x2F;2  &#x3D; 4 ,每次将4个run归并</p>\n</blockquote>\n<p><em><strong>SOLUTION</strong></em>: 如何计算seek?</p>\n<p>分析:</p>\n<ul>\n<li>此处为每个input row 提供了  <strong>2 buffer block</strong>意味着我们每次seek之后可以直接读取2个blcok而非1个(优化), 从而减少了seek的次数;</li>\n<li>利用每次归并4个runs, 得到总共的pass数量</li>\n<li>注意题目说最终需要写回到disk</li>\n</ul>\n<p>解答: (ljm同学的珍贵手稿)</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined8b4b347f51b2175cfce8ba89bb825dcf.jpg?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>可以直接运用公式， 此处的$b_b$ &#x3D; 2, $M $ &#x3D; 10, $b_r$  &#x3D; 160:</p>\n<p>$$<br>t_T &#x3D; b_r \\cdot (2\\lceil\\log_{\\lfloor\\frac{M}{b_b}-1\\rfloor} (\\frac{b_r}{M})\\rceil+1 \\textcolor{red}{+1}) \\ t_S &#x3D; 2\\cdot \\lceil \\frac{b_r}{M} \\rceil + \\lceil \\frac{b_r}{b_b}\\rceil\\cdot (2\\lceil\\log_{\\lfloor\\frac{M}{b_b}-1\\rfloor} (\\frac{b_r}{M})\\rceil - 1   \\textcolor{red}{+1})<br>$$</p>\n<p>其中加红的，表示需要写回disk的额外成本，如果题目没有明确声明，就不需要加入计算</p>\n</blockquote>\n<h2 id=\"并发控制练习\"><a href=\"#并发控制练习\" class=\"headerlink\" title=\"并发控制练习\"></a>并发控制练习</h2><h4 id=\"绘制前驱图\"><a href=\"#绘制前驱图\" class=\"headerlink\" title=\"绘制前驱图\"></a>绘制前驱图</h4><p>可以根据数据项分组，从当前向下查看：</p>\n<p>习题和解答：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250601193315102.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>判断是否为无级联回滚的调度也很简单，只需要保证读取在提交之后即可，比如：</p>\n<div class=\"code-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T1           | T2           | T3</span><br><span class=\"line\">-------------|--------------|-------------</span><br><span class=\"line\">Read(A)      |              |</span><br><span class=\"line\">Read(B)      |              |</span><br><span class=\"line\">Write(B)     |              |</span><br><span class=\"line\">Commit       |              |</span><br><span class=\"line\">             | Read(B)      |</span><br><span class=\"line\">             | Read(A)      |</span><br><span class=\"line\">             | Write(A)     |</span><br><span class=\"line\">             | Commit       |</span><br><span class=\"line\">                          | Read(A)</span><br></pre></td></tr></table></figure></div>\n\n<p>两阶段锁协议无法解决死锁的问题</p>\n</blockquote>\n<h4 id=\"等待图与死锁\"><a href=\"#等待图与死锁\" class=\"headerlink\" title=\"等待图与死锁\"></a>等待图与死锁</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609153157189.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>注意题目说了，此时还没有事务释放锁；T3没有指向T1的边，因为此时T1没有对B成功加锁</p>\n</blockquote>\n<h2 id=\"错误恢复练习\"><a href=\"#错误恢复练习\" class=\"headerlink\" title=\"错误恢复练习\"></a>错误恢复练习</h2><h4 id=\"脏页表的更新\"><a href=\"#脏页表的更新\" class=\"headerlink\" title=\"脏页表的更新\"></a>脏页表的更新</h4><table>\n<thead>\n<tr>\n<th>PageID</th>\n<th>PageLSN</th>\n<th>RecLSN</th>\n</tr>\n</thead>\n</table>\n<ul>\n<li>如果有新的页面被更新了，加入脏页表，同时设置对应的PageLSN, RecLSN等于当前的log LSN</li>\n<li>只有flush的时候才会清除脏页表中的page entry（我们无法知道什么时候flush到disk，因此一般只增不减）</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602161156079.png?imageSlim\"\n                     \n                >\n\n<h1 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h1><h4 id=\"不同的范式\"><a href=\"#不同的范式\" class=\"headerlink\" title=\"不同的范式\"></a>不同的范式</h4><p><strong>第一范式</strong>  表中的每个字段都是不可再分的最小数据单位，即字段具有原子性；</p>\n<ul>\n<li>如果存在多值属性，需要将其分割位多个单独的</li>\n</ul>\n<p><strong>第二范式</strong> 消除非PK属性对于key的部分函数依赖</p>\n<ul>\n<li><code>A-&gt;B</code> : B 依赖于A</li>\n<li>如果主键是复合的，确保所有非PK属性完全依赖于整个主键，而不是主键的一部分</li>\n</ul>\n<p>第三范式 消除非PK对于key的传递函数依赖</p>\n<ul>\n<li>确保所有非PK属性都直接依赖于PK</li>\n</ul>\n<p>BCNF范式 消除PK对于key的部分与传递函数依赖</p>\n<blockquote>\n<p>TODO：补充与理解</p>\n<p>SOLUTION：书上没有啊？</p>\n</blockquote>\n<h4 id=\"Columnar-Representation\"><a href=\"#Columnar-Representation\" class=\"headerlink\" title=\"Columnar Representation\"></a>Columnar Representation</h4><p>列式存储在数据查询方面表现更好，但是在事务处理方面表现较差</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605153636800.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p><strong>hybrid row&#x2F;column store</strong>： 支持行列两种存储方式的数据库</p>\n<p>根据drawback, <strong>Reduced</strong> cost of tuple deletion and update的说法是错误的</p>\n</blockquote>\n<h4 id=\"线性搜索与index\"><a href=\"#线性搜索与index\" class=\"headerlink\" title=\"线性搜索与index\"></a>线性搜索与index</h4><p>我们根据比较运算符来判断是否需要使用index：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605161903742.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"冲突可序列化与2PL\"><a href=\"#冲突可序列化与2PL\" class=\"headerlink\" title=\"冲突可序列化与2PL\"></a>冲突可序列化与2PL</h4><ul>\n<li>遵循2PL的事务调度一定是冲突可序列化的；<ul>\n<li>所有在树协议下合法的调度也是冲突可序列化的</li>\n</ul>\n</li>\n<li>但是满足冲突可序列化的事务调度不一定遵循两阶段锁协议</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609134908791.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"范围查找\"><a href=\"#范围查找\" class=\"headerlink\" title=\"范围查找\"></a>范围查找</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609190041270.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"redo-list\"><a href=\"#redo-list\" class=\"headerlink\" title=\"redo-list\"></a>redo-list</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613211455502.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p><strong>abort</strong>的事务也应该被排除在redo-list之外</p>\n</blockquote>\n<h1 id=\"小贴士\"><a href=\"#小贴士\" class=\"headerlink\" title=\"小贴士\"></a>小贴士</h1><ul>\n<li>计算B+树的扇出时，键的大小是按照search-key，也就是PK的大小来计算的，不要将关系中的所有属性相加😇</li>\n<li>绘制B+树的示意图时，记得在叶子层补充链表结构</li>\n<li>进行结果集大小估计时，发生<strong>在候选键上的等值查找</strong>，结果集大小应当为0或1</li>\n<li>给出记录数量、每条记录的size以及block的大小时，应该先计算每个block所包含的记录数量（向下取整），然后计算所需的block数量（向上取整）<ul>\n<li>直接利用总数量计算总容量然后计算block数量有误，因为这样导致了不同block之间可能存储了同一条记录（的部分）</li>\n</ul>\n</li>\n<li>ACID：<ul>\n<li><strong>原子性</strong> (atomicity)<ul>\n<li>恢复系统</li>\n</ul>\n</li>\n<li><strong>一致性</strong> (consistency）<ul>\n<li>由ADI和合适的约束条件（触发器等）实现</li>\n</ul>\n</li>\n<li><strong>隔离性</strong> (isolation)<ul>\n<li>并发控制</li>\n</ul>\n</li>\n<li><strong>持久性</strong> (durability)<ul>\n<li>恢复系统</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>relation：行， relationship：表</li>\n<li><strong>Access time</strong>： The time it takes from when a read or write request is issued to when data <strong>transfer begins</strong><ul>\n<li>&#x3D; seek + rotation time</li>\n</ul>\n</li>\n<li><strong>steal策略</strong>：checkpoint之前的修改都已经反应到了disk（无论对应的事务是否commit）<ul>\n<li>无法确定checkpoint之后发生的修改是否flush到了disk</li>\n</ul>\n</li>\n<li>不能对辅助索引使用稀疏的策略！<ul>\n<li>辅助索引对应的search-key一般不是文件排列的顺序；</li>\n<li>如果只是对部分的记录建立辅助索引，那么无法通过相邻的辅助索引来index得到没有建立索引的记录</li>\n<li>只能对primary&#x2F;clustering key使用稀疏索引</li>\n</ul>\n</li>\n<li>因此我们有两个结论：<ul>\n<li><strong>稀疏索引只能用于顺序文件</strong></li>\n<li><strong>辅助索引只能用于密集索引</strong></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"PPT回顾\"><a href=\"#PPT回顾\" class=\"headerlink\" title=\"PPT回顾\"></a>PPT回顾</h1><ul>\n<li>Simple checkpoint <strong>stops all active transactions</strong>, write out all the updated pages, and restart transactions after completing</li>\n</ul>\n<h2 id=\"导论与基础\"><a href=\"#导论与基础\" class=\"headerlink\" title=\"导论与基础\"></a>导论与基础</h2><h4 id=\"数据库系统的目的\"><a href=\"#数据库系统的目的\" class=\"headerlink\" title=\"数据库系统的目的\"></a>数据库系统的目的</h4><p><strong>直接建立在文件系统上的数据库应用导致：</strong></p>\n<ul>\n<li>Data redundancy（数据冗余）and inconsistency（不一致）</li>\n<li>Data isolation（数据孤立，数据孤岛）— multiple files and formats</li>\n<li>Difficulty in accessing data（存取数据困难）</li>\n<li>Integrity problems（完整性问题）</li>\n<li>Atomicity problems（原子性问题）</li>\n<li>Concurrent access anomalies（并发访问异常）</li>\n<li>Security problems（安全性问题）</li>\n</ul>\n<h4 id=\"数据库的特征\"><a href=\"#数据库的特征\" class=\"headerlink\" title=\"数据库的特征\"></a>数据库的特征</h4><p>data persistence（数据持久性）<br>convenience in accessing data（数据访问便利性）<br>data integrity（数据完整性）<br>concurrency control for multiple users（多用户并发控制）<br>failure recovery（故障恢复）<br>security control（安全控制）</p>\n<h4 id=\"view-of-data\"><a href=\"#view-of-data\" class=\"headerlink\" title=\"view of data\"></a>view of data</h4><p>分为了视图、逻辑和物理模式：</p>\n<ul>\n<li>视图模式：隐藏了数据类型的细节，也可能出于安全性的考虑而隐藏数据的信息等</li>\n<li>逻辑模式：描述数据和关系</li>\n<li>物理模式：描述记录如何被存储</li>\n</ul>\n<blockquote>\n<p>不同模式之间存在对应的映射 mapping</p>\n</blockquote>\n<h4 id=\"DDL\"><a href=\"#DDL\" class=\"headerlink\" title=\"DDL\"></a>DDL</h4><p><strong>数据字典</strong>：DDL compiler generates a set of table templates stored in a <strong>data dictionary</strong></p>\n<p>数据字典包含了元数据：</p>\n<ul>\n<li>schema</li>\n<li>完整性约束</li>\n<li>主键</li>\n<li>参照完整性</li>\n<li><strong>权限</strong></li>\n</ul>\n<h4 id=\"DML-1\"><a href=\"#DML-1\" class=\"headerlink\" title=\"DML\"></a>DML</h4><p>两种数据操作语言：</p>\n<ul>\n<li>过程式 procedural：描述如何获得信息</li>\n<li>陈述式 declaretive：只声明需要的数据，但是不说明如何获取</li>\n</ul>\n<blockquote>\n<p>SQL是流行的、<strong>陈述式</strong>的语言</p>\n</blockquote>\n<p>正因如此，SQL不支持直接通过network来交互，相关的计算和交互需要写在宿主语言 host language 中实现</p>\n<p>应用可以通过API或者嵌套的SQL语句来访问数据库（需要宿主语言的支持）</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250610160235137.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"DBA\"><a href=\"#DBA\" class=\"headerlink\" title=\"DBA\"></a>DBA</h4><blockquote>\n<p>数据库管理员</p>\n</blockquote>\n<p>DBA的指责：范式的定义、权限的管理、日常的维护（根据表现进行微调、定期将数据备份、确保充分的disk空间）</p>\n<h3 id=\"数据库系统的历史\"><a href=\"#数据库系统的历史\" class=\"headerlink\" title=\"数据库系统的历史\"></a>数据库系统的历史</h3><h4 id=\"NoSQL\"><a href=\"#NoSQL\" class=\"headerlink\" title=\"NoSQL\"></a>NoSQL</h4><blockquote>\n<p>not only SQL</p>\n</blockquote>\n<p>提供了一种存储和检索数据的机制，这些数据使用比传统关系数据库<strong>更松散的一致性模型</strong>，以实现横向扩展和更高的可用性。</p>\n<p>当数据的性质不需要关系模型时，NoSQL数据库系统在处理<strong>大量数据</strong>（尤其是大数据）时很有用。</p>\n<p>常用的NoSQL DBMs：MongoDB，Cassandra, HBase</p>\n<h4 id=\"NewSQL\"><a href=\"#NewSQL\" class=\"headerlink\" title=\"NewSQL\"></a>NewSQL</h4><p>寻求为OLTP工作负载提供与NoSQL系统相同的可扩展性能，同时仍然保持传统数据库系统NewSQL的ACID保证：</p>\n<h2 id=\"关系模型\"><a href=\"#关系模型\" class=\"headerlink\" title=\"关系模型\"></a>关系模型</h2><p>参照完整性：要求参照表中的外键属性一定在被参照表中的至少一个元组中存在</p>\n<p>Union要求：</p>\n<ul>\n<li>两个关系的属性个数 <strong>arity</strong>相同；</li>\n<li>对应列的属性的domain &#x2F; type 一致</li>\n</ul>\n<blockquote>\n<p><strong>TODO</strong>：属性个数一致？</p>\n</blockquote>\n<h3 id=\"连接\"><a href=\"#连接\" class=\"headerlink\" title=\"连接\"></a>连接</h3><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250610162646687.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"Semijoin\"><a href=\"#Semijoin\" class=\"headerlink\" title=\"Semijoin\"></a>Semijoin</h4><p>半连接：只会将满足连接条件的元组，保留来自指定关系的属性，也就是在theta join的结果取projection</p>\n<ul>\n<li>比如左半连接，将会得到左侧关系的匹配元组</li>\n</ul>\n<p>null 表示值处于unknown状态 或者 不存在</p>\n<h4 id=\"Outer-join\"><a href=\"#Outer-join\" class=\"headerlink\" title=\"Outer join\"></a>Outer join</h4><p>外连接：在自然连接的基础上，保留特定关系不匹配的元组</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250610162843165.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"使用joins组合外连接\"><a href=\"#使用joins组合外连接\" class=\"headerlink\" title=\"使用joins组合外连接\"></a>使用joins组合外连接</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250610163400510.png?imageSlim\"\n                     \n                >\n\n<p><strong>numeric（3,1）</strong>  总共3位，且小数点后1位</p>\n<blockquote>\n<p>numeric 是 fixed point number， 与浮点数相区分</p>\n</blockquote>\n<p><strong>float（n）</strong> 表示至少有n位</p>\n<p><strong>primary</strong> key declaration on an attribute automatically ensures <strong>not null</strong></p>\n<blockquote>\n<p>主键自动具有非空的约束条件</p>\n</blockquote>\n<h4 id=\"unique\"><a href=\"#unique\" class=\"headerlink\" title=\"unique\"></a>unique</h4><p>使用 <code>unique</code>来测试子查询是否含有多个元组</p>\n<blockquote>\n<p>当子查询返回的元组个数是<strong>0</strong>或者1时，</p>\n</blockquote>\n<p>简单的例子：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250610170428452.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"with\"><a href=\"#with\" class=\"headerlink\" title=\"with\"></a>with</h4><p>简单的例子：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250610170548309.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>关键词：<code>with</code> 和  <code>as</code></p>\n</blockquote>\n<h3 id=\"user-defined-types\"><a href=\"#user-defined-types\" class=\"headerlink\" title=\"user-defined types\"></a>user-defined types</h3><p><code>type</code>和 <code>domain</code>都是用于自定义的数据类型, 二者十分相似. 区别在于: 后者可以声明约束 <code>constraints</code>.</p>\n<h4 id=\"Type\"><a href=\"#Type\" class=\"headerlink\" title=\"Type\"></a>Type</h4><ul>\n<li><p>语法</p>\n<div class=\"code-container\" data-rel=\"Sql\"><figure class=\"iseeu highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> type type_name</span><br><span class=\"line\"><span class=\"keyword\">as</span> data_type</span><br><span class=\"line\">[ (<span class=\"keyword\">precision</span>, scale) ]</span><br><span class=\"line\">[ <span class=\"keyword\">not null</span> ]</span><br><span class=\"line\">[ <span class=\"keyword\">final</span> <span class=\"operator\">|</span> instantiable <span class=\"operator\">|</span> abstract ];</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p><strong><code>final | instantiable | abstract</code></strong>:</p>\n<p>用于指定类型的继承属性。</p>\n<ul>\n<li><code>final</code>：表示该类型不能被继承。</li>\n<li><code>instantiable</code>：表示可以创建该类型的实例。</li>\n<li><code>abstract</code>：表示该类型是抽象的，不能创建实例。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>e.g.</p>\n<div class=\"code-container\" data-rel=\"Sql\"><figure class=\"iseeu highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> type dollars</span><br><span class=\"line\"><span class=\"keyword\">as</span> <span class=\"type\">numeric</span>(<span class=\"number\">12</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">final</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">create table</span> department (</span><br><span class=\"line\">    dept_name <span class=\"type\">varchar</span>(<span class=\"number\">20</span>),</span><br><span class=\"line\">    building <span class=\"type\">varchar</span>(<span class=\"number\">15</span>),</span><br><span class=\"line\">    budget dollars</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<h4 id=\"Domain\"><a href=\"#Domain\" class=\"headerlink\" title=\"Domain\"></a>Domain</h4><p>当某些列需要限制其取值范围, 也就是具有一定的约束条件时, 如果每次创建类似的列都重复书写, 工作量较大.</p>\n<p><code>domain</code>可以理解为对数据类型的<strong>扩展定义</strong>，它允许我们<strong>创建自定义</strong>的数据类型，并且可以为其指定约束条件。使用 domain 可以确保数据的一致性，</p>\n<ul>\n<li>基本语法</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Sql\"><figure class=\"iseeu highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> DOMAIN 域名 数据类型</span><br><span class=\"line\">[<span class=\"keyword\">DEFAULT</span> 默认值]</span><br><span class=\"line\">[<span class=\"keyword\">CONSTRAINT</span> 约束名称]</span><br><span class=\"line\">[<span class=\"keyword\">CHECK</span> (约束条件)];</span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li><p>e.g.</p>\n<ul>\n<li><pre><code class=\"language-sql\">-- 创建一个表示年龄的域\nCREATE DOMAIN age_type INTEGER\nCONSTRAINT valid_age\nCHECK (VALUE &gt;= 0 AND VALUE &lt;= 150);\n<div class=\"code-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### Large-Object Types</span><br><span class=\"line\"></span><br><span class=\"line\">MySQL **BLOB datatypes**:</span><br><span class=\"line\"></span><br><span class=\"line\">- TinyBlob : **0 ~ 255** bytes.</span><br><span class=\"line\">- Blob: **0 ~ 64K** bytes.</span><br><span class=\"line\">- MediumBlob : **0 ~ 16M** bytes.</span><br><span class=\"line\">- LargeBlob : **0 ~ 4G** bytes.</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 上限以$2^8$的规模递增</span><br><span class=\"line\"></span><br><span class=\"line\">候选键CK可以为null，但是主键PK不能为空</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 因此，unique构成组成的属性集合可以称为构成了一组超键，但是不能称为CK，因为CK可以为空</span><br><span class=\"line\"></span><br><span class=\"line\">#### assertion</span><br><span class=\"line\"></span><br><span class=\"line\">e.g.</span><br><span class=\"line\"></span><br><span class=\"line\">```sql</span><br><span class=\"line\">create assertion credits_constaint check (</span><br><span class=\"line\">    not exists(</span><br><span class=\"line\">        select *</span><br><span class=\"line\">        from student S</span><br><span class=\"line\">        where total_cred &lt;&gt; (</span><br><span class=\"line\">            select sum(credits)</span><br><span class=\"line\">            from takes natural join course</span><br><span class=\"line\">            where takes.ID = S.ID </span><br><span class=\"line\">                and grade is not null </span><br><span class=\"line\">                and grade &lt;&gt; &#x27;F&#x27;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    )</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<p>使用下面的命令来阻止数据库对SQL的隐式commit：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> autocommit = 0</span><br><span class=\"line\">...</span><br><span class=\"line\">commit;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"授权\"><a href=\"#授权\" class=\"headerlink\" title=\"授权\"></a>授权</h4><p>四种权限：增删改查</p>\n<ul>\n<li>insert不允许修改现有的数据；</li>\n<li>update不允许删除现有的数据</li>\n</ul>\n<p>五种修改数据库范式的权限：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250611192659291.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>范式的创建、修改、删除，以及index和view相关的操作</p>\n</blockquote>\n<h4 id=\"Authorization\"><a href=\"#Authorization\" class=\"headerlink\" title=\"Authorization\"></a>Authorization</h4><ul>\n<li><strong>授予权限：</strong></li>\n</ul>\n<div class=\"code-container\" data-rel=\"Sql\"><figure class=\"iseeu highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"operator\">&lt;</span>privilege_list<span class=\"operator\">&gt;</span> </span><br><span class=\"line\"><span class=\"keyword\">on</span> <span class=\"operator\">&lt;</span>relation_name <span class=\"keyword\">or</span> view_name<span class=\"operator\">&gt;</span> </span><br><span class=\"line\"><span class=\"keyword\">to</span> <span class=\"operator\">&lt;</span>user_list<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>这里的 <code>&lt;user_list&gt;</code>既可以是具体的用户名，也可以是关键字 <code>PUBLIC</code>（表示授权给所有用户）。</p>\n<p>特别地，当我们需要允许用户具有转授权的能力时，可以在授权语句末尾添加 <code>WITH GRANT OPTION</code>子句。</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250611193159249.png?imageSlim\"\n                     \n                >\n\n<ul>\n<li><strong>权限回收：</strong></li>\n</ul>\n<div class=\"code-container\" data-rel=\"Sql\"><figure class=\"iseeu highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">revoke</span> <span class=\"operator\">&lt;</span>privilege_list<span class=\"operator\">&gt;</span> </span><br><span class=\"line\"><span class=\"keyword\">on</span> <span class=\"operator\">&lt;</span>relation_name<span class=\"operator\">&gt;</span> </span><br><span class=\"line\"><span class=\"keyword\">from</span> <span class=\"operator\">&lt;</span>user_list<span class=\"operator\">&gt;</span> [restrict<span class=\"operator\">|</span>cascade]</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<ul>\n<li>其中 <code>RESTRICT</code>表示仅回收<strong>直接授予</strong>的权限，而 <code>CASCADE</code>则会同时回收该用户<strong>转授给其他</strong>用户的权限(级</li>\n</ul>\n<ul>\n<li>可以在权限列表中声明 <code>all</code> 表示回收所有的特权;</li>\n<li>可以在用户列表声明 <code>public</code>表示回收的范围是正常访问的普通成员, 但是不会回收指定的成员的特权</li>\n</ul>\n</blockquote>\n<ul>\n<li>如果同一个用户被不同的授权者先后授予了2次<strong>相同</strong>的权限, 那么一次的回收权限之后, ta的权限可能依旧存在.</li>\n<li><strong>权限的依赖性</strong>: 如果回收的权限会导致具有依赖关系的权限的失效, 那么涉及的权限<strong>也会被回收</strong>:</li>\n</ul>\n<p><strong>创建外键约束的权限</strong></p>\n<div class=\"code-container\" data-rel=\"Sql\"><figure class=\"iseeu highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> reference (dept_name) </span><br><span class=\"line\"><span class=\"keyword\">on</span> department </span><br><span class=\"line\"><span class=\"keyword\">to</span> Mariano;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"数据库设计的流程\"><a href=\"#数据库设计的流程\" class=\"headerlink\" title=\"数据库设计的流程\"></a>数据库设计的流程</h4><ol>\n<li>requirement specification</li>\n<li>conceptual-design： <strong>E-R diagram</strong></li>\n<li>logical-design：logical schema</li>\n<li>physical-design： physical schema</li>\n</ol>\n<p>设计范式的时候，主要避免两个问题：</p>\n<ul>\n<li>redundancy</li>\n<li>incompleteness</li>\n</ul>\n<p><strong>entity：</strong> an object that <strong>exists</strong> and is distinguishable from other objects</p>\n<h4 id=\"三元关系与箭头\"><a href=\"#三元关系与箭头\" class=\"headerlink\" title=\"三元关系与箭头\"></a>三元关系与箭头</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612113854619.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"Armstrong’s\"><a href=\"#Armstrong’s\" class=\"headerlink\" title=\"Armstrong’s\"></a>Armstrong’s</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612114509016.png?imageSlim\"\n                     \n                >\n\n<p>以及对应的推论：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612114622053.png?imageSlim\"\n                     \n                >\n\n<p>按照BCNF分解：</p>\n<ul>\n<li>一定是无损分解</li>\n<li>但不一定是满足依赖保留的</li>\n</ul>\n<blockquote>\n<p>按照3NF分解，可以同时满足上面两条</p>\n</blockquote>\n<h3 id=\"MVD\"><a href=\"#MVD\" class=\"headerlink\" title=\"MVD\"></a>MVD</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612115633330.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"相关定理与4NF\"><a href=\"#相关定理与4NF\" class=\"headerlink\" title=\"相关定理与4NF\"></a>相关定理与4NF</h4><ul>\n<li>任何函数依赖一定也是多值依赖</li>\n<li>D的闭包D+是逻辑上由D隐含的所有功能和多值依赖项的集合；</li>\n<li>如果一个关系范式满足下面的要求，就称为满足4NF，对于函数和多值依赖D，如果其D+中的所有多值依赖都只存在下面两种情况之一；<ul>\n<li>平凡的（右侧包含在左侧属性，或者二者的并集是R）</li>\n<li>左侧属性是R的超键</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>4NF类似于普通关系的BCNF</p>\n</blockquote>\n<h2 id=\"物理存储系统\"><a href=\"#物理存储系统\" class=\"headerlink\" title=\"物理存储系统\"></a>物理存储系统</h2><h4 id=\"存储级别\"><a href=\"#存储级别\" class=\"headerlink\" title=\"存储级别\"></a>存储级别</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612130754780.png?imageSlim\"\n                     \n                >\n\n<p>访问时间 &#x3D; 寻道时间 + 旋转延迟</p>\n<p><strong>disk-block访问的优化：</strong></p>\n<ul>\n<li>buffering</li>\n<li>prefetch</li>\n<li>disk-arm-scheduling：使用算法重排block的请求</li>\n<li>非易失性写缓存<ul>\n<li>non-volatile RAM: battery backed up RAM or flash memory</li>\n</ul>\n</li>\n<li>log disk 日志磁盘</li>\n</ul>\n<h4 id=\"Flash-storage\"><a href=\"#Flash-storage\" class=\"headerlink\" title=\"Flash storage\"></a>Flash storage</h4><p>NAND flash</p>\n<ul>\n<li>page-at-a-time read</li>\n<li>在erased之前 一个page只能被write一次</li>\n</ul>\n<p>SSD：splid state disk</p>\n<p>通过flash translation table将逻辑页地址转换成物理页地址</p>\n<p>在分槽页中，记录指针不是直接指向记录，而是指向对应entry的header</p>\n<p><strong>文件中记录的组织形式：</strong></p>\n<ul>\n<li>heap：记录可以存放在文件的任意位置；</li>\n<li>sequential：根据search-key线性存储记录</li>\n<li>hashing：利用哈希函数计算search-key，然后存储到对应的block中</li>\n<li>multitable clustering file organization：将不同关系的记录存放在同一个文件中<ul>\n<li>可以为同一个关系的记录之间增加指针，形成pointer chains 指针链</li>\n</ul>\n</li>\n<li>table partitioning：将一个关系中的记录分成更小的关系，分别存储<ul>\n<li>相当于上一种形式的对立</li>\n</ul>\n</li>\n<li>data dictionary storage<ul>\n<li>也称为system catalog</li>\n<li>存储metadata</li>\n</ul>\n</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612133220908.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"Buffer-Replacement-Policies\"><a href=\"#Buffer-Replacement-Policies\" class=\"headerlink\" title=\"Buffer-Replacement Policies\"></a>Buffer-Replacement Policies</h4><ul>\n<li>LRU</li>\n<li>Toss-immediate strategy：只要一个block的最后一个元组的数据被处理结束，就释放这个block</li>\n<li>MRU：刚处理结束的block是最可能被替换的对象</li>\n<li>clock：</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250614233253499.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"Column-Oriented-Storage\"><a href=\"#Column-Oriented-Storage\" class=\"headerlink\" title=\"Column-Oriented Storage\"></a>Column-Oriented Storage</h4><blockquote>\n<p>也被称为 <strong>columnar representation</strong></p>\n</blockquote>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612134217630.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>列：决策支持；</p>\n<p>行：事务处理</p>\n</blockquote>\n<p><strong>ORC 优化行列存储</strong></p>\n<ul>\n<li>Apache ORC 和 Apache Parquet</li>\n<li>流行处理<strong>big-data</strong>的应用</li>\n</ul>\n<p>索引顺序文件：根据主索引排序的有序文件</p>\n<p>稠密索引——对建立索引的属性，每一个值都有自己的指针；</p>\n<ul>\n<li>稀疏索引：只有部分search-key的索引，因此要求记录必须按照搜索键来排序</li>\n</ul>\n<p>如果主索引无法存储在memory中，需要将disk上的主索引看成线性文件，建立外层的稀疏索引</p>\n<h4 id=\"B-复杂度与占用率\"><a href=\"#B-复杂度与占用率\" class=\"headerlink\" title=\"B+复杂度与占用率\"></a>B+复杂度与占用率</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612140204662.png?imageSlim\"\n                     \n                >\n\n<p>针对写密集型的B+树的策略：</p>\n<ul>\n<li>LSM tree</li>\n<li>buffer tree<ul>\n<li>更少的查询开销</li>\n</ul>\n</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612141430631.png?imageSlim\"\n                     \n                >\n\n<p>bitmap indices：</p>\n<ul>\n<li>取属性的值域的大小作为行数</li>\n<li>有记录的个数那么多列，如果对应位置的属性匹配，bit就是1</li>\n</ul>\n<h4 id=\"index-on-flash\"><a href=\"#index-on-flash\" class=\"headerlink\" title=\"index on flash\"></a>index on flash</h4><blockquote>\n<p>todo：ch14-51</p>\n</blockquote>\n<blockquote>\n<p>ppt的A4‘有问题，参考书本的定义</p>\n</blockquote>\n<p>如果查询的比较条件是 &lt;&#x3D; ，就不要使用index，直接使用线性查找</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612174914814.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"merge成本最小化\"><a href=\"#merge成本最小化\" class=\"headerlink\" title=\"merge成本最小化\"></a>merge成本最小化</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612175152335.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"混合的归并合并\"><a href=\"#混合的归并合并\" class=\"headerlink\" title=\"混合的归并合并\"></a>混合的归并合并</h4><ul>\n<li>使用前提：<ul>\n<li>第一个关系是有序的；</li>\n<li>第二个关系在连接属性上具有B+树的index，方便根据属性查找</li>\n</ul>\n</li>\n<li>流程概述：<ul>\n<li>顺序扫描第一个关系；</li>\n<li>对于第一个关系中的每一个元组，利用连接属性在第二个属性中使用索引查找得到对应的叶子节点，然后将第一个关系的元组合并到叶子节点中</li>\n<li>此时第二个关系的B+树叶子节点具有实际物理地址和第一个关系的元组，将其按照自身的物理地址排序</li>\n<li>然后，我们得到按照地址排序的叶子节点，可以顺序扫描，然后构造合并结果（用第二个关系的元组来替代物理地址）</li>\n</ul>\n</li>\n<li>上述流程的关键就在于，通过先根据物理地址排序，然后顺序扫描，降低了随机访问导致的大量的寻道时间</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612180300474.png?imageSlim\"\n                     \n                >\n\n<p><strong>估计交集的成本时：</strong></p>\n<ul>\n<li>如果连接属性是其中的外键-主键关系，成本是确定的——引用关系的元组数；</li>\n<li>如果是平凡的关系，那么就利用V计算，取最后估计结果较小（V较大的）</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612222936423.png?imageSlim\"\n                     \n                >\n\n<p>外连接的成本估计 &#x3D; 自然连接的结果+对应属性的元组个数</p>\n<h4 id=\"cost-based-optimizer\"><a href=\"#cost-based-optimizer\" class=\"headerlink\" title=\"cost-based optimizer\"></a>cost-based optimizer</h4><p>为每个操作选择cheapest的算法（贪心）可能不会产生最优的整体效果，比如：</p>\n<ul>\n<li>合并连接可能比哈希连接成本更高，但是有序的输出可能为外层的算法提供便利；</li>\n<li>嵌套循环可以为流水线提供机会</li>\n</ul>\n<p>n个关系连接时，具有 $\\frac{(2n-2)!}{(n-1)!} $种不同的连接顺序</p>\n<blockquote>\n<p>我们不需要一次性对所有的关系采取套用上述的公式，可以采取<strong>动态规划</strong>的思想：</p>\n<p>从较小的子集开始取用，计算小规模的不同关系的所有连接成本，存储在数组中，在较大规模的计算中直接取用即可</p>\n</blockquote>\n<p><strong>best join tree</strong></p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612225738211.png?imageSlim\"\n                     \n                >\n\n<p>复杂度：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>时间复杂度</th>\n<th>空间复杂度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>动态规划</td>\n<td>$O(3^n)$</td>\n<td>$O(2^n)$</td>\n</tr>\n<tr>\n<td>only left-deep trees</td>\n<td>$O(n\\cdot2^n)$</td>\n<td>$O(2^n)$</td>\n</tr>\n</tbody></table>\n<h4 id=\"启发式优化\"><a href=\"#启发式优化\" class=\"headerlink\" title=\"启发式优化\"></a>启发式优化</h4><p><strong>策略</strong></p>\n<ul>\n<li><strong>Perform selection early</strong>(reduces the number of tuples)</li>\n<li><strong>Perform projection early</strong>(reduces the number of attributes)</li>\n<li><strong>Perform most restrictive selection and join operations</strong> (i.e. with smallest result size) before other similar operations.</li>\n<li><strong>Perform left-deep join order</strong></li>\n</ul>\n<h4 id=\"物化视图的增量更新\"><a href=\"#物化视图的增量更新\" class=\"headerlink\" title=\"物化视图的增量更新\"></a>物化视图的增量更新</h4><p>对于选择, join可以直接在原来的结果上:</p>\n<ul>\n<li>insert &#x3D;&#x3D;&gt; 并集;</li>\n<li>delete &#x3D;&#x3D;&gt; 差</li>\n<li>对于avg, max, min等统计属性, 采取之前的中间结果来辅助实现增量更新.</li>\n<li>方差也可以用增量更新来维护.</li>\n</ul>\n<p>$$<br>\\mathrm{Var}(X)&#x3D;\\frac{\\sum x_i^2}{n}-\\left(\\frac{\\sum x_i}{n}\\right)^2<br>$$</p>\n<p>因此, 只需要维护各个元素的和, 平方和 以及计数 <code>n</code>, 就可以实现快速的增量更新.</p>\n<h2 id=\"并发控制-1\"><a href=\"#并发控制-1\" class=\"headerlink\" title=\"并发控制\"></a>并发控制</h2><h4 id=\"2PL\"><a href=\"#2PL\" class=\"headerlink\" title=\"2PL\"></a>2PL</h4><ul>\n<li><p>两阶段锁协议 2PL 可以保证冲突可序列化</p>\n<ul>\n<li>将事务的执行顺序按照lock points排序</li>\n<li>但是<strong>冲突可序列化的调度不一定满足2PL协议</strong>，也就是说2PL不是冲突可序列化的必要条件</li>\n<li>不保证排除死锁</li>\n</ul>\n</li>\n<li><p>严格2PL：事务必须保持自身的exclusive locks直到其commits &#x2F; aborts</p>\n<ul>\n<li>确保可恢复性</li>\n<li>避免了级联回滚</li>\n</ul>\n</li>\n<li><p>强2PL（rigorous）：事务必须保持自身的所有lock，直到其commits &#x2F; aborts</p>\n<ul>\n<li>可以按照事务提交的顺序来构建序列</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Lock-Conversions\"><a href=\"#Lock-Conversions\" class=\"headerlink\" title=\"Lock Conversions\"></a>Lock Conversions</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613101316974.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"Lock-table\"><a href=\"#Lock-table\" class=\"headerlink\" title=\"Lock table\"></a>Lock table</h4><blockquote>\n<p>usually implemented as an <strong>in-memory hash table</strong> indexed on the <strong>name of the data item</strong> being locked</p>\n</blockquote>\n<ul>\n<li>新的请求添加到队列的末尾，并且检查是否与先前的lock相同，如果相同就grant<ul>\n<li>请求删除的时候同时unlock 对应的requests，并检查pending的lock是否可以被granted</li>\n</ul>\n</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613101931029.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"Tree-Protocol\"><a href=\"#Tree-Protocol\" class=\"headerlink\" title=\"Tree Protocol\"></a>Tree Protocol</h4><p>是图协议的一种，适用于对数据访问的次序具有偏序结构理解的情况</p>\n<blockquote>\n<p>中译中：了解访问特定的数据项之前必须经过的中间节点</p>\n</blockquote>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613105351613.png?imageSlim\"\n                     \n                >\n\n<p>特点：</p>\n<ul>\n<li>树协议可以保证冲突可序列化并<strong>排除死锁 (deadlock-free)</strong><ul>\n<li>避免了回滚</li>\n</ul>\n</li>\n<li>缺点：<ul>\n<li>不能保证无级联和可恢复性</li>\n<li>可能 l<strong>ock more data items than needed</strong>， 从而降低了并行性，同时提高了额外的等待时间</li>\n</ul>\n</li>\n</ul>\n<p>Schedules not possible under two-phase locking are possible under tree protocol, and <strong>vice versa</strong>.</p>\n<h4 id=\"Granularity-Hierarchy\"><a href=\"#Granularity-Hierarchy\" class=\"headerlink\" title=\"Granularity Hierarchy\"></a>Granularity Hierarchy</h4><p>从高到低，以整个数据库系统为根节点，分别划分为不同大小的区域，直到叶子节点包含单个记录的信息</p>\n<p>为了在高层级快速判断底层节点是否被加了 S &#x2F; X锁引入 <strong>intention locks：</strong></p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613111106318.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>如果直接加X-lock，表示可以直接修改内部的节点</p>\n</blockquote>\n<p>对应的<strong>相容矩阵</strong>：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613111445682.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>X与任意锁都不相容；除了IS和X，都只跟自己相容；IS与X之外的锁相容</p>\n</blockquote>\n<p>对于插入和删除记录，如果只是在对应的记录上加锁，可能导致幽灵现象和死锁问题</p>\n<ul>\n<li>可以直接在表层级加锁，但是降低了并行性</li>\n<li>可以引入谓词锁，来准确判断影响的记录范围，但是在实现上比较困难</li>\n<li>另一种更好的解决方法是：<strong>Index Locking Protocol</strong></li>\n</ul>\n<h4 id=\"Index-Locking-Protocol\"><a href=\"#Index-Locking-Protocol\" class=\"headerlink\" title=\"Index Locking Protocol\"></a>Index Locking Protocol</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613113138037.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>可以避免幽灵现象的发生</p>\n</blockquote>\n<p>一个例子：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613113215006.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>注意范围查询，导致10所在的叶子节点也具有了S-lock</p>\n</blockquote>\n<p>上述的策略会将entire leaf给lock，为了提高并行性，我们可以针对某个key来lock，同时为了确保可以发现潜在的幽灵现象，需要引入一定的限制条件，这就是：<strong>Next-Key Locking</strong></p>\n<h4 id=\"Next-Key-Locking\"><a href=\"#Next-Key-Locking\" class=\"headerlink\" title=\"Next-Key Locking\"></a>Next-Key Locking</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613114355171.png?imageSlim\"\n                     \n                >\n\n<h1 id=\"TODO\"><a href=\"#TODO\" class=\"headerlink\" title=\"TODO\"></a>TODO</h1><h4 id=\"B-height\"><a href=\"#B-height\" class=\"headerlink\" title=\"B+-height\"></a>B+-height</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250530114132354.png?imageSlim\"\n                     \n                >\n\n<p><strong>SOLUTION</strong>：</p>\n<p>此处的height确实是从1开始的，比如计算max时前面的4个4是n, 最后一个是叶子层的叶子块内部的n-1，所以高度为h, 计算size时存在的因数个数也是h</p>\n","more":"<h1 id=\"知识点梳理\"><a href=\"#知识点梳理\" class=\"headerlink\" title=\"知识点梳理\"></a>知识点梳理</h1><h3 id=\"DML\"><a href=\"#DML\" class=\"headerlink\" title=\"DML\"></a>DML</h3><ul>\n<li><code>select</code>得到的结果通过 <code>distinct</code>关键字来去重</li>\n<li><code>union all</code>可以保留并集中的重复元组</li>\n<li>注意 <code>case</code>与 <code>update</code>组合使用时，分段更新</li>\n</ul>\n<h4 id=\"聚合函数-NULL\"><a href=\"#聚合函数-NULL\" class=\"headerlink\" title=\"聚合函数&amp;NULL\"></a>聚合函数&amp;NULL</h4><p>除了 <code>count</code>之外的聚合函数, 会忽略集合属性上有 <code>null</code>的元组, 而 <code>count</code>则会计算包括空值在内的元组个数.</p>\n<p><strong>Special case</strong>: 如果所有的聚合属性都是空值:</p>\n<ul>\n<li><code>count</code>: 返回0;</li>\n<li>其他聚合函数: 返回 <strong>null</strong>.</li>\n</ul>\n<h4 id=\"lateral\"><a href=\"#lateral\" class=\"headerlink\" title=\"lateral\"></a>lateral</h4><p>外层的查询可以直接使用内部查询的关系名, 但是内部的子查询无法向外直接使用其重命名的关系名.</p>\n<p>然而, 如果在子查询的前面声明关键字 <code>lateral</code>则可以实现:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> name, salary, avg_salary</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> instructor I1,</span><br><span class=\"line\">     <span class=\"keyword\">LATERAL</span> (<span class=\"keyword\">SELECT</span> <span class=\"built_in\">avg</span>(salary) <span class=\"keyword\">AS</span> avg_salary</span><br><span class=\"line\">              <span class=\"keyword\">FROM</span> instructor I2</span><br><span class=\"line\">              <span class=\"keyword\">WHERE</span> I2.dept_name <span class=\"operator\">=</span> I1.dept_name) <span class=\"keyword\">AS</span> AvgDeptSalary;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"嵌套查询顺序\"><a href=\"#嵌套查询顺序\" class=\"headerlink\" title=\"嵌套查询顺序\"></a>嵌套查询顺序</h4><p>from ; where; group by ; having; select; distinct; order by</p>\n<h4 id=\"映射基数约束\"><a href=\"#映射基数约束\" class=\"headerlink\" title=\"映射基数约束\"></a>映射基数约束</h4><p>采取 <code>l...h</code>的形式来表示复杂的约束关系：</p>\n<ul>\n<li><code>0..*</code> 表示最少参与0次, 最多没有限制, 可见 ..对多的关系, 部分参与;</li>\n<li><code>1..1</code>表示恰好参与1次, 表示一对..的关系, <strong>完全参与</strong></li>\n</ul>\n<p>比如下面的实际上是<em><strong>many-to-one</strong></em>的关系：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefinedimage-20250329153241821.png?imageSlim\"\n                     \n                >\n\n<h3 id=\"ER模型和范式\"><a href=\"#ER模型和范式\" class=\"headerlink\" title=\"ER模型和范式\"></a>ER模型和范式</h3><h4 id=\"从ER模型得到schema\"><a href=\"#从ER模型得到schema\" class=\"headerlink\" title=\"从ER模型得到schema\"></a>从ER模型得到schema</h4><p>从ER模型得到schema的核心规则：</p>\n<ul>\n<li><strong>关系类型</strong>：<ul>\n<li>1:1 ：在参与关系的实体类型中，选择一个schema增加一个FK，指向另一个实体对应的schema的PK，<strong>不需要额外建模</strong>；</li>\n<li>1:N: 在多端对应的schema中，增加1端对应的PK作为FK。此时，关系也蕴含在这个外键的约束关系中，<strong>不需要额外建模</strong>；</li>\n<li>M:N: 此时，我们需要<strong>将关系建模为一个新的schema</strong>——将参与关系的实体类型的主键作为外键，然后加上关系本身的属性，组成为schema的属性</li>\n</ul>\n</li>\n<li>弱实体类型：强实体的PK + 弱实体自身的分辨符 &#x3D; 对应schema的主键，然后补充弱实体的剩余属性</li>\n<li>多值属性：需要为多值属性构建一个新的schema<ul>\n<li>将对应的实体的PK和多值属性自身作为schema的PK</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"属性集闭包\"><a href=\"#属性集闭包\" class=\"headerlink\" title=\"属性集闭包\"></a>属性集闭包</h4><p>注意，属性的闭包包括自身的属性集</p>\n<p><strong>作用：</strong></p>\n<ul>\n<li>判断是否为主键：如果闭包包含了关系中的所有属性，那么就是～</li>\n<li>验证函数依赖是否成立</li>\n<li>计算整个关系模式的闭包$F ^+$: 计算每一个属性的闭包</li>\n</ul>\n<h4 id=\"正则覆盖\"><a href=\"#正则覆盖\" class=\"headerlink\" title=\"正则覆盖\"></a>正则覆盖</h4><ul>\n<li>目标：简化给出的函数依赖</li>\n<li>尝试化简属性A时，如果去除的是 $\\alpha \\rightarrow \\beta$中的：<ul>\n<li>左侧：判断去除之后左侧剩余属性的闭包是否包含了右侧属性</li>\n<li>右侧：判断此时的左侧属性闭包中是否含有去除的属性</li>\n</ul>\n</li>\n<li>我们可以进一步用公式来讲解上述的分析：<ul>\n<li>判断$\\alpha$中的属性A是否多余：<ul>\n<li>计算$(\\alpha-A)^+$是否包含了$\\beta$</li>\n</ul>\n</li>\n<li>判断$\\beta$中的属性A是否多余：<ul>\n<li>根据 $(F-{\\alpha \\rightarrow \\beta}\\  \\cup \\ {\\alpha \\rightarrow (\\beta - A)})$ 的依赖关系，计算 $\\alpha^+$</li>\n<li>如果对应的属性闭包包括了A，那么就可以去除</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250528134923287.png?imageSlim\"\n                     \n                >\n\n<p>一个简单的例子来说明如何推导：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250528135223937.png?imageSlim\"\n                     \n                >\n\n<p><strong>NOTICE：</strong></p>\n<ul>\n<li>实际情况下，可能比较难推导，需要更多的经验和灵感）</li>\n<li>虽然我们要求左侧的属性唯一，但是在推导的过程中，可能尝试将类似于 $A \\rightarrow BC$先拆解为两条，然后判断其中的某条属性是否多余；最后将左侧属性合并</li>\n</ul>\n<h4 id=\"范式的验证\"><a href=\"#范式的验证\" class=\"headerlink\" title=\"范式的验证\"></a>范式的验证</h4><ul>\n<li>BCNF：<ul>\n<li>如果F中没有违背BCNF原则的函数依赖，那么F的闭包中也没有</li>\n</ul>\n</li>\n<li>3NF：<ul>\n<li>注意，属性A可以来自不同的CK集合</li>\n<li>只需要对已有的FD进行判断</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"存储结构\"><a href=\"#存储结构\" class=\"headerlink\" title=\"存储结构\"></a>存储结构</h3><blockquote>\n<p>似乎不是经常考，了解概念</p>\n</blockquote>\n<h2 id=\"文件结构\"><a href=\"#文件结构\" class=\"headerlink\" title=\"文件结构\"></a>文件结构</h2><ul>\n<li>面向列的存储可以在现代CPU中实现向量处理</li>\n</ul>\n<h4 id=\"定长与变长的记录\"><a href=\"#定长与变长的记录\" class=\"headerlink\" title=\"定长与变长的记录\"></a>定长与变长的记录</h4><ul>\n<li><p>如果是<strong>定长记录</strong>，为了避免删除记录时调整结构的较大时间成本，可以为维护一个<strong>空表</strong>，将删除之后的空间通过链表的方式连接，之后插入的时候，首先插入到空表中，如果没有空余的位置，再插入到文件的末尾</p>\n</li>\n<li><p>如果记录是变长的，在定长和变长之间存在一个<strong>空位图：</strong></p>\n<ul>\n<li><p>位数 &#x3D; 变长记录的个数</p>\n</li>\n<li><p>某个记录为空时 &#x3D;&#x3D;&gt; 对应的bit为 1</p>\n</li>\n<li><p>定长的信息包含：</p>\n<ul>\n<li>变长属性的定长属性信息（开始的偏移量+长度）</li>\n<li>定长属性的值</li>\n</ul>\n</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250529152608718.png?imageSlim\"\n                     \n                ></li>\n</ul>\n<h3 id=\"B-树相关\"><a href=\"#B-树相关\" class=\"headerlink\" title=\"B+树相关\"></a>B+树相关</h3><h4 id=\"索引的block大小\"><a href=\"#索引的block大小\" class=\"headerlink\" title=\"索引的block大小\"></a>索引的block大小</h4><p>假设指针和search-key的大小分别是a，b 那么block的扇出n ( <em><strong>fan-out rate</strong></em> )就是：</p>\n<p>$$<br>n &#x3D; \\lfloor \\frac{B-a}{a+b} \\rfloor + 1<br>$$</p>\n<blockquote>\n<p>注意最左侧存在一个单独的指针，然后是一系列的键值对；</p>\n<p>扇出也就是B+树的阶数</p>\n</blockquote>\n<h4 id=\"children的关系\"><a href=\"#children的关系\" class=\"headerlink\" title=\"children的关系\"></a>children的关系</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250529182824693.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>此处的 <code>n</code>就是之前计算得到的扇出；</p>\n<p>对于内部节点，最小值的估计是<strong>孩子而非关键字</strong>的个数！关键字key的个数是孩子数（指针）- 1</p>\n<p>注意叶子节点根据索引值指向对应物理地址的记录，所以是n-1个孩子</p>\n<p>叶子节点的最右侧的指针用于串联叶子节点的链表</p>\n</blockquote>\n<p>非叶子节点类似于多级、稀疏索引。</p>\n<h4 id=\"高度的估计\"><a href=\"#高度的估计\" class=\"headerlink\" title=\"高度的估计\"></a>高度的估计</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250529184340241.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>高度最大估计如上所示；当叶子节点都满时，有最小高度 $ h &#x3D; \\lceil \\log_n(K) \\rceil)$.</p>\n</blockquote>\n<h4 id=\"操作相关\"><a href=\"#操作相关\" class=\"headerlink\" title=\"操作相关\"></a>操作相关</h4><p><strong>删除：</strong></p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250529185626454.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"计算高度\"><a href=\"#计算高度\" class=\"headerlink\" title=\"计算高度\"></a>计算高度</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250529192439172.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>根节点最少有2个子节点</p>\n</blockquote>\n<ul>\n<li><p>B+树的范围查找：</p>\n<ul>\n<li>如果是查找 &lt;&#x3D; x, 直接从第一个叶子节点开始按照链表遍历；</li>\n<li>反之，从根节点开始寻找第一个满足条件的叶子节点，然后遍历到底</li>\n</ul>\n</li>\n<li></li>\n<li><p>如果B+树的索引是字符串等变长的，可以采取前缀的方式来压缩索引项的大小，从而增大扇出n</p>\n</li>\n</ul>\n<h4 id=\"bottom-up\"><a href=\"#bottom-up\" class=\"headerlink\" title=\"bottom-up\"></a>bottom-up</h4><ol>\n<li>如果记录已经存在，可以从叶子节点开始自底向上构造（首先排序）</li>\n</ol>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250529200732757.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>这种技术也用在了<strong>LSM</strong>的的构建上–当底层的L满了的时候，将其融合并自底向上构建</p>\n</blockquote>\n<ol start=\"2\">\n<li>如果要批量插入，也可以先排序然后一起插入，可以有效减少访问的block数量</li>\n</ol>\n<p><em><strong>TODO</strong></em>：分析成本的估计</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250529201122223.png?imageSlim\"\n                     \n                >\n\n<h3 id=\"其他结构\"><a href=\"#其他结构\" class=\"headerlink\" title=\"其他结构\"></a>其他结构</h3><h4 id=\"LSM\"><a href=\"#LSM\" class=\"headerlink\" title=\"LSM\"></a>LSM</h4><ul>\n<li>将对数据的修改增量保存在内存中，达到一定的限制后批量写入磁盘，提升了写性能；</li>\n<li>但是因此降低了一定的读性能</li>\n</ul>\n<h4 id=\"Buffer-Tree\"><a href=\"#Buffer-Tree\" class=\"headerlink\" title=\"Buffer Tree\"></a>Buffer Tree</h4><p>为节点增加内部的缓冲区:</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250531114954357.png?imageSlim\"\n                     \n                >\n\n<ul>\n<li>插入: 如果缓冲区有空闲, 优先插入缓冲区中;<ul>\n<li>如果发生了节点的分裂, 注意同时管理缓冲区的转移;</li>\n<li>缓冲区内部也是有序的.</li>\n</ul>\n</li>\n<li>查询: 需要在缓冲区中进一步查找</li>\n</ul>\n<h4 id=\"Bitmap\"><a href=\"#Bitmap\" class=\"headerlink\" title=\"Bitmap\"></a>Bitmap</h4><p>将<strong>Record</strong>标号, 然后为<strong>每个属性</strong>都建立一个 bitmap, <code>0</code>表示对应的位置不是当前的属性, <code>1</code> 表示符合当前属性.</p>\n<ul>\n<li>bitmap使得两个属性通过 <code>and</code> 操作就找到对应的record.</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://note.noughtq.top/system/db/images/lec10/20.png\"\n                      alt=\"img\" style=\"zoom:50%;\" \n                >\n\n<h3 id=\"Index\"><a href=\"#Index\" class=\"headerlink\" title=\"Index\"></a>Index</h3><ul>\n<li>顺序索引分为了稠密和稀疏两类，后者只能用于顺序文件，因为只有部分的search-key存在索引<ul>\n<li>如果搜索键没有重复的，那么稠密的顺序索引就包含了所有的搜索键的index；否则对于每一个搜索键，我们只需要一个开始的index，然后可以线性搜索得到</li>\n</ul>\n</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250529165232766.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"辅助索引\"><a href=\"#辅助索引\" class=\"headerlink\" title=\"辅助索引\"></a>辅助索引</h4><blockquote>\n<p>i.e. secondary key， 与primary-key（顺序）有所区别</p>\n</blockquote>\n<p>当数据文件中的记录顺序和索引文件中的索引项的顺序不一致时：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250529165410618.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>可以看到，辅助索引首先指向了一个bucket，bucket中存在二级索引</p>\n</blockquote>\n<h4 id=\"散列索引\"><a href=\"#散列索引\" class=\"headerlink\" title=\"散列索引\"></a>散列索引</h4><p>选择索引，利用哈希函数计算K到B的映射，哈希值相同的索引项放在了一个bucket中</p>\n<ul>\n<li><p><em><strong>overflow chaining</strong></em>：如果某个bucket内部的项太多了，系统将分配一个～，用于存储额外的索引项（bucket本身也是一个链表）</p>\n</li>\n<li><p>为了减少上述桶溢出发生的概率，我们可以如此设置桶的数量$n_b$：</p>\n<p>$$<br>n_b &#x3D; \\frac{n_r}{f_r} \\cdot (1+d)<br>$$</p>\n<blockquote>\n<p>其中，分子和分母分别表示记录总数和每个桶的记录数量；d称为<em><strong>fudge factor</strong></em>，通常设置为0.2</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"Query-Processing\"><a href=\"#Query-Processing\" class=\"headerlink\" title=\"Query Processing\"></a>Query Processing</h2><ul>\n<li>整体思想: 先选择、再投影、最后连接和输出</li>\n</ul>\n<p>成本估计：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250607230145795.png?imageSlim\"\n                     \n                >\n\n<h3 id=\"Join-cost\"><a href=\"#Join-cost\" class=\"headerlink\" title=\"Join-cost\"></a>Join-cost</h3><h4 id=\"嵌套循环\"><a href=\"#嵌套循环\" class=\"headerlink\" title=\"嵌套循环\"></a>嵌套循环</h4><table>\n<thead>\n<tr>\n<th>join方式</th>\n<th>块传输次数</th>\n<th>寻道次数</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Nested-Loop</td>\n<td>$b_r + n_r\\cdot b_s$</td>\n<td>$b_r + n_r$</td>\n<td></td>\n</tr>\n<tr>\n<td>Block Nested-Loop</td>\n<td>$b_r + b_r\\cdot b_s$</td>\n<td>$2\\cdot b_r$</td>\n<td>s的block顺序存储，对于每个$b_r$寻道s的block起点，然后顺序读取</td>\n</tr>\n<tr>\n<td>Index Nested-Loop</td>\n<td>TODO</td>\n<td></td>\n<td>条件：inner在连接属性上具有index</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>在最好的情况下，嵌套和块嵌套的循环，内存可以装下两个关系，因此块传输次数为block的个数，寻道次数均为2</p>\n</blockquote>\n<p>由于上述的计算是基于每次都读取外层关系1个block，我们可以继续改进上述的方法，让其每次读取M-2个block，留下2个block分别用于读取s的block和输出所用的空间</p>\n<blockquote>\n<p>其中 $M$ 为内存大小的block块数；每次读取r中一连串的block之后，读取s的block，并将s的record逐个与前者的记录比较</p>\n</blockquote>\n<p>此时，块嵌套的块传输次数和寻道次数分别为：</p>\n<p>$$<br>b_r + \\lceil\\frac{b_r}{M-2}\\rceil \\cdot b_s \\text{ 与 } 2\\cdot\\lceil\\frac{b_r}{M-2}\\rceil<br>$$</p>\n<h4 id=\"merge-join\"><a href=\"#merge-join\" class=\"headerlink\" title=\"merge join\"></a>merge join</h4><ul>\n<li>要求关系按照连接属性有序排列，否则优先sort</li>\n<li></li>\n</ul>\n<h3 id=\"Hash-join\"><a href=\"#Hash-join\" class=\"headerlink\" title=\"Hash join\"></a>Hash join</h3><ul>\n<li>利用哈希函数，将连接属性具有相同哈希值的元组放在一个集合&#x2F;划分</li>\n<li>对两个关系分别计算哈希值并划分后，我们只需要考虑对应划分对$s_i$,$r_i$</li>\n<li>之后，我们在上述的每个划分对，使用索引嵌套循环连接：<ul>\n<li>为inner关系<em><strong>build</strong></em>一个哈希索引，从outer关系中<em><strong>probe</strong></em>查找对应的元组</li>\n<li>分别称r，s为探测输入和构建输入</li>\n<li>构建哈希索引的哈希函数必须和第一步的哈希函数不同</li>\n</ul>\n</li>\n<li>如果构建关系包含$b_s$个块，每个划分的大小不超过$M$，则划分的数量至少为$\\lceil \\frac{b_s}{M}\\rceil$</li>\n</ul>\n<p>实际进行划分之后，我们需要将较小的关系作为 <strong>build</strong> 所用的关系;</p>\n<p>哈希函数的值域决定了分区n的大小, 为了使得si均能存放在mem中,要求 :</p>\n<p>$$<br>n_h \\geq \\lceil b_s &#x2F; M \\rceil \\cdot f<br>$$</p>\n<blockquote>\n<p>其中的 $f$ 被称为修正系数, 一般设置为 1. 2</p>\n</blockquote>\n<h4 id=\"递归划分\"><a href=\"#递归划分\" class=\"headerlink\" title=\"递归划分\"></a>递归划分</h4><blockquote>\n<p><strong>Recursive partitioning</strong>  required if number of partitions n is greater than number of pages <em>M</em> of memory.</p>\n</blockquote>\n<p>不需要递归划分的条件:</p>\n<p>$$<br>M &gt; n_h + 1 \\M &gt; b_s &#x2F; M + 1 \\ \\text{近似于} M &gt; \\sqrt{b_s}<br>$$</p>\n<h4 id=\"成本分析\"><a href=\"#成本分析\" class=\"headerlink\" title=\"成本分析\"></a>成本分析</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609150516608.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>为输入和输出分配缓冲块个数的提示：</p>\n<p><em><strong>two buffer pages are available for each partition during the hash partitioning phase.</strong></em></p>\n<p>此时的$b_b$ &#x3D; 2</p>\n</blockquote>\n<h3 id=\"外排序\"><a href=\"#外排序\" class=\"headerlink\" title=\"外排序\"></a>外排序</h3><p>cost分析:</p>\n<ul>\n<li>块传输</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250607155431473.png?imageSlim\"\n                     \n                >\n\n<ul>\n<li>seek</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250607155511090.png?imageSlim\"\n                     \n                >\n\n<h3 id=\"物化与流水线\"><a href=\"#物化与流水线\" class=\"headerlink\" title=\"物化与流水线\"></a>物化与流水线</h3><ul>\n<li><strong>物化</strong>：按照顺序对表达式求值，将中间的计算结果物化为临时关系，并且需要将临时关系表写入disk</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://note.noughtq.top/system/db/images/lec11/7.png\"\n                      alt=\"img\" style=\"zoom:50%;\" \n                >\n\n<ul>\n<li><strong>流水线</strong>：同时对多个表达时求值，将表达式的运算结果立即传入需要的表达式，无需将中间结果写入disk<ul>\n<li><strong>生产驱动型流水线.</strong><ul>\n<li>从下往上主动生成元组.</li>\n</ul>\n</li>\n<li><strong>需求驱动型流水线.</strong><ul>\n<li>从最上层的输出, 递归调用下层的函数 <code>next()</code>, 直到最底层为 <code>close()</code></li>\n<li>向流水线顶端的操作请求元组</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Query-Optimization\"><a href=\"#Query-Optimization\" class=\"headerlink\" title=\"Query Optimization\"></a>Query Optimization</h2><p>主要参考ppt的习题</p>\n<h2 id=\"并发控制\"><a href=\"#并发控制\" class=\"headerlink\" title=\"并发控制\"></a>并发控制</h2><ul>\n<li>可串行化调度</li>\n<li><strong>前驱图（优先图）</strong><ul>\n<li>注意绘制需要根据给出的schedule，从上往下看是否存在冲突</li>\n<li>将事务作为节点, 存在冲突的事务之间建立边,  $T_i\\rightarrow T_j$表示冲突之中，前者的操作先发生，后者的操作后发生；</li>\n</ul>\n</li>\n<li><em><strong>recoverable schedule</strong></em> 可恢复调度<ul>\n<li>依赖于T1写入的数据的T2，需要在前者commit之后，后者才能<strong>commit</strong></li>\n</ul>\n</li>\n<li><em><strong>Cascadeless Schedules</strong></em> 无级联调度<ul>\n<li>每一对存在冲突的事务, 前者事务的提交先于后者数据对的读取</li>\n<li>无级联调度都是可恢复的.</li>\n</ul>\n</li>\n<li><strong>等待图</strong><ul>\n<li>边 $T_i\\rightarrow T_j$ 表示事务i正在等待后者释放有关数据的锁； 当后者释放这个锁时，将这条边删除</li>\n<li>当且仅当等待图中存在环时，系统中就<strong>出现了死锁</strong></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"两阶段锁协议\"><a href=\"#两阶段锁协议\" class=\"headerlink\" title=\"两阶段锁协议\"></a>两阶段锁协议</h4><ul>\n<li>无法保证解决死锁的问题<ul>\n<li>但是按照排序关系来获得锁可以避免产生死锁</li>\n<li>Two phase locking can not avoid deadlock.To acquire locks <strong>in partial order</strong> of the data can avoid deadlock.</li>\n</ul>\n</li>\n<li><strong>strict two-phase locking</strong><ul>\n<li>每个事务保持exclusive锁直到结束；</li>\n<li>可以解决级联回滚和不可恢复的问题</li>\n</ul>\n</li>\n<li>根据～得到的调度<strong>一定是冲突可序列化</strong>的，这意味着如果前驱图存在环，一定不是由～得到的调度<ul>\n<li>按照所有事务的<strong>lock point</strong> （当前事务得到最后一个lock的时间点）排序，即可得到串行化顺序</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"避免死锁\"><a href=\"#避免死锁\" class=\"headerlink\" title=\"避免死锁\"></a>避免死锁</h4><p>发生冲突的锁请求之间：</p>\n<ul>\n<li><code>wait-die</code>： 如果后者的时间戳更小，i.e. 更早开始 <code>begin</code>, 那么后者可以等待，否则回滚后者的操作；</li>\n<li><code>wound-wait</code>:反之，后者 <code>begin</code>开始得较晚时，可以等待，否则回滚 <code>&lt;u&gt;</code>前者 <code>&lt;/u&gt;</code>（前者被后者击伤）</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250515154634003.png?imageSlim\"\n                     \n                >\n\n<h2 id=\"错误恢复\"><a href=\"#错误恢复\" class=\"headerlink\" title=\"错误恢复\"></a>错误恢复</h2><h3 id=\"普通恢复\"><a href=\"#普通恢复\" class=\"headerlink\" title=\"普通恢复\"></a>普通恢复</h3><h4 id=\"简单流程\"><a href=\"#简单流程\" class=\"headerlink\" title=\"简单流程\"></a>简单流程</h4><ul>\n<li>redo：<ul>\n<li>正向遍历，重做；</li>\n<li>如果碰到了新的事务就将其加入undo-list</li>\n<li>如果碰到了事务的commit&#x2F;abort，就将其从undo-list中移除</li>\n</ul>\n</li>\n<li>undo：<ul>\n<li>从末尾开始逆向遍历</li>\n<li>undo的时候产生undo日志（注意区分逻辑操作）</li>\n<li>碰到了undo-list中的事务才undo，并且碰到了对应的start写入对应的abort日志</li>\n<li>所有的undo事务都写入了abort后结束</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"checkpoint\"><a href=\"#checkpoint\" class=\"headerlink\" title=\"checkpoint\"></a>checkpoint</h4><ul>\n<li>普通的checkpoint：在写入checkpoint的log之前，此前的活跃事务停止更新，直到将buffer里的修改全部flush到disk，才写入checkpoint的log表示更新完毕，然后继续执行<ul>\n<li>这样可以确保，在checkpoint之前commit的事务，其更新一定反应到了disk当中；</li>\n</ul>\n</li>\n<li>fuzzy-checkpoint：<ul>\n<li>为了避免上述的阻塞而设计，允许写入checkpoint的log之后，可以继续执行日志，同时将先前的修改写到disk</li>\n<li>但是这样伴随了一个问题，可能有的修改正在写入就发生了crash，我们需要一个机制确保处理这种情况；</li>\n</ul>\n</li>\n<li><em><strong>last-checkpoint</strong></em>：将最后一个完成的检查点记录在日志中的位置存储在硬盘上的一个固定位置，即最后检查点。系统在写入检查点记录时不会更新此信息。相反，在写入检查点记录之前，它创建一个包含所有已修改缓存块的列表。只有当列表中的所有缓冲区块都已输出到磁盘后，才会更新最后检查点信息。</li>\n</ul>\n<h4 id=\"undo产生的日志\"><a href=\"#undo产生的日志\" class=\"headerlink\" title=\"undo产生的日志\"></a>undo产生的日志</h4><p>在逻辑操作中，如果逻辑操作已经完成和逻辑操作未完成，面临回滚时的日志类型不同：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250530190917480.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p><strong>为什么需要operation-abort的信号？</strong></p>\n<p>让operation-abort的信号在undo阶段被发现时，直接跳到对应的begin，避免已经在redo期间执行的操作被再次执行</p>\n</blockquote>\n<h3 id=\"Aries恢复\"><a href=\"#Aries恢复\" class=\"headerlink\" title=\"Aries恢复\"></a>Aries恢复</h3><ul>\n<li>使用LSN标注日志</li>\n<li>使用dirty page table避免不必要的redo</li>\n<li>RecLSN：<strong>第一次</strong>变成脏页对应的LSN</li>\n</ul>\n<h4 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h4><ul>\n<li>相比之前的恢复算法，多了第一步的分析阶段：<ul>\n<li>分析dirty table，取RecLSN的最小值作为<strong>Redo</strong>的起点（如果不存在就取checkpoint的LSN）</li>\n<li>分析阶段本身是从检查点开始正向遍历的</li>\n<li>分析阶段同样需要更新dirty table和活跃事务表</li>\n<li><strong>分析的时候，只会分析log，但是不会读取数据文件page，也就是不会读取page</strong></li>\n</ul>\n</li>\n<li>redo的阶段与普通恢复整体相同：<ul>\n<li>发现更新记录的时候，如果不在脏页表中的page之列，or  更新记录的LSN小于页面的RecLSN，就忽略；<ul>\n<li>否则，我们需要读取page，然后再比较pageLSN与log LSN；</li>\n<li>如果log LSN 大于 页面的pageLSN就redo</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>undo阶段<ul>\n<li>为了撤销undo-list中的事务，利用分析阶段得到的lastLSN(选择<strong>最大值</strong>作为起点)，开始反向遍历重做</li>\n<li>重做的时候也会生成仅重做日志的CLR，但是不同之处在于：<ul>\n<li>ARIES算法的CLR还会在字段<strong>UndoNextLSN</strong>中记录该事务当前LSN的<strong>prevLSN</strong></li>\n<li>这是为了应对undo过程中crash情景：可以利用CLR知道下一条undo的LSN后，继续undo</li>\n</ul>\n</li>\n<li>实际上做题的时候，往往不会呈现上述的 <code>xxLSN</code>,而是类似于普通恢复的仅重做日志，类似于：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;T4, 102.1, 62&gt;</span><br><span class=\"line\">&lt;T4, abort&gt;</span><br></pre></td></tr></table></figure></li>\n<li>符合下列条件的记录可以跳过：<ul>\n<li><em><strong>TODO</strong></em></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"简单的例子\"><a href=\"#简单的例子\" class=\"headerlink\" title=\"简单的例子\"></a>简单的例子</h4><p>演示了xxLSN的作用：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250526233737314.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p><strong>TODO</strong>：教材中声明了脏页表储存了pageLSN，如果DirtyPageTable已经包含了pageLSN，为什么还要从disk中读取page再比较pageLSN和当前log LSN？</p>\n<p>因此在redo阶段，需要首先比较当前LSN与RecLSN，如果可能需要修改，就读取对应page，然后比较其pageLSN与当前LSN的大小</p>\n</blockquote>\n<h4 id=\"课本的例子\"><a href=\"#课本的例子\" class=\"headerlink\" title=\"课本的例子\"></a>课本的例子</h4><p>演示了算法的具体流程：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined1748309403783.png?imageSlim\"\n                     \n                >\n\n<p>CLR不需要写abort</p>\n<p>在事务commit的时候，不一定需要将数据都flush到内存中</p>\n<ul>\n<li>事务总是可以写log</li>\n<li>flush的时候，先将日志flush到内存中，然后将数据flush到内存中</li>\n</ul>\n<p>undo产生日志的时候，也是一条一条产生仅重做日志的，不会从末端沿着prevLSN直接回溯到最开始）比如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;T3, 8002.1, 66&gt;</span><br><span class=\"line\">&lt;T3, 8002.1, 55&gt;</span><br><span class=\"line\">&lt;T3, abort&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"习题\"><a href=\"#习题\" class=\"headerlink\" title=\"习题\"></a>习题</h1><h3 id=\"SQL练习\"><a href=\"#SQL练习\" class=\"headerlink\" title=\"SQL练习\"></a>SQL练习</h3><ul>\n<li>使用聚合函数时不一定需要 <code>group by</code>；</li>\n<li>注意符号：不等于 <code>&lt;&gt;</code></li>\n</ul>\n<h4 id=\"练习1\"><a href=\"#练习1\" class=\"headerlink\" title=\"练习1\"></a>练习1</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250527153731212.png?imageSlim\"\n                     \n                >\n\n<p>主要关注第四题：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> title <span class=\"keyword\">from</span> movie</span><br><span class=\"line\"><span class=\"keyword\">except</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> title <span class=\"keyword\">from</span> movie</span><br><span class=\"line\"><span class=\"keyword\">where</span> <span class=\"keyword\">exists</span>(<span class=\"keyword\">select</span> <span class=\"operator\">*</span></span><br><span class=\"line\">\t<span class=\"keyword\">from</span> comment A, comment B</span><br><span class=\"line\">\t<span class=\"keyword\">where</span> A.title <span class=\"operator\">=</span> movie.title <span class=\"keyword\">and</span> A.user_name <span class=\"operator\">=</span> B.user_name</span><br><span class=\"line\">\t<span class=\"keyword\">and</span> B.titel <span class=\"operator\">=</span> <span class=\"string\">&#x27;the avenger&#x27;</span></span><br><span class=\"line\">\t<span class=\"keyword\">and</span> A.grade <span class=\"operator\">&lt;=</span> B.grade</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ul>\n<li>题目的意思是：找出给xx打分的都比给 <code>the avenger</code>打分高的xx（电影title）</li>\n<li>考虑使用 <code>except</code>，涉及到单表之间的比较，因此将2个comment作笛卡尔积</li>\n<li>利用title确保与外表相连接；利用user_name确保2个内表讨论的是同一个用户的打分</li>\n</ul>\n</blockquote>\n<h4 id=\"练习2\"><a href=\"#练习2\" class=\"headerlink\" title=\"练习2\"></a>练习2</h4><p>题目：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250527155632148.png?imageSlim\"\n                     \n                >\n\n<p>第一问：将给出的SQL查询转换为不包含嵌套子查询的版本</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> C.cno, C.name <span class=\"comment\">-- 使用 DISTINCT 是为了避免同一张 CS 卡因有多笔交易符合条件而被多次列出</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> card <span class=\"keyword\">AS</span> C</span><br><span class=\"line\"><span class=\"keyword\">JOIN</span> detail <span class=\"keyword\">AS</span> D1 <span class=\"keyword\">ON</span> C.cno <span class=\"operator\">=</span> D1.cno <span class=\"comment\">-- 将 card 与其消费记录 D1 连接</span></span><br><span class=\"line\"><span class=\"keyword\">JOIN</span> detail <span class=\"keyword\">AS</span> D2 <span class=\"keyword\">ON</span> D1.cdate <span class=\"operator\">=</span> D2.cdate <span class=\"keyword\">AND</span> D1.pno <span class=\"operator\">=</span> D2.pno <span class=\"comment\">-- 将 D1 的消费记录与 D2 的消费记录连接，条件是时间和地点相同</span></span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> C.depart <span class=\"operator\">=</span> <span class=\"string\">&#x27;CS&#x27;</span> <span class=\"comment\">-- 过滤 CS 部门的卡</span></span><br><span class=\"line\">  <span class=\"keyword\">AND</span> D2.cno <span class=\"operator\">=</span> <span class=\"string\">&#x27;c0002&#x27;</span>; <span class=\"comment\">-- 过滤 D2，使其只包含卡 &#x27;c0002&#x27; 的消费记录</span></span><br></pre></td></tr></table></figure>\n\n<p>第二问：转换为代数表达式：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250527160740028.png?imageSlim\"\n                     \n                >\n\n<p>第三问：编写SQL语句，找出2018年仅在一个校园中使用的卡片</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> cno</span><br><span class=\"line\"><span class=\"keyword\">from</span> detail <span class=\"keyword\">natural</span> <span class=\"keyword\">join</span> pos</span><br><span class=\"line\"><span class=\"keyword\">where</span> <span class=\"keyword\">year</span>(detail.cdate) <span class=\"operator\">=</span> <span class=\"number\">2018</span></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> cno</span><br><span class=\"line\"><span class=\"keyword\">having</span> <span class=\"built_in\">count</span>(<span class=\"keyword\">distinct</span> campus) <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注意 <code>detail</code>中就有cno的信息，因此不需要和card表join</li>\n</ul>\n<p>第四问：写一个SQL语句，找出2018年“紫金港”校园中具有最大卡消费总量的pos。</p>\n<ul>\n<li><p>使用 <code>having</code>子句的版本</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> pno</span><br><span class=\"line\"><span class=\"keyword\">from</span> detail <span class=\"keyword\">natural</span> <span class=\"keyword\">join</span> pos</span><br><span class=\"line\"><span class=\"keyword\">where</span> pos.campus<span class=\"operator\">=</span>’紫金港’ <span class=\"keyword\">and</span> <span class=\"keyword\">year</span>（detail.cdate）<span class=\"operator\">=</span><span class=\"number\">2018</span></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> pno</span><br><span class=\"line\"><span class=\"keyword\">having</span> <span class=\"built_in\">sum</span>(amount) <span class=\"operator\">&gt;=</span> <span class=\"keyword\">all</span> ( <span class=\"comment\">-- 注意这里的比较</span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> <span class=\"built_in\">sum</span>(amount)</span><br><span class=\"line\">    <span class=\"keyword\">from</span> detail <span class=\"keyword\">natural</span> <span class=\"keyword\">join</span> pos</span><br><span class=\"line\">    <span class=\"keyword\">where</span> pos.campus<span class=\"operator\">=</span><span class=\"string\">&#x27;紫金港&#x27;</span> <span class=\"keyword\">and</span> <span class=\"keyword\">year</span>(detail.cdate) <span class=\"operator\">=</span> <span class=\"number\">2018</span></span><br><span class=\"line\">    <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> pno</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></li>\n<li><p>也可以搭配 <code>order</code>和 <code>limit 1</code>直接筛选：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> pno</span><br><span class=\"line\"><span class=\"keyword\">from</span> detail <span class=\"keyword\">natural</span> <span class=\"keyword\">join</span> pos</span><br><span class=\"line\"><span class=\"keyword\">where</span> pos.campus<span class=\"operator\">=</span>’紫金港’ <span class=\"keyword\">and</span> <span class=\"keyword\">year</span>（detail.cdate）<span class=\"operator\">=</span><span class=\"number\">2018</span></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> pno</span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> <span class=\"built_in\">sum</span>(amount) <span class=\"keyword\">desc</span> <span class=\"comment\">-- 注意这里是 sum(amount)</span></span><br><span class=\"line\">limit <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这种操作带来的差异是，如果存在多个相同的最大值，还是只会选择一个，所以比起使用嵌套子查询还是有劣势</p>\n</blockquote>\n</li>\n</ul>\n<p>第五问：编写一系列SQL语句来完成以下事务：卡片“c0002”在pos“p001”处消费20，时间为2018-07-02 08:08:08</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">update</span> card <span class=\"keyword\">set</span> </span><br><span class=\"line\">balance <span class=\"operator\">=</span> balance <span class=\"operator\">-</span> <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"keyword\">where</span> cno <span class=\"operator\">=</span> <span class=\"string\">&#x27;c0002&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert into</span> detail(cno,pno,cdate,ctime,amount)</span><br><span class=\"line\">\t<span class=\"keyword\">values</span>(<span class=\"string\">&#x27;c0002&#x27;</span>,<span class=\"string\">&#x27;p001&#x27;</span>,<span class=\"string\">&#x27;2018-07-02&#x27;</span>,<span class=\"string\">&#x27;08:08:08&#x27;</span>,<span class=\"number\">20</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">commit</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注意需要同步更新card；</li>\n<li>需要commit</li>\n</ul>\n<h3 id=\"范式相关\"><a href=\"#范式相关\" class=\"headerlink\" title=\"范式相关\"></a>范式相关</h3><h4 id=\"无损分解\"><a href=\"#无损分解\" class=\"headerlink\" title=\"无损分解\"></a>无损分解</h4><ul>\n<li>课本的定义：</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250528142319738.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>具体的验证，可以采取计算属性闭包的方式来推导</p>\n</blockquote>\n<ul>\n<li>一个简单的例子：</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250528142533000.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>如果分解的结果不是两个，而是多个关系，并且给出了分解的过程（可能是自己推的），那么可以每次对中间结果判断一下是否满足无损分解，如果都满足就认为整体是无损分解的；</p>\n</blockquote>\n<h4 id=\"dependency-preserving\"><a href=\"#dependency-preserving\" class=\"headerlink\" title=\"dependency-preserving\"></a>dependency-preserving</h4><p>回顾课本的定义：</p>\n<ul>\n<li>the set $F_i$ of all functional dependencies in $F^+$ that include only attributes of Ri</li>\n<li>也即是将R进行分解为Ri之后, Fi是F的闭包中存在于Ri相关属性的部分.</li>\n<li>因此, <strong>Fi不一定是F的部分</strong>.</li>\n</ul>\n<p>我们定义 上述的 $F_i$ 的并集为 F’, 如果满足:</p>\n<p>$$<br>F’^+ &#x3D; F^+<br>$$</p>\n<p>也就是, 如果F’的闭包等于F的闭包, 则称上述的R的分解为 <code>dependency-preserving decomposition</code></p>\n<hr>\n<p>由此可见，我们判断一个分解是否为依赖保留的分解时，只需要计算对应$F_i$的并集的闭包，然后判断是否与原本的F的闭包相等即可。</p>\n<ul>\n<li>一个简单的例子：判断上述的分解是否为～</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250528142949091.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>上述的F1还包含了 BC -&gt; A （根据F条件下的属性闭包计算得到）</p>\n</blockquote>\n<h4 id=\"BCNF分解\"><a href=\"#BCNF分解\" class=\"headerlink\" title=\"BCNF分解\"></a>BCNF分解</h4><p>根据无损分解的定义，满足BCNF范式的分解就满足了<strong>无损分解</strong>的要求。（但是不一定满足依赖保留）</p>\n<ul>\n<li>一个简单的例子：将上述的例子转换为无损分解的BCNF分解</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250528143530426.png?imageSlim\"\n                     \n                >\n\n<p>注意，判断是否满足BCNF的时候 ,  $F_i$ 也来自于 $F^+$中，参考下面的具体说明：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefinedad580709cdfb24b1ec265bc375880ad5.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"满足3NF的分解\"><a href=\"#满足3NF的分解\" class=\"headerlink\" title=\"满足3NF的分解\"></a>满足3NF的分解</h4><p>3NF在BCNF的基础上多了一条，也就是右侧的属性是候选键的部分。因此，我们需要先借助FD来推导候选键有哪些。</p>\n<p>标准的分析流程：</p>\n<ul>\n<li><p><strong>计算F的一个最小覆盖 F_min。满足三个条件：</strong></p>\n<ul>\n<li><strong>F_min 与 F 是等价的（即它们逻辑蕴含相同的 FD 集合）。</strong></li>\n<li><strong>F_min 中没有任何冗余的 FD（移除任何一条 FD 都会改变 F_min 的闭包）。</strong></li>\n<li><strong>F_min 中每个 FD X -&gt; Y 的右边 Y 是单属性的，且没有任何冗余的属性</strong></li>\n</ul>\n</li>\n<li><p><strong>根据 F_min 构建关系模式：</strong></p>\n<ul>\n<li>对于 F_min 中的每一个 FD X -&gt; Y，创建一个关系模式 Ri，其属性集为 X ∪ {Y}。</li>\n</ul>\n</li>\n<li><p><strong>检查是否包含原始关系模式的候选码。检查是否存在某个 Ri 的属性包含了候选键</strong></p>\n<ul>\n<li><strong>如果存在</strong>这样的 Ri，则步骤 2 生成的关系模式集合 {R1, R2, …, Rm} 就是最终的分解结果。</li>\n<li><strong>如果不存在</strong>这样的 Ri，则需要额外创建一个关系模式 R_{m+1}，其属性集就是 K。将这个 R_{m+1} 加入到分解结果中。</li>\n</ul>\n</li>\n</ul>\n<p>一个简单的例子：将上述的分解转换为满足3NF、无损和依赖保留的分解</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250528145420786.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>此处的题目给出的F已经是最小覆盖的Fc，因此可以直接用于分解</p>\n</blockquote>\n<h3 id=\"ER模型练习\"><a href=\"#ER模型练习\" class=\"headerlink\" title=\"ER模型练习\"></a>ER模型练习</h3><h4 id=\"根据描述绘制ER图\"><a href=\"#根据描述绘制ER图\" class=\"headerlink\" title=\"根据描述绘制ER图\"></a>根据描述绘制ER图</h4><ul>\n<li>题干将会给出主要的实体集，我们需要根据描述推导<strong>蕴含的关系</strong></li>\n<li>同时需要注意其中的<strong>数据类型</strong>，比如多值和复合等的格式</li>\n</ul>\n<p>一个简单的例子：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250528163711386.png?imageSlim\"\n                     \n                >\n\n<p>第一问：绘制对应的ER图</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250528163909905.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>此处的多值属性（电话）由 <code>&#123;&#125;</code>包裹。</p>\n</blockquote>\n<h4 id=\"由ER图得到schema\"><a href=\"#由ER图得到schema\" class=\"headerlink\" title=\"由ER图得到schema\"></a>由ER图得到schema</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined2025-05-28_17-13-08-0.png?imageSlim\"\n                     \n                >\n\n<p>对应的schema：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined2025-05-28_17-12-36-0.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>注意：此处的关系中，1对N的belong没有新建schema</p>\n<p>修正： <code>player</code>中的属性应该增加 <code>team_name</code>作为team的外键</p>\n</blockquote>\n<h3 id=\"B-树练习\"><a href=\"#B-树练习\" class=\"headerlink\" title=\"B+树练习\"></a>B+树练习</h3><h4 id=\"计算B-树的高度\"><a href=\"#计算B-树的高度\" class=\"headerlink\" title=\"计算B+树的高度\"></a>计算B+树的高度</h4><ul>\n<li>通过<strong>计算不同高度的最值</strong>，来得出最终的高度：</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250529192439172.png?imageSlim\"\n                     \n                >\n\n<p>此处计算block并没有作用，实际上是比较索引项 $10^6$</p>\n<blockquote>\n<p>关键是记住：</p>\n<ul>\n<li>叶子节点的key范围是 $\\lceil \\frac{n-1}{2} \\rceil $ ~ $(n-1)$</li>\n<li>内部节点的～是 $\\lceil \\frac{n}{2} \\rceil$ ~ $n$ ， 并且根节点的最小值是2</li>\n</ul>\n</blockquote>\n<ul>\n<li>我们也可以<strong>通过扇出n以及索引项来直接利用对数计算进行估计</strong></li>\n</ul>\n<blockquote>\n<p>关键是理解左右两侧的含义：</p>\n<ul>\n<li><p>计算<strong>最小高度</strong>时，我们自底向上地构建全满的B+树，先将k个value按照n-1的规模打包，然后每层n个，因此是</p>\n<p>$$<br>\\lceil \\log_n{\\lceil{k\\ &#x2F;\\ (n-1)\\rceil}} \\rceil + 1<br>$$</p>\n</li>\n<li><ul>\n<li>其中左侧是迭代的次数，因此需要+1补充底层的层数；</li>\n</ul>\n</li>\n<li><p>计算<strong>最大高度</strong>时，我们自顶向下地构建半满的B+树，并且在一开始将根节点特殊处理——只分配两个child，所以我们从第二层开始计算，需要迭代的次数为 $\\lceil \\log_{n&#x2F;2}\\frac{K&#x2F;2}{（n-1）&#x2F;2} \\rceil$, 同理需要+1得到从第二层到叶子层的高度数，最后+1加入根节点的高度：</p>\n<p>$$<br>\\lfloor \\log_{\\lceil n&#x2F;2 \\rceil}\\frac{K&#x2F;2}{\\lceil(n-1)&#x2F;2\\rceil} \\rfloor + 2  \\approx \\lfloor \\log_{\\lceil n&#x2F;2 \\rceil}\\frac{K}{\\lceil(n-1)\\rceil} \\rfloor + 2<br>$$</p>\n</li>\n</ul>\n</blockquote>\n<p>对于上述的推导，我们可以结合第一种方法来给出第二个证明：</p>\n<p>$$<br>2\\cdot \\lceil \\frac{n}{2} \\rceil^ {h-2} \\cdot  \\lceil \\frac{n-1}{2} \\rceil \\leq K(h) \\leq n^{h-1} \\cdot (n-1)<br>$$</p>\n<p>取左侧计算得到：</p>\n<p>$$<br>h \\leq \\lfloor \\log_{\\lceil n&#x2F;2 \\rceil}\\frac{K&#x2F;2}{\\lceil(n-1)&#x2F;2\\rfloor} \\rceil + 2<br>$$</p>\n<blockquote>\n<p>为了满足不等式的条件，应当向下取整</p>\n</blockquote>\n<pre><code>取右侧计算得到：\n</code></pre>\n<p>$$<br>\\lceil \\log_n{k&#x2F;(n-1)} \\rceil + 1 \\leq h<br>$$</p>\n<p>直接利用给定的高度h计算size：</p>\n<p>max:</p>\n<p>$$<br>N^{h-1}\\cdot (N-1)<br>$$</p>\n<p>min:</p>\n<p>$$<br>2\\cdot \\lceil\\frac{N}{2}\\rceil ^{h-2} \\cdot \\lceil \\frac{N-1}{2}\\rceil<br>$$</p>\n<p>然后利用题目给出的索引项个数建立不等式</p>\n<hr>\n<p>实际上，我们在<strong>估算</strong>的时候可以忽略常数的影响，比如：</p>\n<p>$$<br>\\text{minimal height} &#x3D; \\lceil{\\log_N(k)} \\rceil \\ \\text{max height} &#x3D; \\lfloor{\\log_{N&#x2F;2}(k&#x2F;2) + 1}\\rfloor<br>$$</p>\n<h4 id=\"根据索引项估计节点数量\"><a href=\"#根据索引项估计节点数量\" class=\"headerlink\" title=\"根据索引项估计节点数量\"></a>根据索引项估计节点数量</h4><p>关键：利用扇出n估计最后一层的节点数量，然后倒推</p>\n<ul>\n<li>估计最少值时，由$\\lceil \\frac{k}{n-1} \\rceil$计算得到叶子节点的数量N，然后逐步倒推 $\\lceil N&#x2F;n \\rceil$,直到加数为1到达根节点（过程中的计算结果<strong>向上取整，因为小数部分的节点数无法再纳入其他节点</strong>）</li>\n<li>估计最大值时，将上述的除数都换成对应的最小值 $\\lceil (n-1)&#x2F;2 \\rceil$ 与 $\\lceil n&#x2F;2 \\rceil$，但是注意<strong>将每次的计算结果向下取整！因为小数部分的节点数表示无法满足最少个数的要求，无法独立构成节点</strong></li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250530105135776.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p><strong>注意取整方向的差异</strong>：估计最少向上取整；估计最大向下取整</p>\n<p>上面的例题中，max估计的63应为<strong>62</strong></p>\n</blockquote>\n<h4 id=\"计算块传输的次数\"><a href=\"#计算块传输的次数\" class=\"headerlink\" title=\"计算块传输的次数\"></a>计算块传输的次数</h4><p>题目可能给出一个现有的B+树结构以及一系列的访问操作，结合一定的replacer策略，让我们计算块传输的次数，需要注意的是：</p>\n<ul>\n<li>如果题目明确说了是 <em><strong>blocks transferred to buffer</strong></em>  那么我们就不需要考虑将block写回到disk的次数</li>\n</ul>\n<p>一个简单的例子：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250530113134018.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>注意此处内部节点的指针数和key数量</p>\n</blockquote>\n<h4 id=\"删除操作\"><a href=\"#删除操作\" class=\"headerlink\" title=\"删除操作\"></a>删除操作</h4><p>一般来说，分裂时默认左侧的节点元素不少于右侧节点包含的元素个数，可能题目会具体说明右侧不少于左侧。</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605160249126.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>重组 合并 发现需要分裂</p>\n</blockquote>\n<h4 id=\"LSM的成本估计\"><a href=\"#LSM的成本估计\" class=\"headerlink\" title=\"LSM的成本估计\"></a>LSM的成本估计</h4><p>问题：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609141542719.png?imageSlim\"\n                     \n                >\n\n<p>（3）对应的B+树：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609141603785.png?imageSlim\"\n                     \n                >\n\n<p>ans：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609141705099.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p><em><strong>TODO</strong></em>：（2）是什么意思？</p>\n</blockquote>\n<ul>\n<li><p>题目说maximize size  &#x3D; 13， 根据 1 + 3 + 9 &#x3D; 13， 推知最多有3层高</p>\n</li>\n<li><p>查找某个index，可能的范围分别是主存以及disk中的两棵树，分别计算对应的成本，然后加权求和：</p>\n<ul>\n<li>根据上一步计算得到的B+树的高度，如果在主存中，块传输和寻道的成本都是0；如果在第一棵树就是3+3， 在第二棵树就是前面成本的两倍</li>\n<li>因此整体是 (0 + 3 + 6) &#x2F; 3 &#x3D; 3（块传输和seek）</li>\n</ul>\n</li>\n<li><p><em><strong>为什么不需要计算从叶子节点到disk的额外寻道和块传输？</strong></em></p>\n<ul>\n<li>因为题目声明了：<em><strong>look up an index entry ….</strong></em></li>\n<li>这意味着，我们只需要检查某个index是否在叶子节点中包含，所以只需要查找到叶子节点层，不需要根据叶子节点中的指针访问disk中的数据页</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"查询处理练习\"><a href=\"#查询处理练习\" class=\"headerlink\" title=\"查询处理练习\"></a>查询处理练习</h3><h4 id=\"join的成本估计\"><a href=\"#join的成本估计\" class=\"headerlink\" title=\"join的成本估计\"></a>join的成本估计</h4><blockquote>\n<p>这里什么都没有哦～</p>\n</blockquote>\n<h3 id=\"查询优化练习\"><a href=\"#查询优化练习\" class=\"headerlink\" title=\"查询优化练习\"></a>查询优化练习</h3><p>如果题目只是给出了两个关系，让我们计算对应的join成本，我们应该先计算关系各自的block数量，然后选择块较少的作为外层关系</p>\n<ul>\n<li>这是因为此时对应的块传输次数和寻道次数分别为：<br>$$<br>b_r + \\lceil\\frac{b_r}{M-2}\\rceil \\cdot b_s \\text{ 与 } 2\\cdot\\lceil\\frac{b_r}{M-2}\\rceil<br>$$</li>\n</ul>\n<p>如果给出了缓存区的buffer大小$M$，应该考虑使用上述的计算方法，否则认为M &#x3D; 3带入公式</p>\n<h4 id=\"习题1\"><a href=\"#习题1\" class=\"headerlink\" title=\"习题1\"></a>习题1</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250601191021519.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>具体解答参考：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefinedimage-20250506101133270.png?imageSlim\"\n                     \n                >\n\n<ul>\n<li><p><code>where</code>中包含了join的条件, 因此此处的join属性实际上是 <code>pno</code> 和 <code>cdate</code>, 计算对应的V.</p>\n<ol>\n<li>实际上是一组复合的属性, post有100个, cdate有365个可能的取值. 因此估计对应的值域空间是100*365.</li>\n<li><code>/4</code>对应了where中最后一个时间的约束, 是整体的1&#x2F;4.</li>\n</ol>\n</li>\n<li><p>1个block的尺寸是4096bytes, 除以每条记录的尺寸, 得到每个block对应的记录数量. 然后据此计算table对应的block数量.</p>\n</li>\n<li><p><code>cno</code>的bytes是5, 根据题意&#x3D;&#x3D;&gt; pointer的大小是4bytes, 那么每一对键值对是5+4&#x3D;9bytes.</p>\n</li>\n<li><p>计算 fan-out-rate n &#x3D; 455，然后根据公式算出高度为2（注意是建立在cno的索引，不同的cno有10000 &#x3D; K个，据此计算！）</p>\n</li>\n<li><p>根据detail的记录数量, 估算每个card对应的记录数量. 然后根据detail的block的容量, 计算每个card对应的记录的block数量.</p>\n<ol>\n<li>根据 <code>V(name,card)</code> &#x3D; 5000 我们可以知道, 因为card中一共有10k条记录, 所以每个名字平均对应2个card.</li>\n<li>参考</li>\n</ol>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined13b156083431e6cbe7e2beac4e070542.png?imageSlim\"\n                     \n                ></li>\n</ul>\n</blockquote>\n<h4 id=\"习题2\"><a href=\"#习题2\" class=\"headerlink\" title=\"习题2\"></a>习题2</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250601185929781.png?imageSlim\"\n                     \n                >\n\n<p>（2）：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250601190117419.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>优化的分配是：1块给输出，1块给内关系，剩下都分配给外关系</p>\n</blockquote>\n<p>（3）：<em><strong>TODO</strong></em></p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250601190657172.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p><em><strong>SOLUTION：</strong></em></p>\n<p>K &#x3D; 5000， n &#x3D; 60，计算得到高度为 3（答案中max的估计公式有问题，并且应该是向下取整）</p>\n<p>注意此处题目说了为root准备了一个buffer，在每次的遍历中原本的h+1 &#x3D; 4的成本 减去1次，只需要在一开始存入（最后+1）</p>\n<p>公式 $b_r\\cdot(t_T+t_S) + n_r \\cdot c$ 中的$n_r$需要除以500，因为$\\sigma$确定了director（一共有500位不同的～），或者我们可以从成本估计的角度解释：</p>\n<p>$$<br>\\frac{n_{Movie}\\cdot n_{Comment}}{V(title,Movie) \\cdot V(director,Movie)}<br>$$</p>\n</blockquote>\n<h4 id=\"归并排序练习\"><a href=\"#归并排序练习\" class=\"headerlink\" title=\"归并排序练习\"></a>归并排序练习</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250607150028129.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>此处的buffer容量是针对于run的, 也就是output存在2个block; 可以计算得到 (10-2) &#x2F;2  &#x3D; 4 ,每次将4个run归并</p>\n</blockquote>\n<p><em><strong>SOLUTION</strong></em>: 如何计算seek?</p>\n<p>分析:</p>\n<ul>\n<li>此处为每个input row 提供了  <strong>2 buffer block</strong>意味着我们每次seek之后可以直接读取2个blcok而非1个(优化), 从而减少了seek的次数;</li>\n<li>利用每次归并4个runs, 得到总共的pass数量</li>\n<li>注意题目说最终需要写回到disk</li>\n</ul>\n<p>解答: (ljm同学的珍贵手稿)</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined8b4b347f51b2175cfce8ba89bb825dcf.jpg?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>可以直接运用公式， 此处的$b_b$ &#x3D; 2, $M $ &#x3D; 10, $b_r$  &#x3D; 160:</p>\n<p>$$<br>t_T &#x3D; b_r \\cdot (2\\lceil\\log_{\\lfloor\\frac{M}{b_b}-1\\rfloor} (\\frac{b_r}{M})\\rceil+1 \\textcolor{red}{+1}) \\ t_S &#x3D; 2\\cdot \\lceil \\frac{b_r}{M} \\rceil + \\lceil \\frac{b_r}{b_b}\\rceil\\cdot (2\\lceil\\log_{\\lfloor\\frac{M}{b_b}-1\\rfloor} (\\frac{b_r}{M})\\rceil - 1   \\textcolor{red}{+1})<br>$$</p>\n<p>其中加红的，表示需要写回disk的额外成本，如果题目没有明确声明，就不需要加入计算</p>\n</blockquote>\n<h2 id=\"并发控制练习\"><a href=\"#并发控制练习\" class=\"headerlink\" title=\"并发控制练习\"></a>并发控制练习</h2><h4 id=\"绘制前驱图\"><a href=\"#绘制前驱图\" class=\"headerlink\" title=\"绘制前驱图\"></a>绘制前驱图</h4><p>可以根据数据项分组，从当前向下查看：</p>\n<p>习题和解答：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250601193315102.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>判断是否为无级联回滚的调度也很简单，只需要保证读取在提交之后即可，比如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T1           | T2           | T3</span><br><span class=\"line\">-------------|--------------|-------------</span><br><span class=\"line\">Read(A)      |              |</span><br><span class=\"line\">Read(B)      |              |</span><br><span class=\"line\">Write(B)     |              |</span><br><span class=\"line\">Commit       |              |</span><br><span class=\"line\">             | Read(B)      |</span><br><span class=\"line\">             | Read(A)      |</span><br><span class=\"line\">             | Write(A)     |</span><br><span class=\"line\">             | Commit       |</span><br><span class=\"line\">                          | Read(A)</span><br></pre></td></tr></table></figure>\n\n<p>两阶段锁协议无法解决死锁的问题</p>\n</blockquote>\n<h4 id=\"等待图与死锁\"><a href=\"#等待图与死锁\" class=\"headerlink\" title=\"等待图与死锁\"></a>等待图与死锁</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609153157189.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>注意题目说了，此时还没有事务释放锁；T3没有指向T1的边，因为此时T1没有对B成功加锁</p>\n</blockquote>\n<h2 id=\"错误恢复练习\"><a href=\"#错误恢复练习\" class=\"headerlink\" title=\"错误恢复练习\"></a>错误恢复练习</h2><h4 id=\"脏页表的更新\"><a href=\"#脏页表的更新\" class=\"headerlink\" title=\"脏页表的更新\"></a>脏页表的更新</h4><table>\n<thead>\n<tr>\n<th>PageID</th>\n<th>PageLSN</th>\n<th>RecLSN</th>\n</tr>\n</thead>\n</table>\n<ul>\n<li>如果有新的页面被更新了，加入脏页表，同时设置对应的PageLSN, RecLSN等于当前的log LSN</li>\n<li>只有flush的时候才会清除脏页表中的page entry（我们无法知道什么时候flush到disk，因此一般只增不减）</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602161156079.png?imageSlim\"\n                     \n                >\n\n<h1 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h1><h4 id=\"不同的范式\"><a href=\"#不同的范式\" class=\"headerlink\" title=\"不同的范式\"></a>不同的范式</h4><p><strong>第一范式</strong>  表中的每个字段都是不可再分的最小数据单位，即字段具有原子性；</p>\n<ul>\n<li>如果存在多值属性，需要将其分割位多个单独的</li>\n</ul>\n<p><strong>第二范式</strong> 消除非PK属性对于key的部分函数依赖</p>\n<ul>\n<li><code>A-&gt;B</code> : B 依赖于A</li>\n<li>如果主键是复合的，确保所有非PK属性完全依赖于整个主键，而不是主键的一部分</li>\n</ul>\n<p>第三范式 消除非PK对于key的传递函数依赖</p>\n<ul>\n<li>确保所有非PK属性都直接依赖于PK</li>\n</ul>\n<p>BCNF范式 消除PK对于key的部分与传递函数依赖</p>\n<blockquote>\n<p>TODO：补充与理解</p>\n<p>SOLUTION：书上没有啊？</p>\n</blockquote>\n<h4 id=\"Columnar-Representation\"><a href=\"#Columnar-Representation\" class=\"headerlink\" title=\"Columnar Representation\"></a>Columnar Representation</h4><p>列式存储在数据查询方面表现更好，但是在事务处理方面表现较差</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605153636800.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p><strong>hybrid row&#x2F;column store</strong>： 支持行列两种存储方式的数据库</p>\n<p>根据drawback, <strong>Reduced</strong> cost of tuple deletion and update的说法是错误的</p>\n</blockquote>\n<h4 id=\"线性搜索与index\"><a href=\"#线性搜索与index\" class=\"headerlink\" title=\"线性搜索与index\"></a>线性搜索与index</h4><p>我们根据比较运算符来判断是否需要使用index：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605161903742.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"冲突可序列化与2PL\"><a href=\"#冲突可序列化与2PL\" class=\"headerlink\" title=\"冲突可序列化与2PL\"></a>冲突可序列化与2PL</h4><ul>\n<li>遵循2PL的事务调度一定是冲突可序列化的；<ul>\n<li>所有在树协议下合法的调度也是冲突可序列化的</li>\n</ul>\n</li>\n<li>但是满足冲突可序列化的事务调度不一定遵循两阶段锁协议</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609134908791.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"范围查找\"><a href=\"#范围查找\" class=\"headerlink\" title=\"范围查找\"></a>范围查找</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250609190041270.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"redo-list\"><a href=\"#redo-list\" class=\"headerlink\" title=\"redo-list\"></a>redo-list</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613211455502.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p><strong>abort</strong>的事务也应该被排除在redo-list之外</p>\n</blockquote>\n<h1 id=\"小贴士\"><a href=\"#小贴士\" class=\"headerlink\" title=\"小贴士\"></a>小贴士</h1><ul>\n<li>计算B+树的扇出时，键的大小是按照search-key，也就是PK的大小来计算的，不要将关系中的所有属性相加😇</li>\n<li>绘制B+树的示意图时，记得在叶子层补充链表结构</li>\n<li>进行结果集大小估计时，发生<strong>在候选键上的等值查找</strong>，结果集大小应当为0或1</li>\n<li>给出记录数量、每条记录的size以及block的大小时，应该先计算每个block所包含的记录数量（向下取整），然后计算所需的block数量（向上取整）<ul>\n<li>直接利用总数量计算总容量然后计算block数量有误，因为这样导致了不同block之间可能存储了同一条记录（的部分）</li>\n</ul>\n</li>\n<li>ACID：<ul>\n<li><strong>原子性</strong> (atomicity)<ul>\n<li>恢复系统</li>\n</ul>\n</li>\n<li><strong>一致性</strong> (consistency）<ul>\n<li>由ADI和合适的约束条件（触发器等）实现</li>\n</ul>\n</li>\n<li><strong>隔离性</strong> (isolation)<ul>\n<li>并发控制</li>\n</ul>\n</li>\n<li><strong>持久性</strong> (durability)<ul>\n<li>恢复系统</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>relation：行， relationship：表</li>\n<li><strong>Access time</strong>： The time it takes from when a read or write request is issued to when data <strong>transfer begins</strong><ul>\n<li>&#x3D; seek + rotation time</li>\n</ul>\n</li>\n<li><strong>steal策略</strong>：checkpoint之前的修改都已经反应到了disk（无论对应的事务是否commit）<ul>\n<li>无法确定checkpoint之后发生的修改是否flush到了disk</li>\n</ul>\n</li>\n<li>不能对辅助索引使用稀疏的策略！<ul>\n<li>辅助索引对应的search-key一般不是文件排列的顺序；</li>\n<li>如果只是对部分的记录建立辅助索引，那么无法通过相邻的辅助索引来index得到没有建立索引的记录</li>\n<li>只能对primary&#x2F;clustering key使用稀疏索引</li>\n</ul>\n</li>\n<li>因此我们有两个结论：<ul>\n<li><strong>稀疏索引只能用于顺序文件</strong></li>\n<li><strong>辅助索引只能用于密集索引</strong></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"PPT回顾\"><a href=\"#PPT回顾\" class=\"headerlink\" title=\"PPT回顾\"></a>PPT回顾</h1><ul>\n<li>Simple checkpoint <strong>stops all active transactions</strong>, write out all the updated pages, and restart transactions after completing</li>\n</ul>\n<h2 id=\"导论与基础\"><a href=\"#导论与基础\" class=\"headerlink\" title=\"导论与基础\"></a>导论与基础</h2><h4 id=\"数据库系统的目的\"><a href=\"#数据库系统的目的\" class=\"headerlink\" title=\"数据库系统的目的\"></a>数据库系统的目的</h4><p><strong>直接建立在文件系统上的数据库应用导致：</strong></p>\n<ul>\n<li>Data redundancy（数据冗余）and inconsistency（不一致）</li>\n<li>Data isolation（数据孤立，数据孤岛）— multiple files and formats</li>\n<li>Difficulty in accessing data（存取数据困难）</li>\n<li>Integrity problems（完整性问题）</li>\n<li>Atomicity problems（原子性问题）</li>\n<li>Concurrent access anomalies（并发访问异常）</li>\n<li>Security problems（安全性问题）</li>\n</ul>\n<h4 id=\"数据库的特征\"><a href=\"#数据库的特征\" class=\"headerlink\" title=\"数据库的特征\"></a>数据库的特征</h4><p>data persistence（数据持久性）<br>convenience in accessing data（数据访问便利性）<br>data integrity（数据完整性）<br>concurrency control for multiple users（多用户并发控制）<br>failure recovery（故障恢复）<br>security control（安全控制）</p>\n<h4 id=\"view-of-data\"><a href=\"#view-of-data\" class=\"headerlink\" title=\"view of data\"></a>view of data</h4><p>分为了视图、逻辑和物理模式：</p>\n<ul>\n<li>视图模式：隐藏了数据类型的细节，也可能出于安全性的考虑而隐藏数据的信息等</li>\n<li>逻辑模式：描述数据和关系</li>\n<li>物理模式：描述记录如何被存储</li>\n</ul>\n<blockquote>\n<p>不同模式之间存在对应的映射 mapping</p>\n</blockquote>\n<h4 id=\"DDL\"><a href=\"#DDL\" class=\"headerlink\" title=\"DDL\"></a>DDL</h4><p><strong>数据字典</strong>：DDL compiler generates a set of table templates stored in a <strong>data dictionary</strong></p>\n<p>数据字典包含了元数据：</p>\n<ul>\n<li>schema</li>\n<li>完整性约束</li>\n<li>主键</li>\n<li>参照完整性</li>\n<li><strong>权限</strong></li>\n</ul>\n<h4 id=\"DML-1\"><a href=\"#DML-1\" class=\"headerlink\" title=\"DML\"></a>DML</h4><p>两种数据操作语言：</p>\n<ul>\n<li>过程式 procedural：描述如何获得信息</li>\n<li>陈述式 declaretive：只声明需要的数据，但是不说明如何获取</li>\n</ul>\n<blockquote>\n<p>SQL是流行的、<strong>陈述式</strong>的语言</p>\n</blockquote>\n<p>正因如此，SQL不支持直接通过network来交互，相关的计算和交互需要写在宿主语言 host language 中实现</p>\n<p>应用可以通过API或者嵌套的SQL语句来访问数据库（需要宿主语言的支持）</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250610160235137.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"DBA\"><a href=\"#DBA\" class=\"headerlink\" title=\"DBA\"></a>DBA</h4><blockquote>\n<p>数据库管理员</p>\n</blockquote>\n<p>DBA的指责：范式的定义、权限的管理、日常的维护（根据表现进行微调、定期将数据备份、确保充分的disk空间）</p>\n<h3 id=\"数据库系统的历史\"><a href=\"#数据库系统的历史\" class=\"headerlink\" title=\"数据库系统的历史\"></a>数据库系统的历史</h3><h4 id=\"NoSQL\"><a href=\"#NoSQL\" class=\"headerlink\" title=\"NoSQL\"></a>NoSQL</h4><blockquote>\n<p>not only SQL</p>\n</blockquote>\n<p>提供了一种存储和检索数据的机制，这些数据使用比传统关系数据库<strong>更松散的一致性模型</strong>，以实现横向扩展和更高的可用性。</p>\n<p>当数据的性质不需要关系模型时，NoSQL数据库系统在处理<strong>大量数据</strong>（尤其是大数据）时很有用。</p>\n<p>常用的NoSQL DBMs：MongoDB，Cassandra, HBase</p>\n<h4 id=\"NewSQL\"><a href=\"#NewSQL\" class=\"headerlink\" title=\"NewSQL\"></a>NewSQL</h4><p>寻求为OLTP工作负载提供与NoSQL系统相同的可扩展性能，同时仍然保持传统数据库系统NewSQL的ACID保证：</p>\n<h2 id=\"关系模型\"><a href=\"#关系模型\" class=\"headerlink\" title=\"关系模型\"></a>关系模型</h2><p>参照完整性：要求参照表中的外键属性一定在被参照表中的至少一个元组中存在</p>\n<p>Union要求：</p>\n<ul>\n<li>两个关系的属性个数 <strong>arity</strong>相同；</li>\n<li>对应列的属性的domain &#x2F; type 一致</li>\n</ul>\n<blockquote>\n<p><strong>TODO</strong>：属性个数一致？</p>\n</blockquote>\n<h3 id=\"连接\"><a href=\"#连接\" class=\"headerlink\" title=\"连接\"></a>连接</h3><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250610162646687.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"Semijoin\"><a href=\"#Semijoin\" class=\"headerlink\" title=\"Semijoin\"></a>Semijoin</h4><p>半连接：只会将满足连接条件的元组，保留来自指定关系的属性，也就是在theta join的结果取projection</p>\n<ul>\n<li>比如左半连接，将会得到左侧关系的匹配元组</li>\n</ul>\n<p>null 表示值处于unknown状态 或者 不存在</p>\n<h4 id=\"Outer-join\"><a href=\"#Outer-join\" class=\"headerlink\" title=\"Outer join\"></a>Outer join</h4><p>外连接：在自然连接的基础上，保留特定关系不匹配的元组</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250610162843165.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"使用joins组合外连接\"><a href=\"#使用joins组合外连接\" class=\"headerlink\" title=\"使用joins组合外连接\"></a>使用joins组合外连接</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250610163400510.png?imageSlim\"\n                     \n                >\n\n<p><strong>numeric（3,1）</strong>  总共3位，且小数点后1位</p>\n<blockquote>\n<p>numeric 是 fixed point number， 与浮点数相区分</p>\n</blockquote>\n<p><strong>float（n）</strong> 表示至少有n位</p>\n<p><strong>primary</strong> key declaration on an attribute automatically ensures <strong>not null</strong></p>\n<blockquote>\n<p>主键自动具有非空的约束条件</p>\n</blockquote>\n<h4 id=\"unique\"><a href=\"#unique\" class=\"headerlink\" title=\"unique\"></a>unique</h4><p>使用 <code>unique</code>来测试子查询是否含有多个元组</p>\n<blockquote>\n<p>当子查询返回的元组个数是<strong>0</strong>或者1时，</p>\n</blockquote>\n<p>简单的例子：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250610170428452.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"with\"><a href=\"#with\" class=\"headerlink\" title=\"with\"></a>with</h4><p>简单的例子：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250610170548309.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>关键词：<code>with</code> 和  <code>as</code></p>\n</blockquote>\n<h3 id=\"user-defined-types\"><a href=\"#user-defined-types\" class=\"headerlink\" title=\"user-defined types\"></a>user-defined types</h3><p><code>type</code>和 <code>domain</code>都是用于自定义的数据类型, 二者十分相似. 区别在于: 后者可以声明约束 <code>constraints</code>.</p>\n<h4 id=\"Type\"><a href=\"#Type\" class=\"headerlink\" title=\"Type\"></a>Type</h4><ul>\n<li><p>语法</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> type type_name</span><br><span class=\"line\"><span class=\"keyword\">as</span> data_type</span><br><span class=\"line\">[ (<span class=\"keyword\">precision</span>, scale) ]</span><br><span class=\"line\">[ <span class=\"keyword\">not null</span> ]</span><br><span class=\"line\">[ <span class=\"keyword\">final</span> <span class=\"operator\">|</span> instantiable <span class=\"operator\">|</span> abstract ];</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong><code>final | instantiable | abstract</code></strong>:</p>\n<p>用于指定类型的继承属性。</p>\n<ul>\n<li><code>final</code>：表示该类型不能被继承。</li>\n<li><code>instantiable</code>：表示可以创建该类型的实例。</li>\n<li><code>abstract</code>：表示该类型是抽象的，不能创建实例。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>e.g.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> type dollars</span><br><span class=\"line\"><span class=\"keyword\">as</span> <span class=\"type\">numeric</span>(<span class=\"number\">12</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">final</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">create table</span> department (</span><br><span class=\"line\">    dept_name <span class=\"type\">varchar</span>(<span class=\"number\">20</span>),</span><br><span class=\"line\">    building <span class=\"type\">varchar</span>(<span class=\"number\">15</span>),</span><br><span class=\"line\">    budget dollars</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"Domain\"><a href=\"#Domain\" class=\"headerlink\" title=\"Domain\"></a>Domain</h4><p>当某些列需要限制其取值范围, 也就是具有一定的约束条件时, 如果每次创建类似的列都重复书写, 工作量较大.</p>\n<p><code>domain</code>可以理解为对数据类型的<strong>扩展定义</strong>，它允许我们<strong>创建自定义</strong>的数据类型，并且可以为其指定约束条件。使用 domain 可以确保数据的一致性，</p>\n<ul>\n<li>基本语法</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> DOMAIN 域名 数据类型</span><br><span class=\"line\">[<span class=\"keyword\">DEFAULT</span> 默认值]</span><br><span class=\"line\">[<span class=\"keyword\">CONSTRAINT</span> 约束名称]</span><br><span class=\"line\">[<span class=\"keyword\">CHECK</span> (约束条件)];</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>e.g.</p>\n<ul>\n<li><pre><code class=\"language-sql\">-- 创建一个表示年龄的域\nCREATE DOMAIN age_type INTEGER\nCONSTRAINT valid_age\nCHECK (VALUE &gt;= 0 AND VALUE &lt;= 150);\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### Large-Object Types</span><br><span class=\"line\"></span><br><span class=\"line\">MySQL **BLOB datatypes**:</span><br><span class=\"line\"></span><br><span class=\"line\">- TinyBlob : **0 ~ 255** bytes.</span><br><span class=\"line\">- Blob: **0 ~ 64K** bytes.</span><br><span class=\"line\">- MediumBlob : **0 ~ 16M** bytes.</span><br><span class=\"line\">- LargeBlob : **0 ~ 4G** bytes.</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 上限以$2^8$的规模递增</span><br><span class=\"line\"></span><br><span class=\"line\">候选键CK可以为null，但是主键PK不能为空</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 因此，unique构成组成的属性集合可以称为构成了一组超键，但是不能称为CK，因为CK可以为空</span><br><span class=\"line\"></span><br><span class=\"line\">#### assertion</span><br><span class=\"line\"></span><br><span class=\"line\">e.g.</span><br><span class=\"line\"></span><br><span class=\"line\">```sql</span><br><span class=\"line\">create assertion credits_constaint check (</span><br><span class=\"line\">    not exists(</span><br><span class=\"line\">        select *</span><br><span class=\"line\">        from student S</span><br><span class=\"line\">        where total_cred &lt;&gt; (</span><br><span class=\"line\">            select sum(credits)</span><br><span class=\"line\">            from takes natural join course</span><br><span class=\"line\">            where takes.ID = S.ID </span><br><span class=\"line\">                and grade is not null </span><br><span class=\"line\">                and grade &lt;&gt; &#x27;F&#x27;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    )</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<p>使用下面的命令来阻止数据库对SQL的隐式commit：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> autocommit = 0</span><br><span class=\"line\">...</span><br><span class=\"line\">commit;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"授权\"><a href=\"#授权\" class=\"headerlink\" title=\"授权\"></a>授权</h4><p>四种权限：增删改查</p>\n<ul>\n<li>insert不允许修改现有的数据；</li>\n<li>update不允许删除现有的数据</li>\n</ul>\n<p>五种修改数据库范式的权限：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250611192659291.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>范式的创建、修改、删除，以及index和view相关的操作</p>\n</blockquote>\n<h4 id=\"Authorization\"><a href=\"#Authorization\" class=\"headerlink\" title=\"Authorization\"></a>Authorization</h4><ul>\n<li><strong>授予权限：</strong></li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"operator\">&lt;</span>privilege_list<span class=\"operator\">&gt;</span> </span><br><span class=\"line\"><span class=\"keyword\">on</span> <span class=\"operator\">&lt;</span>relation_name <span class=\"keyword\">or</span> view_name<span class=\"operator\">&gt;</span> </span><br><span class=\"line\"><span class=\"keyword\">to</span> <span class=\"operator\">&lt;</span>user_list<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里的 <code>&lt;user_list&gt;</code>既可以是具体的用户名，也可以是关键字 <code>PUBLIC</code>（表示授权给所有用户）。</p>\n<p>特别地，当我们需要允许用户具有转授权的能力时，可以在授权语句末尾添加 <code>WITH GRANT OPTION</code>子句。</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250611193159249.png?imageSlim\"\n                     \n                >\n\n<ul>\n<li><strong>权限回收：</strong></li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">revoke</span> <span class=\"operator\">&lt;</span>privilege_list<span class=\"operator\">&gt;</span> </span><br><span class=\"line\"><span class=\"keyword\">on</span> <span class=\"operator\">&lt;</span>relation_name<span class=\"operator\">&gt;</span> </span><br><span class=\"line\"><span class=\"keyword\">from</span> <span class=\"operator\">&lt;</span>user_list<span class=\"operator\">&gt;</span> [restrict<span class=\"operator\">|</span>cascade]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ul>\n<li>其中 <code>RESTRICT</code>表示仅回收<strong>直接授予</strong>的权限，而 <code>CASCADE</code>则会同时回收该用户<strong>转授给其他</strong>用户的权限(级</li>\n</ul>\n<ul>\n<li>可以在权限列表中声明 <code>all</code> 表示回收所有的特权;</li>\n<li>可以在用户列表声明 <code>public</code>表示回收的范围是正常访问的普通成员, 但是不会回收指定的成员的特权</li>\n</ul>\n</blockquote>\n<ul>\n<li>如果同一个用户被不同的授权者先后授予了2次<strong>相同</strong>的权限, 那么一次的回收权限之后, ta的权限可能依旧存在.</li>\n<li><strong>权限的依赖性</strong>: 如果回收的权限会导致具有依赖关系的权限的失效, 那么涉及的权限<strong>也会被回收</strong>:</li>\n</ul>\n<p><strong>创建外键约束的权限</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> reference (dept_name) </span><br><span class=\"line\"><span class=\"keyword\">on</span> department </span><br><span class=\"line\"><span class=\"keyword\">to</span> Mariano;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数据库设计的流程\"><a href=\"#数据库设计的流程\" class=\"headerlink\" title=\"数据库设计的流程\"></a>数据库设计的流程</h4><ol>\n<li>requirement specification</li>\n<li>conceptual-design： <strong>E-R diagram</strong></li>\n<li>logical-design：logical schema</li>\n<li>physical-design： physical schema</li>\n</ol>\n<p>设计范式的时候，主要避免两个问题：</p>\n<ul>\n<li>redundancy</li>\n<li>incompleteness</li>\n</ul>\n<p><strong>entity：</strong> an object that <strong>exists</strong> and is distinguishable from other objects</p>\n<h4 id=\"三元关系与箭头\"><a href=\"#三元关系与箭头\" class=\"headerlink\" title=\"三元关系与箭头\"></a>三元关系与箭头</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612113854619.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"Armstrong’s\"><a href=\"#Armstrong’s\" class=\"headerlink\" title=\"Armstrong’s\"></a>Armstrong’s</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612114509016.png?imageSlim\"\n                     \n                >\n\n<p>以及对应的推论：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612114622053.png?imageSlim\"\n                     \n                >\n\n<p>按照BCNF分解：</p>\n<ul>\n<li>一定是无损分解</li>\n<li>但不一定是满足依赖保留的</li>\n</ul>\n<blockquote>\n<p>按照3NF分解，可以同时满足上面两条</p>\n</blockquote>\n<h3 id=\"MVD\"><a href=\"#MVD\" class=\"headerlink\" title=\"MVD\"></a>MVD</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612115633330.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"相关定理与4NF\"><a href=\"#相关定理与4NF\" class=\"headerlink\" title=\"相关定理与4NF\"></a>相关定理与4NF</h4><ul>\n<li>任何函数依赖一定也是多值依赖</li>\n<li>D的闭包D+是逻辑上由D隐含的所有功能和多值依赖项的集合；</li>\n<li>如果一个关系范式满足下面的要求，就称为满足4NF，对于函数和多值依赖D，如果其D+中的所有多值依赖都只存在下面两种情况之一；<ul>\n<li>平凡的（右侧包含在左侧属性，或者二者的并集是R）</li>\n<li>左侧属性是R的超键</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>4NF类似于普通关系的BCNF</p>\n</blockquote>\n<h2 id=\"物理存储系统\"><a href=\"#物理存储系统\" class=\"headerlink\" title=\"物理存储系统\"></a>物理存储系统</h2><h4 id=\"存储级别\"><a href=\"#存储级别\" class=\"headerlink\" title=\"存储级别\"></a>存储级别</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612130754780.png?imageSlim\"\n                     \n                >\n\n<p>访问时间 &#x3D; 寻道时间 + 旋转延迟</p>\n<p><strong>disk-block访问的优化：</strong></p>\n<ul>\n<li>buffering</li>\n<li>prefetch</li>\n<li>disk-arm-scheduling：使用算法重排block的请求</li>\n<li>非易失性写缓存<ul>\n<li>non-volatile RAM: battery backed up RAM or flash memory</li>\n</ul>\n</li>\n<li>log disk 日志磁盘</li>\n</ul>\n<h4 id=\"Flash-storage\"><a href=\"#Flash-storage\" class=\"headerlink\" title=\"Flash storage\"></a>Flash storage</h4><p>NAND flash</p>\n<ul>\n<li>page-at-a-time read</li>\n<li>在erased之前 一个page只能被write一次</li>\n</ul>\n<p>SSD：splid state disk</p>\n<p>通过flash translation table将逻辑页地址转换成物理页地址</p>\n<p>在分槽页中，记录指针不是直接指向记录，而是指向对应entry的header</p>\n<p><strong>文件中记录的组织形式：</strong></p>\n<ul>\n<li>heap：记录可以存放在文件的任意位置；</li>\n<li>sequential：根据search-key线性存储记录</li>\n<li>hashing：利用哈希函数计算search-key，然后存储到对应的block中</li>\n<li>multitable clustering file organization：将不同关系的记录存放在同一个文件中<ul>\n<li>可以为同一个关系的记录之间增加指针，形成pointer chains 指针链</li>\n</ul>\n</li>\n<li>table partitioning：将一个关系中的记录分成更小的关系，分别存储<ul>\n<li>相当于上一种形式的对立</li>\n</ul>\n</li>\n<li>data dictionary storage<ul>\n<li>也称为system catalog</li>\n<li>存储metadata</li>\n</ul>\n</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612133220908.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"Buffer-Replacement-Policies\"><a href=\"#Buffer-Replacement-Policies\" class=\"headerlink\" title=\"Buffer-Replacement Policies\"></a>Buffer-Replacement Policies</h4><ul>\n<li>LRU</li>\n<li>Toss-immediate strategy：只要一个block的最后一个元组的数据被处理结束，就释放这个block</li>\n<li>MRU：刚处理结束的block是最可能被替换的对象</li>\n<li>clock：</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250614233253499.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"Column-Oriented-Storage\"><a href=\"#Column-Oriented-Storage\" class=\"headerlink\" title=\"Column-Oriented Storage\"></a>Column-Oriented Storage</h4><blockquote>\n<p>也被称为 <strong>columnar representation</strong></p>\n</blockquote>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612134217630.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>列：决策支持；</p>\n<p>行：事务处理</p>\n</blockquote>\n<p><strong>ORC 优化行列存储</strong></p>\n<ul>\n<li>Apache ORC 和 Apache Parquet</li>\n<li>流行处理<strong>big-data</strong>的应用</li>\n</ul>\n<p>索引顺序文件：根据主索引排序的有序文件</p>\n<p>稠密索引——对建立索引的属性，每一个值都有自己的指针；</p>\n<ul>\n<li>稀疏索引：只有部分search-key的索引，因此要求记录必须按照搜索键来排序</li>\n</ul>\n<p>如果主索引无法存储在memory中，需要将disk上的主索引看成线性文件，建立外层的稀疏索引</p>\n<h4 id=\"B-复杂度与占用率\"><a href=\"#B-复杂度与占用率\" class=\"headerlink\" title=\"B+复杂度与占用率\"></a>B+复杂度与占用率</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612140204662.png?imageSlim\"\n                     \n                >\n\n<p>针对写密集型的B+树的策略：</p>\n<ul>\n<li>LSM tree</li>\n<li>buffer tree<ul>\n<li>更少的查询开销</li>\n</ul>\n</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612141430631.png?imageSlim\"\n                     \n                >\n\n<p>bitmap indices：</p>\n<ul>\n<li>取属性的值域的大小作为行数</li>\n<li>有记录的个数那么多列，如果对应位置的属性匹配，bit就是1</li>\n</ul>\n<h4 id=\"index-on-flash\"><a href=\"#index-on-flash\" class=\"headerlink\" title=\"index on flash\"></a>index on flash</h4><blockquote>\n<p>todo：ch14-51</p>\n</blockquote>\n<blockquote>\n<p>ppt的A4‘有问题，参考书本的定义</p>\n</blockquote>\n<p>如果查询的比较条件是 &lt;&#x3D; ，就不要使用index，直接使用线性查找</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612174914814.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"merge成本最小化\"><a href=\"#merge成本最小化\" class=\"headerlink\" title=\"merge成本最小化\"></a>merge成本最小化</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612175152335.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"混合的归并合并\"><a href=\"#混合的归并合并\" class=\"headerlink\" title=\"混合的归并合并\"></a>混合的归并合并</h4><ul>\n<li>使用前提：<ul>\n<li>第一个关系是有序的；</li>\n<li>第二个关系在连接属性上具有B+树的index，方便根据属性查找</li>\n</ul>\n</li>\n<li>流程概述：<ul>\n<li>顺序扫描第一个关系；</li>\n<li>对于第一个关系中的每一个元组，利用连接属性在第二个属性中使用索引查找得到对应的叶子节点，然后将第一个关系的元组合并到叶子节点中</li>\n<li>此时第二个关系的B+树叶子节点具有实际物理地址和第一个关系的元组，将其按照自身的物理地址排序</li>\n<li>然后，我们得到按照地址排序的叶子节点，可以顺序扫描，然后构造合并结果（用第二个关系的元组来替代物理地址）</li>\n</ul>\n</li>\n<li>上述流程的关键就在于，通过先根据物理地址排序，然后顺序扫描，降低了随机访问导致的大量的寻道时间</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612180300474.png?imageSlim\"\n                     \n                >\n\n<p><strong>估计交集的成本时：</strong></p>\n<ul>\n<li>如果连接属性是其中的外键-主键关系，成本是确定的——引用关系的元组数；</li>\n<li>如果是平凡的关系，那么就利用V计算，取最后估计结果较小（V较大的）</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612222936423.png?imageSlim\"\n                     \n                >\n\n<p>外连接的成本估计 &#x3D; 自然连接的结果+对应属性的元组个数</p>\n<h4 id=\"cost-based-optimizer\"><a href=\"#cost-based-optimizer\" class=\"headerlink\" title=\"cost-based optimizer\"></a>cost-based optimizer</h4><p>为每个操作选择cheapest的算法（贪心）可能不会产生最优的整体效果，比如：</p>\n<ul>\n<li>合并连接可能比哈希连接成本更高，但是有序的输出可能为外层的算法提供便利；</li>\n<li>嵌套循环可以为流水线提供机会</li>\n</ul>\n<p>n个关系连接时，具有 $\\frac{(2n-2)!}{(n-1)!} $种不同的连接顺序</p>\n<blockquote>\n<p>我们不需要一次性对所有的关系采取套用上述的公式，可以采取<strong>动态规划</strong>的思想：</p>\n<p>从较小的子集开始取用，计算小规模的不同关系的所有连接成本，存储在数组中，在较大规模的计算中直接取用即可</p>\n</blockquote>\n<p><strong>best join tree</strong></p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250612225738211.png?imageSlim\"\n                     \n                >\n\n<p>复杂度：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>时间复杂度</th>\n<th>空间复杂度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>动态规划</td>\n<td>$O(3^n)$</td>\n<td>$O(2^n)$</td>\n</tr>\n<tr>\n<td>only left-deep trees</td>\n<td>$O(n\\cdot2^n)$</td>\n<td>$O(2^n)$</td>\n</tr>\n</tbody></table>\n<h4 id=\"启发式优化\"><a href=\"#启发式优化\" class=\"headerlink\" title=\"启发式优化\"></a>启发式优化</h4><p><strong>策略</strong></p>\n<ul>\n<li><strong>Perform selection early</strong>(reduces the number of tuples)</li>\n<li><strong>Perform projection early</strong>(reduces the number of attributes)</li>\n<li><strong>Perform most restrictive selection and join operations</strong> (i.e. with smallest result size) before other similar operations.</li>\n<li><strong>Perform left-deep join order</strong></li>\n</ul>\n<h4 id=\"物化视图的增量更新\"><a href=\"#物化视图的增量更新\" class=\"headerlink\" title=\"物化视图的增量更新\"></a>物化视图的增量更新</h4><p>对于选择, join可以直接在原来的结果上:</p>\n<ul>\n<li>insert &#x3D;&#x3D;&gt; 并集;</li>\n<li>delete &#x3D;&#x3D;&gt; 差</li>\n<li>对于avg, max, min等统计属性, 采取之前的中间结果来辅助实现增量更新.</li>\n<li>方差也可以用增量更新来维护.</li>\n</ul>\n<p>$$<br>\\mathrm{Var}(X)&#x3D;\\frac{\\sum x_i^2}{n}-\\left(\\frac{\\sum x_i}{n}\\right)^2<br>$$</p>\n<p>因此, 只需要维护各个元素的和, 平方和 以及计数 <code>n</code>, 就可以实现快速的增量更新.</p>\n<h2 id=\"并发控制-1\"><a href=\"#并发控制-1\" class=\"headerlink\" title=\"并发控制\"></a>并发控制</h2><h4 id=\"2PL\"><a href=\"#2PL\" class=\"headerlink\" title=\"2PL\"></a>2PL</h4><ul>\n<li><p>两阶段锁协议 2PL 可以保证冲突可序列化</p>\n<ul>\n<li>将事务的执行顺序按照lock points排序</li>\n<li>但是<strong>冲突可序列化的调度不一定满足2PL协议</strong>，也就是说2PL不是冲突可序列化的必要条件</li>\n<li>不保证排除死锁</li>\n</ul>\n</li>\n<li><p>严格2PL：事务必须保持自身的exclusive locks直到其commits &#x2F; aborts</p>\n<ul>\n<li>确保可恢复性</li>\n<li>避免了级联回滚</li>\n</ul>\n</li>\n<li><p>强2PL（rigorous）：事务必须保持自身的所有lock，直到其commits &#x2F; aborts</p>\n<ul>\n<li>可以按照事务提交的顺序来构建序列</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Lock-Conversions\"><a href=\"#Lock-Conversions\" class=\"headerlink\" title=\"Lock Conversions\"></a>Lock Conversions</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613101316974.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"Lock-table\"><a href=\"#Lock-table\" class=\"headerlink\" title=\"Lock table\"></a>Lock table</h4><blockquote>\n<p>usually implemented as an <strong>in-memory hash table</strong> indexed on the <strong>name of the data item</strong> being locked</p>\n</blockquote>\n<ul>\n<li>新的请求添加到队列的末尾，并且检查是否与先前的lock相同，如果相同就grant<ul>\n<li>请求删除的时候同时unlock 对应的requests，并检查pending的lock是否可以被granted</li>\n</ul>\n</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613101931029.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"Tree-Protocol\"><a href=\"#Tree-Protocol\" class=\"headerlink\" title=\"Tree Protocol\"></a>Tree Protocol</h4><p>是图协议的一种，适用于对数据访问的次序具有偏序结构理解的情况</p>\n<blockquote>\n<p>中译中：了解访问特定的数据项之前必须经过的中间节点</p>\n</blockquote>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613105351613.png?imageSlim\"\n                     \n                >\n\n<p>特点：</p>\n<ul>\n<li>树协议可以保证冲突可序列化并<strong>排除死锁 (deadlock-free)</strong><ul>\n<li>避免了回滚</li>\n</ul>\n</li>\n<li>缺点：<ul>\n<li>不能保证无级联和可恢复性</li>\n<li>可能 l<strong>ock more data items than needed</strong>， 从而降低了并行性，同时提高了额外的等待时间</li>\n</ul>\n</li>\n</ul>\n<p>Schedules not possible under two-phase locking are possible under tree protocol, and <strong>vice versa</strong>.</p>\n<h4 id=\"Granularity-Hierarchy\"><a href=\"#Granularity-Hierarchy\" class=\"headerlink\" title=\"Granularity Hierarchy\"></a>Granularity Hierarchy</h4><p>从高到低，以整个数据库系统为根节点，分别划分为不同大小的区域，直到叶子节点包含单个记录的信息</p>\n<p>为了在高层级快速判断底层节点是否被加了 S &#x2F; X锁引入 <strong>intention locks：</strong></p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613111106318.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>如果直接加X-lock，表示可以直接修改内部的节点</p>\n</blockquote>\n<p>对应的<strong>相容矩阵</strong>：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613111445682.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>X与任意锁都不相容；除了IS和X，都只跟自己相容；IS与X之外的锁相容</p>\n</blockquote>\n<p>对于插入和删除记录，如果只是在对应的记录上加锁，可能导致幽灵现象和死锁问题</p>\n<ul>\n<li>可以直接在表层级加锁，但是降低了并行性</li>\n<li>可以引入谓词锁，来准确判断影响的记录范围，但是在实现上比较困难</li>\n<li>另一种更好的解决方法是：<strong>Index Locking Protocol</strong></li>\n</ul>\n<h4 id=\"Index-Locking-Protocol\"><a href=\"#Index-Locking-Protocol\" class=\"headerlink\" title=\"Index Locking Protocol\"></a>Index Locking Protocol</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613113138037.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>可以避免幽灵现象的发生</p>\n</blockquote>\n<p>一个例子：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613113215006.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>注意范围查询，导致10所在的叶子节点也具有了S-lock</p>\n</blockquote>\n<p>上述的策略会将entire leaf给lock，为了提高并行性，我们可以针对某个key来lock，同时为了确保可以发现潜在的幽灵现象，需要引入一定的限制条件，这就是：<strong>Next-Key Locking</strong></p>\n<h4 id=\"Next-Key-Locking\"><a href=\"#Next-Key-Locking\" class=\"headerlink\" title=\"Next-Key Locking\"></a>Next-Key Locking</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250613114355171.png?imageSlim\"\n                     \n                >\n\n<h1 id=\"TODO\"><a href=\"#TODO\" class=\"headerlink\" title=\"TODO\"></a>TODO</h1><h4 id=\"B-height\"><a href=\"#B-height\" class=\"headerlink\" title=\"B+-height\"></a>B+-height</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250530114132354.png?imageSlim\"\n                     \n                >\n\n<p><strong>SOLUTION</strong>：</p>\n<p>此处的height确实是从1开始的，比如计算max时前面的4个4是n, 最后一个是叶子层的叶子块内部的n-1，所以高度为h, 计算size时存在的因数个数也是h</p>\n","_processedHighlight":true},{"title":"计算机体系结构复习","date":"2025-06-21T11:03:24.000Z","excerpt":"复习阶段整理的arch笔记，整体分为核心知识点回顾、jxh老师PPT的补充、大题题型梳理以及其他补充","thumbnail":"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250625150044872.png?imageSlim","_content":"# 知识点梳理\n\n## CH1\n\n#### 可靠性\n\n- **availability** = MTTF / MTBF\n- **FIT**：faliure in time = 1 / MTTF\n\n计算系统整体的MTTF时，我们可以优先计算FIT（各个组件的rate相加），然后求倒数\n\n#### MIPS\n\nmillions of instructions per second\n\n#### Performance\n\nperformance是执行时间的倒数\n\n#### 不同的性能比较策略\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250607173816894.png?imageSlim\"/>\n\n> 几何平均就是将各个程序的执行时间相乘然后开根号，作为平均的执行时间；\n>\n> **depends on which machine is the reference**：在不清楚加权算法中的权值情况时，采取参照的方法计算平均值，类似于加权的效果，但是结果与选择的参照对象相关，因此说～\n\n几何平均：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250608152559487.png?imageSlim\"/>\n\n### 流水线相关\n\n可以一定程度上允许结构冲突：\n\n- 为了减少cost和减少单元的latency\n\n#### throughput\n\nThe throughput of a CPU pipeline is **the number of instructions completed per second**\n\n> CPU流水线的吞吐量指的就是每秒执行的指令数\n\n#### how to stall\n\n1. 设计stall控制单元，检测是否存在冲突需要stall\n2. 如果需要stall，就disable writing PC and IF/ID latch，并且插入一个nop指令到ID/EX，禁止写回寄存器和写入MEM\n\n#### double bump\n\n如果在一个cc内允许 write-then-read，就可以只插入两条nop：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250528203331360.png?imageSlim\"/>\n\n#### 跳转指令\n\n∆ = 目标地址 - 跳转指令的**下一条指令**的地址！\n\n> 因为在取出指令后PC+4就生效了；\n>\n> 与汇编指令具有异曲同工之妙\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined2c0c4d308a58fd80d85c816e0487b11a.png?imageSlim\"/>\n\n同时注意，是在MEM阶段而非EX阶段写回PC寄存器，在跳转指令的WB阶段开始取址\n\n> 总共stall了3个cc\n\n对应的简单问题：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250530204714053.png?imageSlim\"/>\n\n为了解决上述的stall损失，我们可以考虑在EX阶段前递，或者在ID阶段增加硬件单元。\n\n另外的可行办法是**延迟槽**技术：\n\n- 因为跳转指令在ID阶段才确定，此时IF已经取址了。我们将一定会执行的指令（无论跳转是否发生）放置在条件跳转指令的下一条，避免这条(组)指令的浪费\n- 延迟槽中的指令应当由编译器选择合适的指令(组)\n\n#### 移位寄存器\n\n为了解决写端口的冲突，直接增加写端口是不经济的。\n\n我们考虑一种检测矛盾并实现序列化写操作的技术——使用**移位寄存器：**\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250530210124307.png?imageSlim\"/>\n\n> 在ID阶段分析指令之后，如果与已经发射（此处应该指的是应该开始执行？）的指令存在写端口的冲突（利用移位寄存器判断），就stall这条指令\n\n如果指令需要写回，利用一个移位寄存器，设置与当前指令将要写回所需的cc相等的值，作为移位寄存器位数的1.每个cc将对应的移位寄存器右移。\n\n#### 数据冲突\n\n- ***RAW***：***true*** dependance，因为无法通过寄存器重命名或者指令重排来优化\n- WAW：output dependance\n- WAR：***anti***-dependance，因为和RAW是相反的\n\n## CH2 存储器层级\n\n#### block identification\n\n- index 用于选中cache的set / cache line\n  - index bits = $\\log_2(\\text {size of set / cache line})$\n- offset：用于选择block内部的data\n  - offset size = $\\log_2(\\text {size of block})$\n- tag：用于比较block是否匹配\n  - bits: 地址size - index size - offset size\n\n一个简单的直接映射的计算例子：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250530213007222.png?imageSlim\"/>\n\n- 地址总位数可能由***memory size***间接给出：e.g. Memory-size = 4G = $2^{32}$， 得到一共有32位\n\n#### write strategy\n\n一般来说：\n\n- 写回策略 + write allocate\n- 写穿策略 + write around：发生write miss的时候，只会写入到内存\n\n一个简单的例子：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250531095731123.png?imageSlim\"/>\n\n> 当发生了read miss的时候，将mem[200]加载到cache，下一次的写将命中\n\n### Cache performance\n\n#### Memory stall\n\n- $$\n  CPU \\ time  = IC \\times (CPI_{exeution} + \\frac{Misses}{Ins.} \\times Miss \\ penalty) \\times clock \\ cycle \\ itme\n  $$\n\n  > $\\frac{Misses}{Ins.} = Miss\\ rate \\times MPI$\n  >\n- ***CPU Execution time*** = (CPU clock cycles + **Memory stall cycles**) x Clock cycle time\n\n  - 其中后者可以如此计算： $ IC \\times MPI \\times MissRate \\times Miss\\ penalty$\n  - 注意判断是否需要将data和ins.的mem区分\n\n  一个简单的例子：\n\n  <img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250531102931121.png?imageSlim\"/>\n\n#### AMAT\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefinedimage-20250310110142371.png?imageSlim\"/>\n\nAMAT也就是: **Average memory access time**.\n\n所以可以用来计算 ***real CPI***= Ideal CPI + **Average stalls per instruction**  , 其中后者根据:\n\n$$\n(AMAT - HitTime) \\times  \\ \\text{access times / ins.}\n$$\n\n计算得到,  且 `HitTime`为理想的CPI, `access times`是每条指令平均访问memory的次数 = MPI , e.g. 有30%的数据访存指令, 对应了**1.3**.（考虑指令cache的1 on unified cache）\n\n一个简单的例子——**AMAT按照data和ins加权计算：**\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250531102701013.png?imageSlim\"/>\n\n补充：\n\n- **MPI**(memory reference per instruction)＝1.5 , 也就是指令对mem的平均访问次数.\n- 注意AMAT的计算涉及了***hit time***，unified cache的hit time可能比split cache的大\n- 无特别说明的情况下，hit time = Ideal CPI\n\n#### Split & Unified\n\n- miss rate的计算：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250531105216214.png?imageSlim\"/>\n\n> 表格中给出的数据是miss相关的估计，实际上的MPI可能由题目进一步给出，因为不同的程序对应的访存比例可能不同，根据实际情况计算\n\n### Improve cache performance\n\n#### 减少hit时间 4’\n\n- ***small and simple caches***\n\n  - 更少的硬件支持；直接映射的速度更快\n- ***avoiding address translation***\n\n  - 使用TLB作为page table的cache，Virtual indexed, Physically tagged\n\n  <img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250531161036099.png?imageSlim\"/>\n- ***way prediction***\n\n  - 在cache中采取extra bits预测way，如果预测正确只需要1cc；否则需要额外的cc改变预测位\n- ***trace caches***\n\n  - trace：动态指令序列，主要为 `branch`设计\n  - 将branch在内的指令打包放入trace cache，由于大部分时间，分支跳转后要指令的指令序列是相同的，因此我们可以直接从trace cache中取用\n\n#### 增加cache的bandwidth 3‘\n\n- **pipelined cache access**\n  - 顾名思义，将cache的访问流水线化\n- **multibanked caches**\n  - 将cache划分为几个不同的区域，从而允许同时的访问\n- **non-blocking caches**\n  - 针对 hit under miss 的情况设计，允许CPU在miss之后继续执行指令，避免陷入阻塞block\n\n#### 减少miss penalty 4’\n\n- **multilevel caches**\n  - 多级cache带来的概念：local miss rate（当前level的缺失率） 与 global miss rate（与上层的cache相关）\n- **critical word first**\n  - 在block中找到需要的word后就快速启动，后续指令的执行和block的剩余内容的搬运并行执行，因此通常用于block的size较大的情况\n  - 又称为 **wrapped fetch** 与 **requested word first**\n- **read miss prior to writes**\n  - 在**写回策略**下, 如果发生了 `read miss`, 需要从主存中读取对应的块并写入 `cache`. 可以直接取出数据并开始执行指令, 将待写的数据放入 `buffer`.\n- **merging write buffers**\n  - 多次的写合并到一次的操作， 特别是写的地址是相同的时候，显著降低了penalty\n- **victim caches**\n  - 在相邻的cache层级之间增设牺牲缓存\n  - 发生一次 `miss`之后并不直接将其踢出 `cache`, 而是放入~\n\n#### 降低miss rate 4’\n\n> 控制变量分析\n\n- **larger block size**\n  - 降低了强制miss rate\n  - 但是增大了miss penalty，以及发生冲突miss的可能（block的数量减少）\n- **large cache size**\n  - **经验法则**: 翻倍的cache容量, 带来降低25%的缺失率.\n  - 降低了容量miss\n  - 但是增大了hit time和cost\n- **higher associativity**\n  - **经验法则**: 一个大小为N的直接映射缓存 , 与一个大小为**N/2的2路组相联** 缓存具有**相同的未命中率**.\n  - 8-way比较理想。更大的组关联度导致比较时间的增加，从而可能导致时钟周期的增大/周期数的增加\n- **compiler optimization**\n  - 在不改变硬件的情况下, 使用编译器重排指令的序列\n  - 数组合并\n  - 循环交换：改变循环的嵌套顺序\n  - 循环融合\n  - blocking策略\n- **way prediction and Pseudo-Associative Cache**\n  - 路预测的技术与之前提到的相同，用一个预测位来预测\n  - 伪关联缓存：divide cache，然后在miss之后查看当前cache的剩余部分\n    - 如果此时命中，称为 **pseudo-hit**，时间介于hit 与  miss penalty之间\n\n**3C回顾：**\n\n- **Compulsory**: 冷启动，又称为强制miss;\n- **Capacity**:  缓存的空间不足导致的 miss. 发生在**全关联**当中.\n- **Conflict（collision）**:  set associative or direct mapped当中发生.\n\n> 主要关注冲突miss和强制miss的优化\n\n#### 通过流水线降低miss penalty和rate 2’\n\n- **hardware prefetching**\n  - 使CPU预先取用一部分的数据到**特殊的缓存块**当中, 从而降低了 冷启动的影响.\n  - 预取的结果放入 `stream buffer`，\n- **compiler prefetching**\n  - 由编译器插入prefetch ins.来获取需要的数据\n  - 根据预取数据存放到**寄存器**还是cache，分为**binding** prefetch 和 non-binding prefetch\n\n## CH3\n\n### scoreboard\n\n> 看一眼\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250607222728995.png?imageSlim\"/>\n\n#### 流水线的阶段\n\n1. IF: 取指令\n2. IS: 以下条件同时满足时允许发射：\n   1. FU空闲——**避免结构冲突**；\n   2. 正在执行的指令，没有一条要写回的Rd与当前指令相同——**避免了WAW冲突**\n3. RO: 监视数据冲突，**当且仅当两个源寄存器都准备好了**，才读取\n4. EX: 在不同的FU中执行(MEM涵盖在整数的FU当中)\n5. WB：更新状态表之后的下一个cc可以RO\n\n#### 表的设计\n\n- 指令状态表 **Instruction Status Table**\n  - 记录指令的状态，在哪个阶段\n- 功能单元状态表 **Functional Unit Status Table**\n  - `busy`：FU 是否空闲；`op`：FU 正在执行什么操作\n  - `Vi`, `Vj`, `Vk`：FU 的操作数对应着哪个寄存器\n  - `Qj`, `Qk`：FU 的操作数如果没准备好，应该从哪个 FU 读取\n  - `Rj`, `Rk`：操作数是否准备好，如果准备好了就填 `yes`，然后在RO阶段读取之后立即改为 `NO`\n    - 率先执行的指令在WB的时候检查写入的寄存器是否在某个FU的ready-list中为 `YES`，表示等待另一个操作数准备好之后同时读取（还未读取）\n- 寄存器状态表 **Register Status Table**\n  - 如果某个寄存器的值**正在被某个 FU 的操作生成**，填入这个操作FU的编号\n  - 生成好了之后，填入实际值\n\n#### 显式重命名\n\n通过设置更多的物理寄存器, 同时维护一个 `free list`.\n\n- 每一条需要写寄存器的盒指令，均分配一个新的物理寄存器；\n  - 此时还需要记录原来的map（对应的物理寄存器），这是为了在发生中断/rollback的时候可以复原之前的映射关系；\n- 当可以写回的时候，再将得到的值写回到逻辑寄存器，同时将锁定的物理寄存器 free up（加入到free list的末尾）\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602113651013.png?imageSlim\"/>\n\n加入显式重命名之后的计分板阶段分析：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250608145256468.png?imageSlim\"/>\n\n显式重命名消除冲突的示例：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250608145854391.png?imageSlim\"/>\n\n### Tomasolo\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602113117390.png?imageSlim\"/>\n\n#### 算法的思想\n\n- Scoreboard 算法的控制权**全部在 Scoreboard 的三张表中**\n- Tomasulo 算法将 FU 的控制权**交给 FU 自己**，每个 FU 有自己的指令缓存\n\n| IF | IS | EX | WB |\n| -- | -- | -- | -- |\n\n#### 硬件设计\n\n- 每个 FU 有一个 buffer，叫做保留站（reservation station）\n  - `busy`：FU 是否空闲；`op`：FU 正在执行什么操作\n  - `Vj`, `Vk`：两个源寄存器对应的寄存器值（注意是值）\n  - `Qj`, `Qk`：两个源寄存器如果没准备好，应该从哪个 FU 读取\n  - 此外还会记录 FU `<u>`距离完成执行这条指令的剩余周期数 `</u>`\n- 内存也有自己的保留站，叫做 **Load/Store Buffer**\n  - `busy`：这个位置是否有内存读写请求\n  - `address`：读写的地址\n- 有一个 Register Status Table，和 Scoreboard 算法中的一样\n- 有一个 Common Data Bus（CDB），负责将结果广播到所有的保留站和寄存器\n  - 将需要的数据从总线上直接取用, 而不用通过寄存器\n  - 因此传递的时候, 不仅传递值, 同时传递对应操作的编号\n\n#### 带投机的实现\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602190343569.png?imageSlim\"/>\n\n为了在遇到分支指令的时候避免stall，我们可以采取投机的方式——假设分支指令不会跳转，继续执行之后的指令\n\n为了实现投机机制，我们需要一种在预测失败之后可以rollback的机制——新增Reorder buffer i.e. **ROB**\n\n在之前的流程基础上，增加**commit**阶段，让CDB的结果先写入ROB，然后在ROB中实现顺序提交，如果头部指令是：\n\n- 普通指令：将结果写回到寄存器和内存，然后从ROB中删除\n- 分支指令，并且预测：\n  - 正确：当做普通指令，继续执行\n  - 错误：清空**flush**此时ROB中的所有指令\n\nNotice：\n\n- IS阶段需要将指令同时写到ROB中，因此只有当保留站和ROB都有空余的情况下，可以issue\n- issue之后，可以从**ROB和寄存器**中读取操作数到**保留站**中\n- 内存中的数据也可能存在RAW的冲突，因此在load的时候，需要从ROB中的store的地址相比较：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602190716237.png?imageSlim\"/>\n\n> 只有当我们明确知道load对应的内存地址与先前store指令的目标地址不冲突的时候，才执行load（向内存发送请求），否则stall\n\n#### MEM的RAW与解决\n\n**参考的解决：**\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616151543260.png?imageSlim\"/>\n\n**对应的例子：**\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616152019357.png?imageSlim\"/>\n\n> 此处右下角的应该是load buffer？所以实际填写的不是存在冲突的store地址，而是load的地址；\n>\n> 猜测是这样的流程：如果load前面的某个store的目标地址还没有计算完毕，就将load的地址栏填入store的ROB编号，然后store完成的时候带着ROB编号在load内部检查，同时让store的地址与load的实际地址进行比较？\n>\n> 所以上图中的“填入到load参照的表格中”有问题\n\n#### 总结\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250604144824057.png?imageSlim\"/>\n\n> Tomasulo也无法解决RAW冲突，这是无法解决的冲突\n\n### 分支预测技术\n\n#### 分支预测表\n\n- 一位预测器：分支历史表，使用PC的低位作为索引，0预测不跳转，1预测跳转\n- 两位预测器\n- N位预测器：\n  - 使用$[0, 2^{N-1} - 1 ]$ 来预测不跳转\n  - 使用$[2^{N-1}, 2^N-1]$来预测跳转\n  - 如果要求计算准确率，注意是等到稳定的时候再计算（一开始的初始值并不重要）\n\n#### 相关预测器\n\n当前分支指令依赖别的分支指令的结果：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined1748841625338.png?imageSlim\"/>\n\n#### m,n预测器\n\n- **m**：使用m位的**移位寄存器**来储存m条指令是否跳转的结果\n  - 每当得到一条最近的指令是否跳转的时候，就进行移位并填充0表示not-taken 或者 1表示taken\n- **n**： 使用n-bit来预测当前指令是否跳转\n- **分支预测缓冲区**：一个记录分支跳转历史的buffer，使用上述的m-bit global history + 指令的低位进行index，每一行都对应了指定分支指令的预测器\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602134422581.png?imageSlim\"/>\n\n#### 预测器大小的计算\n\n**实际的硬件组成**：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602142419201.png?imageSlim\"/>\n\n**对应的大小计算：**\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602133757083.png?imageSlim\"/>\n\n#### 其他预测器\n\n- **Tournament predictor**：为了避免PC低位的相同干扰, 采用 `global` 和 `local`两个预测器，但是区别于上述的预测器，此处二者采取或得到对应的预测器\n  - ***TODO***：课件3.2的size计算\n- **Gshare预测器**：将PC低位和历史记录进行异或, 从而进行选择\n\n#### BTB\n\nbranch target buffer ｜ 分支目标缓冲区\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602140403962.png?imageSlim\"/>\n\n- 记录分支指令预测的跳转地址\n- 利用指令地址index，如果在BTB中找到了就取出预测地址并执行\n  - if branch taken，照常执行，没有stall\n  - if not taken，将fetch的ins.清空，并且将预测错误的entry从BTB中删除\n- 同理，如果一开始没有在BTB中index找到对应指令的entry，并且结果显示指令需要跳转，就在BTB中加入这一对的entry用于之后的快速预测\n\n> <img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602140813293.png?imageSlim\"/>\n\n#### Integrated Instruction Fetch Units\n\n随着CPI降低，取址单元可能成为瓶颈\n\n因此，考虑将fetch unit与分支预测器、指令预取器以及指令的buffer相集成\n\n#### Return Address Predictors\n\n预测目标地址在运行时变化的间接跳转的技术。\n\n将返回地址记录在类似于栈的buffer中，避免到内存中取返回地址，加速函数的返回\n\n### 分支预测技术总结\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602143610588.png?imageSlim\"/>\n\n---\n\n## CH4  DLP\n\n#### Flynn标准分类\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605102615189.png?imageSlim\"/>\n\n- LLP时的依赖检查：关注是否在同一层读取了其他层写入的结果\n  - 可以使用本层中串行计算的结果\n- reductions\n\n#### Rename来解除依赖\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250607202128965.png?imageSlim\"/>\n\n> 根据题目找到对应的依赖，然后据此rename寄存器\n\n---\n\n#### Strip Mining 条带挖掘\n\nMVL指的是向量处理器中寄存器最多的字长.\n\n当用户实际的处理长度超过MVL时, 进行取模, 首先用**标量处理余数**, 然后用向量计算剩余的部分.\n\n一个简单的例子：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250611151927322.png?imageSlim\"/>\n\n### 向量机的问题\n\n- 需要 *set-up* 时间;\n- 内存的访问带宽会影响向量机的性能\n\n### 提升向量机的表现\n\n**convoy:**\n\n- 可以并行的向量计算指令的集合\n- 不存在结构冲突\n- 可以通过vector chain来解决RAW冲突\n\n**chime**  ：the unit of time taken to execute one convey\n\n#### Vector Chaining\n\n解决了RAW的冲突.\n\n<img src=\"体系结构随笔.assets/image-20250428115214201.png\" alt=\"image-20250428115214201\" style=\"zoom:50%;\" />\n\n实际等价于流水线的 *forwarding*. 不同的是向量机是对向量的打包计算.\n\n#### Conditional Execution\n\n为了处理 *if* 语句的优化.\n\n```c\nfor（I=0； I<N; I++）\n\tif （A[I］！= B［I］） A［I］ -= B［I]；\n```\n\n<img src=\"体系结构随笔.assets/image-20250428115506868.png\" alt=\"image-20250428115506868\" style=\"zoom:50%;\" />\n\nV0就是其中的标志寄存器.\n\n根据标志位, 选择需要的位进行计算(压缩), 然后将其扩展成完整的向量.\n\n<img src=\"体系结构随笔.assets/image-20250428115702618.png\" alt=\"image-20250428115702618\" style=\"zoom:50%;\" />\n\n#### sparce matrices\n\n为了解决矩阵乘法中太多0的问题.\n\n涉及到 Vector *Scatter/Gather* 的方法, 实际就是不连续的访存操作.\n\n**gather：从不连续的地址读取并加载到一个向量寄存器中**\n\n```c\nfor (i=0; i<N; i++)\n    A[i] = B[i] + C[D[i]]\n```\n\n> 对应的指令: (`LVI`)\n\n```assembly\nLV\t\t\tVD, RD        ; Load indices in D vector\nLVI\tVC,(RC, VD)   ; Load indirect from RC base\nLV \tVB, RB\t  ; Load B vector\nADDV.D \tVA, VB, VC\t  ; Do add\nSV \tVA, RA\t  ; Store result\n```\n\n**scatter：将一个向量寄存器中的数据写入到不连续的地址中**\n\n```assembly\nfor (i=0; i<N; i++)\n    A[B[i]]++;\n```\n\n> 对应的指令:（`SVI`）\n\n```assembly\nLV \tVB, RB      ; Load indices in B vector\nLVI \tVA,(RA, VB) ; Gather initial A values\nADDV \tVA, RA, 1\t; Increment\nSVI \tVA,(RA, VB) ; Scatter incremented values\n```\n\n#### Multi-lane Implementation\n\n同一个向量指令的不同分量，可以在不同的lane上执行\n\n> 不同的lane之间不能存在数据冲突\n\n在多个FU的流水线中优化:\n\n<img src=\"体系结构随笔.assets/image-20250428120350459.png\" alt=\"image-20250428120350459\" style=\"zoom:50%;\" />\n\n#### Chain & Multiple Lane\n\n可以将上述的思路和chain相结合.\n\n向量机通过展开, 减少了条件判断等指令来减少了指令数.\n\n- 操作数指的是涉及的运算个数(比如一条向量计算涉及512个操作数, 但是指令数是1).\n\n编译器和用户可以互相提示数组是否可以向量化.\n\n`SIMD`: single instruction multiple data\n\n### GPU\n\nGraphical Processing Units.\n\n采取 `SIMT`: Single Instruction Multiple Thread.\n\n- 每个线程负责一条指令的部分计算.\n\nthread => block => grid\n\n#### 与向量机的主要区别\n\n- 不存在标量处理器\n- 使用多线程解决内存访问的延迟\n  - 向量机通过bank扩大内存访问的带宽\n- 具有很多的function units (类似于具有很多小的处理器.)\n\n#### 术语\n\n**warp**\n\n- 32 threads ==> warp / SIMD thread\n  - 必须执行相同的指令.\n  - warp之间不存在数据依赖.\n\n**PTX**\n\n对应的机器汇编.\n\n**predicate register**\n\n谓词寄存器, 类似于向量机中的标量寄存器.\n\n#### MEM层次\n\n- private memory\n- local memory: 1个block内部共享\n- GPU memory: 公共.\n\n### 循环级别的并行\n\n有的循环间的数据依赖可以被消除:\n\n```c\nfor (i=0; i<100; i=i+1) {\n  A[i] = A[i] + B[i]; /* S1 */\n  B[i+1] = C[i] + D[i]; /* S2 */\n}\n```\n\n取出首尾的两条指令，改写:\n\n```c\nA[0] = A[0] + B[0];\nfor (i=0; i<99; i=i+1) {\n  B[i+1] = C[i] + D[i];\n  A[i+1] = A[i+1] + B[i+1];\n}\nB[100] = C[99] + D[99];\n```\n\n#### 寻找循环依赖\n\n<img src=\"体系结构随笔.assets/image-20250428123817503.png\" alt=\"image-20250428123817503\" style=\"zoom:50%;\" />\n\n不同的迭代中, 存在读取和存储的地址相同的情况 ==> 存在循环依赖.\n\n- 计算方式: If a dependency exists, **GCD(*c*,*a*) must evenly divide (*d*-*b*)**\n- 通过枚举 $i$ 来判断是否存在冲突，本质上就是图示的公式是否成立\n\n可以通过变量的重命名来解决WAW等冲突.\n\n<img src=\"体系结构随笔.assets/image-20250428124217604.png\" alt=\"image-20250428124217604\" style=\"zoom:50%;\" />\n\n## CH5 TLP\n\n### 其他概念\n\n- NUMA又叫**distributed shared-memory multiprocessor (DSM / DSP)**\n- UMA又被叫做 symmetric multiprocessors (**SMP**)  or  **centralized shared-memory multiprocessors**\n\n#### 概念区分\n\n* **coherence：**规定了针对**同一内存**地址读写操作的行为\n* **consistency：**定义了涉及**不同内存**地址访问时的读写**顺序行为**\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250618112258192.png?imageSlim\"/>\n\n### 硬件原语\n\n- `exch` 用于将寄存器的值与内存地址中的值交换\n  - 该操作是原子性的，一次性完成读取旧值和写入新值的操作\n\n#### lr与sc\n\n> 补充这部分的指令介绍，方便后续相关汇编的理解\n\n**Load-Reserved（加载保留）**\n\n- 加载之后在硬件层面预留了这个内存地址，表示有向其写入的意图，用于后续的sc指令是否允许写入\n- `lr` 与 `ll`也就是 **load linked** 本质上是一样的，只不过后者是MIPS架构中的指令名称，都是加载并预留的原子指令\n\n**Store-Conditional（条件存储）**\n\n- 尝试将值写入到内存地址；\n- 只有在之前对该地址有成功的lr预留 且 未被其他处理器干扰的情况下，才能成功写入\n- 具有返回值：\n  - 如果失败：返回0\n  - 如果成功返回非0\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250618112626555.png?imageSlim\"/>\n\n#### lr与sc的原子性操作应用\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616164223737.png?imageSlim\"/>\n\n> Note：**Only Regitser-Register instruction can be insert between LL & SC**\n\n#### 自旋锁\n\nspin lock指的是程序陷入了不断尝试获得lock的loop\n\n**一个简单的版本**\n\n```assembly\nli R2, #1\nlockit: exch R2, 0(R1)\nbnez R2, lockit\n```\n\n- R1所对应的内存地址保存了锁是否为空闲的信息，0 表示 free， 1表示被占用\n- 上述版本将1加载到R2，并不断尝试将它的值与R1对应的内存地址的值交换\n- 如果锁正在被占用，R2还是1，因此会不断陷入lockit的循环，直到某次的loop成功加锁（R2被交换为0），然后继续执行\n\n上述的问题是，不断尝试 `exch`涉及到了多次的读写操作，会带来总线上的invalidate信号的traffic\n\n因此，我们考虑采取下面的优化方案\n\n**优化的版本**\n\n```assembly\nlockit: ld x2,0(x1)         ; load of lock\n        bnez x2,lockit      ; not available-spin\n        addi x2,R0,#1       ; load locked value\n        EXCH x2,0(x1)       ; swap\n        bnez x2,lockit      ; branch if lock wasn’t 0\n```\n\n> 相比于简单版本的反复exch，优化之后的loop里只涉及到了读操作，因此对程序的表现更加友好\n\n使用 `exch`的指令由于读写合一，操作不灵活，我们考虑将读写利用同样是原子性指令的 `ll`和 `sc`来分离，实现等价的效果：\n\n**采取LL和SC实现：**\n\n```assembly\nlockit: lr x2,0(x1)         ; load reserved\n        bnez x2,lockit      ; not available-spin\n        addi x2,R0,#1       ; locked value\n        sc x2,0(x1)         ; store （成功写入/加锁 返回0）\n        bnez x2,lockit      ; branch if store fails\n```\n\n> 因为lr、sc和exch一样，也是原子性操作，确保了“检查锁是否可以用”和“设置锁”不会被其他线程打断；\n>\n> 不同的是，exch通过交换之后的寄存器值来判断是否加锁成功，而sc利用自身操作的返回值来判断是否成功加锁\n\n#### 自旋锁的性能分析\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616164043201.png?imageSlim\"/>\n\n> **TODO**\n\n### Snoopy\n\n两种转换规则：\n\n- 一定要转换成 S 状态再read（除了自己read自己的hit）；\n- 一定要转换成 E / M 状态再write\n- P1写入X的新值之后，需要确保其他处理器知道变化，分为两种策略：\n\n  - ***Write Invalidate***：将其他P的副本置为无效（搭配**写穿透**）\n    - 但是也适合写回策略搭配，注意dirty位的使用\n  - ***Write Broadcast***：将其他的副本直接写入新值（搭配**写回策略**）\n\n一个简单的例子；\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250524132310613.png?imageSlim\"/>\n\n- 注意此时bus信号的桥梁作用：\n  - 发生了read miss之后，首先将P2的对应cache line设置为share状态（此时还不知道值）\n  - 总线信号传到P1之后，P1的对应状态修改为share，并且发起了write back的信号，将A1的值写入mem\n  - 之后，总线信号read data让P2读取了mem中的值，完成了 `P2：read A1`的操作\n\n每一个处理器/线程对每一个block具有自己的状态\n\n#### 状态机\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250607203010638.png?imageSlim\"/>\n\n> 处于E状态时，如果收到了bus上的read-miss信号，会将该P改为S状态\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605104010432.png?imageSlim\"/>\n\n### Directory\n\n- ***local node***  发起请求的处理器\n- ***home node***  对应地址所在的处理器\n- ***remote node*** 拥有这个副本的处理器\n\n在homeNode中存储一个block在不同处理器/线程中的状态\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605105815979.png?imageSlim\"/>\n\n> 其中的 `fetch/invalidate`发生在：local发生了write miss，并且home中对应的block为E状态，向独占该block的P发送～信号，确保将仅在对应P中的数据读取再非法化（内存中数据过时）\n>\n> - 读取之后的数据先存放在了home中，然后再由home发送data reply给local（一般来说local写入了新值，并不需要这个旧值；但是如果写入的新值是 X+1，就必须获得正确的旧值了，因此还是有必要的）\n\n#### write miss\n\n初始：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605110226409.png?imageSlim\"/>\n\n写入：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605110631594.png?imageSlim\"/>\n\n#### `fetch/invalidate`\n\n初始：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605111010835.png?imageSlim\"/>\n\n过程：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605111257118.png?imageSlim\"/>\n\n> 如果目录节点中记录的状态是E，就向对应的处理器发送 `fetch`的信号\n\n#### 根据cache填写目录\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605113001427.png?imageSlim\"/>\n\n对应的简单例子：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605113359800.png?imageSlim\"/>\n\n另一个语言描述的例子（答案）：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250611164909272.png?imageSlim\"/>\n\n> 22-23回忆卷的最后一题\n\n#### cache失效问题\n\nP将自己cache中的block kick out时，需要将对应的home中的sharer中将P踢出序列，如果原本仅有P本身，就需要将对应的状态改为U，表示uncached.\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605114629798.png?imageSlim\"/>\n\n### MESI\n\n> 如果没有特别说明，就当做MSI\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250606191507180.png?imageSlim\"/>\n\n状态：\n\n* Invalid: 缓存块无效，不能被使用；\n* Shared: 缓存块未被修改，且可能存在于多个缓存中，内存中的数据是最新的；\n* Modified: 缓存行已被修改，且该缓存行是唯一的有效副本，内存中的数据已过时；\n* Exclusive：缓存块未被修改，**且是唯一的有效副本**，内存中的数据是最新的。\n\nE的存在是为了**优化写入性能和减少总线流量**，具体来说，我们用E来区分某个缓存块只被一个处理器读取且还没有写入的状态，是为了在此后该处理器写入该缓存时，不需要在总线上发送Invalidate的信号（因为没有共享缓存的其他处理器）\n\n> 如果是传统的MSI，即使share的成员只有一个，还是要发送信号到总线，被其他的处理器接收并处理，这带来了额外的时间开销\n\n### Consistency\n\n#### Sequential consistency\n\n特征：**Delay next memory access until the previous one is completed.**\n\n> 对指令的执行有着严格的顺序要求，虽然保证了正确性，但是延时较高\n\n- 相同处理器内部的内存访问是**有序**的\n- 不同处理器的内存访问是交错的\n\n课本的例子：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250611150023807.png?imageSlim\"/>\n\n简单的计算：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605131113080.png?imageSlim\"/>\n\n#### Relaxed Models\n\n为了降低SC带来的延时，我们采取 Synchronized program 来让指令的读写在乱序执行中保持与串行执行等价的效果，以下是不同等级的model：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605133510558.png?imageSlim\"/>\n\n> 下方的顺序表示该模型在前者的基础上去除了对应的顺序约束，但是要求访问的对象不是相同地址的\n>\n> 比如在TSO中， `C= `作为写操作，允许和 `= D `的读操作一起执行，解除了W-R的约束\n\n# jxh老师的PPT\n\n> 针对核心的补充摘录\n\n**Tomasulo的三个主要优点**\n\n- **The distribution of the hazard detection logic**\n  - 保留站和CDB\n  - 如果多条指令在等待一个结果 或者 一条指令等待多个操作数，可以**同时**通过CDB的广播读取（避免了通过寄存器读取）\n- **The elimination of stalls for WAW and WAR hazards**\n- **overlap iterations of loops**：循环迭代的重叠\n  - 相当于从HW（硬件）上实现了循环展开\n\n> 计分板无法实现 overlap iterations of loops\n\n**为什么Tomasulo可以实现循环迭代的重叠？**\n\n- 寄存器重命名\n- 保留站允许指令的提前发射以及旧值的存储（避免了**WAR**冲突）\n- Tomasulo building data flow dependency graph on the fly.\n\n**计分板阶段的回顾**\n\n- ISSUE：当下面的条件同时满足时issue：\n  - 具有可用的功能单元\n  - 没有与正在执行的指令具有相同的目标寄存器\n  - 此时避免了结构冲突和WAW冲突\n- RO：当两个操作数都准备好了的时候才会读取\n  - 避免了RAW的冲突\n- EX\n- WB：此时检测WAR冲突并在必要的时候stall\n\n#### 计分板和Tomasulo的对比\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250615163546156.png?imageSlim\"/>\n\n> Tomasulo消除了WAW与WAR冲突；没有显式寄存器重命名的计分板无法消除～\n>\n> **OOO**：out of order，此处指乱序完成\n\n#### CDB的额外信息\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250615164708448.png?imageSlim\"/>\n\n> TODO： 为什么需要source address？\n\n#### 使得CPI < 1的几种方法\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616140413205.png?imageSlim\"/>\n\n> 向量处理；超标量；VLIW\n\n#### 超标量\n\n使用基于Tomasulo的算法，可以实现乱序执行的动态调度\n\n**Issue Packet：**\n\n- 从fetch unit获得的指令组合，可以在一个周期内同时发射\n- Issue阶段也被流水线化：\n  - 第一个阶段检查当前packet可以一次性发射的指令数（不存在数据冲突）；\n  - 第二个阶段检查上一步选中的指令是否与已经发射的指令存在冲突\n\n> 对于N-issue的多发射，每个cc实际发射 0-N条指令\n\n**多发射存在的问题**\n\n- 必须在一个cc内多次重命名相同的寄存器\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616141407666.png?imageSlim\"/>\n\n- 拓宽总线\n\n**两种实现多发射的方法**\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616141739907.png?imageSlim\"/>\n\n- pipeline\n- widen issue logic\n\n#### 双发射的例子\n\n**不带投机执行的双发射：**\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616142306653.png?imageSlim\"/>\n\n**带有投机执行的双发射：**\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616142656105.png?imageSlim\"/>\n\n#### WB与IS的并行执行\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616144548699.png?imageSlim\"/>\n\n> 然而事实证明很少会考虑这种情况？除非题目明确说明或者给出充分的暗示，否则认为还是在下一个cc才能issue到原本冲突的FU\n\n#### Global code motion\n\n全局代码调度：通过跨分支移动指令来有效地调度带有内部控制流的循环体。\n\n#### DRAM与SRAM\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616145823142.png?imageSlim\"/>\n\n# 大题整理\n\n## CH1\n\n> **TODO**\n\n## CH2\n\n> cache相关的计算题参考知识点梳理的ch2-cache performance\n\n#### Global / Local Miss Rate\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250618154738643.png?imageSlim\"/>\n\n课本的例题：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250618154928490.png?imageSlim\"/>\n\n分析：\n\n- L1的global和local缺失率相等，都是 40 / 1000\n- L2的global缺失率为 20 / 1000， local缺失率为 20 / 40\n\nAMAT：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250618155451648.png?imageSlim\"/>\n\n**Average stall cycles per instruction**：**( AMAT - hit time ) x MPI** = (5.4-1) x 1.5 = 6.6 cc\n\n#### 是否满足时间和空间局部性\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250618153621835.png?imageSlim\"/>\n\n分析：根据给出的cache容量、组关联等信息计算block的大小，然后比较block大小是不是大于系统的字长（如果小于就不满足空间局部性）\n\n此处计算得到block大小为 8KB / 4K = 2B  < 4B\n\n> 似乎有cache就一定满足时间局部性？如果按照byte访问的话，能够存储指定的word就可以？\n\n#### cache与tag\n\n给定物理地址的宽度 ，cache的容量和组关联度$k$决定了tag的位数：\n\n假设block是$2^m$字节的大小，cache的容量是$2^n$B, 为直接映射，据此计算得到：\n\n- byte offset bit = $m$\n- index bit = $\\log_22^{n-m} = n-m$\n- 所以tag的位数是：地址位数N - n\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250611154233564.png?imageSlim\"/>\n\n> 虚拟页的容量和虚拟地址的位宽在此为干扰信息；\n>\n> 如果不是直接映射，就先计算一个set的容量，然后据此计算index\n\n假设组关联度是 $k = 2^i$ 那么：\n\n- index bit = $n-m-i$\n- 对应的tag位数 = N - n + i\n\n**由此可见，题目中没有给出的block的容量恰好是不需要的计算量**\n\n**e.g. 加入组关联**：一个8-way的例子\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250611154802019.png?imageSlim\"/>\n\n## CH3\n\n> 建议参考老师的ppt推一遍计分板和Tomasulo的填表，然后记住什么时候要推迟一个cc、什么时候可以直接执行\n\n#### 延迟一个cc的情况\n\n- 计分板和Tomasulo存在结构冲突时，上一条指令WB之后的一个cc下一条指令Issue\n- 计分板和Tomasulo的指令需要读取待写回的数据时，上一条指令WB之后的下一个周期分别进入RO / EX 阶段\n\n但是Tomasulo的issue队列里可以**直接在上一条结束的cc接替**执行下一条的EX：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250618000138713.png?imageSlim\"/>\n\n## CH4\n\n> rename 、 string strip和循环级别并行部分的例题请参考知识点梳理部分\n\n#### convoy与chain\n\n> 详细内容可以参考英文第六版的p291\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250618145520392.png?imageSlim\"/>\n\n参考解答：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250618150404833.png?imageSlim\"/>\n\n> 此处忽略了向量机的set-up等时间\n\n下面是回忆卷：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250606095649137.png?imageSlim\"/>\n\n> 参考答案：个人观点\n\n第一问：\n\n- 指令的执行时间分为：取指+启动+向量长度， e.g. 第一条vld为 1+4+64 = 69\n- 但是后续的指令的取指可以在前一条指令执行期间完成，因此此处的vadd可以在cc=69开始执行：69 + 7+64 = 140cc\n- 后续指令同理分析\n- ....\n\n第二问：3（vsd与vld存在结构冲突）\n\n第三问：\n\n- 估计：3x64 + 3 + 7 + 10 + 4\n- 考虑了取指时间以及各个convoy内部最长的启动时间\n\n#### blocked 与 unblocked\n\nHere is a blocked and unblocked version of C code to perform a matrix operation on a 256x256 matrix:\n\n```c\nfor (int i = 0; i < 1024; i += 16) {\n    for (int j = 0; j < 1024; j += 16) {\n        for (int m = 0; m < 16; m++) {\n            for (int n = 0; n < 16; n++) {\n                output[j + n][i + m] = input[i + m][j + n];\n            }\n        }\n    }\n}\n```\n\n```c\nfor (int i = 0; i < 1024; i++) {\n    for (int j = 0; j < 1024; j++) {\n        output[j][i] = input[i][j];\n    }\n}\n```\n\nSuppose the size of the element in the matrix is 32 bits and we execute the codes above on a processor with a 2KB fully associative data cache using the least recently used (LRU) replacement strategy. The cache block size is 64 bytes. What is the relative number of cache misses when running the blocked and unblocked version?\n\nA. 2 : 17\n\nB. 1 : 8\n\nC. 1 : 17\n\nD. 1 : 16\n\n> A\n>\n> **SOLUTION：**\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250611150700645.png?imageSlim\"/>\n\n> 之所以说blocked version一轮循环只会发生32次miss，是因为计算得到这个cache正好有32个cache line，因此在内层循环所需的32个block都只需要读取一次；\n>\n> 因此，我们首先根据题目给出的cache容量和block信息，算出index；然后结合元素的大小计算内层循环需要的block数量，检查是否可以被cache存放\n\n## CH 5\n\n> **TODO: 感觉记一下例题就差不多了（知识点梳理部分）**\n\n# 小贴士\n\n- **precise exceptions**：\n  - 定义：On handling exceptions, if the pipeline can be stopped so that the instruction issued before the faulting instruction complete and those after it can be restarted\n- **计分板的WAW冲突检测**：Scoreboard Algorithm issue a instruction when no other active instruction has the same destination register to avoid WAW hazard.\n- 写更新也就是写广播，与写失效构成了常用的处理缓存不一致性问题的策略\n\n# 补充\n\n#### 常见的CSR\n\n常见的CSR有mstatus,mtvec,mepc,mcause,mtval。这些寄存器都属于M mode：\n\n- mstatus：机器模式下的状态寄存器，包含开关中断的MIE、保存进入异常之前特权模式的MPP等\n- mtvec：发生异常时跳转的PC入口；\n- mepc：发生异常时，指向导致异常的指令；发生**中断时**，指向**中断处理后应该恢复的位置**；\n- mcause：根据异常来源设置\n  - 如果是访问存储器造成的异常，就将其地址更新到mtval；\n  - 如果是非法指令导致的异常，将指令编码更新到mtval寄存器中\n- mtval：反映引起当前异常的存储器访问地址或者指令编码\n\n#### VIPT\n\n> Virtual Indexed and Physically Tagged Cache\n\n也就是从VA中提取低位作为实际物理地址对应的index，用VA的高位在TLB中查询得到物理地址，然后用物理地址中的tag进行比较。这两个步骤分别称为 **缓存查找**和**地址翻译** ，可并行执行\n\n这样做是为了消除**同义词**问题：\n\n- 如果采取完全的虚拟地址寻址VIVT，一个物理地址可能对应不同的虚拟地址，从而导致其具有了多份的拷贝，带来了数据的不一致性的问题\n\n#### 写失效的冲突写\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250617225541859.png?imageSlim\"/>\n\n#### 带有投机的store\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250617233055511.png?imageSlim\"/>\n\n由于带有投机的Tomasulo在commit之前都不会实际更新寄存器或者mem，所以 `store`指令在此之前不会实际向内存中写入数据，那么我们可以在其地址相关寄存器准备好的时候就进入Exe阶段（地址计算）\n\n> 实际上，不带投机的store也是这样（参见下面“多发射的例子\"中的标注）\n\n相应的，当 `store`指令结束write result的时候如果此时还没有准备好源寄存器的值，就会在ROB中记录（对应指令的ROB编号），并在对应指令完成后准备好commit\n\n> 由于每条指令都只在ROB有空位的时候issue，因此我们用**ROB编号**来标记每一条指令（用于数据冲突时等情况）\n\n#### 多发射的例子\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250618140228378.png?imageSlim\"/>\n\n# 作业复盘\n\n## HW1\n\n- 资源占比等价于所需的时间，可并行化程度意味着采取多核处理的时候，有多少的比例可以参与优化；\n- 利用资源占比分配核数，应当向下取整，避免整体的核数超出总核数\n- 计算整体加速比的时候，先分别计算对应的时间，然后利用并行前后的总时间来计算加速比\n  - 由此计算得出的总时间，可以用于重新分配所需的计算资源\n\n## HW2\n\n#### 功耗计算\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250608185645239.png?imageSlim\"/>\n\nans：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250608185936979.png?imageSlim\"/>\n\n> 注意分别计算静态功耗和访问功耗，前者需要先计算对应的时间\n\n## HW3\n\n- B.5 涉及cache、AMAT和CPI的计算，可以参考作业的解答\n\n> 其他没有什么问题\n\n## HW4\n\n- **GFLOP**：以G为单位，执行的浮点数操作\n\n> 其他没有什么问题\n\n# TODO\n\n#### 硬件原语部分\n\n> **TODO**：5.3ppt的18/40开始没有记录（学无余力）\n","source":"_posts/课程笔记/arch复习.md","raw":"---\ntitle: 计算机体系结构复习\ndate: 2025-06-21 19:03:24\ntags:\n- 计算机系统\n- CS课程\ncategories: \n- 课程笔记\nexcerpt: 复习阶段整理的arch笔记，整体分为核心知识点回顾、jxh老师PPT的补充、大题题型梳理以及其他补充\nthumbnail: https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250625150044872.png?imageSlim\n---\n# 知识点梳理\n\n## CH1\n\n#### 可靠性\n\n- **availability** = MTTF / MTBF\n- **FIT**：faliure in time = 1 / MTTF\n\n计算系统整体的MTTF时，我们可以优先计算FIT（各个组件的rate相加），然后求倒数\n\n#### MIPS\n\nmillions of instructions per second\n\n#### Performance\n\nperformance是执行时间的倒数\n\n#### 不同的性能比较策略\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250607173816894.png?imageSlim\"/>\n\n> 几何平均就是将各个程序的执行时间相乘然后开根号，作为平均的执行时间；\n>\n> **depends on which machine is the reference**：在不清楚加权算法中的权值情况时，采取参照的方法计算平均值，类似于加权的效果，但是结果与选择的参照对象相关，因此说～\n\n几何平均：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250608152559487.png?imageSlim\"/>\n\n### 流水线相关\n\n可以一定程度上允许结构冲突：\n\n- 为了减少cost和减少单元的latency\n\n#### throughput\n\nThe throughput of a CPU pipeline is **the number of instructions completed per second**\n\n> CPU流水线的吞吐量指的就是每秒执行的指令数\n\n#### how to stall\n\n1. 设计stall控制单元，检测是否存在冲突需要stall\n2. 如果需要stall，就disable writing PC and IF/ID latch，并且插入一个nop指令到ID/EX，禁止写回寄存器和写入MEM\n\n#### double bump\n\n如果在一个cc内允许 write-then-read，就可以只插入两条nop：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250528203331360.png?imageSlim\"/>\n\n#### 跳转指令\n\n∆ = 目标地址 - 跳转指令的**下一条指令**的地址！\n\n> 因为在取出指令后PC+4就生效了；\n>\n> 与汇编指令具有异曲同工之妙\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined2c0c4d308a58fd80d85c816e0487b11a.png?imageSlim\"/>\n\n同时注意，是在MEM阶段而非EX阶段写回PC寄存器，在跳转指令的WB阶段开始取址\n\n> 总共stall了3个cc\n\n对应的简单问题：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250530204714053.png?imageSlim\"/>\n\n为了解决上述的stall损失，我们可以考虑在EX阶段前递，或者在ID阶段增加硬件单元。\n\n另外的可行办法是**延迟槽**技术：\n\n- 因为跳转指令在ID阶段才确定，此时IF已经取址了。我们将一定会执行的指令（无论跳转是否发生）放置在条件跳转指令的下一条，避免这条(组)指令的浪费\n- 延迟槽中的指令应当由编译器选择合适的指令(组)\n\n#### 移位寄存器\n\n为了解决写端口的冲突，直接增加写端口是不经济的。\n\n我们考虑一种检测矛盾并实现序列化写操作的技术——使用**移位寄存器：**\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250530210124307.png?imageSlim\"/>\n\n> 在ID阶段分析指令之后，如果与已经发射（此处应该指的是应该开始执行？）的指令存在写端口的冲突（利用移位寄存器判断），就stall这条指令\n\n如果指令需要写回，利用一个移位寄存器，设置与当前指令将要写回所需的cc相等的值，作为移位寄存器位数的1.每个cc将对应的移位寄存器右移。\n\n#### 数据冲突\n\n- ***RAW***：***true*** dependance，因为无法通过寄存器重命名或者指令重排来优化\n- WAW：output dependance\n- WAR：***anti***-dependance，因为和RAW是相反的\n\n## CH2 存储器层级\n\n#### block identification\n\n- index 用于选中cache的set / cache line\n  - index bits = $\\log_2(\\text {size of set / cache line})$\n- offset：用于选择block内部的data\n  - offset size = $\\log_2(\\text {size of block})$\n- tag：用于比较block是否匹配\n  - bits: 地址size - index size - offset size\n\n一个简单的直接映射的计算例子：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250530213007222.png?imageSlim\"/>\n\n- 地址总位数可能由***memory size***间接给出：e.g. Memory-size = 4G = $2^{32}$， 得到一共有32位\n\n#### write strategy\n\n一般来说：\n\n- 写回策略 + write allocate\n- 写穿策略 + write around：发生write miss的时候，只会写入到内存\n\n一个简单的例子：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250531095731123.png?imageSlim\"/>\n\n> 当发生了read miss的时候，将mem[200]加载到cache，下一次的写将命中\n\n### Cache performance\n\n#### Memory stall\n\n- $$\n  CPU \\ time  = IC \\times (CPI_{exeution} + \\frac{Misses}{Ins.} \\times Miss \\ penalty) \\times clock \\ cycle \\ itme\n  $$\n\n  > $\\frac{Misses}{Ins.} = Miss\\ rate \\times MPI$\n  >\n- ***CPU Execution time*** = (CPU clock cycles + **Memory stall cycles**) x Clock cycle time\n\n  - 其中后者可以如此计算： $ IC \\times MPI \\times MissRate \\times Miss\\ penalty$\n  - 注意判断是否需要将data和ins.的mem区分\n\n  一个简单的例子：\n\n  <img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250531102931121.png?imageSlim\"/>\n\n#### AMAT\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefinedimage-20250310110142371.png?imageSlim\"/>\n\nAMAT也就是: **Average memory access time**.\n\n所以可以用来计算 ***real CPI***= Ideal CPI + **Average stalls per instruction**  , 其中后者根据:\n\n$$\n(AMAT - HitTime) \\times  \\ \\text{access times / ins.}\n$$\n\n计算得到,  且 `HitTime`为理想的CPI, `access times`是每条指令平均访问memory的次数 = MPI , e.g. 有30%的数据访存指令, 对应了**1.3**.（考虑指令cache的1 on unified cache）\n\n一个简单的例子——**AMAT按照data和ins加权计算：**\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250531102701013.png?imageSlim\"/>\n\n补充：\n\n- **MPI**(memory reference per instruction)＝1.5 , 也就是指令对mem的平均访问次数.\n- 注意AMAT的计算涉及了***hit time***，unified cache的hit time可能比split cache的大\n- 无特别说明的情况下，hit time = Ideal CPI\n\n#### Split & Unified\n\n- miss rate的计算：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250531105216214.png?imageSlim\"/>\n\n> 表格中给出的数据是miss相关的估计，实际上的MPI可能由题目进一步给出，因为不同的程序对应的访存比例可能不同，根据实际情况计算\n\n### Improve cache performance\n\n#### 减少hit时间 4’\n\n- ***small and simple caches***\n\n  - 更少的硬件支持；直接映射的速度更快\n- ***avoiding address translation***\n\n  - 使用TLB作为page table的cache，Virtual indexed, Physically tagged\n\n  <img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250531161036099.png?imageSlim\"/>\n- ***way prediction***\n\n  - 在cache中采取extra bits预测way，如果预测正确只需要1cc；否则需要额外的cc改变预测位\n- ***trace caches***\n\n  - trace：动态指令序列，主要为 `branch`设计\n  - 将branch在内的指令打包放入trace cache，由于大部分时间，分支跳转后要指令的指令序列是相同的，因此我们可以直接从trace cache中取用\n\n#### 增加cache的bandwidth 3‘\n\n- **pipelined cache access**\n  - 顾名思义，将cache的访问流水线化\n- **multibanked caches**\n  - 将cache划分为几个不同的区域，从而允许同时的访问\n- **non-blocking caches**\n  - 针对 hit under miss 的情况设计，允许CPU在miss之后继续执行指令，避免陷入阻塞block\n\n#### 减少miss penalty 4’\n\n- **multilevel caches**\n  - 多级cache带来的概念：local miss rate（当前level的缺失率） 与 global miss rate（与上层的cache相关）\n- **critical word first**\n  - 在block中找到需要的word后就快速启动，后续指令的执行和block的剩余内容的搬运并行执行，因此通常用于block的size较大的情况\n  - 又称为 **wrapped fetch** 与 **requested word first**\n- **read miss prior to writes**\n  - 在**写回策略**下, 如果发生了 `read miss`, 需要从主存中读取对应的块并写入 `cache`. 可以直接取出数据并开始执行指令, 将待写的数据放入 `buffer`.\n- **merging write buffers**\n  - 多次的写合并到一次的操作， 特别是写的地址是相同的时候，显著降低了penalty\n- **victim caches**\n  - 在相邻的cache层级之间增设牺牲缓存\n  - 发生一次 `miss`之后并不直接将其踢出 `cache`, 而是放入~\n\n#### 降低miss rate 4’\n\n> 控制变量分析\n\n- **larger block size**\n  - 降低了强制miss rate\n  - 但是增大了miss penalty，以及发生冲突miss的可能（block的数量减少）\n- **large cache size**\n  - **经验法则**: 翻倍的cache容量, 带来降低25%的缺失率.\n  - 降低了容量miss\n  - 但是增大了hit time和cost\n- **higher associativity**\n  - **经验法则**: 一个大小为N的直接映射缓存 , 与一个大小为**N/2的2路组相联** 缓存具有**相同的未命中率**.\n  - 8-way比较理想。更大的组关联度导致比较时间的增加，从而可能导致时钟周期的增大/周期数的增加\n- **compiler optimization**\n  - 在不改变硬件的情况下, 使用编译器重排指令的序列\n  - 数组合并\n  - 循环交换：改变循环的嵌套顺序\n  - 循环融合\n  - blocking策略\n- **way prediction and Pseudo-Associative Cache**\n  - 路预测的技术与之前提到的相同，用一个预测位来预测\n  - 伪关联缓存：divide cache，然后在miss之后查看当前cache的剩余部分\n    - 如果此时命中，称为 **pseudo-hit**，时间介于hit 与  miss penalty之间\n\n**3C回顾：**\n\n- **Compulsory**: 冷启动，又称为强制miss;\n- **Capacity**:  缓存的空间不足导致的 miss. 发生在**全关联**当中.\n- **Conflict（collision）**:  set associative or direct mapped当中发生.\n\n> 主要关注冲突miss和强制miss的优化\n\n#### 通过流水线降低miss penalty和rate 2’\n\n- **hardware prefetching**\n  - 使CPU预先取用一部分的数据到**特殊的缓存块**当中, 从而降低了 冷启动的影响.\n  - 预取的结果放入 `stream buffer`，\n- **compiler prefetching**\n  - 由编译器插入prefetch ins.来获取需要的数据\n  - 根据预取数据存放到**寄存器**还是cache，分为**binding** prefetch 和 non-binding prefetch\n\n## CH3\n\n### scoreboard\n\n> 看一眼\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250607222728995.png?imageSlim\"/>\n\n#### 流水线的阶段\n\n1. IF: 取指令\n2. IS: 以下条件同时满足时允许发射：\n   1. FU空闲——**避免结构冲突**；\n   2. 正在执行的指令，没有一条要写回的Rd与当前指令相同——**避免了WAW冲突**\n3. RO: 监视数据冲突，**当且仅当两个源寄存器都准备好了**，才读取\n4. EX: 在不同的FU中执行(MEM涵盖在整数的FU当中)\n5. WB：更新状态表之后的下一个cc可以RO\n\n#### 表的设计\n\n- 指令状态表 **Instruction Status Table**\n  - 记录指令的状态，在哪个阶段\n- 功能单元状态表 **Functional Unit Status Table**\n  - `busy`：FU 是否空闲；`op`：FU 正在执行什么操作\n  - `Vi`, `Vj`, `Vk`：FU 的操作数对应着哪个寄存器\n  - `Qj`, `Qk`：FU 的操作数如果没准备好，应该从哪个 FU 读取\n  - `Rj`, `Rk`：操作数是否准备好，如果准备好了就填 `yes`，然后在RO阶段读取之后立即改为 `NO`\n    - 率先执行的指令在WB的时候检查写入的寄存器是否在某个FU的ready-list中为 `YES`，表示等待另一个操作数准备好之后同时读取（还未读取）\n- 寄存器状态表 **Register Status Table**\n  - 如果某个寄存器的值**正在被某个 FU 的操作生成**，填入这个操作FU的编号\n  - 生成好了之后，填入实际值\n\n#### 显式重命名\n\n通过设置更多的物理寄存器, 同时维护一个 `free list`.\n\n- 每一条需要写寄存器的盒指令，均分配一个新的物理寄存器；\n  - 此时还需要记录原来的map（对应的物理寄存器），这是为了在发生中断/rollback的时候可以复原之前的映射关系；\n- 当可以写回的时候，再将得到的值写回到逻辑寄存器，同时将锁定的物理寄存器 free up（加入到free list的末尾）\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602113651013.png?imageSlim\"/>\n\n加入显式重命名之后的计分板阶段分析：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250608145256468.png?imageSlim\"/>\n\n显式重命名消除冲突的示例：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250608145854391.png?imageSlim\"/>\n\n### Tomasolo\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602113117390.png?imageSlim\"/>\n\n#### 算法的思想\n\n- Scoreboard 算法的控制权**全部在 Scoreboard 的三张表中**\n- Tomasulo 算法将 FU 的控制权**交给 FU 自己**，每个 FU 有自己的指令缓存\n\n| IF | IS | EX | WB |\n| -- | -- | -- | -- |\n\n#### 硬件设计\n\n- 每个 FU 有一个 buffer，叫做保留站（reservation station）\n  - `busy`：FU 是否空闲；`op`：FU 正在执行什么操作\n  - `Vj`, `Vk`：两个源寄存器对应的寄存器值（注意是值）\n  - `Qj`, `Qk`：两个源寄存器如果没准备好，应该从哪个 FU 读取\n  - 此外还会记录 FU `<u>`距离完成执行这条指令的剩余周期数 `</u>`\n- 内存也有自己的保留站，叫做 **Load/Store Buffer**\n  - `busy`：这个位置是否有内存读写请求\n  - `address`：读写的地址\n- 有一个 Register Status Table，和 Scoreboard 算法中的一样\n- 有一个 Common Data Bus（CDB），负责将结果广播到所有的保留站和寄存器\n  - 将需要的数据从总线上直接取用, 而不用通过寄存器\n  - 因此传递的时候, 不仅传递值, 同时传递对应操作的编号\n\n#### 带投机的实现\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602190343569.png?imageSlim\"/>\n\n为了在遇到分支指令的时候避免stall，我们可以采取投机的方式——假设分支指令不会跳转，继续执行之后的指令\n\n为了实现投机机制，我们需要一种在预测失败之后可以rollback的机制——新增Reorder buffer i.e. **ROB**\n\n在之前的流程基础上，增加**commit**阶段，让CDB的结果先写入ROB，然后在ROB中实现顺序提交，如果头部指令是：\n\n- 普通指令：将结果写回到寄存器和内存，然后从ROB中删除\n- 分支指令，并且预测：\n  - 正确：当做普通指令，继续执行\n  - 错误：清空**flush**此时ROB中的所有指令\n\nNotice：\n\n- IS阶段需要将指令同时写到ROB中，因此只有当保留站和ROB都有空余的情况下，可以issue\n- issue之后，可以从**ROB和寄存器**中读取操作数到**保留站**中\n- 内存中的数据也可能存在RAW的冲突，因此在load的时候，需要从ROB中的store的地址相比较：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602190716237.png?imageSlim\"/>\n\n> 只有当我们明确知道load对应的内存地址与先前store指令的目标地址不冲突的时候，才执行load（向内存发送请求），否则stall\n\n#### MEM的RAW与解决\n\n**参考的解决：**\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616151543260.png?imageSlim\"/>\n\n**对应的例子：**\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616152019357.png?imageSlim\"/>\n\n> 此处右下角的应该是load buffer？所以实际填写的不是存在冲突的store地址，而是load的地址；\n>\n> 猜测是这样的流程：如果load前面的某个store的目标地址还没有计算完毕，就将load的地址栏填入store的ROB编号，然后store完成的时候带着ROB编号在load内部检查，同时让store的地址与load的实际地址进行比较？\n>\n> 所以上图中的“填入到load参照的表格中”有问题\n\n#### 总结\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250604144824057.png?imageSlim\"/>\n\n> Tomasulo也无法解决RAW冲突，这是无法解决的冲突\n\n### 分支预测技术\n\n#### 分支预测表\n\n- 一位预测器：分支历史表，使用PC的低位作为索引，0预测不跳转，1预测跳转\n- 两位预测器\n- N位预测器：\n  - 使用$[0, 2^{N-1} - 1 ]$ 来预测不跳转\n  - 使用$[2^{N-1}, 2^N-1]$来预测跳转\n  - 如果要求计算准确率，注意是等到稳定的时候再计算（一开始的初始值并不重要）\n\n#### 相关预测器\n\n当前分支指令依赖别的分支指令的结果：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined1748841625338.png?imageSlim\"/>\n\n#### m,n预测器\n\n- **m**：使用m位的**移位寄存器**来储存m条指令是否跳转的结果\n  - 每当得到一条最近的指令是否跳转的时候，就进行移位并填充0表示not-taken 或者 1表示taken\n- **n**： 使用n-bit来预测当前指令是否跳转\n- **分支预测缓冲区**：一个记录分支跳转历史的buffer，使用上述的m-bit global history + 指令的低位进行index，每一行都对应了指定分支指令的预测器\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602134422581.png?imageSlim\"/>\n\n#### 预测器大小的计算\n\n**实际的硬件组成**：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602142419201.png?imageSlim\"/>\n\n**对应的大小计算：**\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602133757083.png?imageSlim\"/>\n\n#### 其他预测器\n\n- **Tournament predictor**：为了避免PC低位的相同干扰, 采用 `global` 和 `local`两个预测器，但是区别于上述的预测器，此处二者采取或得到对应的预测器\n  - ***TODO***：课件3.2的size计算\n- **Gshare预测器**：将PC低位和历史记录进行异或, 从而进行选择\n\n#### BTB\n\nbranch target buffer ｜ 分支目标缓冲区\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602140403962.png?imageSlim\"/>\n\n- 记录分支指令预测的跳转地址\n- 利用指令地址index，如果在BTB中找到了就取出预测地址并执行\n  - if branch taken，照常执行，没有stall\n  - if not taken，将fetch的ins.清空，并且将预测错误的entry从BTB中删除\n- 同理，如果一开始没有在BTB中index找到对应指令的entry，并且结果显示指令需要跳转，就在BTB中加入这一对的entry用于之后的快速预测\n\n> <img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602140813293.png?imageSlim\"/>\n\n#### Integrated Instruction Fetch Units\n\n随着CPI降低，取址单元可能成为瓶颈\n\n因此，考虑将fetch unit与分支预测器、指令预取器以及指令的buffer相集成\n\n#### Return Address Predictors\n\n预测目标地址在运行时变化的间接跳转的技术。\n\n将返回地址记录在类似于栈的buffer中，避免到内存中取返回地址，加速函数的返回\n\n### 分支预测技术总结\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602143610588.png?imageSlim\"/>\n\n---\n\n## CH4  DLP\n\n#### Flynn标准分类\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605102615189.png?imageSlim\"/>\n\n- LLP时的依赖检查：关注是否在同一层读取了其他层写入的结果\n  - 可以使用本层中串行计算的结果\n- reductions\n\n#### Rename来解除依赖\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250607202128965.png?imageSlim\"/>\n\n> 根据题目找到对应的依赖，然后据此rename寄存器\n\n---\n\n#### Strip Mining 条带挖掘\n\nMVL指的是向量处理器中寄存器最多的字长.\n\n当用户实际的处理长度超过MVL时, 进行取模, 首先用**标量处理余数**, 然后用向量计算剩余的部分.\n\n一个简单的例子：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250611151927322.png?imageSlim\"/>\n\n### 向量机的问题\n\n- 需要 *set-up* 时间;\n- 内存的访问带宽会影响向量机的性能\n\n### 提升向量机的表现\n\n**convoy:**\n\n- 可以并行的向量计算指令的集合\n- 不存在结构冲突\n- 可以通过vector chain来解决RAW冲突\n\n**chime**  ：the unit of time taken to execute one convey\n\n#### Vector Chaining\n\n解决了RAW的冲突.\n\n<img src=\"体系结构随笔.assets/image-20250428115214201.png\" alt=\"image-20250428115214201\" style=\"zoom:50%;\" />\n\n实际等价于流水线的 *forwarding*. 不同的是向量机是对向量的打包计算.\n\n#### Conditional Execution\n\n为了处理 *if* 语句的优化.\n\n```c\nfor（I=0； I<N; I++）\n\tif （A[I］！= B［I］） A［I］ -= B［I]；\n```\n\n<img src=\"体系结构随笔.assets/image-20250428115506868.png\" alt=\"image-20250428115506868\" style=\"zoom:50%;\" />\n\nV0就是其中的标志寄存器.\n\n根据标志位, 选择需要的位进行计算(压缩), 然后将其扩展成完整的向量.\n\n<img src=\"体系结构随笔.assets/image-20250428115702618.png\" alt=\"image-20250428115702618\" style=\"zoom:50%;\" />\n\n#### sparce matrices\n\n为了解决矩阵乘法中太多0的问题.\n\n涉及到 Vector *Scatter/Gather* 的方法, 实际就是不连续的访存操作.\n\n**gather：从不连续的地址读取并加载到一个向量寄存器中**\n\n```c\nfor (i=0; i<N; i++)\n    A[i] = B[i] + C[D[i]]\n```\n\n> 对应的指令: (`LVI`)\n\n```assembly\nLV\t\t\tVD, RD        ; Load indices in D vector\nLVI\tVC,(RC, VD)   ; Load indirect from RC base\nLV \tVB, RB\t  ; Load B vector\nADDV.D \tVA, VB, VC\t  ; Do add\nSV \tVA, RA\t  ; Store result\n```\n\n**scatter：将一个向量寄存器中的数据写入到不连续的地址中**\n\n```assembly\nfor (i=0; i<N; i++)\n    A[B[i]]++;\n```\n\n> 对应的指令:（`SVI`）\n\n```assembly\nLV \tVB, RB      ; Load indices in B vector\nLVI \tVA,(RA, VB) ; Gather initial A values\nADDV \tVA, RA, 1\t; Increment\nSVI \tVA,(RA, VB) ; Scatter incremented values\n```\n\n#### Multi-lane Implementation\n\n同一个向量指令的不同分量，可以在不同的lane上执行\n\n> 不同的lane之间不能存在数据冲突\n\n在多个FU的流水线中优化:\n\n<img src=\"体系结构随笔.assets/image-20250428120350459.png\" alt=\"image-20250428120350459\" style=\"zoom:50%;\" />\n\n#### Chain & Multiple Lane\n\n可以将上述的思路和chain相结合.\n\n向量机通过展开, 减少了条件判断等指令来减少了指令数.\n\n- 操作数指的是涉及的运算个数(比如一条向量计算涉及512个操作数, 但是指令数是1).\n\n编译器和用户可以互相提示数组是否可以向量化.\n\n`SIMD`: single instruction multiple data\n\n### GPU\n\nGraphical Processing Units.\n\n采取 `SIMT`: Single Instruction Multiple Thread.\n\n- 每个线程负责一条指令的部分计算.\n\nthread => block => grid\n\n#### 与向量机的主要区别\n\n- 不存在标量处理器\n- 使用多线程解决内存访问的延迟\n  - 向量机通过bank扩大内存访问的带宽\n- 具有很多的function units (类似于具有很多小的处理器.)\n\n#### 术语\n\n**warp**\n\n- 32 threads ==> warp / SIMD thread\n  - 必须执行相同的指令.\n  - warp之间不存在数据依赖.\n\n**PTX**\n\n对应的机器汇编.\n\n**predicate register**\n\n谓词寄存器, 类似于向量机中的标量寄存器.\n\n#### MEM层次\n\n- private memory\n- local memory: 1个block内部共享\n- GPU memory: 公共.\n\n### 循环级别的并行\n\n有的循环间的数据依赖可以被消除:\n\n```c\nfor (i=0; i<100; i=i+1) {\n  A[i] = A[i] + B[i]; /* S1 */\n  B[i+1] = C[i] + D[i]; /* S2 */\n}\n```\n\n取出首尾的两条指令，改写:\n\n```c\nA[0] = A[0] + B[0];\nfor (i=0; i<99; i=i+1) {\n  B[i+1] = C[i] + D[i];\n  A[i+1] = A[i+1] + B[i+1];\n}\nB[100] = C[99] + D[99];\n```\n\n#### 寻找循环依赖\n\n<img src=\"体系结构随笔.assets/image-20250428123817503.png\" alt=\"image-20250428123817503\" style=\"zoom:50%;\" />\n\n不同的迭代中, 存在读取和存储的地址相同的情况 ==> 存在循环依赖.\n\n- 计算方式: If a dependency exists, **GCD(*c*,*a*) must evenly divide (*d*-*b*)**\n- 通过枚举 $i$ 来判断是否存在冲突，本质上就是图示的公式是否成立\n\n可以通过变量的重命名来解决WAW等冲突.\n\n<img src=\"体系结构随笔.assets/image-20250428124217604.png\" alt=\"image-20250428124217604\" style=\"zoom:50%;\" />\n\n## CH5 TLP\n\n### 其他概念\n\n- NUMA又叫**distributed shared-memory multiprocessor (DSM / DSP)**\n- UMA又被叫做 symmetric multiprocessors (**SMP**)  or  **centralized shared-memory multiprocessors**\n\n#### 概念区分\n\n* **coherence：**规定了针对**同一内存**地址读写操作的行为\n* **consistency：**定义了涉及**不同内存**地址访问时的读写**顺序行为**\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250618112258192.png?imageSlim\"/>\n\n### 硬件原语\n\n- `exch` 用于将寄存器的值与内存地址中的值交换\n  - 该操作是原子性的，一次性完成读取旧值和写入新值的操作\n\n#### lr与sc\n\n> 补充这部分的指令介绍，方便后续相关汇编的理解\n\n**Load-Reserved（加载保留）**\n\n- 加载之后在硬件层面预留了这个内存地址，表示有向其写入的意图，用于后续的sc指令是否允许写入\n- `lr` 与 `ll`也就是 **load linked** 本质上是一样的，只不过后者是MIPS架构中的指令名称，都是加载并预留的原子指令\n\n**Store-Conditional（条件存储）**\n\n- 尝试将值写入到内存地址；\n- 只有在之前对该地址有成功的lr预留 且 未被其他处理器干扰的情况下，才能成功写入\n- 具有返回值：\n  - 如果失败：返回0\n  - 如果成功返回非0\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250618112626555.png?imageSlim\"/>\n\n#### lr与sc的原子性操作应用\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616164223737.png?imageSlim\"/>\n\n> Note：**Only Regitser-Register instruction can be insert between LL & SC**\n\n#### 自旋锁\n\nspin lock指的是程序陷入了不断尝试获得lock的loop\n\n**一个简单的版本**\n\n```assembly\nli R2, #1\nlockit: exch R2, 0(R1)\nbnez R2, lockit\n```\n\n- R1所对应的内存地址保存了锁是否为空闲的信息，0 表示 free， 1表示被占用\n- 上述版本将1加载到R2，并不断尝试将它的值与R1对应的内存地址的值交换\n- 如果锁正在被占用，R2还是1，因此会不断陷入lockit的循环，直到某次的loop成功加锁（R2被交换为0），然后继续执行\n\n上述的问题是，不断尝试 `exch`涉及到了多次的读写操作，会带来总线上的invalidate信号的traffic\n\n因此，我们考虑采取下面的优化方案\n\n**优化的版本**\n\n```assembly\nlockit: ld x2,0(x1)         ; load of lock\n        bnez x2,lockit      ; not available-spin\n        addi x2,R0,#1       ; load locked value\n        EXCH x2,0(x1)       ; swap\n        bnez x2,lockit      ; branch if lock wasn’t 0\n```\n\n> 相比于简单版本的反复exch，优化之后的loop里只涉及到了读操作，因此对程序的表现更加友好\n\n使用 `exch`的指令由于读写合一，操作不灵活，我们考虑将读写利用同样是原子性指令的 `ll`和 `sc`来分离，实现等价的效果：\n\n**采取LL和SC实现：**\n\n```assembly\nlockit: lr x2,0(x1)         ; load reserved\n        bnez x2,lockit      ; not available-spin\n        addi x2,R0,#1       ; locked value\n        sc x2,0(x1)         ; store （成功写入/加锁 返回0）\n        bnez x2,lockit      ; branch if store fails\n```\n\n> 因为lr、sc和exch一样，也是原子性操作，确保了“检查锁是否可以用”和“设置锁”不会被其他线程打断；\n>\n> 不同的是，exch通过交换之后的寄存器值来判断是否加锁成功，而sc利用自身操作的返回值来判断是否成功加锁\n\n#### 自旋锁的性能分析\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616164043201.png?imageSlim\"/>\n\n> **TODO**\n\n### Snoopy\n\n两种转换规则：\n\n- 一定要转换成 S 状态再read（除了自己read自己的hit）；\n- 一定要转换成 E / M 状态再write\n- P1写入X的新值之后，需要确保其他处理器知道变化，分为两种策略：\n\n  - ***Write Invalidate***：将其他P的副本置为无效（搭配**写穿透**）\n    - 但是也适合写回策略搭配，注意dirty位的使用\n  - ***Write Broadcast***：将其他的副本直接写入新值（搭配**写回策略**）\n\n一个简单的例子；\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250524132310613.png?imageSlim\"/>\n\n- 注意此时bus信号的桥梁作用：\n  - 发生了read miss之后，首先将P2的对应cache line设置为share状态（此时还不知道值）\n  - 总线信号传到P1之后，P1的对应状态修改为share，并且发起了write back的信号，将A1的值写入mem\n  - 之后，总线信号read data让P2读取了mem中的值，完成了 `P2：read A1`的操作\n\n每一个处理器/线程对每一个block具有自己的状态\n\n#### 状态机\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250607203010638.png?imageSlim\"/>\n\n> 处于E状态时，如果收到了bus上的read-miss信号，会将该P改为S状态\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605104010432.png?imageSlim\"/>\n\n### Directory\n\n- ***local node***  发起请求的处理器\n- ***home node***  对应地址所在的处理器\n- ***remote node*** 拥有这个副本的处理器\n\n在homeNode中存储一个block在不同处理器/线程中的状态\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605105815979.png?imageSlim\"/>\n\n> 其中的 `fetch/invalidate`发生在：local发生了write miss，并且home中对应的block为E状态，向独占该block的P发送～信号，确保将仅在对应P中的数据读取再非法化（内存中数据过时）\n>\n> - 读取之后的数据先存放在了home中，然后再由home发送data reply给local（一般来说local写入了新值，并不需要这个旧值；但是如果写入的新值是 X+1，就必须获得正确的旧值了，因此还是有必要的）\n\n#### write miss\n\n初始：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605110226409.png?imageSlim\"/>\n\n写入：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605110631594.png?imageSlim\"/>\n\n#### `fetch/invalidate`\n\n初始：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605111010835.png?imageSlim\"/>\n\n过程：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605111257118.png?imageSlim\"/>\n\n> 如果目录节点中记录的状态是E，就向对应的处理器发送 `fetch`的信号\n\n#### 根据cache填写目录\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605113001427.png?imageSlim\"/>\n\n对应的简单例子：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605113359800.png?imageSlim\"/>\n\n另一个语言描述的例子（答案）：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250611164909272.png?imageSlim\"/>\n\n> 22-23回忆卷的最后一题\n\n#### cache失效问题\n\nP将自己cache中的block kick out时，需要将对应的home中的sharer中将P踢出序列，如果原本仅有P本身，就需要将对应的状态改为U，表示uncached.\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605114629798.png?imageSlim\"/>\n\n### MESI\n\n> 如果没有特别说明，就当做MSI\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250606191507180.png?imageSlim\"/>\n\n状态：\n\n* Invalid: 缓存块无效，不能被使用；\n* Shared: 缓存块未被修改，且可能存在于多个缓存中，内存中的数据是最新的；\n* Modified: 缓存行已被修改，且该缓存行是唯一的有效副本，内存中的数据已过时；\n* Exclusive：缓存块未被修改，**且是唯一的有效副本**，内存中的数据是最新的。\n\nE的存在是为了**优化写入性能和减少总线流量**，具体来说，我们用E来区分某个缓存块只被一个处理器读取且还没有写入的状态，是为了在此后该处理器写入该缓存时，不需要在总线上发送Invalidate的信号（因为没有共享缓存的其他处理器）\n\n> 如果是传统的MSI，即使share的成员只有一个，还是要发送信号到总线，被其他的处理器接收并处理，这带来了额外的时间开销\n\n### Consistency\n\n#### Sequential consistency\n\n特征：**Delay next memory access until the previous one is completed.**\n\n> 对指令的执行有着严格的顺序要求，虽然保证了正确性，但是延时较高\n\n- 相同处理器内部的内存访问是**有序**的\n- 不同处理器的内存访问是交错的\n\n课本的例子：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250611150023807.png?imageSlim\"/>\n\n简单的计算：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605131113080.png?imageSlim\"/>\n\n#### Relaxed Models\n\n为了降低SC带来的延时，我们采取 Synchronized program 来让指令的读写在乱序执行中保持与串行执行等价的效果，以下是不同等级的model：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605133510558.png?imageSlim\"/>\n\n> 下方的顺序表示该模型在前者的基础上去除了对应的顺序约束，但是要求访问的对象不是相同地址的\n>\n> 比如在TSO中， `C= `作为写操作，允许和 `= D `的读操作一起执行，解除了W-R的约束\n\n# jxh老师的PPT\n\n> 针对核心的补充摘录\n\n**Tomasulo的三个主要优点**\n\n- **The distribution of the hazard detection logic**\n  - 保留站和CDB\n  - 如果多条指令在等待一个结果 或者 一条指令等待多个操作数，可以**同时**通过CDB的广播读取（避免了通过寄存器读取）\n- **The elimination of stalls for WAW and WAR hazards**\n- **overlap iterations of loops**：循环迭代的重叠\n  - 相当于从HW（硬件）上实现了循环展开\n\n> 计分板无法实现 overlap iterations of loops\n\n**为什么Tomasulo可以实现循环迭代的重叠？**\n\n- 寄存器重命名\n- 保留站允许指令的提前发射以及旧值的存储（避免了**WAR**冲突）\n- Tomasulo building data flow dependency graph on the fly.\n\n**计分板阶段的回顾**\n\n- ISSUE：当下面的条件同时满足时issue：\n  - 具有可用的功能单元\n  - 没有与正在执行的指令具有相同的目标寄存器\n  - 此时避免了结构冲突和WAW冲突\n- RO：当两个操作数都准备好了的时候才会读取\n  - 避免了RAW的冲突\n- EX\n- WB：此时检测WAR冲突并在必要的时候stall\n\n#### 计分板和Tomasulo的对比\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250615163546156.png?imageSlim\"/>\n\n> Tomasulo消除了WAW与WAR冲突；没有显式寄存器重命名的计分板无法消除～\n>\n> **OOO**：out of order，此处指乱序完成\n\n#### CDB的额外信息\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250615164708448.png?imageSlim\"/>\n\n> TODO： 为什么需要source address？\n\n#### 使得CPI < 1的几种方法\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616140413205.png?imageSlim\"/>\n\n> 向量处理；超标量；VLIW\n\n#### 超标量\n\n使用基于Tomasulo的算法，可以实现乱序执行的动态调度\n\n**Issue Packet：**\n\n- 从fetch unit获得的指令组合，可以在一个周期内同时发射\n- Issue阶段也被流水线化：\n  - 第一个阶段检查当前packet可以一次性发射的指令数（不存在数据冲突）；\n  - 第二个阶段检查上一步选中的指令是否与已经发射的指令存在冲突\n\n> 对于N-issue的多发射，每个cc实际发射 0-N条指令\n\n**多发射存在的问题**\n\n- 必须在一个cc内多次重命名相同的寄存器\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616141407666.png?imageSlim\"/>\n\n- 拓宽总线\n\n**两种实现多发射的方法**\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616141739907.png?imageSlim\"/>\n\n- pipeline\n- widen issue logic\n\n#### 双发射的例子\n\n**不带投机执行的双发射：**\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616142306653.png?imageSlim\"/>\n\n**带有投机执行的双发射：**\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616142656105.png?imageSlim\"/>\n\n#### WB与IS的并行执行\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616144548699.png?imageSlim\"/>\n\n> 然而事实证明很少会考虑这种情况？除非题目明确说明或者给出充分的暗示，否则认为还是在下一个cc才能issue到原本冲突的FU\n\n#### Global code motion\n\n全局代码调度：通过跨分支移动指令来有效地调度带有内部控制流的循环体。\n\n#### DRAM与SRAM\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616145823142.png?imageSlim\"/>\n\n# 大题整理\n\n## CH1\n\n> **TODO**\n\n## CH2\n\n> cache相关的计算题参考知识点梳理的ch2-cache performance\n\n#### Global / Local Miss Rate\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250618154738643.png?imageSlim\"/>\n\n课本的例题：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250618154928490.png?imageSlim\"/>\n\n分析：\n\n- L1的global和local缺失率相等，都是 40 / 1000\n- L2的global缺失率为 20 / 1000， local缺失率为 20 / 40\n\nAMAT：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250618155451648.png?imageSlim\"/>\n\n**Average stall cycles per instruction**：**( AMAT - hit time ) x MPI** = (5.4-1) x 1.5 = 6.6 cc\n\n#### 是否满足时间和空间局部性\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250618153621835.png?imageSlim\"/>\n\n分析：根据给出的cache容量、组关联等信息计算block的大小，然后比较block大小是不是大于系统的字长（如果小于就不满足空间局部性）\n\n此处计算得到block大小为 8KB / 4K = 2B  < 4B\n\n> 似乎有cache就一定满足时间局部性？如果按照byte访问的话，能够存储指定的word就可以？\n\n#### cache与tag\n\n给定物理地址的宽度 ，cache的容量和组关联度$k$决定了tag的位数：\n\n假设block是$2^m$字节的大小，cache的容量是$2^n$B, 为直接映射，据此计算得到：\n\n- byte offset bit = $m$\n- index bit = $\\log_22^{n-m} = n-m$\n- 所以tag的位数是：地址位数N - n\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250611154233564.png?imageSlim\"/>\n\n> 虚拟页的容量和虚拟地址的位宽在此为干扰信息；\n>\n> 如果不是直接映射，就先计算一个set的容量，然后据此计算index\n\n假设组关联度是 $k = 2^i$ 那么：\n\n- index bit = $n-m-i$\n- 对应的tag位数 = N - n + i\n\n**由此可见，题目中没有给出的block的容量恰好是不需要的计算量**\n\n**e.g. 加入组关联**：一个8-way的例子\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250611154802019.png?imageSlim\"/>\n\n## CH3\n\n> 建议参考老师的ppt推一遍计分板和Tomasulo的填表，然后记住什么时候要推迟一个cc、什么时候可以直接执行\n\n#### 延迟一个cc的情况\n\n- 计分板和Tomasulo存在结构冲突时，上一条指令WB之后的一个cc下一条指令Issue\n- 计分板和Tomasulo的指令需要读取待写回的数据时，上一条指令WB之后的下一个周期分别进入RO / EX 阶段\n\n但是Tomasulo的issue队列里可以**直接在上一条结束的cc接替**执行下一条的EX：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250618000138713.png?imageSlim\"/>\n\n## CH4\n\n> rename 、 string strip和循环级别并行部分的例题请参考知识点梳理部分\n\n#### convoy与chain\n\n> 详细内容可以参考英文第六版的p291\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250618145520392.png?imageSlim\"/>\n\n参考解答：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250618150404833.png?imageSlim\"/>\n\n> 此处忽略了向量机的set-up等时间\n\n下面是回忆卷：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250606095649137.png?imageSlim\"/>\n\n> 参考答案：个人观点\n\n第一问：\n\n- 指令的执行时间分为：取指+启动+向量长度， e.g. 第一条vld为 1+4+64 = 69\n- 但是后续的指令的取指可以在前一条指令执行期间完成，因此此处的vadd可以在cc=69开始执行：69 + 7+64 = 140cc\n- 后续指令同理分析\n- ....\n\n第二问：3（vsd与vld存在结构冲突）\n\n第三问：\n\n- 估计：3x64 + 3 + 7 + 10 + 4\n- 考虑了取指时间以及各个convoy内部最长的启动时间\n\n#### blocked 与 unblocked\n\nHere is a blocked and unblocked version of C code to perform a matrix operation on a 256x256 matrix:\n\n```c\nfor (int i = 0; i < 1024; i += 16) {\n    for (int j = 0; j < 1024; j += 16) {\n        for (int m = 0; m < 16; m++) {\n            for (int n = 0; n < 16; n++) {\n                output[j + n][i + m] = input[i + m][j + n];\n            }\n        }\n    }\n}\n```\n\n```c\nfor (int i = 0; i < 1024; i++) {\n    for (int j = 0; j < 1024; j++) {\n        output[j][i] = input[i][j];\n    }\n}\n```\n\nSuppose the size of the element in the matrix is 32 bits and we execute the codes above on a processor with a 2KB fully associative data cache using the least recently used (LRU) replacement strategy. The cache block size is 64 bytes. What is the relative number of cache misses when running the blocked and unblocked version?\n\nA. 2 : 17\n\nB. 1 : 8\n\nC. 1 : 17\n\nD. 1 : 16\n\n> A\n>\n> **SOLUTION：**\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250611150700645.png?imageSlim\"/>\n\n> 之所以说blocked version一轮循环只会发生32次miss，是因为计算得到这个cache正好有32个cache line，因此在内层循环所需的32个block都只需要读取一次；\n>\n> 因此，我们首先根据题目给出的cache容量和block信息，算出index；然后结合元素的大小计算内层循环需要的block数量，检查是否可以被cache存放\n\n## CH 5\n\n> **TODO: 感觉记一下例题就差不多了（知识点梳理部分）**\n\n# 小贴士\n\n- **precise exceptions**：\n  - 定义：On handling exceptions, if the pipeline can be stopped so that the instruction issued before the faulting instruction complete and those after it can be restarted\n- **计分板的WAW冲突检测**：Scoreboard Algorithm issue a instruction when no other active instruction has the same destination register to avoid WAW hazard.\n- 写更新也就是写广播，与写失效构成了常用的处理缓存不一致性问题的策略\n\n# 补充\n\n#### 常见的CSR\n\n常见的CSR有mstatus,mtvec,mepc,mcause,mtval。这些寄存器都属于M mode：\n\n- mstatus：机器模式下的状态寄存器，包含开关中断的MIE、保存进入异常之前特权模式的MPP等\n- mtvec：发生异常时跳转的PC入口；\n- mepc：发生异常时，指向导致异常的指令；发生**中断时**，指向**中断处理后应该恢复的位置**；\n- mcause：根据异常来源设置\n  - 如果是访问存储器造成的异常，就将其地址更新到mtval；\n  - 如果是非法指令导致的异常，将指令编码更新到mtval寄存器中\n- mtval：反映引起当前异常的存储器访问地址或者指令编码\n\n#### VIPT\n\n> Virtual Indexed and Physically Tagged Cache\n\n也就是从VA中提取低位作为实际物理地址对应的index，用VA的高位在TLB中查询得到物理地址，然后用物理地址中的tag进行比较。这两个步骤分别称为 **缓存查找**和**地址翻译** ，可并行执行\n\n这样做是为了消除**同义词**问题：\n\n- 如果采取完全的虚拟地址寻址VIVT，一个物理地址可能对应不同的虚拟地址，从而导致其具有了多份的拷贝，带来了数据的不一致性的问题\n\n#### 写失效的冲突写\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250617225541859.png?imageSlim\"/>\n\n#### 带有投机的store\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250617233055511.png?imageSlim\"/>\n\n由于带有投机的Tomasulo在commit之前都不会实际更新寄存器或者mem，所以 `store`指令在此之前不会实际向内存中写入数据，那么我们可以在其地址相关寄存器准备好的时候就进入Exe阶段（地址计算）\n\n> 实际上，不带投机的store也是这样（参见下面“多发射的例子\"中的标注）\n\n相应的，当 `store`指令结束write result的时候如果此时还没有准备好源寄存器的值，就会在ROB中记录（对应指令的ROB编号），并在对应指令完成后准备好commit\n\n> 由于每条指令都只在ROB有空位的时候issue，因此我们用**ROB编号**来标记每一条指令（用于数据冲突时等情况）\n\n#### 多发射的例子\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250618140228378.png?imageSlim\"/>\n\n# 作业复盘\n\n## HW1\n\n- 资源占比等价于所需的时间，可并行化程度意味着采取多核处理的时候，有多少的比例可以参与优化；\n- 利用资源占比分配核数，应当向下取整，避免整体的核数超出总核数\n- 计算整体加速比的时候，先分别计算对应的时间，然后利用并行前后的总时间来计算加速比\n  - 由此计算得出的总时间，可以用于重新分配所需的计算资源\n\n## HW2\n\n#### 功耗计算\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250608185645239.png?imageSlim\"/>\n\nans：\n\n<img src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250608185936979.png?imageSlim\"/>\n\n> 注意分别计算静态功耗和访问功耗，前者需要先计算对应的时间\n\n## HW3\n\n- B.5 涉及cache、AMAT和CPI的计算，可以参考作业的解答\n\n> 其他没有什么问题\n\n## HW4\n\n- **GFLOP**：以G为单位，执行的浮点数操作\n\n> 其他没有什么问题\n\n# TODO\n\n#### 硬件原语部分\n\n> **TODO**：5.3ppt的18/40开始没有记录（学无余力）\n","slug":"课程笔记/arch复习","published":1,"updated":"2025-06-25T07:00:55.635Z","comments":1,"layout":"post","photos":[],"_id":"cmcbm7pqj002pe2qg1eofadug","content":"<h1 id=\"知识点梳理\"><a href=\"#知识点梳理\" class=\"headerlink\" title=\"知识点梳理\"></a>知识点梳理</h1><h2 id=\"CH1\"><a href=\"#CH1\" class=\"headerlink\" title=\"CH1\"></a>CH1</h2><h4 id=\"可靠性\"><a href=\"#可靠性\" class=\"headerlink\" title=\"可靠性\"></a>可靠性</h4><ul>\n<li><strong>availability</strong> &#x3D; MTTF &#x2F; MTBF</li>\n<li><strong>FIT</strong>：faliure in time &#x3D; 1 &#x2F; MTTF</li>\n</ul>\n<p>计算系统整体的MTTF时，我们可以优先计算FIT（各个组件的rate相加），然后求倒数</p>\n<h4 id=\"MIPS\"><a href=\"#MIPS\" class=\"headerlink\" title=\"MIPS\"></a>MIPS</h4><p>millions of instructions per second</p>\n<h4 id=\"Performance\"><a href=\"#Performance\" class=\"headerlink\" title=\"Performance\"></a>Performance</h4><p>performance是执行时间的倒数</p>\n<h4 id=\"不同的性能比较策略\"><a href=\"#不同的性能比较策略\" class=\"headerlink\" title=\"不同的性能比较策略\"></a>不同的性能比较策略</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250607173816894.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>几何平均就是将各个程序的执行时间相乘然后开根号，作为平均的执行时间；</p>\n<p><strong>depends on which machine is the reference</strong>：在不清楚加权算法中的权值情况时，采取参照的方法计算平均值，类似于加权的效果，但是结果与选择的参照对象相关，因此说～</p>\n</blockquote>\n<p>几何平均：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250608152559487.png?imageSlim\"\n                     \n                >\n\n<h3 id=\"流水线相关\"><a href=\"#流水线相关\" class=\"headerlink\" title=\"流水线相关\"></a>流水线相关</h3><p>可以一定程度上允许结构冲突：</p>\n<ul>\n<li>为了减少cost和减少单元的latency</li>\n</ul>\n<h4 id=\"throughput\"><a href=\"#throughput\" class=\"headerlink\" title=\"throughput\"></a>throughput</h4><p>The throughput of a CPU pipeline is <strong>the number of instructions completed per second</strong></p>\n<blockquote>\n<p>CPU流水线的吞吐量指的就是每秒执行的指令数</p>\n</blockquote>\n<h4 id=\"how-to-stall\"><a href=\"#how-to-stall\" class=\"headerlink\" title=\"how to stall\"></a>how to stall</h4><ol>\n<li>设计stall控制单元，检测是否存在冲突需要stall</li>\n<li>如果需要stall，就disable writing PC and IF&#x2F;ID latch，并且插入一个nop指令到ID&#x2F;EX，禁止写回寄存器和写入MEM</li>\n</ol>\n<h4 id=\"double-bump\"><a href=\"#double-bump\" class=\"headerlink\" title=\"double bump\"></a>double bump</h4><p>如果在一个cc内允许 write-then-read，就可以只插入两条nop：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250528203331360.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"跳转指令\"><a href=\"#跳转指令\" class=\"headerlink\" title=\"跳转指令\"></a>跳转指令</h4><p>∆ &#x3D; 目标地址 - 跳转指令的<strong>下一条指令</strong>的地址！</p>\n<blockquote>\n<p>因为在取出指令后PC+4就生效了；</p>\n<p>与汇编指令具有异曲同工之妙</p>\n</blockquote>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined2c0c4d308a58fd80d85c816e0487b11a.png?imageSlim\"\n                     \n                >\n\n<p>同时注意，是在MEM阶段而非EX阶段写回PC寄存器，在跳转指令的WB阶段开始取址</p>\n<blockquote>\n<p>总共stall了3个cc</p>\n</blockquote>\n<p>对应的简单问题：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250530204714053.png?imageSlim\"\n                     \n                >\n\n<p>为了解决上述的stall损失，我们可以考虑在EX阶段前递，或者在ID阶段增加硬件单元。</p>\n<p>另外的可行办法是<strong>延迟槽</strong>技术：</p>\n<ul>\n<li>因为跳转指令在ID阶段才确定，此时IF已经取址了。我们将一定会执行的指令（无论跳转是否发生）放置在条件跳转指令的下一条，避免这条(组)指令的浪费</li>\n<li>延迟槽中的指令应当由编译器选择合适的指令(组)</li>\n</ul>\n<h4 id=\"移位寄存器\"><a href=\"#移位寄存器\" class=\"headerlink\" title=\"移位寄存器\"></a>移位寄存器</h4><p>为了解决写端口的冲突，直接增加写端口是不经济的。</p>\n<p>我们考虑一种检测矛盾并实现序列化写操作的技术——使用<strong>移位寄存器：</strong></p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250530210124307.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>在ID阶段分析指令之后，如果与已经发射（此处应该指的是应该开始执行？）的指令存在写端口的冲突（利用移位寄存器判断），就stall这条指令</p>\n</blockquote>\n<p>如果指令需要写回，利用一个移位寄存器，设置与当前指令将要写回所需的cc相等的值，作为移位寄存器位数的1.每个cc将对应的移位寄存器右移。</p>\n<h4 id=\"数据冲突\"><a href=\"#数据冲突\" class=\"headerlink\" title=\"数据冲突\"></a>数据冲突</h4><ul>\n<li><em><strong>RAW</strong></em>：<em><strong>true</strong></em> dependance，因为无法通过寄存器重命名或者指令重排来优化</li>\n<li>WAW：output dependance</li>\n<li>WAR：<em><strong>anti</strong></em>-dependance，因为和RAW是相反的</li>\n</ul>\n<h2 id=\"CH2-存储器层级\"><a href=\"#CH2-存储器层级\" class=\"headerlink\" title=\"CH2 存储器层级\"></a>CH2 存储器层级</h2><h4 id=\"block-identification\"><a href=\"#block-identification\" class=\"headerlink\" title=\"block identification\"></a>block identification</h4><ul>\n<li>index 用于选中cache的set &#x2F; cache line<ul>\n<li>index bits &#x3D; $\\log_2(\\text {size of set &#x2F; cache line})$</li>\n</ul>\n</li>\n<li>offset：用于选择block内部的data<ul>\n<li>offset size &#x3D; $\\log_2(\\text {size of block})$</li>\n</ul>\n</li>\n<li>tag：用于比较block是否匹配<ul>\n<li>bits: 地址size - index size - offset size</li>\n</ul>\n</li>\n</ul>\n<p>一个简单的直接映射的计算例子：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250530213007222.png?imageSlim\"\n                     \n                >\n\n<ul>\n<li>地址总位数可能由<em><strong>memory size</strong></em>间接给出：e.g. Memory-size &#x3D; 4G &#x3D; $2^{32}$， 得到一共有32位</li>\n</ul>\n<h4 id=\"write-strategy\"><a href=\"#write-strategy\" class=\"headerlink\" title=\"write strategy\"></a>write strategy</h4><p>一般来说：</p>\n<ul>\n<li>写回策略 + write allocate</li>\n<li>写穿策略 + write around：发生write miss的时候，只会写入到内存</li>\n</ul>\n<p>一个简单的例子：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250531095731123.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>当发生了read miss的时候，将mem[200]加载到cache，下一次的写将命中</p>\n</blockquote>\n<h3 id=\"Cache-performance\"><a href=\"#Cache-performance\" class=\"headerlink\" title=\"Cache performance\"></a>Cache performance</h3><h4 id=\"Memory-stall\"><a href=\"#Memory-stall\" class=\"headerlink\" title=\"Memory stall\"></a>Memory stall</h4><ul>\n<li><p>$$<br>CPU \\ time  &#x3D; IC \\times (CPI_{exeution} + \\frac{Misses}{Ins.} \\times Miss \\ penalty) \\times clock \\ cycle \\ itme<br>$$</p>\n<blockquote>\n<p>$\\frac{Misses}{Ins.} &#x3D; Miss\\ rate \\times MPI$</p>\n</blockquote>\n</li>\n<li><p><em><strong>CPU Execution time</strong></em> &#x3D; (CPU clock cycles + <strong>Memory stall cycles</strong>) x Clock cycle time</p>\n<ul>\n<li>其中后者可以如此计算： $ IC \\times MPI \\times MissRate \\times Miss\\ penalty$</li>\n<li>注意判断是否需要将data和ins.的mem区分</li>\n</ul>\n<p>一个简单的例子：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250531102931121.png?imageSlim\"\n                     \n                ></li>\n</ul>\n<h4 id=\"AMAT\"><a href=\"#AMAT\" class=\"headerlink\" title=\"AMAT\"></a>AMAT</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefinedimage-20250310110142371.png?imageSlim\"\n                     \n                >\n\n<p>AMAT也就是: <strong>Average memory access time</strong>.</p>\n<p>所以可以用来计算 <em><strong>real CPI</strong></em>&#x3D; Ideal CPI + <strong>Average stalls per instruction</strong>  , 其中后者根据:</p>\n<p>$$<br>(AMAT - HitTime) \\times  \\ \\text{access times &#x2F; ins.}<br>$$</p>\n<p>计算得到,  且 <code>HitTime</code>为理想的CPI, <code>access times</code>是每条指令平均访问memory的次数 &#x3D; MPI , e.g. 有30%的数据访存指令, 对应了<strong>1.3</strong>.（考虑指令cache的1 on unified cache）</p>\n<p>一个简单的例子——<strong>AMAT按照data和ins加权计算：</strong></p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250531102701013.png?imageSlim\"\n                     \n                >\n\n<p>补充：</p>\n<ul>\n<li><strong>MPI</strong>(memory reference per instruction)＝1.5 , 也就是指令对mem的平均访问次数.</li>\n<li>注意AMAT的计算涉及了<em><strong>hit time</strong></em>，unified cache的hit time可能比split cache的大</li>\n<li>无特别说明的情况下，hit time &#x3D; Ideal CPI</li>\n</ul>\n<h4 id=\"Split-Unified\"><a href=\"#Split-Unified\" class=\"headerlink\" title=\"Split &amp; Unified\"></a>Split &amp; Unified</h4><ul>\n<li>miss rate的计算：</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250531105216214.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>表格中给出的数据是miss相关的估计，实际上的MPI可能由题目进一步给出，因为不同的程序对应的访存比例可能不同，根据实际情况计算</p>\n</blockquote>\n<h3 id=\"Improve-cache-performance\"><a href=\"#Improve-cache-performance\" class=\"headerlink\" title=\"Improve cache performance\"></a>Improve cache performance</h3><h4 id=\"减少hit时间-4’\"><a href=\"#减少hit时间-4’\" class=\"headerlink\" title=\"减少hit时间 4’\"></a>减少hit时间 4’</h4><ul>\n<li><p><em><strong>small and simple caches</strong></em></p>\n<ul>\n<li>更少的硬件支持；直接映射的速度更快</li>\n</ul>\n</li>\n<li><p><em><strong>avoiding address translation</strong></em></p>\n<ul>\n<li>使用TLB作为page table的cache，Virtual indexed, Physically tagged</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250531161036099.png?imageSlim\"\n                     \n                ></li>\n<li><p><em><strong>way prediction</strong></em></p>\n<ul>\n<li>在cache中采取extra bits预测way，如果预测正确只需要1cc；否则需要额外的cc改变预测位</li>\n</ul>\n</li>\n<li><p><em><strong>trace caches</strong></em></p>\n<ul>\n<li>trace：动态指令序列，主要为 <code>branch</code>设计</li>\n<li>将branch在内的指令打包放入trace cache，由于大部分时间，分支跳转后要指令的指令序列是相同的，因此我们可以直接从trace cache中取用</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"增加cache的bandwidth-3‘\"><a href=\"#增加cache的bandwidth-3‘\" class=\"headerlink\" title=\"增加cache的bandwidth 3‘\"></a>增加cache的bandwidth 3‘</h4><ul>\n<li><strong>pipelined cache access</strong><ul>\n<li>顾名思义，将cache的访问流水线化</li>\n</ul>\n</li>\n<li><strong>multibanked caches</strong><ul>\n<li>将cache划分为几个不同的区域，从而允许同时的访问</li>\n</ul>\n</li>\n<li><strong>non-blocking caches</strong><ul>\n<li>针对 hit under miss 的情况设计，允许CPU在miss之后继续执行指令，避免陷入阻塞block</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"减少miss-penalty-4’\"><a href=\"#减少miss-penalty-4’\" class=\"headerlink\" title=\"减少miss penalty 4’\"></a>减少miss penalty 4’</h4><ul>\n<li><strong>multilevel caches</strong><ul>\n<li>多级cache带来的概念：local miss rate（当前level的缺失率） 与 global miss rate（与上层的cache相关）</li>\n</ul>\n</li>\n<li><strong>critical word first</strong><ul>\n<li>在block中找到需要的word后就快速启动，后续指令的执行和block的剩余内容的搬运并行执行，因此通常用于block的size较大的情况</li>\n<li>又称为 <strong>wrapped fetch</strong> 与 <strong>requested word first</strong></li>\n</ul>\n</li>\n<li><strong>read miss prior to writes</strong><ul>\n<li>在<strong>写回策略</strong>下, 如果发生了 <code>read miss</code>, 需要从主存中读取对应的块并写入 <code>cache</code>. 可以直接取出数据并开始执行指令, 将待写的数据放入 <code>buffer</code>.</li>\n</ul>\n</li>\n<li><strong>merging write buffers</strong><ul>\n<li>多次的写合并到一次的操作， 特别是写的地址是相同的时候，显著降低了penalty</li>\n</ul>\n</li>\n<li><strong>victim caches</strong><ul>\n<li>在相邻的cache层级之间增设牺牲缓存</li>\n<li>发生一次 <code>miss</code>之后并不直接将其踢出 <code>cache</code>, 而是放入~</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"降低miss-rate-4’\"><a href=\"#降低miss-rate-4’\" class=\"headerlink\" title=\"降低miss rate 4’\"></a>降低miss rate 4’</h4><blockquote>\n<p>控制变量分析</p>\n</blockquote>\n<ul>\n<li><strong>larger block size</strong><ul>\n<li>降低了强制miss rate</li>\n<li>但是增大了miss penalty，以及发生冲突miss的可能（block的数量减少）</li>\n</ul>\n</li>\n<li><strong>large cache size</strong><ul>\n<li><strong>经验法则</strong>: 翻倍的cache容量, 带来降低25%的缺失率.</li>\n<li>降低了容量miss</li>\n<li>但是增大了hit time和cost</li>\n</ul>\n</li>\n<li><strong>higher associativity</strong><ul>\n<li><strong>经验法则</strong>: 一个大小为N的直接映射缓存 , 与一个大小为<strong>N&#x2F;2的2路组相联</strong> 缓存具有<strong>相同的未命中率</strong>.</li>\n<li>8-way比较理想。更大的组关联度导致比较时间的增加，从而可能导致时钟周期的增大&#x2F;周期数的增加</li>\n</ul>\n</li>\n<li><strong>compiler optimization</strong><ul>\n<li>在不改变硬件的情况下, 使用编译器重排指令的序列</li>\n<li>数组合并</li>\n<li>循环交换：改变循环的嵌套顺序</li>\n<li>循环融合</li>\n<li>blocking策略</li>\n</ul>\n</li>\n<li><strong>way prediction and Pseudo-Associative Cache</strong><ul>\n<li>路预测的技术与之前提到的相同，用一个预测位来预测</li>\n<li>伪关联缓存：divide cache，然后在miss之后查看当前cache的剩余部分<ul>\n<li>如果此时命中，称为 <strong>pseudo-hit</strong>，时间介于hit 与  miss penalty之间</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>3C回顾：</strong></p>\n<ul>\n<li><strong>Compulsory</strong>: 冷启动，又称为强制miss;</li>\n<li><strong>Capacity</strong>:  缓存的空间不足导致的 miss. 发生在<strong>全关联</strong>当中.</li>\n<li><strong>Conflict（collision）</strong>:  set associative or direct mapped当中发生.</li>\n</ul>\n<blockquote>\n<p>主要关注冲突miss和强制miss的优化</p>\n</blockquote>\n<h4 id=\"通过流水线降低miss-penalty和rate-2’\"><a href=\"#通过流水线降低miss-penalty和rate-2’\" class=\"headerlink\" title=\"通过流水线降低miss penalty和rate 2’\"></a>通过流水线降低miss penalty和rate 2’</h4><ul>\n<li><strong>hardware prefetching</strong><ul>\n<li>使CPU预先取用一部分的数据到<strong>特殊的缓存块</strong>当中, 从而降低了 冷启动的影响.</li>\n<li>预取的结果放入 <code>stream buffer</code>，</li>\n</ul>\n</li>\n<li><strong>compiler prefetching</strong><ul>\n<li>由编译器插入prefetch ins.来获取需要的数据</li>\n<li>根据预取数据存放到<strong>寄存器</strong>还是cache，分为<strong>binding</strong> prefetch 和 non-binding prefetch</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"CH3\"><a href=\"#CH3\" class=\"headerlink\" title=\"CH3\"></a>CH3</h2><h3 id=\"scoreboard\"><a href=\"#scoreboard\" class=\"headerlink\" title=\"scoreboard\"></a>scoreboard</h3><blockquote>\n<p>看一眼</p>\n</blockquote>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250607222728995.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"流水线的阶段\"><a href=\"#流水线的阶段\" class=\"headerlink\" title=\"流水线的阶段\"></a>流水线的阶段</h4><ol>\n<li>IF: 取指令</li>\n<li>IS: 以下条件同时满足时允许发射：<ol>\n<li>FU空闲——<strong>避免结构冲突</strong>；</li>\n<li>正在执行的指令，没有一条要写回的Rd与当前指令相同——<strong>避免了WAW冲突</strong></li>\n</ol>\n</li>\n<li>RO: 监视数据冲突，<strong>当且仅当两个源寄存器都准备好了</strong>，才读取</li>\n<li>EX: 在不同的FU中执行(MEM涵盖在整数的FU当中)</li>\n<li>WB：更新状态表之后的下一个cc可以RO</li>\n</ol>\n<h4 id=\"表的设计\"><a href=\"#表的设计\" class=\"headerlink\" title=\"表的设计\"></a>表的设计</h4><ul>\n<li>指令状态表 <strong>Instruction Status Table</strong><ul>\n<li>记录指令的状态，在哪个阶段</li>\n</ul>\n</li>\n<li>功能单元状态表 <strong>Functional Unit Status Table</strong><ul>\n<li><code>busy</code>：FU 是否空闲；<code>op</code>：FU 正在执行什么操作</li>\n<li><code>Vi</code>, <code>Vj</code>, <code>Vk</code>：FU 的操作数对应着哪个寄存器</li>\n<li><code>Qj</code>, <code>Qk</code>：FU 的操作数如果没准备好，应该从哪个 FU 读取</li>\n<li><code>Rj</code>, <code>Rk</code>：操作数是否准备好，如果准备好了就填 <code>yes</code>，然后在RO阶段读取之后立即改为 <code>NO</code><ul>\n<li>率先执行的指令在WB的时候检查写入的寄存器是否在某个FU的ready-list中为 <code>YES</code>，表示等待另一个操作数准备好之后同时读取（还未读取）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>寄存器状态表 <strong>Register Status Table</strong><ul>\n<li>如果某个寄存器的值<strong>正在被某个 FU 的操作生成</strong>，填入这个操作FU的编号</li>\n<li>生成好了之后，填入实际值</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"显式重命名\"><a href=\"#显式重命名\" class=\"headerlink\" title=\"显式重命名\"></a>显式重命名</h4><p>通过设置更多的物理寄存器, 同时维护一个 <code>free list</code>.</p>\n<ul>\n<li>每一条需要写寄存器的盒指令，均分配一个新的物理寄存器；<ul>\n<li>此时还需要记录原来的map（对应的物理寄存器），这是为了在发生中断&#x2F;rollback的时候可以复原之前的映射关系；</li>\n</ul>\n</li>\n<li>当可以写回的时候，再将得到的值写回到逻辑寄存器，同时将锁定的物理寄存器 free up（加入到free list的末尾）</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602113651013.png?imageSlim\"\n                     \n                >\n\n<p>加入显式重命名之后的计分板阶段分析：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250608145256468.png?imageSlim\"\n                     \n                >\n\n<p>显式重命名消除冲突的示例：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250608145854391.png?imageSlim\"\n                     \n                >\n\n<h3 id=\"Tomasolo\"><a href=\"#Tomasolo\" class=\"headerlink\" title=\"Tomasolo\"></a>Tomasolo</h3><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602113117390.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"算法的思想\"><a href=\"#算法的思想\" class=\"headerlink\" title=\"算法的思想\"></a>算法的思想</h4><ul>\n<li>Scoreboard 算法的控制权<strong>全部在 Scoreboard 的三张表中</strong></li>\n<li>Tomasulo 算法将 FU 的控制权<strong>交给 FU 自己</strong>，每个 FU 有自己的指令缓存</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>IF</th>\n<th>IS</th>\n<th>EX</th>\n<th>WB</th>\n</tr>\n</thead>\n</table>\n<h4 id=\"硬件设计\"><a href=\"#硬件设计\" class=\"headerlink\" title=\"硬件设计\"></a>硬件设计</h4><ul>\n<li>每个 FU 有一个 buffer，叫做保留站（reservation station）<ul>\n<li><code>busy</code>：FU 是否空闲；<code>op</code>：FU 正在执行什么操作</li>\n<li><code>Vj</code>, <code>Vk</code>：两个源寄存器对应的寄存器值（注意是值）</li>\n<li><code>Qj</code>, <code>Qk</code>：两个源寄存器如果没准备好，应该从哪个 FU 读取</li>\n<li>此外还会记录 FU <code>&lt;u&gt;</code>距离完成执行这条指令的剩余周期数 <code>&lt;/u&gt;</code></li>\n</ul>\n</li>\n<li>内存也有自己的保留站，叫做 <strong>Load&#x2F;Store Buffer</strong><ul>\n<li><code>busy</code>：这个位置是否有内存读写请求</li>\n<li><code>address</code>：读写的地址</li>\n</ul>\n</li>\n<li>有一个 Register Status Table，和 Scoreboard 算法中的一样</li>\n<li>有一个 Common Data Bus（CDB），负责将结果广播到所有的保留站和寄存器<ul>\n<li>将需要的数据从总线上直接取用, 而不用通过寄存器</li>\n<li>因此传递的时候, 不仅传递值, 同时传递对应操作的编号</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"带投机的实现\"><a href=\"#带投机的实现\" class=\"headerlink\" title=\"带投机的实现\"></a>带投机的实现</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602190343569.png?imageSlim\"\n                     \n                >\n\n<p>为了在遇到分支指令的时候避免stall，我们可以采取投机的方式——假设分支指令不会跳转，继续执行之后的指令</p>\n<p>为了实现投机机制，我们需要一种在预测失败之后可以rollback的机制——新增Reorder buffer i.e. <strong>ROB</strong></p>\n<p>在之前的流程基础上，增加<strong>commit</strong>阶段，让CDB的结果先写入ROB，然后在ROB中实现顺序提交，如果头部指令是：</p>\n<ul>\n<li>普通指令：将结果写回到寄存器和内存，然后从ROB中删除</li>\n<li>分支指令，并且预测：<ul>\n<li>正确：当做普通指令，继续执行</li>\n<li>错误：清空<strong>flush</strong>此时ROB中的所有指令</li>\n</ul>\n</li>\n</ul>\n<p>Notice：</p>\n<ul>\n<li>IS阶段需要将指令同时写到ROB中，因此只有当保留站和ROB都有空余的情况下，可以issue</li>\n<li>issue之后，可以从<strong>ROB和寄存器</strong>中读取操作数到<strong>保留站</strong>中</li>\n<li>内存中的数据也可能存在RAW的冲突，因此在load的时候，需要从ROB中的store的地址相比较：</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602190716237.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>只有当我们明确知道load对应的内存地址与先前store指令的目标地址不冲突的时候，才执行load（向内存发送请求），否则stall</p>\n</blockquote>\n<h4 id=\"MEM的RAW与解决\"><a href=\"#MEM的RAW与解决\" class=\"headerlink\" title=\"MEM的RAW与解决\"></a>MEM的RAW与解决</h4><p><strong>参考的解决：</strong></p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616151543260.png?imageSlim\"\n                     \n                >\n\n<p><strong>对应的例子：</strong></p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616152019357.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>此处右下角的应该是load buffer？所以实际填写的不是存在冲突的store地址，而是load的地址；</p>\n<p>猜测是这样的流程：如果load前面的某个store的目标地址还没有计算完毕，就将load的地址栏填入store的ROB编号，然后store完成的时候带着ROB编号在load内部检查，同时让store的地址与load的实际地址进行比较？</p>\n<p>所以上图中的“填入到load参照的表格中”有问题</p>\n</blockquote>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250604144824057.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>Tomasulo也无法解决RAW冲突，这是无法解决的冲突</p>\n</blockquote>\n<h3 id=\"分支预测技术\"><a href=\"#分支预测技术\" class=\"headerlink\" title=\"分支预测技术\"></a>分支预测技术</h3><h4 id=\"分支预测表\"><a href=\"#分支预测表\" class=\"headerlink\" title=\"分支预测表\"></a>分支预测表</h4><ul>\n<li>一位预测器：分支历史表，使用PC的低位作为索引，0预测不跳转，1预测跳转</li>\n<li>两位预测器</li>\n<li>N位预测器：<ul>\n<li>使用$[0, 2^{N-1} - 1 ]$ 来预测不跳转</li>\n<li>使用$[2^{N-1}, 2^N-1]$来预测跳转</li>\n<li>如果要求计算准确率，注意是等到稳定的时候再计算（一开始的初始值并不重要）</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"相关预测器\"><a href=\"#相关预测器\" class=\"headerlink\" title=\"相关预测器\"></a>相关预测器</h4><p>当前分支指令依赖别的分支指令的结果：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined1748841625338.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"m-n预测器\"><a href=\"#m-n预测器\" class=\"headerlink\" title=\"m,n预测器\"></a>m,n预测器</h4><ul>\n<li><strong>m</strong>：使用m位的<strong>移位寄存器</strong>来储存m条指令是否跳转的结果<ul>\n<li>每当得到一条最近的指令是否跳转的时候，就进行移位并填充0表示not-taken 或者 1表示taken</li>\n</ul>\n</li>\n<li><strong>n</strong>： 使用n-bit来预测当前指令是否跳转</li>\n<li><strong>分支预测缓冲区</strong>：一个记录分支跳转历史的buffer，使用上述的m-bit global history + 指令的低位进行index，每一行都对应了指定分支指令的预测器</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602134422581.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"预测器大小的计算\"><a href=\"#预测器大小的计算\" class=\"headerlink\" title=\"预测器大小的计算\"></a>预测器大小的计算</h4><p><strong>实际的硬件组成</strong>：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602142419201.png?imageSlim\"\n                     \n                >\n\n<p><strong>对应的大小计算：</strong></p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602133757083.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"其他预测器\"><a href=\"#其他预测器\" class=\"headerlink\" title=\"其他预测器\"></a>其他预测器</h4><ul>\n<li><strong>Tournament predictor</strong>：为了避免PC低位的相同干扰, 采用 <code>global</code> 和 <code>local</code>两个预测器，但是区别于上述的预测器，此处二者采取或得到对应的预测器<ul>\n<li><em><strong>TODO</strong></em>：课件3.2的size计算</li>\n</ul>\n</li>\n<li><strong>Gshare预测器</strong>：将PC低位和历史记录进行异或, 从而进行选择</li>\n</ul>\n<h4 id=\"BTB\"><a href=\"#BTB\" class=\"headerlink\" title=\"BTB\"></a>BTB</h4><p>branch target buffer ｜ 分支目标缓冲区</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602140403962.png?imageSlim\"\n                     \n                >\n\n<ul>\n<li>记录分支指令预测的跳转地址</li>\n<li>利用指令地址index，如果在BTB中找到了就取出预测地址并执行<ul>\n<li>if branch taken，照常执行，没有stall</li>\n<li>if not taken，将fetch的ins.清空，并且将预测错误的entry从BTB中删除</li>\n</ul>\n</li>\n<li>同理，如果一开始没有在BTB中index找到对应指令的entry，并且结果显示指令需要跳转，就在BTB中加入这一对的entry用于之后的快速预测</li>\n</ul>\n<blockquote>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602140813293.png?imageSlim\"\n                     \n                ></blockquote>\n<h4 id=\"Integrated-Instruction-Fetch-Units\"><a href=\"#Integrated-Instruction-Fetch-Units\" class=\"headerlink\" title=\"Integrated Instruction Fetch Units\"></a>Integrated Instruction Fetch Units</h4><p>随着CPI降低，取址单元可能成为瓶颈</p>\n<p>因此，考虑将fetch unit与分支预测器、指令预取器以及指令的buffer相集成</p>\n<h4 id=\"Return-Address-Predictors\"><a href=\"#Return-Address-Predictors\" class=\"headerlink\" title=\"Return Address Predictors\"></a>Return Address Predictors</h4><p>预测目标地址在运行时变化的间接跳转的技术。</p>\n<p>将返回地址记录在类似于栈的buffer中，避免到内存中取返回地址，加速函数的返回</p>\n<h3 id=\"分支预测技术总结\"><a href=\"#分支预测技术总结\" class=\"headerlink\" title=\"分支预测技术总结\"></a>分支预测技术总结</h3><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602143610588.png?imageSlim\"\n                     \n                >\n\n<hr>\n<h2 id=\"CH4-DLP\"><a href=\"#CH4-DLP\" class=\"headerlink\" title=\"CH4  DLP\"></a>CH4  DLP</h2><h4 id=\"Flynn标准分类\"><a href=\"#Flynn标准分类\" class=\"headerlink\" title=\"Flynn标准分类\"></a>Flynn标准分类</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605102615189.png?imageSlim\"\n                     \n                >\n\n<ul>\n<li>LLP时的依赖检查：关注是否在同一层读取了其他层写入的结果<ul>\n<li>可以使用本层中串行计算的结果</li>\n</ul>\n</li>\n<li>reductions</li>\n</ul>\n<h4 id=\"Rename来解除依赖\"><a href=\"#Rename来解除依赖\" class=\"headerlink\" title=\"Rename来解除依赖\"></a>Rename来解除依赖</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250607202128965.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>根据题目找到对应的依赖，然后据此rename寄存器</p>\n</blockquote>\n<hr>\n<h4 id=\"Strip-Mining-条带挖掘\"><a href=\"#Strip-Mining-条带挖掘\" class=\"headerlink\" title=\"Strip Mining 条带挖掘\"></a>Strip Mining 条带挖掘</h4><p>MVL指的是向量处理器中寄存器最多的字长.</p>\n<p>当用户实际的处理长度超过MVL时, 进行取模, 首先用<strong>标量处理余数</strong>, 然后用向量计算剩余的部分.</p>\n<p>一个简单的例子：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250611151927322.png?imageSlim\"\n                     \n                >\n\n<h3 id=\"向量机的问题\"><a href=\"#向量机的问题\" class=\"headerlink\" title=\"向量机的问题\"></a>向量机的问题</h3><ul>\n<li>需要 <em>set-up</em> 时间;</li>\n<li>内存的访问带宽会影响向量机的性能</li>\n</ul>\n<h3 id=\"提升向量机的表现\"><a href=\"#提升向量机的表现\" class=\"headerlink\" title=\"提升向量机的表现\"></a>提升向量机的表现</h3><p><strong>convoy:</strong></p>\n<ul>\n<li>可以并行的向量计算指令的集合</li>\n<li>不存在结构冲突</li>\n<li>可以通过vector chain来解决RAW冲突</li>\n</ul>\n<p><strong>chime</strong>  ：the unit of time taken to execute one convey</p>\n<h4 id=\"Vector-Chaining\"><a href=\"#Vector-Chaining\" class=\"headerlink\" title=\"Vector Chaining\"></a>Vector Chaining</h4><p>解决了RAW的冲突.</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"体系结构随笔.assets/image-20250428115214201.png\"\n                      alt=\"image-20250428115214201\" style=\"zoom:50%;\" \n                >\n\n<p>实际等价于流水线的 <em>forwarding</em>. 不同的是向量机是对向量的打包计算.</p>\n<h4 id=\"Conditional-Execution\"><a href=\"#Conditional-Execution\" class=\"headerlink\" title=\"Conditional Execution\"></a>Conditional Execution</h4><p>为了处理 <em>if</em> 语句的优化.</p>\n<div class=\"code-container\" data-rel=\"C\"><figure class=\"iseeu highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>（I=<span class=\"number\">0</span>； I&lt;N; I++）</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> （A[I］！= B［I］） A［I］ -= B［I]；</span><br></pre></td></tr></table></figure></div>\n\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"体系结构随笔.assets/image-20250428115506868.png\"\n                      alt=\"image-20250428115506868\" style=\"zoom:50%;\" \n                >\n\n<p>V0就是其中的标志寄存器.</p>\n<p>根据标志位, 选择需要的位进行计算(压缩), 然后将其扩展成完整的向量.</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"体系结构随笔.assets/image-20250428115702618.png\"\n                      alt=\"image-20250428115702618\" style=\"zoom:50%;\" \n                >\n\n<h4 id=\"sparce-matrices\"><a href=\"#sparce-matrices\" class=\"headerlink\" title=\"sparce matrices\"></a>sparce matrices</h4><p>为了解决矩阵乘法中太多0的问题.</p>\n<p>涉及到 Vector <em>Scatter&#x2F;Gather</em> 的方法, 实际就是不连续的访存操作.</p>\n<p><strong>gather：从不连续的地址读取并加载到一个向量寄存器中</strong></p>\n<div class=\"code-container\" data-rel=\"C\"><figure class=\"iseeu highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;N; i++)</span><br><span class=\"line\">    A[i] = B[i] + C[D[i]]</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>对应的指令: (<code>LVI</code>)</p>\n</blockquote>\n<div class=\"code-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LV\t\t\tVD, RD        ; Load indices in D vector</span><br><span class=\"line\">LVI\tVC,(RC, VD)   ; Load indirect from RC base</span><br><span class=\"line\">LV \tVB, RB\t  ; Load B vector</span><br><span class=\"line\">ADDV.D \tVA, VB, VC\t  ; Do add</span><br><span class=\"line\">SV \tVA, RA\t  ; Store result</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>scatter：将一个向量寄存器中的数据写入到不连续的地址中</strong></p>\n<div class=\"code-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (i=0; i&lt;N; i++)</span><br><span class=\"line\">    A[B[i]]++;</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>对应的指令:（<code>SVI</code>）</p>\n</blockquote>\n<div class=\"code-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LV \tVB, RB      ; Load indices in B vector</span><br><span class=\"line\">LVI \tVA,(RA, VB) ; Gather initial A values</span><br><span class=\"line\">ADDV \tVA, RA, 1\t; Increment</span><br><span class=\"line\">SVI \tVA,(RA, VB) ; Scatter incremented values</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"Multi-lane-Implementation\"><a href=\"#Multi-lane-Implementation\" class=\"headerlink\" title=\"Multi-lane Implementation\"></a>Multi-lane Implementation</h4><p>同一个向量指令的不同分量，可以在不同的lane上执行</p>\n<blockquote>\n<p>不同的lane之间不能存在数据冲突</p>\n</blockquote>\n<p>在多个FU的流水线中优化:</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"体系结构随笔.assets/image-20250428120350459.png\"\n                      alt=\"image-20250428120350459\" style=\"zoom:50%;\" \n                >\n\n<h4 id=\"Chain-Multiple-Lane\"><a href=\"#Chain-Multiple-Lane\" class=\"headerlink\" title=\"Chain &amp; Multiple Lane\"></a>Chain &amp; Multiple Lane</h4><p>可以将上述的思路和chain相结合.</p>\n<p>向量机通过展开, 减少了条件判断等指令来减少了指令数.</p>\n<ul>\n<li>操作数指的是涉及的运算个数(比如一条向量计算涉及512个操作数, 但是指令数是1).</li>\n</ul>\n<p>编译器和用户可以互相提示数组是否可以向量化.</p>\n<p><code>SIMD</code>: single instruction multiple data</p>\n<h3 id=\"GPU\"><a href=\"#GPU\" class=\"headerlink\" title=\"GPU\"></a>GPU</h3><p>Graphical Processing Units.</p>\n<p>采取 <code>SIMT</code>: Single Instruction Multiple Thread.</p>\n<ul>\n<li>每个线程负责一条指令的部分计算.</li>\n</ul>\n<p>thread &#x3D;&gt; block &#x3D;&gt; grid</p>\n<h4 id=\"与向量机的主要区别\"><a href=\"#与向量机的主要区别\" class=\"headerlink\" title=\"与向量机的主要区别\"></a>与向量机的主要区别</h4><ul>\n<li>不存在标量处理器</li>\n<li>使用多线程解决内存访问的延迟<ul>\n<li>向量机通过bank扩大内存访问的带宽</li>\n</ul>\n</li>\n<li>具有很多的function units (类似于具有很多小的处理器.)</li>\n</ul>\n<h4 id=\"术语\"><a href=\"#术语\" class=\"headerlink\" title=\"术语\"></a>术语</h4><p><strong>warp</strong></p>\n<ul>\n<li>32 threads &#x3D;&#x3D;&gt; warp &#x2F; SIMD thread<ul>\n<li>必须执行相同的指令.</li>\n<li>warp之间不存在数据依赖.</li>\n</ul>\n</li>\n</ul>\n<p><strong>PTX</strong></p>\n<p>对应的机器汇编.</p>\n<p><strong>predicate register</strong></p>\n<p>谓词寄存器, 类似于向量机中的标量寄存器.</p>\n<h4 id=\"MEM层次\"><a href=\"#MEM层次\" class=\"headerlink\" title=\"MEM层次\"></a>MEM层次</h4><ul>\n<li>private memory</li>\n<li>local memory: 1个block内部共享</li>\n<li>GPU memory: 公共.</li>\n</ul>\n<h3 id=\"循环级别的并行\"><a href=\"#循环级别的并行\" class=\"headerlink\" title=\"循环级别的并行\"></a>循环级别的并行</h3><p>有的循环间的数据依赖可以被消除:</p>\n<div class=\"code-container\" data-rel=\"C\"><figure class=\"iseeu highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">100</span>; i=i+<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">  A[i] = A[i] + B[i]; <span class=\"comment\">/* S1 */</span></span><br><span class=\"line\">  B[i+<span class=\"number\">1</span>] = C[i] + D[i]; <span class=\"comment\">/* S2 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>取出首尾的两条指令，改写:</p>\n<div class=\"code-container\" data-rel=\"C\"><figure class=\"iseeu highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A[<span class=\"number\">0</span>] = A[<span class=\"number\">0</span>] + B[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">99</span>; i=i+<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">  B[i+<span class=\"number\">1</span>] = C[i] + D[i];</span><br><span class=\"line\">  A[i+<span class=\"number\">1</span>] = A[i+<span class=\"number\">1</span>] + B[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">B[<span class=\"number\">100</span>] = C[<span class=\"number\">99</span>] + D[<span class=\"number\">99</span>];</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"寻找循环依赖\"><a href=\"#寻找循环依赖\" class=\"headerlink\" title=\"寻找循环依赖\"></a>寻找循环依赖</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"体系结构随笔.assets/image-20250428123817503.png\"\n                      alt=\"image-20250428123817503\" style=\"zoom:50%;\" \n                >\n\n<p>不同的迭代中, 存在读取和存储的地址相同的情况 &#x3D;&#x3D;&gt; 存在循环依赖.</p>\n<ul>\n<li>计算方式: If a dependency exists, <strong>GCD(<em>c</em>,<em>a</em>) must evenly divide (<em>d</em>-<em>b</em>)</strong></li>\n<li>通过枚举 $i$ 来判断是否存在冲突，本质上就是图示的公式是否成立</li>\n</ul>\n<p>可以通过变量的重命名来解决WAW等冲突.</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"体系结构随笔.assets/image-20250428124217604.png\"\n                      alt=\"image-20250428124217604\" style=\"zoom:50%;\" \n                >\n\n<h2 id=\"CH5-TLP\"><a href=\"#CH5-TLP\" class=\"headerlink\" title=\"CH5 TLP\"></a>CH5 TLP</h2><h3 id=\"其他概念\"><a href=\"#其他概念\" class=\"headerlink\" title=\"其他概念\"></a>其他概念</h3><ul>\n<li>NUMA又叫<strong>distributed shared-memory multiprocessor (DSM &#x2F; DSP)</strong></li>\n<li>UMA又被叫做 symmetric multiprocessors (<strong>SMP</strong>)  or  <strong>centralized shared-memory multiprocessors</strong></li>\n</ul>\n<h4 id=\"概念区分\"><a href=\"#概念区分\" class=\"headerlink\" title=\"概念区分\"></a>概念区分</h4><ul>\n<li><strong>coherence：<strong>规定了针对</strong>同一内存</strong>地址读写操作的行为</li>\n<li><strong>consistency：<strong>定义了涉及</strong>不同内存</strong>地址访问时的读写<strong>顺序行为</strong></li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250618112258192.png?imageSlim\"\n                     \n                >\n\n<h3 id=\"硬件原语\"><a href=\"#硬件原语\" class=\"headerlink\" title=\"硬件原语\"></a>硬件原语</h3><ul>\n<li><code>exch</code> 用于将寄存器的值与内存地址中的值交换<ul>\n<li>该操作是原子性的，一次性完成读取旧值和写入新值的操作</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"lr与sc\"><a href=\"#lr与sc\" class=\"headerlink\" title=\"lr与sc\"></a>lr与sc</h4><blockquote>\n<p>补充这部分的指令介绍，方便后续相关汇编的理解</p>\n</blockquote>\n<p><strong>Load-Reserved（加载保留）</strong></p>\n<ul>\n<li>加载之后在硬件层面预留了这个内存地址，表示有向其写入的意图，用于后续的sc指令是否允许写入</li>\n<li><code>lr</code> 与 <code>ll</code>也就是 <strong>load linked</strong> 本质上是一样的，只不过后者是MIPS架构中的指令名称，都是加载并预留的原子指令</li>\n</ul>\n<p><strong>Store-Conditional（条件存储）</strong></p>\n<ul>\n<li>尝试将值写入到内存地址；</li>\n<li>只有在之前对该地址有成功的lr预留 且 未被其他处理器干扰的情况下，才能成功写入</li>\n<li>具有返回值：<ul>\n<li>如果失败：返回0</li>\n<li>如果成功返回非0</li>\n</ul>\n</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250618112626555.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"lr与sc的原子性操作应用\"><a href=\"#lr与sc的原子性操作应用\" class=\"headerlink\" title=\"lr与sc的原子性操作应用\"></a>lr与sc的原子性操作应用</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616164223737.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>Note：<strong>Only Regitser-Register instruction can be insert between LL &amp; SC</strong></p>\n</blockquote>\n<h4 id=\"自旋锁\"><a href=\"#自旋锁\" class=\"headerlink\" title=\"自旋锁\"></a>自旋锁</h4><p>spin lock指的是程序陷入了不断尝试获得lock的loop</p>\n<p><strong>一个简单的版本</strong></p>\n<div class=\"code-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">li R2, #1</span><br><span class=\"line\">lockit: exch R2, 0(R1)</span><br><span class=\"line\">bnez R2, lockit</span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li>R1所对应的内存地址保存了锁是否为空闲的信息，0 表示 free， 1表示被占用</li>\n<li>上述版本将1加载到R2，并不断尝试将它的值与R1对应的内存地址的值交换</li>\n<li>如果锁正在被占用，R2还是1，因此会不断陷入lockit的循环，直到某次的loop成功加锁（R2被交换为0），然后继续执行</li>\n</ul>\n<p>上述的问题是，不断尝试 <code>exch</code>涉及到了多次的读写操作，会带来总线上的invalidate信号的traffic</p>\n<p>因此，我们考虑采取下面的优化方案</p>\n<p><strong>优化的版本</strong></p>\n<div class=\"code-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lockit: ld x2,0(x1)         ; load of lock</span><br><span class=\"line\">        bnez x2,lockit      ; not available-spin</span><br><span class=\"line\">        addi x2,R0,#1       ; load locked value</span><br><span class=\"line\">        EXCH x2,0(x1)       ; swap</span><br><span class=\"line\">        bnez x2,lockit      ; branch if lock wasn’t 0</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>相比于简单版本的反复exch，优化之后的loop里只涉及到了读操作，因此对程序的表现更加友好</p>\n</blockquote>\n<p>使用 <code>exch</code>的指令由于读写合一，操作不灵活，我们考虑将读写利用同样是原子性指令的 <code>ll</code>和 <code>sc</code>来分离，实现等价的效果：</p>\n<p><strong>采取LL和SC实现：</strong></p>\n<div class=\"code-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lockit: lr x2,0(x1)         ; load reserved</span><br><span class=\"line\">        bnez x2,lockit      ; not available-spin</span><br><span class=\"line\">        addi x2,R0,#1       ; locked value</span><br><span class=\"line\">        sc x2,0(x1)         ; store （成功写入/加锁 返回0）</span><br><span class=\"line\">        bnez x2,lockit      ; branch if store fails</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>因为lr、sc和exch一样，也是原子性操作，确保了“检查锁是否可以用”和“设置锁”不会被其他线程打断；</p>\n<p>不同的是，exch通过交换之后的寄存器值来判断是否加锁成功，而sc利用自身操作的返回值来判断是否成功加锁</p>\n</blockquote>\n<h4 id=\"自旋锁的性能分析\"><a href=\"#自旋锁的性能分析\" class=\"headerlink\" title=\"自旋锁的性能分析\"></a>自旋锁的性能分析</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616164043201.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p><strong>TODO</strong></p>\n</blockquote>\n<h3 id=\"Snoopy\"><a href=\"#Snoopy\" class=\"headerlink\" title=\"Snoopy\"></a>Snoopy</h3><p>两种转换规则：</p>\n<ul>\n<li><p>一定要转换成 S 状态再read（除了自己read自己的hit）；</p>\n</li>\n<li><p>一定要转换成 E &#x2F; M 状态再write</p>\n</li>\n<li><p>P1写入X的新值之后，需要确保其他处理器知道变化，分为两种策略：</p>\n<ul>\n<li><em><strong>Write Invalidate</strong></em>：将其他P的副本置为无效（搭配<strong>写穿透</strong>）<ul>\n<li>但是也适合写回策略搭配，注意dirty位的使用</li>\n</ul>\n</li>\n<li><em><strong>Write Broadcast</strong></em>：将其他的副本直接写入新值（搭配<strong>写回策略</strong>）</li>\n</ul>\n</li>\n</ul>\n<p>一个简单的例子；</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250524132310613.png?imageSlim\"\n                     \n                >\n\n<ul>\n<li>注意此时bus信号的桥梁作用：<ul>\n<li>发生了read miss之后，首先将P2的对应cache line设置为share状态（此时还不知道值）</li>\n<li>总线信号传到P1之后，P1的对应状态修改为share，并且发起了write back的信号，将A1的值写入mem</li>\n<li>之后，总线信号read data让P2读取了mem中的值，完成了 <code>P2：read A1</code>的操作</li>\n</ul>\n</li>\n</ul>\n<p>每一个处理器&#x2F;线程对每一个block具有自己的状态</p>\n<h4 id=\"状态机\"><a href=\"#状态机\" class=\"headerlink\" title=\"状态机\"></a>状态机</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250607203010638.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>处于E状态时，如果收到了bus上的read-miss信号，会将该P改为S状态</p>\n</blockquote>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605104010432.png?imageSlim\"\n                     \n                >\n\n<h3 id=\"Directory\"><a href=\"#Directory\" class=\"headerlink\" title=\"Directory\"></a>Directory</h3><ul>\n<li><em><strong>local node</strong></em>  发起请求的处理器</li>\n<li><em><strong>home node</strong></em>  对应地址所在的处理器</li>\n<li><em><strong>remote node</strong></em> 拥有这个副本的处理器</li>\n</ul>\n<p>在homeNode中存储一个block在不同处理器&#x2F;线程中的状态</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605105815979.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>其中的 <code>fetch/invalidate</code>发生在：local发生了write miss，并且home中对应的block为E状态，向独占该block的P发送～信号，确保将仅在对应P中的数据读取再非法化（内存中数据过时）</p>\n<ul>\n<li>读取之后的数据先存放在了home中，然后再由home发送data reply给local（一般来说local写入了新值，并不需要这个旧值；但是如果写入的新值是 X+1，就必须获得正确的旧值了，因此还是有必要的）</li>\n</ul>\n</blockquote>\n<h4 id=\"write-miss\"><a href=\"#write-miss\" class=\"headerlink\" title=\"write miss\"></a>write miss</h4><p>初始：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605110226409.png?imageSlim\"\n                     \n                >\n\n<p>写入：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605110631594.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"fetch-invalidate\"><a href=\"#fetch-invalidate\" class=\"headerlink\" title=\"fetch/invalidate\"></a><code>fetch/invalidate</code></h4><p>初始：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605111010835.png?imageSlim\"\n                     \n                >\n\n<p>过程：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605111257118.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>如果目录节点中记录的状态是E，就向对应的处理器发送 <code>fetch</code>的信号</p>\n</blockquote>\n<h4 id=\"根据cache填写目录\"><a href=\"#根据cache填写目录\" class=\"headerlink\" title=\"根据cache填写目录\"></a>根据cache填写目录</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605113001427.png?imageSlim\"\n                     \n                >\n\n<p>对应的简单例子：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605113359800.png?imageSlim\"\n                     \n                >\n\n<p>另一个语言描述的例子（答案）：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250611164909272.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>22-23回忆卷的最后一题</p>\n</blockquote>\n<h4 id=\"cache失效问题\"><a href=\"#cache失效问题\" class=\"headerlink\" title=\"cache失效问题\"></a>cache失效问题</h4><p>P将自己cache中的block kick out时，需要将对应的home中的sharer中将P踢出序列，如果原本仅有P本身，就需要将对应的状态改为U，表示uncached.</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605114629798.png?imageSlim\"\n                     \n                >\n\n<h3 id=\"MESI\"><a href=\"#MESI\" class=\"headerlink\" title=\"MESI\"></a>MESI</h3><blockquote>\n<p>如果没有特别说明，就当做MSI</p>\n</blockquote>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250606191507180.png?imageSlim\"\n                     \n                >\n\n<p>状态：</p>\n<ul>\n<li>Invalid: 缓存块无效，不能被使用；</li>\n<li>Shared: 缓存块未被修改，且可能存在于多个缓存中，内存中的数据是最新的；</li>\n<li>Modified: 缓存行已被修改，且该缓存行是唯一的有效副本，内存中的数据已过时；</li>\n<li>Exclusive：缓存块未被修改，<strong>且是唯一的有效副本</strong>，内存中的数据是最新的。</li>\n</ul>\n<p>E的存在是为了<strong>优化写入性能和减少总线流量</strong>，具体来说，我们用E来区分某个缓存块只被一个处理器读取且还没有写入的状态，是为了在此后该处理器写入该缓存时，不需要在总线上发送Invalidate的信号（因为没有共享缓存的其他处理器）</p>\n<blockquote>\n<p>如果是传统的MSI，即使share的成员只有一个，还是要发送信号到总线，被其他的处理器接收并处理，这带来了额外的时间开销</p>\n</blockquote>\n<h3 id=\"Consistency\"><a href=\"#Consistency\" class=\"headerlink\" title=\"Consistency\"></a>Consistency</h3><h4 id=\"Sequential-consistency\"><a href=\"#Sequential-consistency\" class=\"headerlink\" title=\"Sequential consistency\"></a>Sequential consistency</h4><p>特征：<strong>Delay next memory access until the previous one is completed.</strong></p>\n<blockquote>\n<p>对指令的执行有着严格的顺序要求，虽然保证了正确性，但是延时较高</p>\n</blockquote>\n<ul>\n<li>相同处理器内部的内存访问是<strong>有序</strong>的</li>\n<li>不同处理器的内存访问是交错的</li>\n</ul>\n<p>课本的例子：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250611150023807.png?imageSlim\"\n                     \n                >\n\n<p>简单的计算：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605131113080.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"Relaxed-Models\"><a href=\"#Relaxed-Models\" class=\"headerlink\" title=\"Relaxed Models\"></a>Relaxed Models</h4><p>为了降低SC带来的延时，我们采取 Synchronized program 来让指令的读写在乱序执行中保持与串行执行等价的效果，以下是不同等级的model：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605133510558.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>下方的顺序表示该模型在前者的基础上去除了对应的顺序约束，但是要求访问的对象不是相同地址的</p>\n<p>比如在TSO中， <code>C= </code>作为写操作，允许和 <code>= D </code>的读操作一起执行，解除了W-R的约束</p>\n</blockquote>\n<h1 id=\"jxh老师的PPT\"><a href=\"#jxh老师的PPT\" class=\"headerlink\" title=\"jxh老师的PPT\"></a>jxh老师的PPT</h1><blockquote>\n<p>针对核心的补充摘录</p>\n</blockquote>\n<p><strong>Tomasulo的三个主要优点</strong></p>\n<ul>\n<li><strong>The distribution of the hazard detection logic</strong><ul>\n<li>保留站和CDB</li>\n<li>如果多条指令在等待一个结果 或者 一条指令等待多个操作数，可以<strong>同时</strong>通过CDB的广播读取（避免了通过寄存器读取）</li>\n</ul>\n</li>\n<li><strong>The elimination of stalls for WAW and WAR hazards</strong></li>\n<li><strong>overlap iterations of loops</strong>：循环迭代的重叠<ul>\n<li>相当于从HW（硬件）上实现了循环展开</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>计分板无法实现 overlap iterations of loops</p>\n</blockquote>\n<p><strong>为什么Tomasulo可以实现循环迭代的重叠？</strong></p>\n<ul>\n<li>寄存器重命名</li>\n<li>保留站允许指令的提前发射以及旧值的存储（避免了<strong>WAR</strong>冲突）</li>\n<li>Tomasulo building data flow dependency graph on the fly.</li>\n</ul>\n<p><strong>计分板阶段的回顾</strong></p>\n<ul>\n<li>ISSUE：当下面的条件同时满足时issue：<ul>\n<li>具有可用的功能单元</li>\n<li>没有与正在执行的指令具有相同的目标寄存器</li>\n<li>此时避免了结构冲突和WAW冲突</li>\n</ul>\n</li>\n<li>RO：当两个操作数都准备好了的时候才会读取<ul>\n<li>避免了RAW的冲突</li>\n</ul>\n</li>\n<li>EX</li>\n<li>WB：此时检测WAR冲突并在必要的时候stall</li>\n</ul>\n<h4 id=\"计分板和Tomasulo的对比\"><a href=\"#计分板和Tomasulo的对比\" class=\"headerlink\" title=\"计分板和Tomasulo的对比\"></a>计分板和Tomasulo的对比</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250615163546156.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>Tomasulo消除了WAW与WAR冲突；没有显式寄存器重命名的计分板无法消除～</p>\n<p><strong>OOO</strong>：out of order，此处指乱序完成</p>\n</blockquote>\n<h4 id=\"CDB的额外信息\"><a href=\"#CDB的额外信息\" class=\"headerlink\" title=\"CDB的额外信息\"></a>CDB的额外信息</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250615164708448.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>TODO： 为什么需要source address？</p>\n</blockquote>\n<h4 id=\"使得CPI-1的几种方法\"><a href=\"#使得CPI-1的几种方法\" class=\"headerlink\" title=\"使得CPI &lt; 1的几种方法\"></a>使得CPI &lt; 1的几种方法</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616140413205.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>向量处理；超标量；VLIW</p>\n</blockquote>\n<h4 id=\"超标量\"><a href=\"#超标量\" class=\"headerlink\" title=\"超标量\"></a>超标量</h4><p>使用基于Tomasulo的算法，可以实现乱序执行的动态调度</p>\n<p><strong>Issue Packet：</strong></p>\n<ul>\n<li>从fetch unit获得的指令组合，可以在一个周期内同时发射</li>\n<li>Issue阶段也被流水线化：<ul>\n<li>第一个阶段检查当前packet可以一次性发射的指令数（不存在数据冲突）；</li>\n<li>第二个阶段检查上一步选中的指令是否与已经发射的指令存在冲突</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>对于N-issue的多发射，每个cc实际发射 0-N条指令</p>\n</blockquote>\n<p><strong>多发射存在的问题</strong></p>\n<ul>\n<li>必须在一个cc内多次重命名相同的寄存器</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616141407666.png?imageSlim\"\n                     \n                >\n\n<ul>\n<li>拓宽总线</li>\n</ul>\n<p><strong>两种实现多发射的方法</strong></p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616141739907.png?imageSlim\"\n                     \n                >\n\n<ul>\n<li>pipeline</li>\n<li>widen issue logic</li>\n</ul>\n<h4 id=\"双发射的例子\"><a href=\"#双发射的例子\" class=\"headerlink\" title=\"双发射的例子\"></a>双发射的例子</h4><p><strong>不带投机执行的双发射：</strong></p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616142306653.png?imageSlim\"\n                     \n                >\n\n<p><strong>带有投机执行的双发射：</strong></p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616142656105.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"WB与IS的并行执行\"><a href=\"#WB与IS的并行执行\" class=\"headerlink\" title=\"WB与IS的并行执行\"></a>WB与IS的并行执行</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616144548699.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>然而事实证明很少会考虑这种情况？除非题目明确说明或者给出充分的暗示，否则认为还是在下一个cc才能issue到原本冲突的FU</p>\n</blockquote>\n<h4 id=\"Global-code-motion\"><a href=\"#Global-code-motion\" class=\"headerlink\" title=\"Global code motion\"></a>Global code motion</h4><p>全局代码调度：通过跨分支移动指令来有效地调度带有内部控制流的循环体。</p>\n<h4 id=\"DRAM与SRAM\"><a href=\"#DRAM与SRAM\" class=\"headerlink\" title=\"DRAM与SRAM\"></a>DRAM与SRAM</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616145823142.png?imageSlim\"\n                     \n                >\n\n<h1 id=\"大题整理\"><a href=\"#大题整理\" class=\"headerlink\" title=\"大题整理\"></a>大题整理</h1><h2 id=\"CH1-1\"><a href=\"#CH1-1\" class=\"headerlink\" title=\"CH1\"></a>CH1</h2><blockquote>\n<p><strong>TODO</strong></p>\n</blockquote>\n<h2 id=\"CH2\"><a href=\"#CH2\" class=\"headerlink\" title=\"CH2\"></a>CH2</h2><blockquote>\n<p>cache相关的计算题参考知识点梳理的ch2-cache performance</p>\n</blockquote>\n<h4 id=\"Global-Local-Miss-Rate\"><a href=\"#Global-Local-Miss-Rate\" class=\"headerlink\" title=\"Global &#x2F; Local Miss Rate\"></a>Global &#x2F; Local Miss Rate</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250618154738643.png?imageSlim\"\n                     \n                >\n\n<p>课本的例题：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250618154928490.png?imageSlim\"\n                     \n                >\n\n<p>分析：</p>\n<ul>\n<li>L1的global和local缺失率相等，都是 40 &#x2F; 1000</li>\n<li>L2的global缺失率为 20 &#x2F; 1000， local缺失率为 20 &#x2F; 40</li>\n</ul>\n<p>AMAT：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250618155451648.png?imageSlim\"\n                     \n                >\n\n<p><strong>Average stall cycles per instruction</strong>：<strong>( AMAT - hit time ) x MPI</strong> &#x3D; (5.4-1) x 1.5 &#x3D; 6.6 cc</p>\n<h4 id=\"是否满足时间和空间局部性\"><a href=\"#是否满足时间和空间局部性\" class=\"headerlink\" title=\"是否满足时间和空间局部性\"></a>是否满足时间和空间局部性</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250618153621835.png?imageSlim\"\n                     \n                >\n\n<p>分析：根据给出的cache容量、组关联等信息计算block的大小，然后比较block大小是不是大于系统的字长（如果小于就不满足空间局部性）</p>\n<p>此处计算得到block大小为 8KB &#x2F; 4K &#x3D; 2B  &lt; 4B</p>\n<blockquote>\n<p>似乎有cache就一定满足时间局部性？如果按照byte访问的话，能够存储指定的word就可以？</p>\n</blockquote>\n<h4 id=\"cache与tag\"><a href=\"#cache与tag\" class=\"headerlink\" title=\"cache与tag\"></a>cache与tag</h4><p>给定物理地址的宽度 ，cache的容量和组关联度$k$决定了tag的位数：</p>\n<p>假设block是$2^m$字节的大小，cache的容量是$2^n$B, 为直接映射，据此计算得到：</p>\n<ul>\n<li>byte offset bit &#x3D; $m$</li>\n<li>index bit &#x3D; $\\log_22^{n-m} &#x3D; n-m$</li>\n<li>所以tag的位数是：地址位数N - n</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250611154233564.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>虚拟页的容量和虚拟地址的位宽在此为干扰信息；</p>\n<p>如果不是直接映射，就先计算一个set的容量，然后据此计算index</p>\n</blockquote>\n<p>假设组关联度是 $k &#x3D; 2^i$ 那么：</p>\n<ul>\n<li>index bit &#x3D; $n-m-i$</li>\n<li>对应的tag位数 &#x3D; N - n + i</li>\n</ul>\n<p><strong>由此可见，题目中没有给出的block的容量恰好是不需要的计算量</strong></p>\n<p><strong>e.g. 加入组关联</strong>：一个8-way的例子</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250611154802019.png?imageSlim\"\n                     \n                >\n\n<h2 id=\"CH3-1\"><a href=\"#CH3-1\" class=\"headerlink\" title=\"CH3\"></a>CH3</h2><blockquote>\n<p>建议参考老师的ppt推一遍计分板和Tomasulo的填表，然后记住什么时候要推迟一个cc、什么时候可以直接执行</p>\n</blockquote>\n<h4 id=\"延迟一个cc的情况\"><a href=\"#延迟一个cc的情况\" class=\"headerlink\" title=\"延迟一个cc的情况\"></a>延迟一个cc的情况</h4><ul>\n<li>计分板和Tomasulo存在结构冲突时，上一条指令WB之后的一个cc下一条指令Issue</li>\n<li>计分板和Tomasulo的指令需要读取待写回的数据时，上一条指令WB之后的下一个周期分别进入RO &#x2F; EX 阶段</li>\n</ul>\n<p>但是Tomasulo的issue队列里可以<strong>直接在上一条结束的cc接替</strong>执行下一条的EX：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250618000138713.png?imageSlim\"\n                     \n                >\n\n<h2 id=\"CH4\"><a href=\"#CH4\" class=\"headerlink\" title=\"CH4\"></a>CH4</h2><blockquote>\n<p>rename 、 string strip和循环级别并行部分的例题请参考知识点梳理部分</p>\n</blockquote>\n<h4 id=\"convoy与chain\"><a href=\"#convoy与chain\" class=\"headerlink\" title=\"convoy与chain\"></a>convoy与chain</h4><blockquote>\n<p>详细内容可以参考英文第六版的p291</p>\n</blockquote>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250618145520392.png?imageSlim\"\n                     \n                >\n\n<p>参考解答：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250618150404833.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>此处忽略了向量机的set-up等时间</p>\n</blockquote>\n<p>下面是回忆卷：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250606095649137.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>参考答案：个人观点</p>\n</blockquote>\n<p>第一问：</p>\n<ul>\n<li>指令的执行时间分为：取指+启动+向量长度， e.g. 第一条vld为 1+4+64 &#x3D; 69</li>\n<li>但是后续的指令的取指可以在前一条指令执行期间完成，因此此处的vadd可以在cc&#x3D;69开始执行：69 + 7+64 &#x3D; 140cc</li>\n<li>后续指令同理分析</li>\n<li>….</li>\n</ul>\n<p>第二问：3（vsd与vld存在结构冲突）</p>\n<p>第三问：</p>\n<ul>\n<li>估计：3x64 + 3 + 7 + 10 + 4</li>\n<li>考虑了取指时间以及各个convoy内部最长的启动时间</li>\n</ul>\n<h4 id=\"blocked-与-unblocked\"><a href=\"#blocked-与-unblocked\" class=\"headerlink\" title=\"blocked 与 unblocked\"></a>blocked 与 unblocked</h4><p>Here is a blocked and unblocked version of C code to perform a matrix operation on a 256x256 matrix:</p>\n<div class=\"code-container\" data-rel=\"C\"><figure class=\"iseeu highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1024</span>; i += <span class=\"number\">16</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">1024</span>; j += <span class=\"number\">16</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> m = <span class=\"number\">0</span>; m &lt; <span class=\"number\">16</span>; m++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> n = <span class=\"number\">0</span>; n &lt; <span class=\"number\">16</span>; n++) &#123;</span><br><span class=\"line\">                output[j + n][i + m] = input[i + m][j + n];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<div class=\"code-container\" data-rel=\"C\"><figure class=\"iseeu highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1024</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">1024</span>; j++) &#123;</span><br><span class=\"line\">        output[j][i] = input[i][j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>Suppose the size of the element in the matrix is 32 bits and we execute the codes above on a processor with a 2KB fully associative data cache using the least recently used (LRU) replacement strategy. The cache block size is 64 bytes. What is the relative number of cache misses when running the blocked and unblocked version?</p>\n<p>A. 2 : 17</p>\n<p>B. 1 : 8</p>\n<p>C. 1 : 17</p>\n<p>D. 1 : 16</p>\n<blockquote>\n<p>A</p>\n<p><strong>SOLUTION：</strong></p>\n</blockquote>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250611150700645.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>之所以说blocked version一轮循环只会发生32次miss，是因为计算得到这个cache正好有32个cache line，因此在内层循环所需的32个block都只需要读取一次；</p>\n<p>因此，我们首先根据题目给出的cache容量和block信息，算出index；然后结合元素的大小计算内层循环需要的block数量，检查是否可以被cache存放</p>\n</blockquote>\n<h2 id=\"CH-5\"><a href=\"#CH-5\" class=\"headerlink\" title=\"CH 5\"></a>CH 5</h2><blockquote>\n<p><strong>TODO: 感觉记一下例题就差不多了（知识点梳理部分）</strong></p>\n</blockquote>\n<h1 id=\"小贴士\"><a href=\"#小贴士\" class=\"headerlink\" title=\"小贴士\"></a>小贴士</h1><ul>\n<li><strong>precise exceptions</strong>：<ul>\n<li>定义：On handling exceptions, if the pipeline can be stopped so that the instruction issued before the faulting instruction complete and those after it can be restarted</li>\n</ul>\n</li>\n<li><strong>计分板的WAW冲突检测</strong>：Scoreboard Algorithm issue a instruction when no other active instruction has the same destination register to avoid WAW hazard.</li>\n<li>写更新也就是写广播，与写失效构成了常用的处理缓存不一致性问题的策略</li>\n</ul>\n<h1 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h1><h4 id=\"常见的CSR\"><a href=\"#常见的CSR\" class=\"headerlink\" title=\"常见的CSR\"></a>常见的CSR</h4><p>常见的CSR有mstatus,mtvec,mepc,mcause,mtval。这些寄存器都属于M mode：</p>\n<ul>\n<li>mstatus：机器模式下的状态寄存器，包含开关中断的MIE、保存进入异常之前特权模式的MPP等</li>\n<li>mtvec：发生异常时跳转的PC入口；</li>\n<li>mepc：发生异常时，指向导致异常的指令；发生<strong>中断时</strong>，指向<strong>中断处理后应该恢复的位置</strong>；</li>\n<li>mcause：根据异常来源设置<ul>\n<li>如果是访问存储器造成的异常，就将其地址更新到mtval；</li>\n<li>如果是非法指令导致的异常，将指令编码更新到mtval寄存器中</li>\n</ul>\n</li>\n<li>mtval：反映引起当前异常的存储器访问地址或者指令编码</li>\n</ul>\n<h4 id=\"VIPT\"><a href=\"#VIPT\" class=\"headerlink\" title=\"VIPT\"></a>VIPT</h4><blockquote>\n<p>Virtual Indexed and Physically Tagged Cache</p>\n</blockquote>\n<p>也就是从VA中提取低位作为实际物理地址对应的index，用VA的高位在TLB中查询得到物理地址，然后用物理地址中的tag进行比较。这两个步骤分别称为 <strong>缓存查找</strong>和<strong>地址翻译</strong> ，可并行执行</p>\n<p>这样做是为了消除<strong>同义词</strong>问题：</p>\n<ul>\n<li>如果采取完全的虚拟地址寻址VIVT，一个物理地址可能对应不同的虚拟地址，从而导致其具有了多份的拷贝，带来了数据的不一致性的问题</li>\n</ul>\n<h4 id=\"写失效的冲突写\"><a href=\"#写失效的冲突写\" class=\"headerlink\" title=\"写失效的冲突写\"></a>写失效的冲突写</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250617225541859.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"带有投机的store\"><a href=\"#带有投机的store\" class=\"headerlink\" title=\"带有投机的store\"></a>带有投机的store</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250617233055511.png?imageSlim\"\n                     \n                >\n\n<p>由于带有投机的Tomasulo在commit之前都不会实际更新寄存器或者mem，所以 <code>store</code>指令在此之前不会实际向内存中写入数据，那么我们可以在其地址相关寄存器准备好的时候就进入Exe阶段（地址计算）</p>\n<blockquote>\n<p>实际上，不带投机的store也是这样（参见下面“多发射的例子”中的标注）</p>\n</blockquote>\n<p>相应的，当 <code>store</code>指令结束write result的时候如果此时还没有准备好源寄存器的值，就会在ROB中记录（对应指令的ROB编号），并在对应指令完成后准备好commit</p>\n<blockquote>\n<p>由于每条指令都只在ROB有空位的时候issue，因此我们用<strong>ROB编号</strong>来标记每一条指令（用于数据冲突时等情况）</p>\n</blockquote>\n<h4 id=\"多发射的例子\"><a href=\"#多发射的例子\" class=\"headerlink\" title=\"多发射的例子\"></a>多发射的例子</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250618140228378.png?imageSlim\"\n                     \n                >\n\n<h1 id=\"作业复盘\"><a href=\"#作业复盘\" class=\"headerlink\" title=\"作业复盘\"></a>作业复盘</h1><h2 id=\"HW1\"><a href=\"#HW1\" class=\"headerlink\" title=\"HW1\"></a>HW1</h2><ul>\n<li>资源占比等价于所需的时间，可并行化程度意味着采取多核处理的时候，有多少的比例可以参与优化；</li>\n<li>利用资源占比分配核数，应当向下取整，避免整体的核数超出总核数</li>\n<li>计算整体加速比的时候，先分别计算对应的时间，然后利用并行前后的总时间来计算加速比<ul>\n<li>由此计算得出的总时间，可以用于重新分配所需的计算资源</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"HW2\"><a href=\"#HW2\" class=\"headerlink\" title=\"HW2\"></a>HW2</h2><h4 id=\"功耗计算\"><a href=\"#功耗计算\" class=\"headerlink\" title=\"功耗计算\"></a>功耗计算</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250608185645239.png?imageSlim\"\n                     \n                >\n\n<p>ans：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250608185936979.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>注意分别计算静态功耗和访问功耗，前者需要先计算对应的时间</p>\n</blockquote>\n<h2 id=\"HW3\"><a href=\"#HW3\" class=\"headerlink\" title=\"HW3\"></a>HW3</h2><ul>\n<li>B.5 涉及cache、AMAT和CPI的计算，可以参考作业的解答</li>\n</ul>\n<blockquote>\n<p>其他没有什么问题</p>\n</blockquote>\n<h2 id=\"HW4\"><a href=\"#HW4\" class=\"headerlink\" title=\"HW4\"></a>HW4</h2><ul>\n<li><strong>GFLOP</strong>：以G为单位，执行的浮点数操作</li>\n</ul>\n<blockquote>\n<p>其他没有什么问题</p>\n</blockquote>\n<h1 id=\"TODO\"><a href=\"#TODO\" class=\"headerlink\" title=\"TODO\"></a>TODO</h1><h4 id=\"硬件原语部分\"><a href=\"#硬件原语部分\" class=\"headerlink\" title=\"硬件原语部分\"></a>硬件原语部分</h4><blockquote>\n<p><strong>TODO</strong>：5.3ppt的18&#x2F;40开始没有记录（学无余力）</p>\n</blockquote>\n","more":"<h1 id=\"知识点梳理\"><a href=\"#知识点梳理\" class=\"headerlink\" title=\"知识点梳理\"></a>知识点梳理</h1><h2 id=\"CH1\"><a href=\"#CH1\" class=\"headerlink\" title=\"CH1\"></a>CH1</h2><h4 id=\"可靠性\"><a href=\"#可靠性\" class=\"headerlink\" title=\"可靠性\"></a>可靠性</h4><ul>\n<li><strong>availability</strong> &#x3D; MTTF &#x2F; MTBF</li>\n<li><strong>FIT</strong>：faliure in time &#x3D; 1 &#x2F; MTTF</li>\n</ul>\n<p>计算系统整体的MTTF时，我们可以优先计算FIT（各个组件的rate相加），然后求倒数</p>\n<h4 id=\"MIPS\"><a href=\"#MIPS\" class=\"headerlink\" title=\"MIPS\"></a>MIPS</h4><p>millions of instructions per second</p>\n<h4 id=\"Performance\"><a href=\"#Performance\" class=\"headerlink\" title=\"Performance\"></a>Performance</h4><p>performance是执行时间的倒数</p>\n<h4 id=\"不同的性能比较策略\"><a href=\"#不同的性能比较策略\" class=\"headerlink\" title=\"不同的性能比较策略\"></a>不同的性能比较策略</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250607173816894.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>几何平均就是将各个程序的执行时间相乘然后开根号，作为平均的执行时间；</p>\n<p><strong>depends on which machine is the reference</strong>：在不清楚加权算法中的权值情况时，采取参照的方法计算平均值，类似于加权的效果，但是结果与选择的参照对象相关，因此说～</p>\n</blockquote>\n<p>几何平均：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250608152559487.png?imageSlim\"\n                     \n                >\n\n<h3 id=\"流水线相关\"><a href=\"#流水线相关\" class=\"headerlink\" title=\"流水线相关\"></a>流水线相关</h3><p>可以一定程度上允许结构冲突：</p>\n<ul>\n<li>为了减少cost和减少单元的latency</li>\n</ul>\n<h4 id=\"throughput\"><a href=\"#throughput\" class=\"headerlink\" title=\"throughput\"></a>throughput</h4><p>The throughput of a CPU pipeline is <strong>the number of instructions completed per second</strong></p>\n<blockquote>\n<p>CPU流水线的吞吐量指的就是每秒执行的指令数</p>\n</blockquote>\n<h4 id=\"how-to-stall\"><a href=\"#how-to-stall\" class=\"headerlink\" title=\"how to stall\"></a>how to stall</h4><ol>\n<li>设计stall控制单元，检测是否存在冲突需要stall</li>\n<li>如果需要stall，就disable writing PC and IF&#x2F;ID latch，并且插入一个nop指令到ID&#x2F;EX，禁止写回寄存器和写入MEM</li>\n</ol>\n<h4 id=\"double-bump\"><a href=\"#double-bump\" class=\"headerlink\" title=\"double bump\"></a>double bump</h4><p>如果在一个cc内允许 write-then-read，就可以只插入两条nop：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250528203331360.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"跳转指令\"><a href=\"#跳转指令\" class=\"headerlink\" title=\"跳转指令\"></a>跳转指令</h4><p>∆ &#x3D; 目标地址 - 跳转指令的<strong>下一条指令</strong>的地址！</p>\n<blockquote>\n<p>因为在取出指令后PC+4就生效了；</p>\n<p>与汇编指令具有异曲同工之妙</p>\n</blockquote>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined2c0c4d308a58fd80d85c816e0487b11a.png?imageSlim\"\n                     \n                >\n\n<p>同时注意，是在MEM阶段而非EX阶段写回PC寄存器，在跳转指令的WB阶段开始取址</p>\n<blockquote>\n<p>总共stall了3个cc</p>\n</blockquote>\n<p>对应的简单问题：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250530204714053.png?imageSlim\"\n                     \n                >\n\n<p>为了解决上述的stall损失，我们可以考虑在EX阶段前递，或者在ID阶段增加硬件单元。</p>\n<p>另外的可行办法是<strong>延迟槽</strong>技术：</p>\n<ul>\n<li>因为跳转指令在ID阶段才确定，此时IF已经取址了。我们将一定会执行的指令（无论跳转是否发生）放置在条件跳转指令的下一条，避免这条(组)指令的浪费</li>\n<li>延迟槽中的指令应当由编译器选择合适的指令(组)</li>\n</ul>\n<h4 id=\"移位寄存器\"><a href=\"#移位寄存器\" class=\"headerlink\" title=\"移位寄存器\"></a>移位寄存器</h4><p>为了解决写端口的冲突，直接增加写端口是不经济的。</p>\n<p>我们考虑一种检测矛盾并实现序列化写操作的技术——使用<strong>移位寄存器：</strong></p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250530210124307.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>在ID阶段分析指令之后，如果与已经发射（此处应该指的是应该开始执行？）的指令存在写端口的冲突（利用移位寄存器判断），就stall这条指令</p>\n</blockquote>\n<p>如果指令需要写回，利用一个移位寄存器，设置与当前指令将要写回所需的cc相等的值，作为移位寄存器位数的1.每个cc将对应的移位寄存器右移。</p>\n<h4 id=\"数据冲突\"><a href=\"#数据冲突\" class=\"headerlink\" title=\"数据冲突\"></a>数据冲突</h4><ul>\n<li><em><strong>RAW</strong></em>：<em><strong>true</strong></em> dependance，因为无法通过寄存器重命名或者指令重排来优化</li>\n<li>WAW：output dependance</li>\n<li>WAR：<em><strong>anti</strong></em>-dependance，因为和RAW是相反的</li>\n</ul>\n<h2 id=\"CH2-存储器层级\"><a href=\"#CH2-存储器层级\" class=\"headerlink\" title=\"CH2 存储器层级\"></a>CH2 存储器层级</h2><h4 id=\"block-identification\"><a href=\"#block-identification\" class=\"headerlink\" title=\"block identification\"></a>block identification</h4><ul>\n<li>index 用于选中cache的set &#x2F; cache line<ul>\n<li>index bits &#x3D; $\\log_2(\\text {size of set &#x2F; cache line})$</li>\n</ul>\n</li>\n<li>offset：用于选择block内部的data<ul>\n<li>offset size &#x3D; $\\log_2(\\text {size of block})$</li>\n</ul>\n</li>\n<li>tag：用于比较block是否匹配<ul>\n<li>bits: 地址size - index size - offset size</li>\n</ul>\n</li>\n</ul>\n<p>一个简单的直接映射的计算例子：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250530213007222.png?imageSlim\"\n                     \n                >\n\n<ul>\n<li>地址总位数可能由<em><strong>memory size</strong></em>间接给出：e.g. Memory-size &#x3D; 4G &#x3D; $2^{32}$， 得到一共有32位</li>\n</ul>\n<h4 id=\"write-strategy\"><a href=\"#write-strategy\" class=\"headerlink\" title=\"write strategy\"></a>write strategy</h4><p>一般来说：</p>\n<ul>\n<li>写回策略 + write allocate</li>\n<li>写穿策略 + write around：发生write miss的时候，只会写入到内存</li>\n</ul>\n<p>一个简单的例子：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250531095731123.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>当发生了read miss的时候，将mem[200]加载到cache，下一次的写将命中</p>\n</blockquote>\n<h3 id=\"Cache-performance\"><a href=\"#Cache-performance\" class=\"headerlink\" title=\"Cache performance\"></a>Cache performance</h3><h4 id=\"Memory-stall\"><a href=\"#Memory-stall\" class=\"headerlink\" title=\"Memory stall\"></a>Memory stall</h4><ul>\n<li><p>$$<br>CPU \\ time  &#x3D; IC \\times (CPI_{exeution} + \\frac{Misses}{Ins.} \\times Miss \\ penalty) \\times clock \\ cycle \\ itme<br>$$</p>\n<blockquote>\n<p>$\\frac{Misses}{Ins.} &#x3D; Miss\\ rate \\times MPI$</p>\n</blockquote>\n</li>\n<li><p><em><strong>CPU Execution time</strong></em> &#x3D; (CPU clock cycles + <strong>Memory stall cycles</strong>) x Clock cycle time</p>\n<ul>\n<li>其中后者可以如此计算： $ IC \\times MPI \\times MissRate \\times Miss\\ penalty$</li>\n<li>注意判断是否需要将data和ins.的mem区分</li>\n</ul>\n<p>一个简单的例子：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250531102931121.png?imageSlim\"\n                     \n                ></li>\n</ul>\n<h4 id=\"AMAT\"><a href=\"#AMAT\" class=\"headerlink\" title=\"AMAT\"></a>AMAT</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefinedimage-20250310110142371.png?imageSlim\"\n                     \n                >\n\n<p>AMAT也就是: <strong>Average memory access time</strong>.</p>\n<p>所以可以用来计算 <em><strong>real CPI</strong></em>&#x3D; Ideal CPI + <strong>Average stalls per instruction</strong>  , 其中后者根据:</p>\n<p>$$<br>(AMAT - HitTime) \\times  \\ \\text{access times &#x2F; ins.}<br>$$</p>\n<p>计算得到,  且 <code>HitTime</code>为理想的CPI, <code>access times</code>是每条指令平均访问memory的次数 &#x3D; MPI , e.g. 有30%的数据访存指令, 对应了<strong>1.3</strong>.（考虑指令cache的1 on unified cache）</p>\n<p>一个简单的例子——<strong>AMAT按照data和ins加权计算：</strong></p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250531102701013.png?imageSlim\"\n                     \n                >\n\n<p>补充：</p>\n<ul>\n<li><strong>MPI</strong>(memory reference per instruction)＝1.5 , 也就是指令对mem的平均访问次数.</li>\n<li>注意AMAT的计算涉及了<em><strong>hit time</strong></em>，unified cache的hit time可能比split cache的大</li>\n<li>无特别说明的情况下，hit time &#x3D; Ideal CPI</li>\n</ul>\n<h4 id=\"Split-Unified\"><a href=\"#Split-Unified\" class=\"headerlink\" title=\"Split &amp; Unified\"></a>Split &amp; Unified</h4><ul>\n<li>miss rate的计算：</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250531105216214.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>表格中给出的数据是miss相关的估计，实际上的MPI可能由题目进一步给出，因为不同的程序对应的访存比例可能不同，根据实际情况计算</p>\n</blockquote>\n<h3 id=\"Improve-cache-performance\"><a href=\"#Improve-cache-performance\" class=\"headerlink\" title=\"Improve cache performance\"></a>Improve cache performance</h3><h4 id=\"减少hit时间-4’\"><a href=\"#减少hit时间-4’\" class=\"headerlink\" title=\"减少hit时间 4’\"></a>减少hit时间 4’</h4><ul>\n<li><p><em><strong>small and simple caches</strong></em></p>\n<ul>\n<li>更少的硬件支持；直接映射的速度更快</li>\n</ul>\n</li>\n<li><p><em><strong>avoiding address translation</strong></em></p>\n<ul>\n<li>使用TLB作为page table的cache，Virtual indexed, Physically tagged</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250531161036099.png?imageSlim\"\n                     \n                ></li>\n<li><p><em><strong>way prediction</strong></em></p>\n<ul>\n<li>在cache中采取extra bits预测way，如果预测正确只需要1cc；否则需要额外的cc改变预测位</li>\n</ul>\n</li>\n<li><p><em><strong>trace caches</strong></em></p>\n<ul>\n<li>trace：动态指令序列，主要为 <code>branch</code>设计</li>\n<li>将branch在内的指令打包放入trace cache，由于大部分时间，分支跳转后要指令的指令序列是相同的，因此我们可以直接从trace cache中取用</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"增加cache的bandwidth-3‘\"><a href=\"#增加cache的bandwidth-3‘\" class=\"headerlink\" title=\"增加cache的bandwidth 3‘\"></a>增加cache的bandwidth 3‘</h4><ul>\n<li><strong>pipelined cache access</strong><ul>\n<li>顾名思义，将cache的访问流水线化</li>\n</ul>\n</li>\n<li><strong>multibanked caches</strong><ul>\n<li>将cache划分为几个不同的区域，从而允许同时的访问</li>\n</ul>\n</li>\n<li><strong>non-blocking caches</strong><ul>\n<li>针对 hit under miss 的情况设计，允许CPU在miss之后继续执行指令，避免陷入阻塞block</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"减少miss-penalty-4’\"><a href=\"#减少miss-penalty-4’\" class=\"headerlink\" title=\"减少miss penalty 4’\"></a>减少miss penalty 4’</h4><ul>\n<li><strong>multilevel caches</strong><ul>\n<li>多级cache带来的概念：local miss rate（当前level的缺失率） 与 global miss rate（与上层的cache相关）</li>\n</ul>\n</li>\n<li><strong>critical word first</strong><ul>\n<li>在block中找到需要的word后就快速启动，后续指令的执行和block的剩余内容的搬运并行执行，因此通常用于block的size较大的情况</li>\n<li>又称为 <strong>wrapped fetch</strong> 与 <strong>requested word first</strong></li>\n</ul>\n</li>\n<li><strong>read miss prior to writes</strong><ul>\n<li>在<strong>写回策略</strong>下, 如果发生了 <code>read miss</code>, 需要从主存中读取对应的块并写入 <code>cache</code>. 可以直接取出数据并开始执行指令, 将待写的数据放入 <code>buffer</code>.</li>\n</ul>\n</li>\n<li><strong>merging write buffers</strong><ul>\n<li>多次的写合并到一次的操作， 特别是写的地址是相同的时候，显著降低了penalty</li>\n</ul>\n</li>\n<li><strong>victim caches</strong><ul>\n<li>在相邻的cache层级之间增设牺牲缓存</li>\n<li>发生一次 <code>miss</code>之后并不直接将其踢出 <code>cache</code>, 而是放入~</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"降低miss-rate-4’\"><a href=\"#降低miss-rate-4’\" class=\"headerlink\" title=\"降低miss rate 4’\"></a>降低miss rate 4’</h4><blockquote>\n<p>控制变量分析</p>\n</blockquote>\n<ul>\n<li><strong>larger block size</strong><ul>\n<li>降低了强制miss rate</li>\n<li>但是增大了miss penalty，以及发生冲突miss的可能（block的数量减少）</li>\n</ul>\n</li>\n<li><strong>large cache size</strong><ul>\n<li><strong>经验法则</strong>: 翻倍的cache容量, 带来降低25%的缺失率.</li>\n<li>降低了容量miss</li>\n<li>但是增大了hit time和cost</li>\n</ul>\n</li>\n<li><strong>higher associativity</strong><ul>\n<li><strong>经验法则</strong>: 一个大小为N的直接映射缓存 , 与一个大小为<strong>N&#x2F;2的2路组相联</strong> 缓存具有<strong>相同的未命中率</strong>.</li>\n<li>8-way比较理想。更大的组关联度导致比较时间的增加，从而可能导致时钟周期的增大&#x2F;周期数的增加</li>\n</ul>\n</li>\n<li><strong>compiler optimization</strong><ul>\n<li>在不改变硬件的情况下, 使用编译器重排指令的序列</li>\n<li>数组合并</li>\n<li>循环交换：改变循环的嵌套顺序</li>\n<li>循环融合</li>\n<li>blocking策略</li>\n</ul>\n</li>\n<li><strong>way prediction and Pseudo-Associative Cache</strong><ul>\n<li>路预测的技术与之前提到的相同，用一个预测位来预测</li>\n<li>伪关联缓存：divide cache，然后在miss之后查看当前cache的剩余部分<ul>\n<li>如果此时命中，称为 <strong>pseudo-hit</strong>，时间介于hit 与  miss penalty之间</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>3C回顾：</strong></p>\n<ul>\n<li><strong>Compulsory</strong>: 冷启动，又称为强制miss;</li>\n<li><strong>Capacity</strong>:  缓存的空间不足导致的 miss. 发生在<strong>全关联</strong>当中.</li>\n<li><strong>Conflict（collision）</strong>:  set associative or direct mapped当中发生.</li>\n</ul>\n<blockquote>\n<p>主要关注冲突miss和强制miss的优化</p>\n</blockquote>\n<h4 id=\"通过流水线降低miss-penalty和rate-2’\"><a href=\"#通过流水线降低miss-penalty和rate-2’\" class=\"headerlink\" title=\"通过流水线降低miss penalty和rate 2’\"></a>通过流水线降低miss penalty和rate 2’</h4><ul>\n<li><strong>hardware prefetching</strong><ul>\n<li>使CPU预先取用一部分的数据到<strong>特殊的缓存块</strong>当中, 从而降低了 冷启动的影响.</li>\n<li>预取的结果放入 <code>stream buffer</code>，</li>\n</ul>\n</li>\n<li><strong>compiler prefetching</strong><ul>\n<li>由编译器插入prefetch ins.来获取需要的数据</li>\n<li>根据预取数据存放到<strong>寄存器</strong>还是cache，分为<strong>binding</strong> prefetch 和 non-binding prefetch</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"CH3\"><a href=\"#CH3\" class=\"headerlink\" title=\"CH3\"></a>CH3</h2><h3 id=\"scoreboard\"><a href=\"#scoreboard\" class=\"headerlink\" title=\"scoreboard\"></a>scoreboard</h3><blockquote>\n<p>看一眼</p>\n</blockquote>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250607222728995.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"流水线的阶段\"><a href=\"#流水线的阶段\" class=\"headerlink\" title=\"流水线的阶段\"></a>流水线的阶段</h4><ol>\n<li>IF: 取指令</li>\n<li>IS: 以下条件同时满足时允许发射：<ol>\n<li>FU空闲——<strong>避免结构冲突</strong>；</li>\n<li>正在执行的指令，没有一条要写回的Rd与当前指令相同——<strong>避免了WAW冲突</strong></li>\n</ol>\n</li>\n<li>RO: 监视数据冲突，<strong>当且仅当两个源寄存器都准备好了</strong>，才读取</li>\n<li>EX: 在不同的FU中执行(MEM涵盖在整数的FU当中)</li>\n<li>WB：更新状态表之后的下一个cc可以RO</li>\n</ol>\n<h4 id=\"表的设计\"><a href=\"#表的设计\" class=\"headerlink\" title=\"表的设计\"></a>表的设计</h4><ul>\n<li>指令状态表 <strong>Instruction Status Table</strong><ul>\n<li>记录指令的状态，在哪个阶段</li>\n</ul>\n</li>\n<li>功能单元状态表 <strong>Functional Unit Status Table</strong><ul>\n<li><code>busy</code>：FU 是否空闲；<code>op</code>：FU 正在执行什么操作</li>\n<li><code>Vi</code>, <code>Vj</code>, <code>Vk</code>：FU 的操作数对应着哪个寄存器</li>\n<li><code>Qj</code>, <code>Qk</code>：FU 的操作数如果没准备好，应该从哪个 FU 读取</li>\n<li><code>Rj</code>, <code>Rk</code>：操作数是否准备好，如果准备好了就填 <code>yes</code>，然后在RO阶段读取之后立即改为 <code>NO</code><ul>\n<li>率先执行的指令在WB的时候检查写入的寄存器是否在某个FU的ready-list中为 <code>YES</code>，表示等待另一个操作数准备好之后同时读取（还未读取）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>寄存器状态表 <strong>Register Status Table</strong><ul>\n<li>如果某个寄存器的值<strong>正在被某个 FU 的操作生成</strong>，填入这个操作FU的编号</li>\n<li>生成好了之后，填入实际值</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"显式重命名\"><a href=\"#显式重命名\" class=\"headerlink\" title=\"显式重命名\"></a>显式重命名</h4><p>通过设置更多的物理寄存器, 同时维护一个 <code>free list</code>.</p>\n<ul>\n<li>每一条需要写寄存器的盒指令，均分配一个新的物理寄存器；<ul>\n<li>此时还需要记录原来的map（对应的物理寄存器），这是为了在发生中断&#x2F;rollback的时候可以复原之前的映射关系；</li>\n</ul>\n</li>\n<li>当可以写回的时候，再将得到的值写回到逻辑寄存器，同时将锁定的物理寄存器 free up（加入到free list的末尾）</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602113651013.png?imageSlim\"\n                     \n                >\n\n<p>加入显式重命名之后的计分板阶段分析：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250608145256468.png?imageSlim\"\n                     \n                >\n\n<p>显式重命名消除冲突的示例：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250608145854391.png?imageSlim\"\n                     \n                >\n\n<h3 id=\"Tomasolo\"><a href=\"#Tomasolo\" class=\"headerlink\" title=\"Tomasolo\"></a>Tomasolo</h3><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602113117390.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"算法的思想\"><a href=\"#算法的思想\" class=\"headerlink\" title=\"算法的思想\"></a>算法的思想</h4><ul>\n<li>Scoreboard 算法的控制权<strong>全部在 Scoreboard 的三张表中</strong></li>\n<li>Tomasulo 算法将 FU 的控制权<strong>交给 FU 自己</strong>，每个 FU 有自己的指令缓存</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>IF</th>\n<th>IS</th>\n<th>EX</th>\n<th>WB</th>\n</tr>\n</thead>\n</table>\n<h4 id=\"硬件设计\"><a href=\"#硬件设计\" class=\"headerlink\" title=\"硬件设计\"></a>硬件设计</h4><ul>\n<li>每个 FU 有一个 buffer，叫做保留站（reservation station）<ul>\n<li><code>busy</code>：FU 是否空闲；<code>op</code>：FU 正在执行什么操作</li>\n<li><code>Vj</code>, <code>Vk</code>：两个源寄存器对应的寄存器值（注意是值）</li>\n<li><code>Qj</code>, <code>Qk</code>：两个源寄存器如果没准备好，应该从哪个 FU 读取</li>\n<li>此外还会记录 FU <code>&lt;u&gt;</code>距离完成执行这条指令的剩余周期数 <code>&lt;/u&gt;</code></li>\n</ul>\n</li>\n<li>内存也有自己的保留站，叫做 <strong>Load&#x2F;Store Buffer</strong><ul>\n<li><code>busy</code>：这个位置是否有内存读写请求</li>\n<li><code>address</code>：读写的地址</li>\n</ul>\n</li>\n<li>有一个 Register Status Table，和 Scoreboard 算法中的一样</li>\n<li>有一个 Common Data Bus（CDB），负责将结果广播到所有的保留站和寄存器<ul>\n<li>将需要的数据从总线上直接取用, 而不用通过寄存器</li>\n<li>因此传递的时候, 不仅传递值, 同时传递对应操作的编号</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"带投机的实现\"><a href=\"#带投机的实现\" class=\"headerlink\" title=\"带投机的实现\"></a>带投机的实现</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602190343569.png?imageSlim\"\n                     \n                >\n\n<p>为了在遇到分支指令的时候避免stall，我们可以采取投机的方式——假设分支指令不会跳转，继续执行之后的指令</p>\n<p>为了实现投机机制，我们需要一种在预测失败之后可以rollback的机制——新增Reorder buffer i.e. <strong>ROB</strong></p>\n<p>在之前的流程基础上，增加<strong>commit</strong>阶段，让CDB的结果先写入ROB，然后在ROB中实现顺序提交，如果头部指令是：</p>\n<ul>\n<li>普通指令：将结果写回到寄存器和内存，然后从ROB中删除</li>\n<li>分支指令，并且预测：<ul>\n<li>正确：当做普通指令，继续执行</li>\n<li>错误：清空<strong>flush</strong>此时ROB中的所有指令</li>\n</ul>\n</li>\n</ul>\n<p>Notice：</p>\n<ul>\n<li>IS阶段需要将指令同时写到ROB中，因此只有当保留站和ROB都有空余的情况下，可以issue</li>\n<li>issue之后，可以从<strong>ROB和寄存器</strong>中读取操作数到<strong>保留站</strong>中</li>\n<li>内存中的数据也可能存在RAW的冲突，因此在load的时候，需要从ROB中的store的地址相比较：</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602190716237.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>只有当我们明确知道load对应的内存地址与先前store指令的目标地址不冲突的时候，才执行load（向内存发送请求），否则stall</p>\n</blockquote>\n<h4 id=\"MEM的RAW与解决\"><a href=\"#MEM的RAW与解决\" class=\"headerlink\" title=\"MEM的RAW与解决\"></a>MEM的RAW与解决</h4><p><strong>参考的解决：</strong></p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616151543260.png?imageSlim\"\n                     \n                >\n\n<p><strong>对应的例子：</strong></p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616152019357.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>此处右下角的应该是load buffer？所以实际填写的不是存在冲突的store地址，而是load的地址；</p>\n<p>猜测是这样的流程：如果load前面的某个store的目标地址还没有计算完毕，就将load的地址栏填入store的ROB编号，然后store完成的时候带着ROB编号在load内部检查，同时让store的地址与load的实际地址进行比较？</p>\n<p>所以上图中的“填入到load参照的表格中”有问题</p>\n</blockquote>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250604144824057.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>Tomasulo也无法解决RAW冲突，这是无法解决的冲突</p>\n</blockquote>\n<h3 id=\"分支预测技术\"><a href=\"#分支预测技术\" class=\"headerlink\" title=\"分支预测技术\"></a>分支预测技术</h3><h4 id=\"分支预测表\"><a href=\"#分支预测表\" class=\"headerlink\" title=\"分支预测表\"></a>分支预测表</h4><ul>\n<li>一位预测器：分支历史表，使用PC的低位作为索引，0预测不跳转，1预测跳转</li>\n<li>两位预测器</li>\n<li>N位预测器：<ul>\n<li>使用$[0, 2^{N-1} - 1 ]$ 来预测不跳转</li>\n<li>使用$[2^{N-1}, 2^N-1]$来预测跳转</li>\n<li>如果要求计算准确率，注意是等到稳定的时候再计算（一开始的初始值并不重要）</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"相关预测器\"><a href=\"#相关预测器\" class=\"headerlink\" title=\"相关预测器\"></a>相关预测器</h4><p>当前分支指令依赖别的分支指令的结果：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined1748841625338.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"m-n预测器\"><a href=\"#m-n预测器\" class=\"headerlink\" title=\"m,n预测器\"></a>m,n预测器</h4><ul>\n<li><strong>m</strong>：使用m位的<strong>移位寄存器</strong>来储存m条指令是否跳转的结果<ul>\n<li>每当得到一条最近的指令是否跳转的时候，就进行移位并填充0表示not-taken 或者 1表示taken</li>\n</ul>\n</li>\n<li><strong>n</strong>： 使用n-bit来预测当前指令是否跳转</li>\n<li><strong>分支预测缓冲区</strong>：一个记录分支跳转历史的buffer，使用上述的m-bit global history + 指令的低位进行index，每一行都对应了指定分支指令的预测器</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602134422581.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"预测器大小的计算\"><a href=\"#预测器大小的计算\" class=\"headerlink\" title=\"预测器大小的计算\"></a>预测器大小的计算</h4><p><strong>实际的硬件组成</strong>：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602142419201.png?imageSlim\"\n                     \n                >\n\n<p><strong>对应的大小计算：</strong></p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602133757083.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"其他预测器\"><a href=\"#其他预测器\" class=\"headerlink\" title=\"其他预测器\"></a>其他预测器</h4><ul>\n<li><strong>Tournament predictor</strong>：为了避免PC低位的相同干扰, 采用 <code>global</code> 和 <code>local</code>两个预测器，但是区别于上述的预测器，此处二者采取或得到对应的预测器<ul>\n<li><em><strong>TODO</strong></em>：课件3.2的size计算</li>\n</ul>\n</li>\n<li><strong>Gshare预测器</strong>：将PC低位和历史记录进行异或, 从而进行选择</li>\n</ul>\n<h4 id=\"BTB\"><a href=\"#BTB\" class=\"headerlink\" title=\"BTB\"></a>BTB</h4><p>branch target buffer ｜ 分支目标缓冲区</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602140403962.png?imageSlim\"\n                     \n                >\n\n<ul>\n<li>记录分支指令预测的跳转地址</li>\n<li>利用指令地址index，如果在BTB中找到了就取出预测地址并执行<ul>\n<li>if branch taken，照常执行，没有stall</li>\n<li>if not taken，将fetch的ins.清空，并且将预测错误的entry从BTB中删除</li>\n</ul>\n</li>\n<li>同理，如果一开始没有在BTB中index找到对应指令的entry，并且结果显示指令需要跳转，就在BTB中加入这一对的entry用于之后的快速预测</li>\n</ul>\n<blockquote>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602140813293.png?imageSlim\"\n                     \n                ></blockquote>\n<h4 id=\"Integrated-Instruction-Fetch-Units\"><a href=\"#Integrated-Instruction-Fetch-Units\" class=\"headerlink\" title=\"Integrated Instruction Fetch Units\"></a>Integrated Instruction Fetch Units</h4><p>随着CPI降低，取址单元可能成为瓶颈</p>\n<p>因此，考虑将fetch unit与分支预测器、指令预取器以及指令的buffer相集成</p>\n<h4 id=\"Return-Address-Predictors\"><a href=\"#Return-Address-Predictors\" class=\"headerlink\" title=\"Return Address Predictors\"></a>Return Address Predictors</h4><p>预测目标地址在运行时变化的间接跳转的技术。</p>\n<p>将返回地址记录在类似于栈的buffer中，避免到内存中取返回地址，加速函数的返回</p>\n<h3 id=\"分支预测技术总结\"><a href=\"#分支预测技术总结\" class=\"headerlink\" title=\"分支预测技术总结\"></a>分支预测技术总结</h3><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250602143610588.png?imageSlim\"\n                     \n                >\n\n<hr>\n<h2 id=\"CH4-DLP\"><a href=\"#CH4-DLP\" class=\"headerlink\" title=\"CH4  DLP\"></a>CH4  DLP</h2><h4 id=\"Flynn标准分类\"><a href=\"#Flynn标准分类\" class=\"headerlink\" title=\"Flynn标准分类\"></a>Flynn标准分类</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605102615189.png?imageSlim\"\n                     \n                >\n\n<ul>\n<li>LLP时的依赖检查：关注是否在同一层读取了其他层写入的结果<ul>\n<li>可以使用本层中串行计算的结果</li>\n</ul>\n</li>\n<li>reductions</li>\n</ul>\n<h4 id=\"Rename来解除依赖\"><a href=\"#Rename来解除依赖\" class=\"headerlink\" title=\"Rename来解除依赖\"></a>Rename来解除依赖</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250607202128965.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>根据题目找到对应的依赖，然后据此rename寄存器</p>\n</blockquote>\n<hr>\n<h4 id=\"Strip-Mining-条带挖掘\"><a href=\"#Strip-Mining-条带挖掘\" class=\"headerlink\" title=\"Strip Mining 条带挖掘\"></a>Strip Mining 条带挖掘</h4><p>MVL指的是向量处理器中寄存器最多的字长.</p>\n<p>当用户实际的处理长度超过MVL时, 进行取模, 首先用<strong>标量处理余数</strong>, 然后用向量计算剩余的部分.</p>\n<p>一个简单的例子：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250611151927322.png?imageSlim\"\n                     \n                >\n\n<h3 id=\"向量机的问题\"><a href=\"#向量机的问题\" class=\"headerlink\" title=\"向量机的问题\"></a>向量机的问题</h3><ul>\n<li>需要 <em>set-up</em> 时间;</li>\n<li>内存的访问带宽会影响向量机的性能</li>\n</ul>\n<h3 id=\"提升向量机的表现\"><a href=\"#提升向量机的表现\" class=\"headerlink\" title=\"提升向量机的表现\"></a>提升向量机的表现</h3><p><strong>convoy:</strong></p>\n<ul>\n<li>可以并行的向量计算指令的集合</li>\n<li>不存在结构冲突</li>\n<li>可以通过vector chain来解决RAW冲突</li>\n</ul>\n<p><strong>chime</strong>  ：the unit of time taken to execute one convey</p>\n<h4 id=\"Vector-Chaining\"><a href=\"#Vector-Chaining\" class=\"headerlink\" title=\"Vector Chaining\"></a>Vector Chaining</h4><p>解决了RAW的冲突.</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"体系结构随笔.assets/image-20250428115214201.png\"\n                      alt=\"image-20250428115214201\" style=\"zoom:50%;\" \n                >\n\n<p>实际等价于流水线的 <em>forwarding</em>. 不同的是向量机是对向量的打包计算.</p>\n<h4 id=\"Conditional-Execution\"><a href=\"#Conditional-Execution\" class=\"headerlink\" title=\"Conditional Execution\"></a>Conditional Execution</h4><p>为了处理 <em>if</em> 语句的优化.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>（I=<span class=\"number\">0</span>； I&lt;N; I++）</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> （A[I］！= B［I］） A［I］ -= B［I]；</span><br></pre></td></tr></table></figure>\n\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"体系结构随笔.assets/image-20250428115506868.png\"\n                      alt=\"image-20250428115506868\" style=\"zoom:50%;\" \n                >\n\n<p>V0就是其中的标志寄存器.</p>\n<p>根据标志位, 选择需要的位进行计算(压缩), 然后将其扩展成完整的向量.</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"体系结构随笔.assets/image-20250428115702618.png\"\n                      alt=\"image-20250428115702618\" style=\"zoom:50%;\" \n                >\n\n<h4 id=\"sparce-matrices\"><a href=\"#sparce-matrices\" class=\"headerlink\" title=\"sparce matrices\"></a>sparce matrices</h4><p>为了解决矩阵乘法中太多0的问题.</p>\n<p>涉及到 Vector <em>Scatter&#x2F;Gather</em> 的方法, 实际就是不连续的访存操作.</p>\n<p><strong>gather：从不连续的地址读取并加载到一个向量寄存器中</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;N; i++)</span><br><span class=\"line\">    A[i] = B[i] + C[D[i]]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>对应的指令: (<code>LVI</code>)</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LV\t\t\tVD, RD        ; Load indices in D vector</span><br><span class=\"line\">LVI\tVC,(RC, VD)   ; Load indirect from RC base</span><br><span class=\"line\">LV \tVB, RB\t  ; Load B vector</span><br><span class=\"line\">ADDV.D \tVA, VB, VC\t  ; Do add</span><br><span class=\"line\">SV \tVA, RA\t  ; Store result</span><br></pre></td></tr></table></figure>\n\n<p><strong>scatter：将一个向量寄存器中的数据写入到不连续的地址中</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (i=0; i&lt;N; i++)</span><br><span class=\"line\">    A[B[i]]++;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>对应的指令:（<code>SVI</code>）</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LV \tVB, RB      ; Load indices in B vector</span><br><span class=\"line\">LVI \tVA,(RA, VB) ; Gather initial A values</span><br><span class=\"line\">ADDV \tVA, RA, 1\t; Increment</span><br><span class=\"line\">SVI \tVA,(RA, VB) ; Scatter incremented values</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Multi-lane-Implementation\"><a href=\"#Multi-lane-Implementation\" class=\"headerlink\" title=\"Multi-lane Implementation\"></a>Multi-lane Implementation</h4><p>同一个向量指令的不同分量，可以在不同的lane上执行</p>\n<blockquote>\n<p>不同的lane之间不能存在数据冲突</p>\n</blockquote>\n<p>在多个FU的流水线中优化:</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"体系结构随笔.assets/image-20250428120350459.png\"\n                      alt=\"image-20250428120350459\" style=\"zoom:50%;\" \n                >\n\n<h4 id=\"Chain-Multiple-Lane\"><a href=\"#Chain-Multiple-Lane\" class=\"headerlink\" title=\"Chain &amp; Multiple Lane\"></a>Chain &amp; Multiple Lane</h4><p>可以将上述的思路和chain相结合.</p>\n<p>向量机通过展开, 减少了条件判断等指令来减少了指令数.</p>\n<ul>\n<li>操作数指的是涉及的运算个数(比如一条向量计算涉及512个操作数, 但是指令数是1).</li>\n</ul>\n<p>编译器和用户可以互相提示数组是否可以向量化.</p>\n<p><code>SIMD</code>: single instruction multiple data</p>\n<h3 id=\"GPU\"><a href=\"#GPU\" class=\"headerlink\" title=\"GPU\"></a>GPU</h3><p>Graphical Processing Units.</p>\n<p>采取 <code>SIMT</code>: Single Instruction Multiple Thread.</p>\n<ul>\n<li>每个线程负责一条指令的部分计算.</li>\n</ul>\n<p>thread &#x3D;&gt; block &#x3D;&gt; grid</p>\n<h4 id=\"与向量机的主要区别\"><a href=\"#与向量机的主要区别\" class=\"headerlink\" title=\"与向量机的主要区别\"></a>与向量机的主要区别</h4><ul>\n<li>不存在标量处理器</li>\n<li>使用多线程解决内存访问的延迟<ul>\n<li>向量机通过bank扩大内存访问的带宽</li>\n</ul>\n</li>\n<li>具有很多的function units (类似于具有很多小的处理器.)</li>\n</ul>\n<h4 id=\"术语\"><a href=\"#术语\" class=\"headerlink\" title=\"术语\"></a>术语</h4><p><strong>warp</strong></p>\n<ul>\n<li>32 threads &#x3D;&#x3D;&gt; warp &#x2F; SIMD thread<ul>\n<li>必须执行相同的指令.</li>\n<li>warp之间不存在数据依赖.</li>\n</ul>\n</li>\n</ul>\n<p><strong>PTX</strong></p>\n<p>对应的机器汇编.</p>\n<p><strong>predicate register</strong></p>\n<p>谓词寄存器, 类似于向量机中的标量寄存器.</p>\n<h4 id=\"MEM层次\"><a href=\"#MEM层次\" class=\"headerlink\" title=\"MEM层次\"></a>MEM层次</h4><ul>\n<li>private memory</li>\n<li>local memory: 1个block内部共享</li>\n<li>GPU memory: 公共.</li>\n</ul>\n<h3 id=\"循环级别的并行\"><a href=\"#循环级别的并行\" class=\"headerlink\" title=\"循环级别的并行\"></a>循环级别的并行</h3><p>有的循环间的数据依赖可以被消除:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">100</span>; i=i+<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">  A[i] = A[i] + B[i]; <span class=\"comment\">/* S1 */</span></span><br><span class=\"line\">  B[i+<span class=\"number\">1</span>] = C[i] + D[i]; <span class=\"comment\">/* S2 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>取出首尾的两条指令，改写:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A[<span class=\"number\">0</span>] = A[<span class=\"number\">0</span>] + B[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">99</span>; i=i+<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">  B[i+<span class=\"number\">1</span>] = C[i] + D[i];</span><br><span class=\"line\">  A[i+<span class=\"number\">1</span>] = A[i+<span class=\"number\">1</span>] + B[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">B[<span class=\"number\">100</span>] = C[<span class=\"number\">99</span>] + D[<span class=\"number\">99</span>];</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"寻找循环依赖\"><a href=\"#寻找循环依赖\" class=\"headerlink\" title=\"寻找循环依赖\"></a>寻找循环依赖</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"体系结构随笔.assets/image-20250428123817503.png\"\n                      alt=\"image-20250428123817503\" style=\"zoom:50%;\" \n                >\n\n<p>不同的迭代中, 存在读取和存储的地址相同的情况 &#x3D;&#x3D;&gt; 存在循环依赖.</p>\n<ul>\n<li>计算方式: If a dependency exists, <strong>GCD(<em>c</em>,<em>a</em>) must evenly divide (<em>d</em>-<em>b</em>)</strong></li>\n<li>通过枚举 $i$ 来判断是否存在冲突，本质上就是图示的公式是否成立</li>\n</ul>\n<p>可以通过变量的重命名来解决WAW等冲突.</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"体系结构随笔.assets/image-20250428124217604.png\"\n                      alt=\"image-20250428124217604\" style=\"zoom:50%;\" \n                >\n\n<h2 id=\"CH5-TLP\"><a href=\"#CH5-TLP\" class=\"headerlink\" title=\"CH5 TLP\"></a>CH5 TLP</h2><h3 id=\"其他概念\"><a href=\"#其他概念\" class=\"headerlink\" title=\"其他概念\"></a>其他概念</h3><ul>\n<li>NUMA又叫<strong>distributed shared-memory multiprocessor (DSM &#x2F; DSP)</strong></li>\n<li>UMA又被叫做 symmetric multiprocessors (<strong>SMP</strong>)  or  <strong>centralized shared-memory multiprocessors</strong></li>\n</ul>\n<h4 id=\"概念区分\"><a href=\"#概念区分\" class=\"headerlink\" title=\"概念区分\"></a>概念区分</h4><ul>\n<li><strong>coherence：<strong>规定了针对</strong>同一内存</strong>地址读写操作的行为</li>\n<li><strong>consistency：<strong>定义了涉及</strong>不同内存</strong>地址访问时的读写<strong>顺序行为</strong></li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250618112258192.png?imageSlim\"\n                     \n                >\n\n<h3 id=\"硬件原语\"><a href=\"#硬件原语\" class=\"headerlink\" title=\"硬件原语\"></a>硬件原语</h3><ul>\n<li><code>exch</code> 用于将寄存器的值与内存地址中的值交换<ul>\n<li>该操作是原子性的，一次性完成读取旧值和写入新值的操作</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"lr与sc\"><a href=\"#lr与sc\" class=\"headerlink\" title=\"lr与sc\"></a>lr与sc</h4><blockquote>\n<p>补充这部分的指令介绍，方便后续相关汇编的理解</p>\n</blockquote>\n<p><strong>Load-Reserved（加载保留）</strong></p>\n<ul>\n<li>加载之后在硬件层面预留了这个内存地址，表示有向其写入的意图，用于后续的sc指令是否允许写入</li>\n<li><code>lr</code> 与 <code>ll</code>也就是 <strong>load linked</strong> 本质上是一样的，只不过后者是MIPS架构中的指令名称，都是加载并预留的原子指令</li>\n</ul>\n<p><strong>Store-Conditional（条件存储）</strong></p>\n<ul>\n<li>尝试将值写入到内存地址；</li>\n<li>只有在之前对该地址有成功的lr预留 且 未被其他处理器干扰的情况下，才能成功写入</li>\n<li>具有返回值：<ul>\n<li>如果失败：返回0</li>\n<li>如果成功返回非0</li>\n</ul>\n</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250618112626555.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"lr与sc的原子性操作应用\"><a href=\"#lr与sc的原子性操作应用\" class=\"headerlink\" title=\"lr与sc的原子性操作应用\"></a>lr与sc的原子性操作应用</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616164223737.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>Note：<strong>Only Regitser-Register instruction can be insert between LL &amp; SC</strong></p>\n</blockquote>\n<h4 id=\"自旋锁\"><a href=\"#自旋锁\" class=\"headerlink\" title=\"自旋锁\"></a>自旋锁</h4><p>spin lock指的是程序陷入了不断尝试获得lock的loop</p>\n<p><strong>一个简单的版本</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">li R2, #1</span><br><span class=\"line\">lockit: exch R2, 0(R1)</span><br><span class=\"line\">bnez R2, lockit</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>R1所对应的内存地址保存了锁是否为空闲的信息，0 表示 free， 1表示被占用</li>\n<li>上述版本将1加载到R2，并不断尝试将它的值与R1对应的内存地址的值交换</li>\n<li>如果锁正在被占用，R2还是1，因此会不断陷入lockit的循环，直到某次的loop成功加锁（R2被交换为0），然后继续执行</li>\n</ul>\n<p>上述的问题是，不断尝试 <code>exch</code>涉及到了多次的读写操作，会带来总线上的invalidate信号的traffic</p>\n<p>因此，我们考虑采取下面的优化方案</p>\n<p><strong>优化的版本</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lockit: ld x2,0(x1)         ; load of lock</span><br><span class=\"line\">        bnez x2,lockit      ; not available-spin</span><br><span class=\"line\">        addi x2,R0,#1       ; load locked value</span><br><span class=\"line\">        EXCH x2,0(x1)       ; swap</span><br><span class=\"line\">        bnez x2,lockit      ; branch if lock wasn’t 0</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>相比于简单版本的反复exch，优化之后的loop里只涉及到了读操作，因此对程序的表现更加友好</p>\n</blockquote>\n<p>使用 <code>exch</code>的指令由于读写合一，操作不灵活，我们考虑将读写利用同样是原子性指令的 <code>ll</code>和 <code>sc</code>来分离，实现等价的效果：</p>\n<p><strong>采取LL和SC实现：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lockit: lr x2,0(x1)         ; load reserved</span><br><span class=\"line\">        bnez x2,lockit      ; not available-spin</span><br><span class=\"line\">        addi x2,R0,#1       ; locked value</span><br><span class=\"line\">        sc x2,0(x1)         ; store （成功写入/加锁 返回0）</span><br><span class=\"line\">        bnez x2,lockit      ; branch if store fails</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>因为lr、sc和exch一样，也是原子性操作，确保了“检查锁是否可以用”和“设置锁”不会被其他线程打断；</p>\n<p>不同的是，exch通过交换之后的寄存器值来判断是否加锁成功，而sc利用自身操作的返回值来判断是否成功加锁</p>\n</blockquote>\n<h4 id=\"自旋锁的性能分析\"><a href=\"#自旋锁的性能分析\" class=\"headerlink\" title=\"自旋锁的性能分析\"></a>自旋锁的性能分析</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616164043201.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p><strong>TODO</strong></p>\n</blockquote>\n<h3 id=\"Snoopy\"><a href=\"#Snoopy\" class=\"headerlink\" title=\"Snoopy\"></a>Snoopy</h3><p>两种转换规则：</p>\n<ul>\n<li><p>一定要转换成 S 状态再read（除了自己read自己的hit）；</p>\n</li>\n<li><p>一定要转换成 E &#x2F; M 状态再write</p>\n</li>\n<li><p>P1写入X的新值之后，需要确保其他处理器知道变化，分为两种策略：</p>\n<ul>\n<li><em><strong>Write Invalidate</strong></em>：将其他P的副本置为无效（搭配<strong>写穿透</strong>）<ul>\n<li>但是也适合写回策略搭配，注意dirty位的使用</li>\n</ul>\n</li>\n<li><em><strong>Write Broadcast</strong></em>：将其他的副本直接写入新值（搭配<strong>写回策略</strong>）</li>\n</ul>\n</li>\n</ul>\n<p>一个简单的例子；</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250524132310613.png?imageSlim\"\n                     \n                >\n\n<ul>\n<li>注意此时bus信号的桥梁作用：<ul>\n<li>发生了read miss之后，首先将P2的对应cache line设置为share状态（此时还不知道值）</li>\n<li>总线信号传到P1之后，P1的对应状态修改为share，并且发起了write back的信号，将A1的值写入mem</li>\n<li>之后，总线信号read data让P2读取了mem中的值，完成了 <code>P2：read A1</code>的操作</li>\n</ul>\n</li>\n</ul>\n<p>每一个处理器&#x2F;线程对每一个block具有自己的状态</p>\n<h4 id=\"状态机\"><a href=\"#状态机\" class=\"headerlink\" title=\"状态机\"></a>状态机</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250607203010638.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>处于E状态时，如果收到了bus上的read-miss信号，会将该P改为S状态</p>\n</blockquote>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605104010432.png?imageSlim\"\n                     \n                >\n\n<h3 id=\"Directory\"><a href=\"#Directory\" class=\"headerlink\" title=\"Directory\"></a>Directory</h3><ul>\n<li><em><strong>local node</strong></em>  发起请求的处理器</li>\n<li><em><strong>home node</strong></em>  对应地址所在的处理器</li>\n<li><em><strong>remote node</strong></em> 拥有这个副本的处理器</li>\n</ul>\n<p>在homeNode中存储一个block在不同处理器&#x2F;线程中的状态</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605105815979.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>其中的 <code>fetch/invalidate</code>发生在：local发生了write miss，并且home中对应的block为E状态，向独占该block的P发送～信号，确保将仅在对应P中的数据读取再非法化（内存中数据过时）</p>\n<ul>\n<li>读取之后的数据先存放在了home中，然后再由home发送data reply给local（一般来说local写入了新值，并不需要这个旧值；但是如果写入的新值是 X+1，就必须获得正确的旧值了，因此还是有必要的）</li>\n</ul>\n</blockquote>\n<h4 id=\"write-miss\"><a href=\"#write-miss\" class=\"headerlink\" title=\"write miss\"></a>write miss</h4><p>初始：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605110226409.png?imageSlim\"\n                     \n                >\n\n<p>写入：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605110631594.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"fetch-invalidate\"><a href=\"#fetch-invalidate\" class=\"headerlink\" title=\"fetch/invalidate\"></a><code>fetch/invalidate</code></h4><p>初始：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605111010835.png?imageSlim\"\n                     \n                >\n\n<p>过程：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605111257118.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>如果目录节点中记录的状态是E，就向对应的处理器发送 <code>fetch</code>的信号</p>\n</blockquote>\n<h4 id=\"根据cache填写目录\"><a href=\"#根据cache填写目录\" class=\"headerlink\" title=\"根据cache填写目录\"></a>根据cache填写目录</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605113001427.png?imageSlim\"\n                     \n                >\n\n<p>对应的简单例子：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605113359800.png?imageSlim\"\n                     \n                >\n\n<p>另一个语言描述的例子（答案）：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250611164909272.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>22-23回忆卷的最后一题</p>\n</blockquote>\n<h4 id=\"cache失效问题\"><a href=\"#cache失效问题\" class=\"headerlink\" title=\"cache失效问题\"></a>cache失效问题</h4><p>P将自己cache中的block kick out时，需要将对应的home中的sharer中将P踢出序列，如果原本仅有P本身，就需要将对应的状态改为U，表示uncached.</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605114629798.png?imageSlim\"\n                     \n                >\n\n<h3 id=\"MESI\"><a href=\"#MESI\" class=\"headerlink\" title=\"MESI\"></a>MESI</h3><blockquote>\n<p>如果没有特别说明，就当做MSI</p>\n</blockquote>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250606191507180.png?imageSlim\"\n                     \n                >\n\n<p>状态：</p>\n<ul>\n<li>Invalid: 缓存块无效，不能被使用；</li>\n<li>Shared: 缓存块未被修改，且可能存在于多个缓存中，内存中的数据是最新的；</li>\n<li>Modified: 缓存行已被修改，且该缓存行是唯一的有效副本，内存中的数据已过时；</li>\n<li>Exclusive：缓存块未被修改，<strong>且是唯一的有效副本</strong>，内存中的数据是最新的。</li>\n</ul>\n<p>E的存在是为了<strong>优化写入性能和减少总线流量</strong>，具体来说，我们用E来区分某个缓存块只被一个处理器读取且还没有写入的状态，是为了在此后该处理器写入该缓存时，不需要在总线上发送Invalidate的信号（因为没有共享缓存的其他处理器）</p>\n<blockquote>\n<p>如果是传统的MSI，即使share的成员只有一个，还是要发送信号到总线，被其他的处理器接收并处理，这带来了额外的时间开销</p>\n</blockquote>\n<h3 id=\"Consistency\"><a href=\"#Consistency\" class=\"headerlink\" title=\"Consistency\"></a>Consistency</h3><h4 id=\"Sequential-consistency\"><a href=\"#Sequential-consistency\" class=\"headerlink\" title=\"Sequential consistency\"></a>Sequential consistency</h4><p>特征：<strong>Delay next memory access until the previous one is completed.</strong></p>\n<blockquote>\n<p>对指令的执行有着严格的顺序要求，虽然保证了正确性，但是延时较高</p>\n</blockquote>\n<ul>\n<li>相同处理器内部的内存访问是<strong>有序</strong>的</li>\n<li>不同处理器的内存访问是交错的</li>\n</ul>\n<p>课本的例子：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250611150023807.png?imageSlim\"\n                     \n                >\n\n<p>简单的计算：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605131113080.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"Relaxed-Models\"><a href=\"#Relaxed-Models\" class=\"headerlink\" title=\"Relaxed Models\"></a>Relaxed Models</h4><p>为了降低SC带来的延时，我们采取 Synchronized program 来让指令的读写在乱序执行中保持与串行执行等价的效果，以下是不同等级的model：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250605133510558.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>下方的顺序表示该模型在前者的基础上去除了对应的顺序约束，但是要求访问的对象不是相同地址的</p>\n<p>比如在TSO中， <code>C= </code>作为写操作，允许和 <code>= D </code>的读操作一起执行，解除了W-R的约束</p>\n</blockquote>\n<h1 id=\"jxh老师的PPT\"><a href=\"#jxh老师的PPT\" class=\"headerlink\" title=\"jxh老师的PPT\"></a>jxh老师的PPT</h1><blockquote>\n<p>针对核心的补充摘录</p>\n</blockquote>\n<p><strong>Tomasulo的三个主要优点</strong></p>\n<ul>\n<li><strong>The distribution of the hazard detection logic</strong><ul>\n<li>保留站和CDB</li>\n<li>如果多条指令在等待一个结果 或者 一条指令等待多个操作数，可以<strong>同时</strong>通过CDB的广播读取（避免了通过寄存器读取）</li>\n</ul>\n</li>\n<li><strong>The elimination of stalls for WAW and WAR hazards</strong></li>\n<li><strong>overlap iterations of loops</strong>：循环迭代的重叠<ul>\n<li>相当于从HW（硬件）上实现了循环展开</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>计分板无法实现 overlap iterations of loops</p>\n</blockquote>\n<p><strong>为什么Tomasulo可以实现循环迭代的重叠？</strong></p>\n<ul>\n<li>寄存器重命名</li>\n<li>保留站允许指令的提前发射以及旧值的存储（避免了<strong>WAR</strong>冲突）</li>\n<li>Tomasulo building data flow dependency graph on the fly.</li>\n</ul>\n<p><strong>计分板阶段的回顾</strong></p>\n<ul>\n<li>ISSUE：当下面的条件同时满足时issue：<ul>\n<li>具有可用的功能单元</li>\n<li>没有与正在执行的指令具有相同的目标寄存器</li>\n<li>此时避免了结构冲突和WAW冲突</li>\n</ul>\n</li>\n<li>RO：当两个操作数都准备好了的时候才会读取<ul>\n<li>避免了RAW的冲突</li>\n</ul>\n</li>\n<li>EX</li>\n<li>WB：此时检测WAR冲突并在必要的时候stall</li>\n</ul>\n<h4 id=\"计分板和Tomasulo的对比\"><a href=\"#计分板和Tomasulo的对比\" class=\"headerlink\" title=\"计分板和Tomasulo的对比\"></a>计分板和Tomasulo的对比</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250615163546156.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>Tomasulo消除了WAW与WAR冲突；没有显式寄存器重命名的计分板无法消除～</p>\n<p><strong>OOO</strong>：out of order，此处指乱序完成</p>\n</blockquote>\n<h4 id=\"CDB的额外信息\"><a href=\"#CDB的额外信息\" class=\"headerlink\" title=\"CDB的额外信息\"></a>CDB的额外信息</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250615164708448.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>TODO： 为什么需要source address？</p>\n</blockquote>\n<h4 id=\"使得CPI-1的几种方法\"><a href=\"#使得CPI-1的几种方法\" class=\"headerlink\" title=\"使得CPI &lt; 1的几种方法\"></a>使得CPI &lt; 1的几种方法</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616140413205.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>向量处理；超标量；VLIW</p>\n</blockquote>\n<h4 id=\"超标量\"><a href=\"#超标量\" class=\"headerlink\" title=\"超标量\"></a>超标量</h4><p>使用基于Tomasulo的算法，可以实现乱序执行的动态调度</p>\n<p><strong>Issue Packet：</strong></p>\n<ul>\n<li>从fetch unit获得的指令组合，可以在一个周期内同时发射</li>\n<li>Issue阶段也被流水线化：<ul>\n<li>第一个阶段检查当前packet可以一次性发射的指令数（不存在数据冲突）；</li>\n<li>第二个阶段检查上一步选中的指令是否与已经发射的指令存在冲突</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>对于N-issue的多发射，每个cc实际发射 0-N条指令</p>\n</blockquote>\n<p><strong>多发射存在的问题</strong></p>\n<ul>\n<li>必须在一个cc内多次重命名相同的寄存器</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616141407666.png?imageSlim\"\n                     \n                >\n\n<ul>\n<li>拓宽总线</li>\n</ul>\n<p><strong>两种实现多发射的方法</strong></p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616141739907.png?imageSlim\"\n                     \n                >\n\n<ul>\n<li>pipeline</li>\n<li>widen issue logic</li>\n</ul>\n<h4 id=\"双发射的例子\"><a href=\"#双发射的例子\" class=\"headerlink\" title=\"双发射的例子\"></a>双发射的例子</h4><p><strong>不带投机执行的双发射：</strong></p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616142306653.png?imageSlim\"\n                     \n                >\n\n<p><strong>带有投机执行的双发射：</strong></p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616142656105.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"WB与IS的并行执行\"><a href=\"#WB与IS的并行执行\" class=\"headerlink\" title=\"WB与IS的并行执行\"></a>WB与IS的并行执行</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616144548699.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>然而事实证明很少会考虑这种情况？除非题目明确说明或者给出充分的暗示，否则认为还是在下一个cc才能issue到原本冲突的FU</p>\n</blockquote>\n<h4 id=\"Global-code-motion\"><a href=\"#Global-code-motion\" class=\"headerlink\" title=\"Global code motion\"></a>Global code motion</h4><p>全局代码调度：通过跨分支移动指令来有效地调度带有内部控制流的循环体。</p>\n<h4 id=\"DRAM与SRAM\"><a href=\"#DRAM与SRAM\" class=\"headerlink\" title=\"DRAM与SRAM\"></a>DRAM与SRAM</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250616145823142.png?imageSlim\"\n                     \n                >\n\n<h1 id=\"大题整理\"><a href=\"#大题整理\" class=\"headerlink\" title=\"大题整理\"></a>大题整理</h1><h2 id=\"CH1-1\"><a href=\"#CH1-1\" class=\"headerlink\" title=\"CH1\"></a>CH1</h2><blockquote>\n<p><strong>TODO</strong></p>\n</blockquote>\n<h2 id=\"CH2\"><a href=\"#CH2\" class=\"headerlink\" title=\"CH2\"></a>CH2</h2><blockquote>\n<p>cache相关的计算题参考知识点梳理的ch2-cache performance</p>\n</blockquote>\n<h4 id=\"Global-Local-Miss-Rate\"><a href=\"#Global-Local-Miss-Rate\" class=\"headerlink\" title=\"Global &#x2F; Local Miss Rate\"></a>Global &#x2F; Local Miss Rate</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250618154738643.png?imageSlim\"\n                     \n                >\n\n<p>课本的例题：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250618154928490.png?imageSlim\"\n                     \n                >\n\n<p>分析：</p>\n<ul>\n<li>L1的global和local缺失率相等，都是 40 &#x2F; 1000</li>\n<li>L2的global缺失率为 20 &#x2F; 1000， local缺失率为 20 &#x2F; 40</li>\n</ul>\n<p>AMAT：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250618155451648.png?imageSlim\"\n                     \n                >\n\n<p><strong>Average stall cycles per instruction</strong>：<strong>( AMAT - hit time ) x MPI</strong> &#x3D; (5.4-1) x 1.5 &#x3D; 6.6 cc</p>\n<h4 id=\"是否满足时间和空间局部性\"><a href=\"#是否满足时间和空间局部性\" class=\"headerlink\" title=\"是否满足时间和空间局部性\"></a>是否满足时间和空间局部性</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250618153621835.png?imageSlim\"\n                     \n                >\n\n<p>分析：根据给出的cache容量、组关联等信息计算block的大小，然后比较block大小是不是大于系统的字长（如果小于就不满足空间局部性）</p>\n<p>此处计算得到block大小为 8KB &#x2F; 4K &#x3D; 2B  &lt; 4B</p>\n<blockquote>\n<p>似乎有cache就一定满足时间局部性？如果按照byte访问的话，能够存储指定的word就可以？</p>\n</blockquote>\n<h4 id=\"cache与tag\"><a href=\"#cache与tag\" class=\"headerlink\" title=\"cache与tag\"></a>cache与tag</h4><p>给定物理地址的宽度 ，cache的容量和组关联度$k$决定了tag的位数：</p>\n<p>假设block是$2^m$字节的大小，cache的容量是$2^n$B, 为直接映射，据此计算得到：</p>\n<ul>\n<li>byte offset bit &#x3D; $m$</li>\n<li>index bit &#x3D; $\\log_22^{n-m} &#x3D; n-m$</li>\n<li>所以tag的位数是：地址位数N - n</li>\n</ul>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250611154233564.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>虚拟页的容量和虚拟地址的位宽在此为干扰信息；</p>\n<p>如果不是直接映射，就先计算一个set的容量，然后据此计算index</p>\n</blockquote>\n<p>假设组关联度是 $k &#x3D; 2^i$ 那么：</p>\n<ul>\n<li>index bit &#x3D; $n-m-i$</li>\n<li>对应的tag位数 &#x3D; N - n + i</li>\n</ul>\n<p><strong>由此可见，题目中没有给出的block的容量恰好是不需要的计算量</strong></p>\n<p><strong>e.g. 加入组关联</strong>：一个8-way的例子</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250611154802019.png?imageSlim\"\n                     \n                >\n\n<h2 id=\"CH3-1\"><a href=\"#CH3-1\" class=\"headerlink\" title=\"CH3\"></a>CH3</h2><blockquote>\n<p>建议参考老师的ppt推一遍计分板和Tomasulo的填表，然后记住什么时候要推迟一个cc、什么时候可以直接执行</p>\n</blockquote>\n<h4 id=\"延迟一个cc的情况\"><a href=\"#延迟一个cc的情况\" class=\"headerlink\" title=\"延迟一个cc的情况\"></a>延迟一个cc的情况</h4><ul>\n<li>计分板和Tomasulo存在结构冲突时，上一条指令WB之后的一个cc下一条指令Issue</li>\n<li>计分板和Tomasulo的指令需要读取待写回的数据时，上一条指令WB之后的下一个周期分别进入RO &#x2F; EX 阶段</li>\n</ul>\n<p>但是Tomasulo的issue队列里可以<strong>直接在上一条结束的cc接替</strong>执行下一条的EX：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250618000138713.png?imageSlim\"\n                     \n                >\n\n<h2 id=\"CH4\"><a href=\"#CH4\" class=\"headerlink\" title=\"CH4\"></a>CH4</h2><blockquote>\n<p>rename 、 string strip和循环级别并行部分的例题请参考知识点梳理部分</p>\n</blockquote>\n<h4 id=\"convoy与chain\"><a href=\"#convoy与chain\" class=\"headerlink\" title=\"convoy与chain\"></a>convoy与chain</h4><blockquote>\n<p>详细内容可以参考英文第六版的p291</p>\n</blockquote>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250618145520392.png?imageSlim\"\n                     \n                >\n\n<p>参考解答：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250618150404833.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>此处忽略了向量机的set-up等时间</p>\n</blockquote>\n<p>下面是回忆卷：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250606095649137.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>参考答案：个人观点</p>\n</blockquote>\n<p>第一问：</p>\n<ul>\n<li>指令的执行时间分为：取指+启动+向量长度， e.g. 第一条vld为 1+4+64 &#x3D; 69</li>\n<li>但是后续的指令的取指可以在前一条指令执行期间完成，因此此处的vadd可以在cc&#x3D;69开始执行：69 + 7+64 &#x3D; 140cc</li>\n<li>后续指令同理分析</li>\n<li>….</li>\n</ul>\n<p>第二问：3（vsd与vld存在结构冲突）</p>\n<p>第三问：</p>\n<ul>\n<li>估计：3x64 + 3 + 7 + 10 + 4</li>\n<li>考虑了取指时间以及各个convoy内部最长的启动时间</li>\n</ul>\n<h4 id=\"blocked-与-unblocked\"><a href=\"#blocked-与-unblocked\" class=\"headerlink\" title=\"blocked 与 unblocked\"></a>blocked 与 unblocked</h4><p>Here is a blocked and unblocked version of C code to perform a matrix operation on a 256x256 matrix:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1024</span>; i += <span class=\"number\">16</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">1024</span>; j += <span class=\"number\">16</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> m = <span class=\"number\">0</span>; m &lt; <span class=\"number\">16</span>; m++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> n = <span class=\"number\">0</span>; n &lt; <span class=\"number\">16</span>; n++) &#123;</span><br><span class=\"line\">                output[j + n][i + m] = input[i + m][j + n];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1024</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">1024</span>; j++) &#123;</span><br><span class=\"line\">        output[j][i] = input[i][j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Suppose the size of the element in the matrix is 32 bits and we execute the codes above on a processor with a 2KB fully associative data cache using the least recently used (LRU) replacement strategy. The cache block size is 64 bytes. What is the relative number of cache misses when running the blocked and unblocked version?</p>\n<p>A. 2 : 17</p>\n<p>B. 1 : 8</p>\n<p>C. 1 : 17</p>\n<p>D. 1 : 16</p>\n<blockquote>\n<p>A</p>\n<p><strong>SOLUTION：</strong></p>\n</blockquote>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250611150700645.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>之所以说blocked version一轮循环只会发生32次miss，是因为计算得到这个cache正好有32个cache line，因此在内层循环所需的32个block都只需要读取一次；</p>\n<p>因此，我们首先根据题目给出的cache容量和block信息，算出index；然后结合元素的大小计算内层循环需要的block数量，检查是否可以被cache存放</p>\n</blockquote>\n<h2 id=\"CH-5\"><a href=\"#CH-5\" class=\"headerlink\" title=\"CH 5\"></a>CH 5</h2><blockquote>\n<p><strong>TODO: 感觉记一下例题就差不多了（知识点梳理部分）</strong></p>\n</blockquote>\n<h1 id=\"小贴士\"><a href=\"#小贴士\" class=\"headerlink\" title=\"小贴士\"></a>小贴士</h1><ul>\n<li><strong>precise exceptions</strong>：<ul>\n<li>定义：On handling exceptions, if the pipeline can be stopped so that the instruction issued before the faulting instruction complete and those after it can be restarted</li>\n</ul>\n</li>\n<li><strong>计分板的WAW冲突检测</strong>：Scoreboard Algorithm issue a instruction when no other active instruction has the same destination register to avoid WAW hazard.</li>\n<li>写更新也就是写广播，与写失效构成了常用的处理缓存不一致性问题的策略</li>\n</ul>\n<h1 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h1><h4 id=\"常见的CSR\"><a href=\"#常见的CSR\" class=\"headerlink\" title=\"常见的CSR\"></a>常见的CSR</h4><p>常见的CSR有mstatus,mtvec,mepc,mcause,mtval。这些寄存器都属于M mode：</p>\n<ul>\n<li>mstatus：机器模式下的状态寄存器，包含开关中断的MIE、保存进入异常之前特权模式的MPP等</li>\n<li>mtvec：发生异常时跳转的PC入口；</li>\n<li>mepc：发生异常时，指向导致异常的指令；发生<strong>中断时</strong>，指向<strong>中断处理后应该恢复的位置</strong>；</li>\n<li>mcause：根据异常来源设置<ul>\n<li>如果是访问存储器造成的异常，就将其地址更新到mtval；</li>\n<li>如果是非法指令导致的异常，将指令编码更新到mtval寄存器中</li>\n</ul>\n</li>\n<li>mtval：反映引起当前异常的存储器访问地址或者指令编码</li>\n</ul>\n<h4 id=\"VIPT\"><a href=\"#VIPT\" class=\"headerlink\" title=\"VIPT\"></a>VIPT</h4><blockquote>\n<p>Virtual Indexed and Physically Tagged Cache</p>\n</blockquote>\n<p>也就是从VA中提取低位作为实际物理地址对应的index，用VA的高位在TLB中查询得到物理地址，然后用物理地址中的tag进行比较。这两个步骤分别称为 <strong>缓存查找</strong>和<strong>地址翻译</strong> ，可并行执行</p>\n<p>这样做是为了消除<strong>同义词</strong>问题：</p>\n<ul>\n<li>如果采取完全的虚拟地址寻址VIVT，一个物理地址可能对应不同的虚拟地址，从而导致其具有了多份的拷贝，带来了数据的不一致性的问题</li>\n</ul>\n<h4 id=\"写失效的冲突写\"><a href=\"#写失效的冲突写\" class=\"headerlink\" title=\"写失效的冲突写\"></a>写失效的冲突写</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250617225541859.png?imageSlim\"\n                     \n                >\n\n<h4 id=\"带有投机的store\"><a href=\"#带有投机的store\" class=\"headerlink\" title=\"带有投机的store\"></a>带有投机的store</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250617233055511.png?imageSlim\"\n                     \n                >\n\n<p>由于带有投机的Tomasulo在commit之前都不会实际更新寄存器或者mem，所以 <code>store</code>指令在此之前不会实际向内存中写入数据，那么我们可以在其地址相关寄存器准备好的时候就进入Exe阶段（地址计算）</p>\n<blockquote>\n<p>实际上，不带投机的store也是这样（参见下面“多发射的例子”中的标注）</p>\n</blockquote>\n<p>相应的，当 <code>store</code>指令结束write result的时候如果此时还没有准备好源寄存器的值，就会在ROB中记录（对应指令的ROB编号），并在对应指令完成后准备好commit</p>\n<blockquote>\n<p>由于每条指令都只在ROB有空位的时候issue，因此我们用<strong>ROB编号</strong>来标记每一条指令（用于数据冲突时等情况）</p>\n</blockquote>\n<h4 id=\"多发射的例子\"><a href=\"#多发射的例子\" class=\"headerlink\" title=\"多发射的例子\"></a>多发射的例子</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250618140228378.png?imageSlim\"\n                     \n                >\n\n<h1 id=\"作业复盘\"><a href=\"#作业复盘\" class=\"headerlink\" title=\"作业复盘\"></a>作业复盘</h1><h2 id=\"HW1\"><a href=\"#HW1\" class=\"headerlink\" title=\"HW1\"></a>HW1</h2><ul>\n<li>资源占比等价于所需的时间，可并行化程度意味着采取多核处理的时候，有多少的比例可以参与优化；</li>\n<li>利用资源占比分配核数，应当向下取整，避免整体的核数超出总核数</li>\n<li>计算整体加速比的时候，先分别计算对应的时间，然后利用并行前后的总时间来计算加速比<ul>\n<li>由此计算得出的总时间，可以用于重新分配所需的计算资源</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"HW2\"><a href=\"#HW2\" class=\"headerlink\" title=\"HW2\"></a>HW2</h2><h4 id=\"功耗计算\"><a href=\"#功耗计算\" class=\"headerlink\" title=\"功耗计算\"></a>功耗计算</h4><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250608185645239.png?imageSlim\"\n                     \n                >\n\n<p>ans：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://my-blog-img-1358266118.cos.ap-guangzhou.myqcloud.com/undefined20250608185936979.png?imageSlim\"\n                     \n                >\n\n<blockquote>\n<p>注意分别计算静态功耗和访问功耗，前者需要先计算对应的时间</p>\n</blockquote>\n<h2 id=\"HW3\"><a href=\"#HW3\" class=\"headerlink\" title=\"HW3\"></a>HW3</h2><ul>\n<li>B.5 涉及cache、AMAT和CPI的计算，可以参考作业的解答</li>\n</ul>\n<blockquote>\n<p>其他没有什么问题</p>\n</blockquote>\n<h2 id=\"HW4\"><a href=\"#HW4\" class=\"headerlink\" title=\"HW4\"></a>HW4</h2><ul>\n<li><strong>GFLOP</strong>：以G为单位，执行的浮点数操作</li>\n</ul>\n<blockquote>\n<p>其他没有什么问题</p>\n</blockquote>\n<h1 id=\"TODO\"><a href=\"#TODO\" class=\"headerlink\" title=\"TODO\"></a>TODO</h1><h4 id=\"硬件原语部分\"><a href=\"#硬件原语部分\" class=\"headerlink\" title=\"硬件原语部分\"></a>硬件原语部分</h4><blockquote>\n<p><strong>TODO</strong>：5.3ppt的18&#x2F;40开始没有记录（学无余力）</p>\n</blockquote>\n","_processedHighlight":true}],"PostAsset":[],"PostCategory":[{"post_id":"cmcbm7pq70001e2qgexkk6kl3","category_id":"cmcbm7pq90004e2qga62e0ad7","_id":"cmcbm7pqc000je2qgdip1426y"},{"post_id":"cmcbm7pq80003e2qgeooa8v4h","category_id":"cmcbm7pqb000ce2qgesx01zqu","_id":"cmcbm7pqd000qe2qgajci18z7"},{"post_id":"cmcbm7pqa0007e2qg6xi88soc","category_id":"cmcbm7pqb000ce2qgesx01zqu","_id":"cmcbm7pqd000ve2qg67zxawhh"},{"post_id":"cmcbm7pqd000se2qg16k73cel","category_id":"cmcbm7pqc000pe2qgh52feb74","_id":"cmcbm7pqd0010e2qg45ak74z9"},{"post_id":"cmcbm7pqb0009e2qgc8py02tj","category_id":"cmcbm7pqc000pe2qgh52feb74","_id":"cmcbm7pqe0012e2qg7qf2d0ax"},{"post_id":"cmcbm7pqb000be2qg0up9ba4z","category_id":"cmcbm7pqc000pe2qgh52feb74","_id":"cmcbm7pqe0016e2qgbvtoayey"},{"post_id":"cmcbm7pqc000ie2qgd52o421x","category_id":"cmcbm7pqc000pe2qgh52feb74","_id":"cmcbm7pqe0019e2qgcywu4gey"},{"post_id":"cmcbm7pqc000oe2qg3mxwev2b","category_id":"cmcbm7pqe0015e2qgfw8xafbx","_id":"cmcbm7pqe001ee2qg7hezhazh"},{"post_id":"cmcbm7pqd000ue2qgg8k9b8x0","category_id":"cmcbm7pqe0015e2qgfw8xafbx","_id":"cmcbm7pqe001ie2qg3m14a3yg"},{"post_id":"cmcbm7pqd000ye2qg17lsgqt4","category_id":"cmcbm7pqe0015e2qgfw8xafbx","_id":"cmcbm7pqe001le2qg59lv4ehq"},{"post_id":"cmcbm7pqd000ze2qg4qarhtvd","category_id":"cmcbm7pqe001he2qg3zhx3c85","_id":"cmcbm7pqe001oe2qg394c5wlp"},{"post_id":"cmcbm7pqh0025e2qgdqsggs8f","category_id":"cmcbm7pqe001he2qg3zhx3c85","_id":"cmcbm7pqi002ae2qghz836gs4"},{"post_id":"cmcbm7pqh0026e2qg135z8nha","category_id":"cmcbm7pqe0015e2qgfw8xafbx","_id":"cmcbm7pqi002ce2qg36xmfxtb"},{"post_id":"cmcbm7pqh0028e2qg5mtrfvsv","category_id":"cmcbm7pqe0015e2qgfw8xafbx","_id":"cmcbm7pqi002ge2qgd7wv0tqy"},{"post_id":"cmcbm7pqh0029e2qgd2ueefks","category_id":"cmcbm7pqe0015e2qgfw8xafbx","_id":"cmcbm7pqj002je2qg9arj7y6v"},{"post_id":"cmcbm7pqj002pe2qg1eofadug","category_id":"cmcbm7pqj002le2qg92qdbomx","_id":"cmcbm7pqj002ve2qg0i1p7744"},{"post_id":"cmcbm7pqi002fe2qgfcjkbyva","category_id":"cmcbm7pqj002le2qg92qdbomx","_id":"cmcbm7pqj002xe2qgg7bx2xfi"},{"post_id":"cmcbm7pqi002ie2qgbau5fu4s","category_id":"cmcbm7pqj002le2qg92qdbomx","_id":"cmcbm7pqj002ye2qg4yu5ak53"},{"post_id":"cmcbm7pqj002ne2qg6fwo7u1k","category_id":"cmcbm7pqj002le2qg92qdbomx","_id":"cmcbm7pqk0032e2qgecoe54xi"}],"PostTag":[{"post_id":"cmcbm7pq70001e2qgexkk6kl3","tag_id":"cmcbm7pqa0005e2qg2cz21cyd","_id":"cmcbm7pqb000ee2qg3jpzbqzj"},{"post_id":"cmcbm7pq80003e2qgeooa8v4h","tag_id":"cmcbm7pqb000de2qg10e4ezy0","_id":"cmcbm7pqc000ne2qg2lnd6s9t"},{"post_id":"cmcbm7pqa0007e2qg6xi88soc","tag_id":"cmcbm7pqc000le2qge3wtf4j0","_id":"cmcbm7pqd000te2qgfd45cen4"},{"post_id":"cmcbm7pqb0009e2qgc8py02tj","tag_id":"cmcbm7pqd000re2qg8nprhqkn","_id":"cmcbm7pqe0014e2qg7rxu1iqj"},{"post_id":"cmcbm7pqb0009e2qgc8py02tj","tag_id":"cmcbm7pqd000xe2qg5filg1zc","_id":"cmcbm7pqe0017e2qg9v9s0nlv"},{"post_id":"cmcbm7pqb000be2qg0up9ba4z","tag_id":"cmcbm7pqd000xe2qg5filg1zc","_id":"cmcbm7pqe001ce2qgfb4zee27"},{"post_id":"cmcbm7pqb000be2qg0up9ba4z","tag_id":"cmcbm7pqe0018e2qg3wb7f28e","_id":"cmcbm7pqe001fe2qgde5wa4oo"},{"post_id":"cmcbm7pqc000ie2qgd52o421x","tag_id":"cmcbm7pqe001be2qg4qok88sp","_id":"cmcbm7pqe001ke2qgbedf0duo"},{"post_id":"cmcbm7pqc000ie2qgd52o421x","tag_id":"cmcbm7pqe001ge2qg7ps752qf","_id":"cmcbm7pqe001me2qg382s5198"},{"post_id":"cmcbm7pqc000oe2qg3mxwev2b","tag_id":"cmcbm7pqe001je2qgbsmg4n6n","_id":"cmcbm7pqf001qe2qghp93ey62"},{"post_id":"cmcbm7pqc000oe2qg3mxwev2b","tag_id":"cmcbm7pqe001ne2qgcfl9hrks","_id":"cmcbm7pqf001re2qg3lxzcsrg"},{"post_id":"cmcbm7pqd000se2qg16k73cel","tag_id":"cmcbm7pqd000xe2qg5filg1zc","_id":"cmcbm7pqf001ue2qg3mx1101l"},{"post_id":"cmcbm7pqd000se2qg16k73cel","tag_id":"cmcbm7pqf001se2qgdn2w7jkd","_id":"cmcbm7pqf001ve2qge1f490f6"},{"post_id":"cmcbm7pqd000ue2qgg8k9b8x0","tag_id":"cmcbm7pqe001je2qgbsmg4n6n","_id":"cmcbm7pqf001ye2qg033nc5qq"},{"post_id":"cmcbm7pqd000ue2qgg8k9b8x0","tag_id":"cmcbm7pqf001we2qg1uahcibu","_id":"cmcbm7pqf001ze2qg7l30c4vs"},{"post_id":"cmcbm7pqd000ye2qg17lsgqt4","tag_id":"cmcbm7pqe001je2qgbsmg4n6n","_id":"cmcbm7pqf0022e2qg5xpygugr"},{"post_id":"cmcbm7pqd000ye2qg17lsgqt4","tag_id":"cmcbm7pqe001ne2qgcfl9hrks","_id":"cmcbm7pqf0023e2qgb0l66yly"},{"post_id":"cmcbm7pqd000ze2qg4qarhtvd","tag_id":"cmcbm7pqf0021e2qg7pzue9s4","_id":"cmcbm7pqf0024e2qg44p19ls3"},{"post_id":"cmcbm7pqh0025e2qgdqsggs8f","tag_id":"cmcbm7pqf0021e2qg7pzue9s4","_id":"cmcbm7pqi002ee2qg6jq62c8d"},{"post_id":"cmcbm7pqh0025e2qgdqsggs8f","tag_id":"cmcbm7pqh0027e2qgcusj1n1f","_id":"cmcbm7pqi002he2qg1nb55ev7"},{"post_id":"cmcbm7pqi002be2qg778vgpm0","tag_id":"cmcbm7pqe001je2qgbsmg4n6n","_id":"cmcbm7pqj002me2qg2czn45yz"},{"post_id":"cmcbm7pqh0026e2qg135z8nha","tag_id":"cmcbm7pqa0005e2qg2cz21cyd","_id":"cmcbm7pqj002oe2qga0ougmq6"},{"post_id":"cmcbm7pqh0026e2qg135z8nha","tag_id":"cmcbm7pqi002de2qg88rtc4if","_id":"cmcbm7pqj002re2qg8rjb9r2e"},{"post_id":"cmcbm7pqh0028e2qg5mtrfvsv","tag_id":"cmcbm7pqj002ke2qg0h5daaz8","_id":"cmcbm7pqj002te2qgdf50gc9y"},{"post_id":"cmcbm7pqh0029e2qgd2ueefks","tag_id":"cmcbm7pqj002qe2qg9mcj5bgw","_id":"cmcbm7pqj0030e2qg15i17z0s"},{"post_id":"cmcbm7pqh0029e2qgd2ueefks","tag_id":"cmcbm7pqj002ue2qgea5e220f","_id":"cmcbm7pqk0031e2qg3ukkdaa1"},{"post_id":"cmcbm7pqi002fe2qgfcjkbyva","tag_id":"cmcbm7pqi002de2qg88rtc4if","_id":"cmcbm7pqk0035e2qgfrrvg3t6"},{"post_id":"cmcbm7pqi002fe2qgfcjkbyva","tag_id":"cmcbm7pqj002ze2qggog2aiyo","_id":"cmcbm7pqk0036e2qgdhi5fsyo"},{"post_id":"cmcbm7pqi002fe2qgfcjkbyva","tag_id":"cmcbm7pqk0033e2qga1hsh4ld","_id":"cmcbm7pqk0038e2qg8tpff232"},{"post_id":"cmcbm7pqi002ie2qgbau5fu4s","tag_id":"cmcbm7pqk0034e2qg0rd48xkq","_id":"cmcbm7pqk003ae2qgfn4rbsx9"},{"post_id":"cmcbm7pqi002ie2qgbau5fu4s","tag_id":"cmcbm7pqk0033e2qga1hsh4ld","_id":"cmcbm7pqk003be2qg0v1q06nf"},{"post_id":"cmcbm7pqj002ne2qg6fwo7u1k","tag_id":"cmcbm7pqk0039e2qg0w67c1am","_id":"cmcbm7pqk003ee2qgbxred9ua"},{"post_id":"cmcbm7pqj002ne2qg6fwo7u1k","tag_id":"cmcbm7pqk0033e2qga1hsh4ld","_id":"cmcbm7pqk003fe2qg0n0dbpsg"},{"post_id":"cmcbm7pqj002pe2qg1eofadug","tag_id":"cmcbm7pqk003de2qgasd899gd","_id":"cmcbm7pqk003he2qg0m2icx2m"},{"post_id":"cmcbm7pqj002pe2qg1eofadug","tag_id":"cmcbm7pqk0033e2qga1hsh4ld","_id":"cmcbm7pqk003ie2qgbzb78bog"}],"Tag":[{"name":"swift","_id":"cmcbm7pqa0005e2qg2cz21cyd"},{"name":"数据库","_id":"cmcbm7pqb000de2qg10e4ezy0"},{"name":"奇思妙想","_id":"cmcbm7pqc000le2qge3wtf4j0"},{"name":"ssh","_id":"cmcbm7pqd000re2qg8nprhqkn"},{"name":"服务器","_id":"cmcbm7pqd000xe2qg5filg1zc"},{"name":"多会话管理","_id":"cmcbm7pqe0018e2qg3wb7f28e"},{"name":"python","_id":"cmcbm7pqe001be2qg4qok88sp"},{"name":"环境配置","_id":"cmcbm7pqe001ge2qg7ps752qf"},{"name":"前端","_id":"cmcbm7pqe001je2qgbsmg4n6n"},{"name":"CSS","_id":"cmcbm7pqe001ne2qgcfl9hrks"},{"name":"PAT","_id":"cmcbm7pqf001se2qgdn2w7jkd"},{"name":"JS","_id":"cmcbm7pqf001we2qg1uahcibu"},{"name":"短诗","_id":"cmcbm7pqf0021e2qg7pzue9s4"},{"name":"自然","_id":"cmcbm7pqh0027e2qgcusj1n1f"},{"name":"编程语言","_id":"cmcbm7pqi002de2qg88rtc4if"},{"name":"杂记","_id":"cmcbm7pqj002ke2qg0h5daaz8"},{"name":"前后端交互","_id":"cmcbm7pqj002qe2qg9mcj5bgw"},{"name":"网站开发","_id":"cmcbm7pqj002ue2qgea5e220f"},{"name":"面向对象编程","_id":"cmcbm7pqj002ze2qggog2aiyo"},{"name":"CS课程","_id":"cmcbm7pqk0033e2qga1hsh4ld"},{"name":"信息安全","_id":"cmcbm7pqk0034e2qg0rd48xkq"},{"name":"sql","_id":"cmcbm7pqk0039e2qg0w67c1am"},{"name":"计算机系统","_id":"cmcbm7pqk003de2qgasd899gd"}]}}